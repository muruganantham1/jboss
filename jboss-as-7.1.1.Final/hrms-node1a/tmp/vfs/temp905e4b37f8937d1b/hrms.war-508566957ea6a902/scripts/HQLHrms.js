Wtf.data.KwlDataReader = function(A, B) {
	this.meta = A;
	this.recordType = B instanceof Array ? Wtf.data.Record.create(B) : B
};
Wtf.data.KwlDataReader.prototype = {};
Wtf.extend(Wtf.data.KwlDataReader, Wtf.util.Observable);
Wtf.data.KwlJsonReader = function(A, B) {
	A = A || {};
	Wtf.data.KwlJsonReader.superclass.constructor.call(this, A, B);
	this.events = {
		aftereval : true
	};
	this.on("aftereval", this.jsonErrorResponseHandler)
};
Wtf
		.extend(
				Wtf.data.KwlJsonReader,
				Wtf.data.KwlDataReader,
				{
					read : function(response) {
						var json = response.responseText;
						var o = eval("(" + json + ")");
						if (o && o.valid == false) {
							signOut("timeout")
						} else {
							o = o.data
						}
						if (!o) {
							throw {
								message : "JsonReader.read: Json object not found"
							}
						}
						if (o.metaData) {
							delete this.ef;
							this.meta = o.metaData;
							this.recordType = Wtf.data.Record
									.create(o.metaData.fields);
							this.onMetaChange(this.meta, this.recordType, o)
						}
						return this.readRecords(o)
					},
					onMetaChange : function(A, C, B) {
					},
					jsonErrorResponseHandler : function(C, A, B) {
						if (C && !C.valid) {
							signOut("timeout")
						}
					},
					simpleAccess : function(B, A) {
						return B[A]
					},
					getJsonAccessor : function() {
						var A = /[\[\.]/;
						return function(C) {
							try {
								return (A.test(C)) ? new Function("obj",
										"return obj." + C) : function(D) {
									return D[C]
								}
							} catch (B) {
							}
							return Wtf.emptyFn
						}
					}(),
					readRecords : function(K) {
						this.jsonData = K;
						var H = this.meta, A = this.recordType, R = A.prototype.fields, F = R.items, E = R.length;
						if (!this.ef) {
							if (H.totalProperty) {
								this.getTotal = this
										.getJsonAccessor(H.totalProperty)
							}
							if (H.successProperty) {
								this.getSuccess = this
										.getJsonAccessor(H.successProperty)
							}
							this.getRoot = H.root ? this
									.getJsonAccessor(H.root) : function(U) {
								return U
							};
							if (H.id) {
								var Q = this.getJsonAccessor(H.id);
								this.getId = function(V) {
									var U = Q(V);
									return (U === undefined || U === "") ? null
											: U
								}
							} else {
								this.getId = function() {
									return null
								}
							}
							this.ef = [];
							for ( var O = 0; O < E; O++) {
								R = F[O];
								var T = (R.mapping !== undefined && R.mapping !== null) ? R.mapping
										: R.name;
								this.ef[O] = this.getJsonAccessor(T)
							}
						}
						var M = this.getRoot(K), S = M.length, I = S, D = true;
						if (H.totalProperty) {
							var G = parseInt(this.getTotal(K), 10);
							if (!isNaN(G)) {
								I = G
							}
						}
						if (H.successProperty) {
							var G = this.getSuccess(K);
							if (G === false || G === "false") {
								D = false
							}
						}
						var P = [];
						for ( var O = 0; O < S; O++) {
							var L = M[O];
							var B = {};
							var J = this.getId(L);
							for ( var N = 0; N < E; N++) {
								R = F[N];
								var G = this.ef[N](L);
								B[R.name] = R.convert((G !== undefined) ? G
										: R.defaultValue)
							}
							var C = new A(B, J);
							C.json = L;
							P[O] = C
						}
						return {
							success : D,
							records : P,
							totalRecords : I
						}
					}
				});
Wtf.data.KwlJsonReader1 = function(A, B) {
	A = A || {};
	Wtf.data.KwlJsonReader1.superclass.constructor.call(this, A, B);
	this.events = {
		aftereval : true
	};
	this.on("aftereval", this.jsonErrorResponseHandler)
};
Wtf
		.extend(
				Wtf.data.KwlJsonReader1,
				Wtf.data.KwlDataReader,
				{
					read : function(response) {
						var json = response.responseText.trim();
						var o = eval("(" + json + ")");
						if (o && o.valid == false) {
							signOut("timeout")
						} else {
							o = eval("(" + o.data + ")")
						}
						if (!o) {
							throw {
								message : "JsonReader.read: Json object not found"
							}
						}
						if (o.metaData) {
							delete this.ef;
							this.meta = o.metaData;
							this.recordType = Wtf.data.Record
									.create(o.metaData.fields);
							this.onMetaChange(this.meta, this.recordType, o)
						}
						return this.readRecords(o)
					},
					onMetaChange : function(A, C, B) {
					},
					jsonErrorResponseHandler : function(C, A, B) {
						if (C && !C.valid) {
							signOut("timeout")
						}
					},
					simpleAccess : function(B, A) {
						return B[A]
					},
					getJsonAccessor : function() {
						var A = /[\[\.]/;
						return function(C) {
							try {
								return (A.test(C)) ? new Function("obj",
										"return obj." + C) : function(D) {
									return D[C]
								}
							} catch (B) {
							}
							return Wtf.emptyFn
						}
					}(),
					readRecords : function(K) {
						this.jsonData = K;
						var H = this.meta, A = this.recordType, R = A.prototype.fields, F = R.items, E = R.length;
						if (!this.ef) {
							if (H.totalProperty) {
								this.getTotal = this
										.getJsonAccessor(H.totalProperty)
							}
							if (H.successProperty) {
								this.getSuccess = this
										.getJsonAccessor(H.successProperty)
							}
							this.getRoot = H.root ? this
									.getJsonAccessor(H.root) : function(U) {
								return U
							};
							if (H.id) {
								var Q = this.getJsonAccessor(H.id);
								this.getId = function(V) {
									var U = Q(V);
									return (U === undefined || U === "") ? null
											: U
								}
							} else {
								this.getId = function() {
									return null
								}
							}
							this.ef = [];
							for ( var O = 0; O < E; O++) {
								R = F[O];
								var T = (R.mapping !== undefined && R.mapping !== null) ? R.mapping
										: R.name;
								this.ef[O] = this.getJsonAccessor(T)
							}
						}
						var M = this.getRoot(K), S = M.length, I = S, D = true;
						if (H.totalProperty) {
							var G = parseInt(this.getTotal(K), 10);
							if (!isNaN(G)) {
								I = G
							}
						}
						if (H.successProperty) {
							var G = this.getSuccess(K);
							if (G === false || G === "false") {
								D = false
							}
						}
						var P = [];
						for ( var O = 0; O < S; O++) {
							var L = M[O];
							var B = {};
							var J = this.getId(L);
							for ( var N = 0; N < E; N++) {
								R = F[N];
								var G = this.ef[N](L);
								B[R.name] = R.convert((G !== undefined) ? G
										: R.defaultValue)
							}
							var C = new A(B, J);
							C.json = L;
							P[O] = C
						}
						return {
							success : D,
							records : P,
							totalRecords : I
						}
					}
				});
WtfGlobal = {
	getCookie : function(A) {
		if (document.cookie.length > 0) {
			c_start = document.cookie.indexOf(A + "=");
			if (c_start != -1) {
				c_start = c_start + A.length + 1;
				c_end = document.cookie.indexOf(";", c_start);
				if (c_end == -1) {
					c_end = document.cookie.length
				}
				return unescape(document.cookie.substring(c_start, c_end))
			}
		}
		return ""
	},
	nameRenderer : function(B) {
		var C = B.substr(0, 1);
		var A = new RegExp("^[a-zA-Z]");
		if (A.test(C)) {
			return C.toUpperCase()
		} else {
			return "Others"
		}
	},
	sizeRenderer : function(B) {
		var A = B;
		if (A >= 1 && A < 1024) {
			text = "Small"
		} else {
			if (A > 1024 && A < 102400) {
				text = "Medium"
			} else {
				if (A > 102400 && A < 1048576) {
					text = "Large"
				} else {
					text = "Gigantic"
				}
			}
		}
		return text
	},
	replaceAll : function(A, B, C) {
		return A.replace(new RegExp(B, "g"), C)
	},
	dateFieldRenderer : function(B) {
		var C = "";
		if (B) {
			var A = new Date();
			if ((B.getMonth() == A.getMonth()) && (B.getYear() == A.getYear())) {
				if (A.getDate() == B.getSeperatorPos()) {
					C = "Today"
				} else {
					if (B.getDate() == (A.getDate() - 1)) {
						C = "Yesterday"
					} else {
						if (B.getDate() <= (A.getDate() - 7)
								&& B.getDate() > (A.getDate() - 14)) {
							C = "Last Week"
						}
					}
				}
			} else {
				if ((B.getMonth() == (A.getMonth() - 1))
						&& (B.getYear() == A.getYear())) {
					C = "Last Month"
				} else {
					if ((B.getYear() == (A.getYear() - 1))) {
						C = "Last Year"
					} else {
						C = "Older"
					}
				}
			}
		} else {
			C = "None"
		}
		return C
	},
	commentRenderer : function(B) {
		var A = WtfGlobal.replaceAll(B, '"', "&#34;");
		return '<div wtf:qtip="' + A + '">' + B + "</div>"
	},
	addLabelHelp : function(A) {
		return '<span wtf:qtip="' + A
				+ '" class="formHelpButton">&nbsp;&nbsp;&nbsp;&nbsp;</span>'
	},
	addCommentIcon : function(A) {
		return '<span wtf:qtip="' + A
				+ '" class="gridCommentButton">&nbsp;&nbsp;&nbsp;&nbsp;</span>'
	},
	permissionRenderer : function(A, C) {
		var B = A.toLowerCase();
		switch (B) {
		case "everyone":
			B = "Everyone on deskEra";
			break;
		case "connections":
			B = "All Connections";
			break;
		case "none":
			B = "Private";
			break;
		default:
			B = "Selected Connections";
			break
		}
		return B
	},
	isSuperUser : function() {
		return (WtfGlobal.getCookie("superuser") == "true")
	},
	HTMLStripper : function(B) {
		var A = Wtf.util.Format.stripTags(B);
		return A.replace(/"/g, "").trim()
	},
	ScriptStripper : function(A) {
		A = Wtf.util.Format.stripScripts(A);
		if (A) {
			return A.replace(/"/g, "")
		} else {
			return A
		}
	},
	URLDecode : function(A) {
		A = A.replace(new RegExp("\\+", "g"), " ");
		return unescape(A)
	},
	getDateFormat : function() {
		return Wtf.pref.DateFormat
	},
	getSeperatorPos : function() {
		return Wtf.pref.seperatorpos
	},
	getOnlyDateFormat : function() {
		var B = WtfGlobal.getSeperatorPos();
		var A = WtfGlobal.getDateFormat();
		if (B <= 0) {
			return "Y-m-d"
		}
		return A.substring(0, B)
	},
	getOnlyTimeFormat : function() {
		var B = WtfGlobal.getSeperatorPos();
		var A = WtfGlobal.getDateFormat();
		if (B >= A.length) {
			return "H:i:s"
		}
		return A.substring(B)
	},
	getonlyDateFormat : function() {
		return "l, F d, Y"
	},
	dateRenderer : function(A) {
		if (!A) {
			return A
		}
		return '<div align="center">' + A.format(WtfGlobal.getDateFormat())
				+ "</div>"
	},
	dateonlyRenderer : function(A) {
		if (!A) {
			return A
		}
		return A.format(WtfGlobal.getonlyDateFormat())
	},
	onlyTimeRenderer : function(A) {
		if (!A) {
			return A
		}
		return A.format(WtfGlobal.getOnlyTimeFormat())
	},
	onlyDateRenderer : function(A) {
		if (!A) {
			return A
		}
		return "<div align=center>" + A.format(WtfGlobal.getOnlyDateFormat())
				+ "</div>"
	},
	onlySinglequoateRenderer : function(A) {
		if (!A) {
			return A
		}
		return A.replace(/'/g, "\\'")
	},
	linkRenderer : function(A) {
		return "<a class='jumplink' href='#'>" + A + "</a>"
	},
	enableDisableBtnArr : function(B, E, A, D) {
		var F = !E.getSelectionModel().hasSelection();
		var G = (E.getSelectionModel().getCount() != 1);
		for ( var C = 0; C < D.length; C++) {
			B[D[C]].setDisabled(F)
		}
		for (C = 0; C < A.length; C++) {
			B[A[C]].setDisabled(G)
		}
	},
	convertToGenericDate : function(A) {
		if (!A) {
			return A
		}
		return A.format("M d, Y h:i:s A")
	},
	getLongForLocale : function(A) {
		if (!A) {
			return A
		}
		return A.getTime()
	},
	getTimeZone : function() {
		return Wtf.pref.Timezone
	},
	getCurrencyName : function() {
		return Wtf.pref.CurrencyName
	},
	getCurrencySymbol : function() {
		return Wtf.pref.CurrencySymbol
	},
	showmasterWindow : function(B, A, C) {
		new Wtf.AddEditMasterData({
			layout : "fit",
			title : WtfGlobal.getLocaleText("hrms.common.AddSubField"),
			modal : true,
			configid : B,
			width : 400,
			height : 230,
			iconCls : "WinIcon",
			action : C,
			store : A
		}).show()
	},
	getXtype : function(A) {
		switch (A) {
		case 4:
			return "numberfield";
			break;
		default:
			return "textfield"
		}
	},
	closeProgressbar : function() {
		Wtf.MessageBox.hide()
	},
	currencyRenderer : function(E) {
		var A = parseFloat(E);
		if (isNaN(A)) {
			return ""
		}
		A = (Math.round((A - 0) * 100)) / 100;
		A = (A == Math.floor(A)) ? A + ".00"
				: ((A * 10 == Math.floor(A * 10)) ? A + "0" : A);
		A = String(A);
		var F = A.split(".");
		var D = F[0];
		var B = F[1] ? "." + F[1] : ".00";
		var C = /(\d+)(\d{3})/;
		while (C.test(D)) {
			D = D.replace(C, "$1,$2")
		}
		A = D + B;
		if (A.charAt(0) == "-") {
			A = "-" + WtfGlobal.getCurrencySymbol() + " " + A.substr(1)
		} else {
			A = WtfGlobal.getCurrencySymbol() + " " + A
		}
		return '<div class="currency">' + A + "</div>"
	},
	currencyRendererEPF : function(B) {
		var A = WtfGlobal.currencyRendererEPFOnly(B);
		return '<div class="currency"><b>Total: </b>' + A + "</div>"
	},
	currencyRendererEPFOnly : function(E) {
		var A = parseFloat(E);
		if (isNaN(A)) {
			return ""
		}
		A = (Math.round((A - 0) * 100)) / 100;
		A = (A == Math.floor(A)) ? A + ".00"
				: ((A * 10 == Math.floor(A * 10)) ? A + "0" : A);
		A = String(A);
		var F = A.split(".");
		var D = F[0];
		var B = F[1] ? "." + F[1] : ".00";
		var C = /(\d+)(\d{3})/;
		while (C.test(D)) {
			D = D.replace(C, "$1,$2")
		}
		A = D + B;
		return A
	},
	payrollcurrencyRenderer : function(E) {
		var A = parseFloat(E);
		if (isNaN(A)) {
			return ""
		}
		A = (Math.round((A - 0) * 100)) / 100;
		A = (A == Math.floor(A)) ? A + ".00"
				: ((A * 10 == Math.floor(A * 10)) ? A + "0" : A);
		A = String(A);
		var F = A.split(".");
		var D = F[0];
		var B = F[1] ? "." + F[1] : ".00";
		var C = /(\d+)(\d{3})/;
		while (C.test(D)) {
			D = D.replace(C, "$1,$2")
		}
		A = D + B;
		if (A.charAt(0) == "-") {
			A = "-" + WtfGlobal.getCurrencySymbol() + " " + A.substr(1)
		} else {
			A = WtfGlobal.getCurrencySymbol() + " " + A
		}
		return '<div class="payrollcurrency">' + A + "</div>"
	},
	currencyRenderer2 : function(E) {
		var A = parseFloat(E);
		if (isNaN(A)) {
			return ""
		}
		A = (Math.round((A - 0) * 100)) / 100;
		A = (A == Math.floor(A)) ? A + ".00"
				: ((A * 10 == Math.floor(A * 10)) ? A + "0" : A);
		A = String(A);
		var F = A.split(".");
		var D = F[0];
		var B = F[1] ? "." + F[1] : ".00";
		var C = /(\d+)(\d{3})/;
		while (C.test(D)) {
			D = D.replace(C, "$1,$2")
		}
		A = D + B;
		if (A.charAt(0) == "-") {
			A = "-" + A.substr(1)
		} else {
			A = A
		}
		return A
	},
	percentageRegex : function() {
		var A = /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/;
		return A
	},
	currencySummaryRenderer : function(A) {
		return '<div align="right" style="font-family:Lucida Sans Unicode;"><font size=2 color="red">'
				+ WtfGlobal.currencyRenderer(A) + "<font></div>"
	},
	totalSummaryRenderer : function(A) {
		return '<div align="left"><b>'
				+ WtfGlobal.getLocaleText("hrms.timesheet.TotalForDay")
				+ "</b></div>"
	},
	total : function(A) {
		return '<div align="left"><b>'
				+ WtfGlobal.getLocaleText("hrms.timesheet.total")
				+ "</b></div>"
	},
	timeSummaryRenderer : function(A) {
		if (A <= 1) {
			return '<div align="center">' + A + "00:00 hrs</div>"
		} else {
			return '<div align="center">' + A + " hrs</div>"
		}
	},
	validateEmail : function(A) {
		return Wtf.ValidateMailPatt.test(A)
	},
	renderEmailTo : function(B, C, A) {
		return "<div class='mailTo'><a href=mailto:" + B + ">" + B
				+ "</a></div>"
	},
	validateHTField : function(A) {
		return Wtf.validateHeadTitle.test(A.trim())
	},
	validateImageFile : function(A) {
		return Wtf.validateImageFile.test(A.trim())
	},
	renderContactToSkype : function(B, C, A) {
		return "<div class='mailTo'><a href=skype:" + B + "?call>" + B
				+ "</a></div>"
	},
	validateUserid : function(A) {
		return Wtf.ValidateUserid.test(A)
	},
	validateUserName : function(A) {
		return Wtf.ValidateUserName.test(A.trim())
	},
	validatePhoneNum : function(A) {
		return Wtf.ValidatePhoneNo.test(A.trim())
	},
	getInstrMsg : function(A) {
		return "<span style='font-size:10px !important;color:gray !important;'>"
				+ A + "</span>"
	},
	numericRenderer : function(A) {
		return '<div class="currency">' + A + "</div>"
	},
	emptyGridRenderer : function(A) {
		return "<div class='grid-link-text'>" + A + "</div>"
	},
	numericPrecisionRenderer : function(A) {
		if (A > 0) {
			return '<div class="currency">' + (parseFloat(A).toFixed(2))
					+ "</div>"
		} else {
			return '<div class="currency">' + 0 + "</div>"
		}
	},
	percentageRenderer : function(A) {
		if (A > 0) {
			return '<div class="currency">' + (parseFloat(A).toFixed(2))
					+ "%</div>"
		} else {
			return '<div class="currency">' + 0 + "%</div>"
		}
	},
	chkFirstRun : function() {
		return WtfGlobal.getCookie("lastlogin") == "1990-01-01 00:00:00.0"
	},
	highLightRow : function(C, A, D, E) {
		var B = C.getView().getRow(E);
		Wtf.fly(B).highlight(A, {
			attr : "background-color",
			easing : "easeIn",
			duration : D,
			endColor : "ffffff"
		})
	},
	EnableDisable : function(B, A) {
		if (A == null) {
			clog("Some Permission are undefined.\n" + B + "\n"
					+ showCallStack())
		}
		if (B && A) {
			if ((B & A) == A) {
				return false
			}
		}
		return true
	},
	CmpEnableDisable : function(A, B) {
		if ((Math.pow(2, parseInt(B)) & A) == Math.pow(2, parseInt(B))) {
			return true
		} else {
			return false
		}
	},
	loadScript : function(B) {
		var A = document.createElement("script");
		A.type = "text/javascript";
		A.src = B;
		document.getElementsByTagName("head")[0].appendChild(A)
	},
	loadStyleSheet : function(B) {
		var A = document.createElement("link");
		A.setAttribute("rel", "stylesheet");
		A.setAttribute("type", "text/css");
		A.setAttribute("href", B);
		document.getElementsByTagName("head")[0].appendChild(A)
	},
	delaytasks : function(A, C) {
		var B = new Wtf.util.DelayedTask(function() {
			if (C) {
				A.load({
					params : C
				})
			} else {
				A.load()
			}
		}, this);
		B.delay(1000)
	},
	noBlankCheck : function(A) {
		if (A.trim() == "") {
			return "This field cannot be blank"
		} else {
			return true
		}
	},
	validateNameFields : function(A) {
		var B = WtfGlobal.noBlankCheck(A);
		if (B == true) {
			if (A.search(/^[ '_]+$/) != -1) {
				return "Invalid name"
			} else {
				if (A.search(/^[A-Za-z '_]+$/) != -1) {
					return true
				} else {
					return "Field can contain only alphabets, _ and ' values"
				}
			}
		} else {
			return B
		}
	},
	validateDropDowns : function(A) {
		var B = WtfGlobal.noBlankCheck(A);
		if (B == true) {
			if (this.getValue() == "" || this.getValue() == null
					|| this.getValue() == undefined) {
				return "Invalid value"
			} else {
				return true
			}
		} else {
			return B
		}
	},
	getLocaleText : function(A, D, C) {
		var B = window[D || "messages"];
		var E = [].concat(A.params || []);
		A = A.key || A;
		if (B) {
			if (B[A]) {
				E.splice(0, 0, B[A]);
				return String.format.apply(this, E)
			} else {
				clog("Locale spacific text not found for [" + A + "]")
			}
		} else {
			if (D != undefined) {
				clog("Locale spacific base (" + D + ") not available")
			}
		}
		return C || A
	},
	loadScript : function(C, D, A) {
		var B = document.createElement("script");
		B.type = "text/javascript";
		if (typeof D == "function") {
			B.onreadystatechange = function() {
				if (this.readyState == "complete") {
					D.call(A || this || window)
				}
			};
			B.onload = D.createDelegate(A || this || window)
		}
		B.src = C;
		document.getElementsByTagName("head")[0].appendChild(B)
	}
};
Wtf.newHTMLEditor = function(A) {
	Wtf.apply(this, A);
	this.createLinkText = "Please enter the URL for the link:";
	this.defaultLinkValue = "http://";
	this.smileyel = null;
	this.SmileyArray = [ " ", ":)", ":(", ";)", ":D", ";;)", ">:D<", ":-/",
			":x", ":>>", ":P", ":-*", "=((", ":-O", "X(", ":>", "B-)", ":-S",
			"#:-S", ">:)", ":((", ":))", ":|", "/:)", "=))", "O:-)", ":-B",
			"=;", ":-c", ":)]", "~X(" ];
	this.tpl = new Wtf.Template(
			'<div id="{curid}smiley{count}" style="float:left; height:20px; width:20px; background: #ffffff;padding-left:4px;padding-top:4px;"  ><img id="{curid}smiley{count}" src="{url}" style="height:16px; width:16px"></img></div>');
	this.tbutton = new Wtf.Toolbar.Button({
		minWidth : 30,
		disabled : true,
		enableToggle : true,
		iconCls : "smiley"
	});
	this.eventSetFlag = false;
	this.tbutton.on("click", this.handleSmiley, this);
	this.smileyWindow = new Wtf.Window({
		width : 185,
		height : 116,
		minWidth : 200,
		plain : true,
		cls : "replyWind",
		shadow : false,
		buttonAlign : "center",
		draggable : false,
		header : false,
		closable : true,
		closeAction : "hide",
		resizable : false
	});
	this.smileyWindow.on("deactivate", this.closeSmileyWindow, this);
	Wtf.newHTMLEditor.superclass.constructor.call(this, {});
	this.on("render", this.addSmiley, this);
	this.on("activate", this.enableSmiley, this);
	this.on("hide", this.hideSmiley, this)
};
Wtf.extend(Wtf.newHTMLEditor, Wtf.form.HtmlEditor, {
	enableSmiley : function() {
		this.tbutton.enable()
	},
	hideSmiley : function() {
		if (this.smileyWindow !== undefined
				&& this.smileyWindow.el !== undefined) {
			this.smileyWindow.hide()
		}
	},
	addSmiley : function(A) {
		A.getToolbar().addSeparator();
		A.getToolbar().addButton(this.tbutton)
	},
	createLink : function() {
		var C = prompt(this.createLinkText, this.defaultLinkValue);
		if (C && C != "http://") {
			var B = C.substring(0, 7);
			if (B != "http://") {
				C = "http://" + C
			}
			this.win.focus();
			var A = this.doc.getSelection().trim();
			A = A == "" ? C : A;
			if (this.SmileyArray.join().indexOf(A) == -1) {
				this.insertAtCursor("<a href = '" + C + "' target='_blank'>"
						+ A + " </a>");
				this.deferFocus()
			} else {
				msgBoxShow(170, 1)
			}
		}
	},
	writeSmiley : function(B) {
		var A = B;
		this.insertAtCursor(this.SmileyArray[A.target.id
				.substring(this.id.length + 6)]
				+ " ");
		this.smileyWindow.hide();
		this.tbutton.toggle(false)
	},
	handleSmiley : function(B, D) {
		if (this.tbutton.pressed) {
			this.smileyWindow.setPosition(D.getPageX(), D.getPageY());
			this.smileyWindow.show();
			if (!this.eventSetFlag) {
				for ( var A = 1; A < 29; A++) {
					var C = {
						url : "images/smiley" + A + ".gif",
						count : A,
						curid : this.id
					};
					this.tpl.append(this.smileyWindow.body, C);
					this.smileyel = Wtf.get(this.id + "smiley" + A);
					this.smileyel.on("click", this.writeSmiley, this);
					this.eventSetFlag = true
				}
			}
		} else {
			this.smileyWindow.hide();
			this.tbutton.toggle(false)
		}
	},
	closeSmileyWindow : function(A) {
		this.smileyWindow.hide();
		this.tbutton.toggle(false)
	}
});
function showCallStack() {
	var C = showCallStack, A = "Call stack:\n";
	while ((C = C.caller) !== null) {
		var B = C.toString().match(/^function (\w+)\(/);
		B = (B) ? B[1] : "anonymous function";
		A += B;
		A += getArguments(C.toString(), C.arguments);
		A += "\n"
	}
	return A
}
function getArguments(H, A) {
	var C = H.indexOf(" ");
	var D = H.indexOf("(");
	var B = H.indexOf(")");
	var G = H.substr(D + 1, B - D - 1).split(",");
	var F = "";
	for ( var C = 0; C < A.length; C++) {
		var E = ("string" == typeof A[C]) ? '"' : "";
		F += ((C > 0) ? ", " : "") + (typeof A[C]) + " " + G[C] + ":" + E
				+ A[C] + E + ""
	}
	return "(" + F + ")"
}
function headerCheck(B) {
	var A = B.indexOf("(");
	if (A != -1) {
		A = B.indexOf("&#");
		if (A != -1) {
			B = B.substring(0, B.indexOf("("))
		}
	}
	return B
}
Wtf.Button.override({
	setTooltip : function(A) {
		if (this.getEl() != undefined) {
			var B = this.getEl().child(this.buttonSelector);
			Wtf.QuickTips.register({
				target : B.id,
				text : A
			})
		}
	}
});
Wtf.form.LabelField = function(A) {
	Wtf.form.LabelField.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.form.LabelField, Wtf.form.Field, {
	defaultAutoCreate : {
		tag : "span"
	},
	labelSeparator : "",
	hideLabel : true,
	fieldClass : "x-form-extend-label",
	value : "",
	setValue : function(A) {
		if (this.rendered) {
			this.el.update(A)
		}
	}
});
Wtf.namespace("Wtf", "Wtf.common", "Wtf.account", "Wtf.reportBuilder",
		"Wtf.leavem");
Wtf.req = {
	base : "jspfiles/"
};
Wtf.gridEmptytext = '<center><font size="4">No records to show</font></center>';
Wtf.BLANK_IMAGE_URL = "lib/resources/images/default/s.gif";
Wtf.DEFAULT_USER_URL = "images/defaultuser.png";
Wtf.ValidateMailPatt = /^([a-zA-Z0-9_\-\.+]+)@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})$/;
Wtf.ValidateUserid = /^\w+$/;
Wtf.ValidatePhoneNo = /^([^-])(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$/;
Wtf.ValidateUserName = /^[\w\s\'\"\.\-]+$/;
Wtf.validateHeadTitle = /^[\w\s\'\"\.\-\,\~\!\@\$\^\*\(\)\{\}\[\])]+$/;
Wtf.Week = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
		"Saturday" ];
Wtf.DomainPatt = /[ab]\/([^\/]*)\/(.*)/;
Wtf.validateImageFile = /^.+(.jpg|.bmp|.JPG|.gif|.GIF|.png|.PNG|.jpeg|.JPEG|.tif|.TIF|.tiff|.TIFF)$/;
Wtf.etype = {
	user : 0,
	comm : 1,
	proj : 2,
	home : 3,
	docs : 4,
	cal : 5,
	forum : 6,
	pmessage : 7,
	pplan : 8,
	adminpanel : 9,
	todo : 10,
	search : 11,
	hrms : 12,
	hrmssave : 13,
	hrmsaudit : 14,
	hrmsmaster : 15,
	hrmstime : 16,
	hrmsperformance : 17,
	hrmsreport : 18,
	hrmscompensation : 19,
	hrmsmanagecompensation : 20,
	hrmsgoals : 21,
	hrmsform : 22,
	hrmsappraisalform : 23,
	hrmsinitiate : 24,
	hrmsrejectapps : 25,
	hrmsaddapps : 26,
	hrmsviewapps : 27,
	hrmsmanageagency : 28,
	hrmsrecruiter : 29,
	hrmsinternaljobboard : 30,
	hrmsrecruitmentagency : 31,
	hrmsinternaljobmanage : 32,
	hrmsexternalmanage : 33,
	hrmsinternalmanage : 34,
	hrmscompetencymaster : 35,
	hrmsdesignation : 36,
	hrmsinternaljob : 37,
	hrmsjobboard : 38,
	hrmsexternaljob : 39,
	hrmsrecruit : 40,
	hrmsviewtimesheet : 41,
	hrmstimesheet : 42,
	hrmskey : 43,
	hrmssuccession : 44,
	hrmsmygoals : 45,
	hrmspreinternal : 46,
	hrmsviewapp : 47,
	hrmsviewrec : 48,
	accreports : 49,
	crm : 50,
	master : 51,
	acc : 52,
	acccustomer : 53,
	payroll : 54,
	jobsearch : 55,
	hrmsrecruitment : 56,
	hrmsinitapp : 57,
	hrmsarchive : 58,
	hrmsmygoals : 59,
	hrmsprofile : 60,
	hrmsemployeeprofile : 61,
	hrmsorganization : 62,
	hrmscontactinfo : 63,
	hrmspersonaldata : 64,
	hrmsqualification : 65,
	hrmsdocument : 66,
	hrmssalaryreport : 67,
	hrmsemployeelist : 68,
	hrmsapplicantlist : 69,
	hrmsdocuments : 70,
	hrmsmypayslip : 71,
	hrmsreview : 72,
	hrmsappraisalreport : 73,
	hrmsmyappraisalreport : 74
};
Wtf.btype = {
	addbutton : 1,
	editbutton : 2,
	deletebutton : 3,
	viewbutton : 4,
	assignbutton : 5,
	cancelbutton : 6,
	documentbutton : 7,
	submitbutton : 8,
	downloadbutton : 9,
	reportbutton : 10,
	winicon : 11,
	emailbutton : 12,
	upbutton : 13,
	downbutton : 14,
	setmasterbutton : 15
};
var bHasChanged = false;
Wtf.Payroll_Date_Authorize = "authorization";
Wtf.Payroll_Date_Process = "process";
Wtf.Perm = {};
Wtf.UPerm = {};
this.countryRec = new Wtf.data.Record.create([ {
	name : "id"
}, {
	name : "name"
} ]);
this.timezoneRec = new Wtf.data.Record.create([ {
	name : "id"
}, {
	name : "name"
} ]);
Wtf.countryStore = new Wtf.data.Store({
	url : Wtf.req.base + "UserManager.jsp",
	reader : new Wtf.data.KwlJsonReader({
		root : "data"
	}, this.countryRec),
	baseParams : {
		mode : 20
	}
});
Wtf.timezoneStore = new Wtf.data.Store({
	url : "KwlCommonTables/getAllTimeZones.do",
	reader : new Wtf.data.KwlJsonReader({
		root : "data"
	}, this.timezoneRec),
	baseParams : {
		mode : 16,
		common : "1"
	}
});
Wtf.comboTemplate = new Wtf.XTemplate(
		'<tpl for="."><div wtf:qtip="{[values.hasAccess === false ? "EPF payment can be made for current and future months only" : "" ]}" class="{[values.hasAccess === false ? "x-combo-list-item disabled-record" : "x-combo-list-item"]}">',
		"{name}", "</div></tpl>");
function getTopHtml(D, A, B) {
	if (B === undefined) {
		B = "images/createuser.png"
	}
	var C = "<div style = 'width:100%;height:100%;position:relative;float:left;'><div style='float:left;height:100%;width:auto;position:relative;'><img src = "
			+ B
			+ "  class = 'adminWinImg'></img></div><div style='float:left;height:100%;width:60%;position:relative;'><div style='font-size:12px;font-style:bold;float:left;margin:15px 0px 0px 10px;width:100%;position:relative;'><b>"
			+ D
			+ "</b></div><div style='font-size:10px;float:left;margin:15px 0px 10px 10px;width:100%;position:relative;'>"
			+ A + "</div></div></div>";
	return C
}
function deleteHoliday(B, A) {
	Wtf.MessageBox.confirm("Alert",
			"Do you really want to delete the holiday?", function(C) {
				if (C == "yes") {
					Wtf.getCmp(A).deleteHoliday(B.id.substring(4))
				}
			}, this)
}
function cancelHoliday() {
	Wtf.get("addHoliday").dom.style.display = "none"
}
function addHoliday(A) {
	Wtf.getCmp(A).addHoliday()
}
Wtf.apply(Wtf.form.VTypes, {
	daterange : function(D, C) {
		var B = C.parseDate(D);
		if (!B) {
			return
		}
		if (C.startDateField
				&& (!this.dateRangeMax || (B.getTime() != this.dateRangeMax
						.getTime()))) {
			var E = Wtf.getCmp(C.startDateField);
			E.setMaxValue(B);
			E.validate();
			this.dateRangeMax = B
		} else {
			if (C.endDateField
					&& (!this.dateRangeMin || (B.getTime() != this.dateRangeMin
							.getTime()))) {
				var A = Wtf.getCmp(C.endDateField);
				A.setMinValue(B);
				A.validate();
				this.dateRangeMin = B
			}
		}
		return true
	},
	password : function(C, B) {
		if (B.initialPassField) {
			var A = Wtf.getCmp(B.initialPassField);
			return (C == A.getValue())
		}
		return true
	},
	range : function(C, B) {
		if (B.initialPassField) {
			var A = Wtf.getCmp(B.initialPassField);
			return (C >= A.getValue())
		}
		return true
	}
});
function msgBoxShow(B, C) {
	var D = [];
	switch (B) {
	case 1:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.msgBoxShow" + B) ];
		break;
	case 2:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.msgBoxShow" + B) ];
		break;
	case 3:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.msgBoxShow" + B) ];
		break;
	case 4:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.msgBoxShow" + B) ];
		break;
	default:
		D = [ B[0], B[1] ];
		break
	}
	var A = Wtf.MessageBox.INFO;
	if (C == 0) {
		A = Wtf.MessageBox.WARNING
	} else {
		if (C == 2) {
			A = Wtf.MessageBox.ERROR
		}
	}
	Wtf.MessageBox.show({
		title : D[0],
		msg : D[1],
		buttons : Wtf.MessageBox.OK,
		animEl : "mb9",
		icon : A
	})
}
function getHeader(A, C, B) {
	var D = "<div style = 'width:100%;height:100%;position:relative;float:left;'><div style='float:left;height:100%;width:auto;position:relative;'><img src = "
			+ A
			+ " style = 'width:40px;height:52px;margin:5px 5px 5px 5px;'></img></div><div style='float:left;height:100%;width:60%;position:relative;'><div style='font-size:12px;font-style:bold;float:left;margin:15px 0px 0px 10px;width:100%;position:relative;'><b>"
			+ C
			+ "</b></div><div style='font-size:10px;float:left;margin:15px 0px 10px 10px;width:100%;position:relative;'>"
			+ B + "</div></div></div>";
	return D
}
function HTMLStripper(B) {
	var A = Wtf.util.Format.stripTags(B);
	return A.replace(/"/g, "").trim()
}
function setDldUrl(A, B) {
	if (B != undefined && B == "print") {
		window.open(A, "mywindow", "menubar=1,resizable=1,scrollbars=1")
	} else {
		document.getElementById("downloadframe").src = A
	}
}
Wtf.comboBoxRenderer = function(A) {
	return function(C) {
		var B = A.store.find(A.valueField, C);
		if (B == -1) {
			return ""
		}
		var D = A.store.getAt(B);
		return D.get(A.displayField)
	}
};
Wtf.depStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 7,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.completedStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 5,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.desigStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 1,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.countryStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 11
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "name"
	}, {
		name : "id"
	} ])),
	autoLoad : false
});
Wtf.quaStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 12
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "name"
	}, {
		name : "id"
	} ])),
	autoLoad : false
});
Wtf.terStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 15,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.prat = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 13,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.contextstore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 2
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.priostore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 3
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.wthstore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 4
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.statusStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 8
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.callbackStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 9
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.rankStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		flag : 203,
		common : "1",
		configid : 10
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.catgStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 14,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.interviewStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 18,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.roleStore = new Wtf.data.Store({
	url : Wtf.req.base + "UserManager.jsp",
	baseParams : {
		mode : 8
	},
	reader : new Wtf.data.KwlJsonReader({
		root : "data"
	}, new Wtf.data.Record.create([ "roleid", "rolename" ])),
	autoLoad : false
});
Wtf.gtypeStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 21,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	}, {
		name : "weightage"
	} ])),
	autoLoad : false
});
Wtf.debitStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 23,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.paymentStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 24,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});

Wtf.jobtypeStore = new Wtf.data.Store({
	url : "Common/getMasterDataField.common",
	baseParams : {
		configid : 25,
		common : "1",
		flag : 203
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "name"
	}, {
		name : "weightage"
	} ])),
	autoLoad : false
});
function checkForJobTypeStoreLoad() {
	
		Wtf.jobtypeStore.load();
		Wtf.StoreMgr.add("jobtypeStore", Wtf.jobtypeStore)

}
Wtf.managerStore = new Wtf.data.Store({
	url : "Common/getManagers.common",
	baseParams : {
		common : "1",
		mode : 22
	},
	reader : new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "userid"
	}, {
		name : "username"
	}, {
		name : "name"
	}, {
		name : "designation"
	}, {
		name : "department"
	} ])),
	autoLoad : false
});
Wtf.adminStore = new Wtf.data.Store({
	url : "Common/getAdmins.common",
	baseParams : {
		common : "1",
		mode : 22
	},
	reader : new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "userid"
	}, {
		name : "username"
	}, {
		name : "name"
	}, {
		name : "designation"
	}, {
		name : "department"
	} ])),
	autoLoad : false
});
Wtf.reportingToStore = new Wtf.data.Store({
	url : "Common/getReportingTo.common",
	baseParams : {
		common : "1",
		mode : 22
	},
	reader : new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "userid"
	}, {
		name : "username"
	}, {
		name : "name"
	}, {
		name : "designation"
	}, {
		name : "department"
	} ])),
	autoLoad : false
});
Wtf.dfStore = new Wtf.data.Store({
	url : "KwlCommonTables/getAllDateFormats.do",
	baseParams : {
		common : "1",
		mode : 32
	},
	reader : new Wtf.data.KwlJsonReader({
		root : "data"
	}, new Wtf.data.Record.create([ {
		name : "formatid"
	}, {
		name : "name"
	} ])),
	autoLoad : false
});
Wtf.employeeStore = new Wtf.data.Store({
	url : Wtf.req.base + "hrms.jsp",
	baseParams : {
		flag : 211
	},
	reader : new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, new Wtf.data.Record.create([ {
		name : "userid"
	}, {
		name : "username"
	}, {
		name : "designation"
	}, {
		name : "departmentname"
	} ])),
	autoLoad : false
});
Wtf.frequencyStore = new Wtf.data.SimpleStore({
	id : "monStore",
	fields : [ "id", "name" ],
	data : [ [ "0", WtfGlobal.getLocaleText("hrms.payroll.Monthly") ],
			[ "1", WtfGlobal.getLocaleText("hrms.payroll.Weekly") ],
			[ "2", WtfGlobal.getLocaleText("hrms.payroll.twice.month") ] ]
});
Wtf.onceMonthRec = [ [ "1", WtfGlobal.getLocaleText("hrms.January") ],
		[ "2", WtfGlobal.getLocaleText("hrms.February") ],
		[ "3", WtfGlobal.getLocaleText("hrms.March") ],
		[ "4", WtfGlobal.getLocaleText("hrms.April") ],
		[ "5", WtfGlobal.getLocaleText("hrms.May") ],
		[ "6", WtfGlobal.getLocaleText("hrms.June") ],
		[ "7", WtfGlobal.getLocaleText("hrms.July") ],
		[ "8", WtfGlobal.getLocaleText("hrms.August") ],
		[ "9", WtfGlobal.getLocaleText("hrms.September") ],
		[ "10", WtfGlobal.getLocaleText("hrms.October") ],
		[ "11", WtfGlobal.getLocaleText("hrms.November") ],
		[ "12", WtfGlobal.getLocaleText("hrms.December") ] ];
Wtf.monthStore = new Wtf.data.SimpleStore({
	id : "monStore",
	fields : [ "id", "name" ],
	data : Wtf.onceMonthRec
});
Wtf.monthRec0 = [ [ "0", WtfGlobal.getLocaleText("hrms.January") ],
		[ "1", WtfGlobal.getLocaleText("hrms.February") ],
		[ "2", WtfGlobal.getLocaleText("hrms.March") ],
		[ "3", WtfGlobal.getLocaleText("hrms.April") ],
		[ "4", WtfGlobal.getLocaleText("hrms.May") ],
		[ "5", WtfGlobal.getLocaleText("hrms.June") ],
		[ "6", WtfGlobal.getLocaleText("hrms.July") ],
		[ "7", WtfGlobal.getLocaleText("hrms.August") ],
		[ "8", WtfGlobal.getLocaleText("hrms.September") ],
		[ "9", WtfGlobal.getLocaleText("hrms.October") ],
		[ "10", WtfGlobal.getLocaleText("hrms.November") ],
		[ "11", WtfGlobal.getLocaleText("hrms.December") ] ];
Wtf.monthStore0 = new Wtf.data.SimpleStore({
	id : "monStore0",
	fields : [ "id", "name" ],
	data : Wtf.monthRec0
});
Wtf.onceWeekRec = new Array();
for ( var i = 0; i < 52; i++) {
	Wtf.onceWeekRec[i] = new Array((i + 1), (i + 1))
}
Wtf.twiceMonthRec = new Array();
for ( var i = 0; i < 24; i++) {
	Wtf.twiceMonthRec[i] = new Array((i + 1), (i + 1))
}
Wtf.yearRec = new Array();
for ( var i = 0; i < 50; i++) {
	Wtf.yearRec[i] = new Array((i + 2001), (i + 2001))
}
Wtf.yearStore = new Wtf.data.SimpleStore({
	id : "monStore",
	fields : [ "id", "name" ],
	data : Wtf.yearRec
});
Wtf.payrollStatusCombobox = function(B) {
	var D = [];
	if (B == "Generate") {
		D.push([ "0", Wtf.Payroll_Status_Renderer_NOT_STARTED ]);
		D.push([ "1", Wtf.Payroll_Status_Renderer_ENTERED ])
	}
	if (B == "Generate" || B == "Authorize") {
		D.push([ "2", Wtf.Payroll_Status_Renderer_CALCULATED ])
	}
	if (B == "Process" || B == "Generate" || B == "Authorize") {
		D.push([ "3", Wtf.Payroll_Status_Renderer_AUTHORIZED ])
	}
	if (B == "Generate" || B == "Authorize") {
		D.push([ "4", Wtf.Payroll_Status_Renderer_UNAUTHORIZED ])
	}
	if (B == "Generate" || B == "Process") {
		D.push([ "5", Wtf.Payroll_Status_Renderer_PROCESSED_TRIAL ]);
		D.push([ "6", Wtf.Payroll_Status_Renderer_PROCESSED_FINAL ])
	}
	var A = 0;
	if (B == "Authorize") {
		A = 2
	}
	if (B == "Process") {
		A = 3
	}
	var E = new Wtf.data.SimpleStore({
		fields : [ "id", "name" ],
		data : D
	});
	var C = new Wtf.form.ComboBox({
		triggerAction : "all",
		fieldLabel : "Frequency",
		hiddenName : "frequency",
		mode : "local",
		valueField : "id",
		displayField : "name",
		forceSelection : true,
		store : E,
		width : 150,
		typeAhead : true,
		value : A
	});
	return C
};
Wtf.common.helpTextField = function(A) {
	Wtf.apply(this, A);
	Wtf.common.helpTextField.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.common.helpTextField, Wtf.form.TextField, {
	onRender : function(A) {
		Wtf.common.helpTextField.superclass.onRender.call(this, A);
		if (this.helpText !== undefined) {
			this.helpDiv = document.createElement("span");
			this.helpDiv.className = "helpText";
			this.helpDiv.innerHTML = this.helpText;
			this.el.dom.parentNode.appendChild(this.helpDiv);
			this.el.dom.style.width = "auto"
		}
		if (this.fileName != "" && this.fileName) {
			this.FileNameDiv = document.createElement("span");
			this.FileNameDiv.id = "filename" + this.name;
			this.FileNameDiv.className = "filenameText";
			this.FileNameDiv.innerHTML = this.fileName;
			this.el.dom.parentNode.appendChild(this.FileNameDiv);
			this.el.dom.style.width = "auto"
		}
	},
	setFilename : function(A) {
		if (this.FileNameDiv !== undefined) {
			this.FileNameDiv.innerHTML = "Current File : " + A;
			this.fileName = A
		}
	},
	setHellpText : function(A) {
		if (this.helpDiv !== undefined) {
			this.helpDiv.innerHTML = A;
			this.helpText = A
		}
	},
	getHelpText : function() {
		return this.helpText
	},
	getFilename : function() {
		return this.fileName
	}
});
Wtf.common.KWLListPanel = function(A) {
	Wtf.common.KWLListPanel.superclass.constructor.call(this, A);
	this.addEvents({
		"loadcomplete" : true
	})
};
Wtf
		.extend(
				Wtf.common.KWLListPanel,
				Wtf.Panel,
				{
					tempdstore : null,
					dstore : null,
					checkFlag : 0,
					checkForAnoReq : 0,
					prevPageSize : 0,
					prevPageNo : 0,
					pageSize : 0,
					ImgSrc : "",
					pageno : 0,
					jobj : null,
					cursor : 0,
					paging : true,
					itemsContainer : null,
					renderTo : null,
					loadtext : null,
					contentEl : null,
					headerAsText : true,
					autoLoad : true,
					total : 0,
					collapse : null,
					bttnArray : null,
					initComponent : function() {
						Wtf.common.KWLListPanel.superclass.initComponent
								.call(this);
						this.addEvents({
							"dataloaded" : true,
							"contextmenu" : true
						})
					},
					onRender : function(config) {
						Wtf.common.KWLListPanel.superclass.onRender.call(this,
								config);
						this.headercontent = document.createElement("div");
						if (this.collapsible) {
							this.collapseButton = document.createElement("div");
							this.collapseButton.className = "collapse";
							this.collapseButton.id = this.id + "Collapse";
							this.headercontent.appendChild(this.collapseButton)
						}
						this.header.dom.className = "header x-unselectable";
						this.header.dom.removeChild(this.header.dom.firstChild);
						this.el.dom.firstChild.nextSibling.firstChild.className += " x-panel-body-noborder-KWL";
						this.headercontent.className = "headercontent";
						this.headercontent.id = this.id + "-headcont";
						this.label = document.createElement("span");
						this.label.className = "label";
						this.label.id = this.id + "-label";
						this.headercontent.appendChild(this.label);
						this.labelext = document.createElement("span");
						this.labelext.innerHTML = "";
						this.labelext.className = "label";
						this.labelext.style.margin = "0 0 0 4px";
						this.label.id = this.id + "-labelext";
						this.headercontent.appendChild(this.labelext);
						if (this.paging) {
							this.btndiv = document.createElement("div");
							this.btndiv.className = "btndiv";
							this.btndiv.id = this.id + "-btndiv";
							this.nxtdiv = document.createElement("div");
							this.nxtdiv.id = this.id + "-next";
							this.prediv = document.createElement("div");
							this.prediv.id = this.id + "-prev";
							this.nxtdiv.className = "nxtBtnDivNone";
							this.prediv.className = "preBtnDivNone";
							this.startlbl = document.createElement("span");
							this.startlbl.id = this.id + "-start";
							this.endlbl = document.createElement("span");
							this.endlbl.id = this.id + "-end";
							this.totallbl = document.createElement("span");
							this.totallbl.id = this.id + "-total";
							this.startlbl.innerHTML = 0 + "-";
							this.endlbl.innerHTML = 0 + " / ";
							this.totallbl.innerHTML = 0;
							this.pagging = document.createElement("span");
							this.pagging.appendChild(this.startlbl);
							this.pagging.appendChild(this.endlbl);
							this.pagging.appendChild(this.totallbl);
							this.pagging.className = "pagging";
							this.pagging.id = this.id + "-pagging";
							this.btndiv.appendChild(this.prediv);
							this.btndiv.appendChild(this.nxtdiv);
							this.headercontent.appendChild(this.btndiv);
							this.headercontent.appendChild(this.pagging)
						}
						this.header.dom.appendChild(this.headercontent);
						this.bttnArray = [];
						this.calculatePageSize();
						if (this.collapsible) {
							Wtf.get(this.collapseButton.id).addListener(
									"click", this.toggleCollapse, this)
						}
						if (this.url) {
							if (this.autoLoad == true) {
								this.loadUrl()
							}
						} else {
							if (this.ds) {
								this.jobj = eval("(" + this.ds + ")");
								this.FillContainer()
							}
						}
						this.loadMask = new Wtf.LoadMask(this.el.dom, Wtf
								.apply(this.loadMask))
					},
					onHover : function(A) {
						if (A == "next") {
							this.nxtdiv.className = "nxtBtnDivover"
						} else {
							this.prediv.className = "preBtnDivover"
						}
					},
					onOut : function(A) {
						if (A == "next") {
							this.nxtdiv.className = "nxtBtnDivout"
						} else {
							this.prediv.className = "preBtnDivout"
						}
					},
					onClick : function(A) {
						if (this.dstore) {
							if (A == "next") {
								this.pageno = this.pageno + 1;
								if ((this.dstore.getCount() >= ((this.pageno + 1) * this.pageSize))
										|| this.dstore.getCount() == this.total) {
									this.fillwithstore();
									return
								}
							} else {
								this.pageno = this.pageno - 1;
								if (this.dstore.getCount() >= ((this.pageno + 1) * this.pageSize)) {
									this.fillwithstore();
									return
								}
							}
						}
						if (this.jobj) {
							this.remDashBttn();
							this.FillContainer()
						} else {
							if (this.checkFlag == 1) {
								this.checkForAnoReq = 1
							} else {
								this.checkForReq()
							}
						}
					},
					fillwithstore : function(F) {
						if (F) {
							this.dstore = F
						}
						var E = this.pageSize * this.pageno;
						if (this.prevPageSize != this.pageSize
								|| this.prevPageNo != this.pageno) {
							if (this.prevPageSize < this.pageSize) {
								if (this.Href) {
									this.makeDashBttn(this.bttnArray.length,
											this.pageSize)
								} else {
									this.makeDashAlert(this.bttnArray.length,
											this.pageSize)
								}
							} else {
								this.remDashBttn()
							}
						}
						var D = 0;
						for ( var C = 0; C < this.pageSize; C++) {
							if (this.dstore.getAt(E) != undefined) {
								if (!this.dstore.getAt(C).data["img"]
										|| this.dstore.getAt(E).data["img"].length == 0) {
									if (this.contentType) {
										this.bttnArray[C].addData(this.dstore
												.getAt(E))
									} else {
										this.bttnArray[C]
												.addData(
														"images/"
																+ this.ImgSrc,
														this.dstore.getAt(E).data["name"],
														this.dstore.getAt(E).data["id"],
														this.Href, this.TabType)
									}
								} else {
									if (this.contentType) {
										this.bttnArray[C]
												.addData(this.tempdstore
														.getAt(E))
									} else {
										this.bttnArray[C]
												.addData(
														this.dstore.getAt(E).data["img"],
														this.dstore.getAt(E).data["name"],
														this.dstore.getAt(E).data["id"],
														this.Href, this.TabType)
									}
								}
								this.bttnArray[C].id = this.dstore.getAt(E).data["id"];
								E++;
								D++
							} else {
								break
							}
						}
						for ( var B = C; B < this.bttnArray.length; B++) {
							this.bttnArray[B].hideButton()
						}
						if (this.tempdstore && this.tempdstore.reader
								&& this.tempdstore.reader.jsonData) {
							var A = this.tempdstore.reader.jsonData.count;
							if (A != 0) {
								this.startlbl.innerHTML = (this.pageno * this.pageSize) == 0 ? (1 + "-")
										: (((this.pageno * this.pageSize) + 1) + "-");
								this.endlbl.innerHTML = (E) + "/ "
							} else {
								this.startlbl.innerHTML = "0-";
								this.endlbl.innerHTML = "0/"
							}
							this.totallbl.innerHTML = A;
							if (this.pageno == 0) {
								startflag = true
							} else {
								startflag = false
							}
							if (((this.pageno * this.pageSize) + D) == A) {
								endflag = true
							} else {
								endflag = false
							}
							this.ResetNavBtns(startflag, endflag)
						}
					},
					FillContainer : function() {
						var B = 0;
						var A = true;
						var C = true;
						if (this.jobj != null) {
							while (B < this.pageSize
									&& this.jobj["name"][((this.pageno * this.pageSize) + B)] != null) {
								new Wtf.common.WtfButton(
										{
											caption : this.jobj["name"][((this.pageno * this.pageSize) + B)],
											href : "#",
											bodyStyle : "position:relative;float:left;",
											imgSrc : "images/defaultuser.png",
											renderTo : this.el.dom.firstChild.nextSibling.firstChild.id
										});
								this.cursor = ((this.pageno * this.pageSize) + B) + 1;
								B = B + 1
							}
							this.startlbl.innerHTML = (this.pageno * this.pageSize) == 0 ? (1 + "-")
									: (((this.pageno * this.pageSize) + 1) + "-");
							this.endlbl.innerHTML = this.cursor + " / ";
							this.totallbl.innerHTML = this.jobj["name"].length;
							if (this.pageno * this.pageSize == 0) {
								A = true
							} else {
								A = false
							}
							if (this.cursor == this.jobj["name"].length) {
								C = true
							} else {
								C = false
							}
						} else {
							this.startlbl.innerHTML = "0-";
							this.endlbl.innerHTML = "0 / ";
							this.totallbl.innerHTML = "0"
						}
						this.ResetNavBtns(A, C)
					},
					Refresh : function(jstring) {
						jstring = jstring.trim();
						this.remDashBttn();
						if (jstring == "{}") {
							this.jobj = null
						} else {
							this.jobj = eval("(" + jstring + ")")
						}
						this.pageno = 0;
						this.FillContainer()
					},
					FillContainerUrl : function() {
						var D = 0;
						this.total = this.tempdstore.reader.jsonData.count;
						if (!this.dstore) {
							this.dstore = new Wtf.data.Store
						} else {
							D = this.dstore.getCount()
						}
						for ( var F = 0; F < this.tempdstore.getCount(); F++) {
							var C = this.dstore.find("id", this.tempdstore
									.getAt(F).data["id"], 0, false, true);
							if (C == -1) {
								this.dstore.insert(D, this.tempdstore.getAt(F));
								D++
							}
						}
						if (this.checkForAnoReq == 1) {
							this.checkForReq();
							this.checkForAnoReq = 0
						}
						var B = 0;
						var A = true;
						var E = true;
						if (this.total != 0) {
							while (B < this.pageSize
									&& this.tempdstore.getAt(B) != null) {
								if (this.bttnArray[B]) {
									if (!this.tempdstore.getAt(B).data["img"]
											|| this.tempdstore.getAt(B).data["img"].length == 0) {
										if (this.contentType) {
											this.bttnArray[B]
													.addData(this.tempdstore
															.getAt(B))
										} else {
											this.bttnArray[B]
													.addData(
															"images/"
																	+ this.ImgSrc,
															this.tempdstore
																	.getAt(B).data["name"],
															this.tempdstore
																	.getAt(B).data["id"],
															this.Href,
															this.TabType)
										}
									} else {
										Wtf.iStore
												.setImg(
														this.tempdstore
																.getAt(B).data["id"],
														this.tempdstore
																.getAt(B).data["img"]);
										if (this.contentType) {
											this.bttnArray[B]
													.addData(this.tempdstore
															.getAt(B))
										} else {
											this.bttnArray[B]
													.addData(
															this.tempdstore
																	.getAt(B).data["img"],
															this.tempdstore
																	.getAt(B).data["name"],
															this.tempdstore
																	.getAt(B).data["id"],
															this.Href,
															this.TabType)
										}
									}
									this.bttnArray[B].id = this.tempdstore
											.getAt(B).data["id"];
									this.cursor = (B) + 1
								}
								B = B + 1
							}
						}
						for ( var C = B; C < this.bttnArray.length; C++) {
							this.bttnArray[C].hideButton()
						}
						var D = this.total;
						if (this.total != 0) {
							this.startlbl.innerHTML = (this.pageno * this.pageSize) == 0 ? (1 + "-")
									: (((this.pageno * this.pageSize) + 1) + "-");
							this.endlbl.innerHTML = ((this.pageno * this.pageSize) + B)
									+ "/ "
						} else {
							this.startlbl.innerHTML = "0-";
							this.endlbl.innerHTML = "0/"
						}
						this.totallbl.innerHTML = D;
						if (this.pageno == 0) {
							A = true
						} else {
							A = false
						}
						if (((this.pageno * this.pageSize) + B) == D) {
							E = true
						} else {
							E = false
						}
						this.ResetNavBtns(A, E);
						this.checkFlag = 0;
						this.loadMask.hide();
						this.fireEvent("loadcomplete")
					},
					setTitle : function(A) {
						this.title = A;
						this.label.innerHTML = this.title
					},
					ResetTitle : function(A) {
						if (this.labelext) {
							this.labelext.innerHTML = "  '" + A + "'"
						}
					},
					ResetNavBtns : function(A, B) {
						if (A) {
							this.prediv.className = "preBtnDivNone";
							this.prediv.onmouseover = null;
							this.prediv.onmouseout = null;
							this.prediv.onclick = null
						} else {
							this.prediv.className = "preBtnDivout";
							this.prediv.onmouseover = this.onHover
									.createDelegate(this, [ "prev" ]);
							this.prediv.onmouseout = this.onOut.createDelegate(
									this, [ "prev" ]);
							this.prediv.onclick = this.onClick.createDelegate(
									this, [ "prev" ])
						}
						if (B) {
							this.nxtdiv.className = "nxtBtnDivNone";
							this.nxtdiv.onmouseover = null;
							this.nxtdiv.onmouseout = null;
							this.nxtdiv.onclick = null
						} else {
							this.nxtdiv.className = "nxtBtnDivout";
							this.nxtdiv.onmouseover = this.onHover
									.createDelegate(this, [ "next" ]);
							this.nxtdiv.onmouseout = this.onOut.createDelegate(
									this, [ "next" ]);
							this.nxtdiv.onclick = this.onClick.createDelegate(
									this, [ "next" ])
						}
					},
					loadUrl : function() {
						if (this.checkFlag == 1) {
							this.checkForAnoReq = 1
						} else {
							this.makeAjaxRequest();
							this.checkFlag = 1
						}
					},
					makeAjaxRequest : function() {
						if (!this.reader) {
							this.reader = new Wtf.data.JsonReader({
								root : "data",
								fields : [ {
									name : "name",
									type : "string"
								}, {
									name : "id",
									type : "string"
								}, {
									name : "img",
									type : "string"
								} ]
							})
						}
						this.tempdstore = new Wtf.data.Store({
							method : "POST",
							id : "tempstore",
							url : this.url,
							baseParams : ({
								pageno : this.pageno,
								pageSize : this.pageSize
							}),
							reader : this.reader
						});
						this.tempdstore.on("load", function() {
							this.fireEvent("dataloaded", this.tempdstore);
							if (this.prevPageSize != this.pageSize
									|| this.prevPageNo != this.pageno) {
								if (this.prevPageSize < this.pageSize) {
									if (this.Href) {
										this.makeDashBttn(
												this.bttnArray.length,
												this.bttnArray.length
														+ this.tempdstore
																.getCount())
									} else {
										this.makeDashAlert(
												this.bttnArray.length,
												this.bttnArray.length
														+ this.tempdstore
																.getCount())
									}
								} else {
									this.remDashBttn()
								}
								this.prevPageSize = this.pageSize;
								this.prevPageNo = this.pageno
							}
							this.FillContainerUrl()
						}, this);
						this.tempdstore.on("loadexception", this.loadReload,
								this);
						this.loadMask.show();
						this.tempdstore.load()
					},
					loadReload : function() {
						this.loadMask.hide()
					},
					makeDashBttn : function(C, A) {
						for ( var B = C; B < A; B++) {
							this.bttnArray
									.push(new Wtf.common.WtfButton(
											{
												renderTo : this.el.dom.firstChild.nextSibling.firstChild.id,
												tabtype : this.TabType,
												bodyStyle : "position:relative;float:left;",
												id : B
											}))
						}
					},
					makeDashAlert : function(C, A) {
						for ( var B = C; B < A; B++) {
							this.bttnArray
									.push(new Wtf.ux.WtfAlert(
											{
												renderTo : this.el.dom.firstChild.nextSibling.firstChild.id,
												bodyStyle : "position:relative;float:left;",
												id : B
											}))
						}
					},
					remDashBttn : function() {
						if (this.bttnArray.length > this.pageSize) {
							while (this.pageSize != this.bttnArray.length) {
								this.bttnArray[this.bttnArray.length - 1]
										.removeButton();
								this.bttnArray.pop()
							}
						}
					},
					checkForReq : function() {
						this.loadMask.show();
						this.makeAjaxRequest();
						this.checkFlag = 1
					},
					calculatePageSize : function() {
						this.prevPageSize = this.pageSize;
						var D = this.pageno * this.prevPageSize + 1;
						var A = Wtf.get(this.id);
						if (this.Href) {
							var B = Math.floor(A.getWidth() / 82);
							var C = Math.floor((A.getHeight() - 25) / 101);
							this.pageSize = B * C
						} else {
							this.pageSize = Math
									.floor((A.getHeight() - 25) / 30)
						}
						if (this.pageSize <= 0) {
							this.pageSize = 1
						}
						this.pageno = Math.floor((D - 1) / this.pageSize)
					},
					setUrl : function(A) {
						this.url = A;
						this.calculatePageSize();
						if (this.prevPageSize < this.pageSize) {
							if (this.Href) {
								this.makeDashBttn(this.bttnArray.length,
										this.pageSize)
							} else {
								this.makeDashAlert(this.bttnArray.length,
										this.pageSize)
							}
						} else {
							this.remDashBttn()
						}
						this.loadMask.show();
						this.makeAjaxRequest()
					}
				});
Wtf.reg("KWLListPanel", Wtf.common.KWLListPanel);
Wtf.lib.Ajax._queue = [];
Wtf.lib.Ajax._activeRequests = 0;
Wtf.lib.Ajax.counter = 0;
Wtf.lib.Ajax.Queue_Size = 1;
Wtf.lib.Ajax.abort = function(D, E, B) {
	if (this.isCallInProgress(D)) {
		D.conn.abort();
		window.clearInterval(this.poll[D.tId]);
		delete this.poll[D.tId];
		if (B) {
			delete this.timeout[D.tId]
		}
		this.handleTransactionResponse(D, E, true);
		return true
	} else {
		for ( var C = 0, A = this._queue.length; C < A; C++) {
			if (this._queue[C].o.tId == D.tId) {
				this._queue.splice(C, 1);
				break
			}
		}
		return false
	}
};
Wtf.lib.Ajax.asyncRequest = function(E, B, D, A) {
	var C = this.getConnectionObject();
	if (!C) {
		return null
	} else {
		this._queue.push({
			o : C,
			method : E,
			uri : B,
			callback : D,
			postData : A
		});
		this._processQueue();
		return C
	}
};
Wtf.lib.Ajax.combinereq = function() {
	if (this.task != null && this.task != undefined) {
		this.task.cancel()
	}
	var G = [];
	var C = [];
	var E;
	while (this._queue.length > 0) {
		E = this._queue.shift();
		if (E.uri == "General/getData.dsh") {
			C.push(E);
			E = null;
			continue
		}
		var F = E.uri.split("?");
		if (F.length > 1) {
			E.uri = F[0];
			E.postData += "&" + F[1];
			E.callback.argument.options.params = Wtf
					.urlDecode(E.postData, true)
		}
		var A = E.uri.lastIndexOf(".");
		var D = E.uri.substring(A + 1);
		if (D == "jsp") {
			C.push(E);
			E = null;
			continue
		}
		var B = "{url:'" + E.uri + "',params:"
				+ Wtf.encode(E.callback.argument.options.params) + ",no:"
				+ this.counter + "}";
		callbackmap[this.counter] = E.callback;
		this.counter++;
		G.push(B)
	}
	this._queue = C;
	if (G.length > 0) {
		if (E) {
			if (this._activeRequests < this.Queue_Size) {
				this._asyncRequest(E.o, E.method, "General/getData.dsh",
						E.callback, Wtf.urlEncode(G))
			} else {
				this._queue.push({
					o : E.o,
					method : E.method,
					uri : "General/getData.dsh",
					callback : E.callback,
					postData : Wtf.urlEncode(G)
				})
			}
		}
	}
};
Wtf.lib.Ajax.simplerequest = function() {
	if (this._activeRequests < this.Queue_Size) {
		var A = this._queue.shift();
		this._asyncRequest(A.o, A.method, A.uri, A.callback, A.postData)
	}
};
Wtf.lib.Ajax._processQueue = function(B) {
	var G;
	if (B == 1) {
		G = this._queue[0];
		if (G && G.uri == "General/getData.dsh") {
			this.simplerequest();
			return
		}
	} else {
		G = this._queue[this._queue.length - 1]
	}
	var E = -1;
	var F = -1;
	var D = -1;
	if (G) {
		if (G.postData != undefined && G.postData != null) {
			E = G.postData.search("firequery");
			F = G.postData.search("grouper");
			D = G.postData.search("common")
		}
		if (B != 1 && E > -1) {
			this.combinereq()
		} else {
			if (F == -1 && D == -1) {
				if (this._activeRequests < this.Queue_Size) {
					var A = G.uri.lastIndexOf(".");
					var C = G.uri.substring(A + 1);
					if (this._queue.length > 1
							&& (C.search("jsp") == -1 && C.search("html") == -1)) {
						this.combinereq()
					} else {
						if (B == 1) {
							G = this._queue.shift()
						} else {
							G = this._queue.pop()
						}
						this._asyncRequest(G.o, G.method, G.uri, G.callback,
								G.postData)
					}
				}
			}
		}
		if (B != 1 && (D != -1 || F != -1)) {
			if (this.task == null || this.task == undefined) {
				this.task = new Wtf.util.DelayedTask(this.combinereq, this)
			}
			this.task.delay(1)
		}
	}
};
var callbackmap = [];
Wtf.lib.Ajax._asyncRequest = function(C, E, B, D, A) {
	this._activeRequests++;
	C.conn.open(E, B, true);
	if (this.useDefaultXhrHeader) {
		if (!this.defaultHeaders["X-Requested-With"]) {
			this.initHeader("X-Requested-With", this.defaultXhrHeader, true)
		}
	}
	if (A && this.useDefaultHeader) {
		this.initHeader("Content-Type", this.defaultPostHeader)
	}
	if (this.hasDefaultHeaders || this.hasHeaders) {
		this.setHeader(C)
	}
	this.handleReadyState(C, D);
	C.conn.send(A || null)
};
Wtf.lib.Ajax.releaseObject = function(A) {
	A.conn = null;
	A = null;
	this._activeRequests--;
	this._processQueue(1)
};
Wtf.Ajax.requestEx = function(config, scope, successCallback, failureCallback) {
	Wtf.Ajax.request({
		method : "POST",
		url : config.url,
		scope : scope,
		params : config.params,
		success : function(request, response) {
			var res = null;
			try {
				var restext = request.responseText.trim();
				if (restext && (restext.length > 0)) {
					res = eval("(" + restext + ")");
					if (res && res.valid) {
						try {
							if (successCallback) {
								successCallback.call(this, res.data, response)
							}
						} catch (e) {
							clog(e)
						}
					} else {
						if (res && (res.valid == false)) {
							if (res.data && res.data.reason) {
								signOut(res.data.reason)
							} else {
								signOut("timeout")
							}
						}
					}
				}
			} catch (e) {
				clog(e);
				if (failureCallback) {
					failureCallback.call(this, request, response)
				}
			}
		},
		failure : function(request, response) {
			if (failureCallback) {
				failureCallback.call(this, request, response)
			}
		}
	})
};
function clog(A) {
	if (window.console != undefined) {
		if (console && console.debug && A) {
			console.debug(A.toString())
		}
	}
}
var userTabs = [];
var projectTabs = [];
var mainPanel;
var deskeraAdmin = false;
var numTabs = 1;
var dojoInitCount = 0;
var companyName = "";
var pagebaseURL = "";
var subDomain = "";
var isStandAlone = "";
var isEleaveIntegration = false;
Wtf.CompanyName = " ";
Wtf.DemoCompanyId = "a4792363-b0e1-4b67-992b-2851234d5ea6";
Wtf.CurrencySymbol = "\u0024";
if ((typeof Range !== "undefined") && !Range.prototype.createContextualFragment) {
	Range.prototype.createContextualFragment = function(A) {
		var C = document.createDocumentFragment(), B = document
				.createElement("div");
		C.appendChild(B);
		B.outerHTML = A;
		return C
	}
}
Wtf.menu.BaseItem.override({
	onRender : function(B, A) {
		this.el = Wtf.get(this.el);
		B.dom.appendChild(this.el.dom);
		if (this.tooltip) {
			if (typeof this.tooltip == "object") {
				Wtf.QuickTips.register(Wtf.apply({
					target : this.el.id
				}, this.tooltip))
			} else {
				this.el.dom[this.tooltipType] = this.tooltip
			}
		}
	},
	setTooltip : function(A) {
		var B = this.el;
		Wtf.QuickTips.register({
			target : B.id,
			text : A
		})
	}
});
Wtf.Button.override({
	setTooltip : function(A) {
		if (this.getEl() != undefined) {
			var B = this.getEl().child(this.buttonSelector);
			Wtf.QuickTips.register({
				target : B.id,
				text : A
			})
		}
	}
});
Wtf.ux.ContentPanel = function(A) {
	Wtf.apply(this, A);
	Wtf.ux.ContentPanel.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.ux.ContentPanel, Wtf.Panel, {
	closable : true,
	autoScroll : true
});
Wtf.ux.MainPanel = function(A) {
	Wtf.ux.MainPanel.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.ux.MainPanel, Wtf.TabPanel, {
	loadTab : function(B, D, H, L, K, G, F, J) {
		var A = "tab" + D.substr(3);
		var E = this.getComponent(A);
		if (E) {
			this.setActiveTab(E);
			if (F) {
				E.activesubtab = F;
				if (E.tabType == Wtf.etype.proj) {
					if (typeof F == "string") {
						Wtf.getCmp("projectTabs_" + E.id.substr(3)).pro
								.fireEvent(F)
					} else {
						Wtf.getCmp("projectTabs_" + E.id.substr(3)).pro
								.fireEvent(F.event)
					}
				}
				if (A == "tabcompanyadminpanel") {
					Wtf.getCmp("mainAdmin").fireEvent(F)
				}
			}
		} else {
			if (B == "project.html" && Wtf.subscription.cal && !calLoad) {
				WtfGlobal.loadScript("scripts/minified/calendar.js?v=19")
			}
			var I = {
				tabid : A,
				url : B,
				scripts : true
			};
			var C = new Wtf.ux.ContentPanel({
				id : A,
				title : H,
				autoLoad : I,
				navarea : L,
				layout : "fit",
				tabType : K,
				closable : J != null ? J : true,
				iconCls : getTabIconCls(K)
			});
			if (G) {
				switch (K) {
				case Wtf.etype.comm:
					communityTabs.push(C);
					break;
				case Wtf.etype.proj:
					projectTabs.push(C);
					break;
				case Wtf.etype.user:
					userTabs.push(C);
					break;
				case Wtf.etype.lms:
					courseTabs.push(C);
					break;
				case Wtf.etype.acc:
					accountingTabs.push(C);
					break
				}
			}
			this.add(C);
			this.setActiveTab(C);
			if (F) {
				C.activesubtab = F
			}
			Wtf.getCmp(A).on("hide", function() {
				var M = Wtf.getCmp("Expand");
				if (M != undefined) {
					M.hide()
				}
			}, this)
		}
	}
});
function getTabIconCls(A) {
	switch (A) {
	case Wtf.etype.hrmsdocuments:
		return "pwndCommon documenttabIcon";
		break;
	case Wtf.etype.hrmsapplicantlist:
		return "pwndHRMS applicanttabIcon";
		break;
	case Wtf.etype.hrmsemployeelist:
		return "hrmsemployeelistTabIcon";
		break;
	case Wtf.etype.hrmsdocument:
		return "pwndCommon documenttabIcon";
		break;
	case Wtf.etype.hrmsqualification:
		return "pwndHRMS qualificationtabIcon";
		break;
	case Wtf.etype.hrmsorganization:
		return "pwndHRMS organizationtabIcon";
		break;
	case Wtf.etype.hrmscontactinfo:
		return "pwndHRMS contactdetailstabIcon";
		break;
	case Wtf.etype.hrmspersonaldata:
		return "pwndHRMS personaldetailstabIcon";
		break;
	case Wtf.etype.hrmsemployeeprofile:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.hrmsprofile:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.hrmsmygoals:
		return "pwndCommon profile2tabIcon";
		break;
	case Wtf.etype.hrmsarchive:
		return "pwndCommon archivetabIcon";
		break;
	case Wtf.etype.hrmsinitapp:
		return "pwndHRMS initiatetabIcon";
		break;
	case Wtf.etype.hrmsrecruitment:
		return "pwndHRMS recruitmanagetabIcon";
		break;
	case Wtf.etype.jobsearch:
		return "jobsearchTabIcon";
		break;
	case Wtf.etype.hrmsjobexternal:
		return "pwndHRMS viewtabIcon";
		break;
	case Wtf.etype.hrmsprofile:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.hrmsprospect:
		return "hrmsprospectTabIcon";
		break;
	case Wtf.etype.hrmsprofile:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.hrmsrec:
		return "pwndHRMS recruitertabIcon";
		break;
	case Wtf.etype.hrmsassignjobs:
		return "pwndHRMS addjobstabIcon";
		break;
	case Wtf.etype.hrmspreinternal:
		return "hrmspreinternalTabIcon";
		break;
	case Wtf.etype.hrmsviewapp:
		return "pwndHRMS selectedapptabIcon";
		break;
	case Wtf.etype.hrmsviewrec:
		return "hrmsviewrecTabIcon";
		break;
	case Wtf.etype.hrmspreexternal:
		return "hrmspreexternalTabIcon";
		break;
	case Wtf.etype.hrmsviewtimesheet:
		return "pwndHRMS timesheettabIcon";
		break;
	case Wtf.etype.hrmsmygoals:
		return "pwndCommon profile2tabIcon";
		break;
	case Wtf.etype.hrmskey:
		return "hrmskeyTabIcon";
		break;
	case Wtf.etype.hrmstimesheet:
		return "pwndHRMS timesheettabIcon";
		break;
	case Wtf.etype.hrmsrecruit:
		return "pwndHRMS agencytabIcon";
		break;
	case Wtf.etype.hrmsinitapp:
		return "hrmsinitappTabIcon";
		break;
	case Wtf.etype.hrmsjobboard:
		return "pwndHRMS jobboardtabIcon";
		break;
	case Wtf.etype.hrmsinternaljob:
		return "hrmsinternaljobTabIcon";
		break;
	case Wtf.etype.hrmsexternaljob:
		return "pwndHRMS addjobstabIcon";
		break;
	case Wtf.etype.hrmsdesignation:
		return "pwndHRMS prerequisitetabIcon";
		break;
	case Wtf.etype.hrmscompetencymaster:
		return "pwndHRMS competencytabIcon";
		break;
	case Wtf.etype.hrmsinternalmanage:
		return "hrmsinternalmanageTabIcon";
		break;
	case Wtf.etype.hrmsinternaljobmanage:
		return "pwndHRMS managetabIcon";
		break;
	case Wtf.etype.hrmsexternalmanage:
		return "pwndHRMS managetabIcon";
		break;
	case Wtf.etype.hrmsrecruitmentagency:
		return "hrmsrecruitmentagencyTabIcon";
		break;
	case Wtf.etype.hrmsinternaljobboard:
		return "hrmsinternaljobboardTabIcon";
		break;
	case Wtf.etype.hrmsrecruiter:
		return "pwndHRMS recruitertabIcon";
		break;
	case Wtf.etype.hrmsmanageagency:
		return "pwndHRMS managetabIcon";
		break;
	case Wtf.etype.hrmsviewapps:
		return "pwndHRMS selectedapptabIcon";
		break;
	case Wtf.etype.hrmsaddapps:
		return "pwndHRMS pendingapptabIcon";
		break;
	case Wtf.etype.hrmsrejectapps:
		return "pwndHRMS rejectedapptabIcon";
		break;
	case Wtf.etype.hrmsform:
		return "hrmsformTabIcon";
		break;
	case Wtf.etype.hrmsinitiate:
		return "hrmsinitiateTabIcon";
		break;
	case Wtf.etype.hrmsappraisalform:
		return "pwndHRMS formtabIcon";
		break;
	case Wtf.etype.hrmsgoals:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.hrmsmanagecompensation:
		return "pwndHRMS managetabIcon";
		break;
	case Wtf.etype.hrmscompensation:
		return "pwndHRMS compensationtabIcon";
		break;
	case Wtf.etype.hrmsreport:
		return "pwndCommon reporttabIcon";
		break;
	case Wtf.etype.hrmsperformance:
		return "pwndHRMS performancetabIcon";
		break;
	case Wtf.etype.hrmstime:
		return "pwndCommon timetabIcon";
		break;
	case Wtf.etype.hrmssuccession:
		return "hrmssuccessionTabIcon";
		break;
	case Wtf.etype.hrmsaudit:
		return "pwndCommon audittabIcon";
		break;
	case Wtf.etype.reports:
		return "pwndCommon reportstabIcon";
		break;
	case Wtf.etype.hrmsmaster:
		return "pwndHRMS configtabIcon";
		break;
	case Wtf.etype.hrms:
		return "hrmsTabIcon";
		break;
	case Wtf.etype.hrmssave:
		return "hrmssaveIcon";
		break;
	case Wtf.etype.home:
		return "pwndCommon dashboardTabIcon";
		break;
	case Wtf.etype.comm:
		return "pwnd communityTabIcon";
		break;
	case Wtf.etype.proj:
		return "pwnd projectTabIcon";
		break;
	case Wtf.etype.user:
		return "pwnd userTabIcon";
		break;
	case Wtf.etype.docs:
		return "pwnd doctabicon";
		break;
	case Wtf.etype.cal:
		return "pwnd teamcal";
		break;
	case Wtf.etype.forum:
		return "pwnd communitydiscuss";
		break;
	case Wtf.etype.pmessage:
		return "pwnd pmsgicon";
		break;
	case Wtf.etype.pplan:
		return "pwnd projplan";
		break;
	case Wtf.etype.adminpanel:
		return "pwnd admintab";
		break;
	case Wtf.etype.adminpanel2:
		return "pwndcommon mastertabIcon";
		break;
	case Wtf.etype.todo:
		return "pwnd todolistpane";
		break;
	case Wtf.etype.search:
		return "pwnd searchtabpane";
		break;
	case Wtf.etype.accreports:
		return " pwnd accreportsTabIcon";
		break;
	case Wtf.etype.master:
		return "pwndHRMS payrollcompotabIcon";
		break;
	case Wtf.etype.acc:
		return "pwndCommon templatetabIcon";
		break;
	case Wtf.etype.acccustomer:
		return "pwndCommon profiletabIcon";
		break;
	case Wtf.etype.payroll:
		return "pwndHRMS payrollmanagetabIcon";
		break;
	case Wtf.etype.contacts:
		return "pwnd contactsTabIcon";
		break;
	case Wtf.etype.crm:
		return "pwndCommon reporttabIcon";
		break;
	case Wtf.etype.hrmssalaryreport:
		return "pwndHRMS salaryreporttabIcon";
		break;
	case Wtf.etype.hrmsmypayslip:
		return "pwndHRMS mypaysliptabIcon";
		break;
	case Wtf.etype.hrmsreview:
		return "pwndHRMS reviewtabIcon";
		break;
	case Wtf.etype.hrmsappraisalreport:
		return "pwndHRMS appraisalreporttabIcon";
		break;
	case Wtf.etype.hrmsmyappraisalreport:
		return "pwndHRMS myappraisalreporttabIcon";
		break
	}
}
function getButtonIconCls(A) {
	switch (A) {
	case Wtf.btype.addbutton:
		return "pwndCommon addbuttonIcon";
		break;
	case Wtf.btype.editbutton:
		return "pwndCommon editbuttonIcon";
		break;
	case Wtf.btype.viewbutton:
		return "pwndHRMS viewbuttonIcon";
		break;
	case Wtf.btype.deletebutton:
		return "pwndCommon deletebuttonIcon";
		break;
	case Wtf.btype.assignbutton:
		return "pwndHRMS assignbuttonIcon";
		break;
	case Wtf.btype.cancelbutton:
		return "pwndCommon cancelbuttonIcon";
		break;
	case Wtf.btype.documentbutton:
		return "pwndCommon docuploadbuttonIcon";
		break;
	case Wtf.btype.submitbutton:
		return "pwndCommon submitbuttonIcon";
		break;
	case Wtf.btype.downloadbutton:
		return "pwndCommon docdownloadbuttonIcon";
		break;
	case Wtf.btype.reportbutton:
		return "pwndCommon reportbuttonIcon";
		break;
	case Wtf.btype.winicon:
		return "pwndCommon iconwin";
		break;
	case Wtf.btype.emailbutton:
		return "pwndCommon emailbuttonIcon";
		break;
	case Wtf.btype.upbutton:
		return "pwndHRMS upbuttonIcon";
		break;
	case Wtf.btype.downbutton:
		return "pwndHRMS downbuttonIcon";
		break;
	case Wtf.btype.setmasterbutton:
		return "pwndHRMS setmasterbuttonIcon";
		break;
	case Wtf.btype.docbutton:
		return "pwndCommon documentButIcon";
		break
	}
}
Wtf
		.onReady(function() {
			validateServerSession();
			mainPanel = new Wtf.ux.MainPanel({
				id : "as",
				region : "center",
				deferredRender : false,
				resizeTabs : true,
				minTabWidth : 185,
				loadMask : new Wtf.LoadMask(document.body, Wtf
						.apply(this.loadMask)),
				cls : "ascls",
				titleCollapse : true,
				activeTab : 0,
				enableTabScroll : true,
				items : [ new Wtf.ux.ContentPanel({
					id : "tabdashboard",
					title : WtfGlobal.getLocaleText("hrms.dashboard"),
					navarea : "navareadashboard",
					closable : false,
					layout : "fit",
					autoLoad : {
						url : "dashboard.html",
						scripts : true
					},
					iconCls : getTabIconCls(Wtf.etype.home),
					tabType : Wtf.etype.home
				}) ]
			});
			Wtf.getCmp("tabdashboard").on("activate", function() {
				if (bHasChanged) {
					Wtf.getCmp("tabdashboard").load({
						url : Wtf.req.base + "dashboard.jsp?refresh=true",
						scripts : true
					});
					bHasChanged = false
				}
			}, this);
			var A = new Wtf.Viewport(
					{
						layout : "border",
						id : "viewport",
						items : [
								new Wtf.Panel(
										{
											region : "north",
											autoHeight : true,
											hidden : true,
											border : false,
											cls : "announcementpan",
											id : "announcementpan",
											html : '<div style="position: relative;"><span style="z-index: 10000; position: absolute; float: right; margin-top: 5px; margin-right: 5px; right: 0pt;"><img src="images/stop12.gif" alt="close" onclick="javascript:hideTopPanel();"></span><div id="announcementpandiv" style="padding:15px;"></div> </div>'
										}), new Wtf.Panel({
									region : "center",
									border : false,
									layout : "border",
									items : [ new Wtf.BoxComponent({
										region : "north",
										el : "header"
									}), mainPanel ]
								}) ]
					});
			A.doLayout();
			Wtf.useShims = true;
			Wtf.QuickTips.init();
			Wtf.apply(Wtf.QuickTips.getQuickTip(), {
				dismissDelay : 0
			})
		});
function setUsername(C, D) {
	var B = document.getElementById("whoami");
	B.innerText = C;
	B.textContent = C;
	var A = 0;
	if (!isStandAlone) {
		A = 1
	}
	if (D == "demo") {
		addToXCuts("#", WtfGlobal.getLocaleText("hrms.common.SignUp"),
				"loadSignupPage()", "", WtfGlobal
						.getLocaleText("hrms.common.SignUp.tooltip"), "signup")
	}
}
function otherLinks(subdomain, companyid) {
	if (!isStandAlone) {
		Wtf.Ajax.requestEx({
			url : "Dashboard/getPartnerLinks.dsh",
			params : {
				action : 14,
				companyid : companyid
			}
		}, this, function(response) {
			var obj = eval("(" + response + ")");
			if (obj.pstatus == 2) {
				if (obj.count != 0) {
					for ( var i = 0; i < obj.count; i++) {
						if (i == obj.count - 1) {
							addToXCuts(obj.data[i].url, obj.data[i].title, "",
									"", "")
						} else {
							addToXCuts(obj.data[i].url, obj.data[i].title, "",
									"0", "")
						}
					}
				}
			} else {
				otherLinksURL(subdomain)
			}
			if (obj.subscribedapplist != undefined
					&& obj.subscribedapplist.length != 0) {
				subscribedAppsLinksURL(obj.subscribedapplist)
			}
		}, function(request, response) {
		})
	} else {
		otherLinksURL(subdomain)
	}
}
function otherLinksURL(A) {
	/*addToXCuts("mailto:" + A + "@deskera.com", WtfGlobal
			.getLocaleText("hrms.common.Support"), "", "", WtfGlobal
			.getLocaleText("hrms.common.Support.tooltip"), "Support");
	addToXCuts("http://forum.deskera.com/", WtfGlobal
			.getLocaleText("hrms.common.Forum"), "", "", WtfGlobal
			.getLocaleText("hrms.common.Forum.tooltip"), "Forum");
	addToXCuts("http://blog.deskera.com/", WtfGlobal
			.getLocaleText("hrms.common.Blog"), "", "", WtfGlobal
			.getLocaleText("hrms.common.Blog.tooltip"), "Blog");
	addToXCuts("http://support.deskera.com/index.php/Deskera_HRMS_Help",
			WtfGlobal.getLocaleText("hrms.common.Help"), "", "", WtfGlobal
					.getLocaleText("hrms.common.Help.tooltip"), "Help")*/
}
function subscribedAppsLinksURL(A) {
	var B = new Wtf.menu.Menu({
		cls : "mainMenu1",
		items : [ "" ]
	});
	this.button1 = new Wtf.Toolbar.MenuButton({
		menu : B,
		cls : "notification-menu",
		height : 50,
		renderTo : "shortcutmenu1",
		text : '<div style="color:#083772;">'
				+ WtfGlobal.getLocaleText("hrms.common.switchto")
				+ " &#9662;</div>"
	});
	Wtf.DomHelper.append("shortcutmenu1",
			'<table class="pipilinks"><tr><td>|</td></tr></table>');
	this.button1.on("click", function() {
		button1menu(A)
	}, this)
}
function button1menu(B) {
	this.button1.menu.removeAll();
	for ( var A = 0; A < B.length; A++) {
		this.button1.menu
				.addText('<div class="wrapperForMenu"><div style="padding: 8px 0 5px 5px;" /> <a href="'
						+ B[A].appurlformat
						+ '" target="_blank" onclick="javascript:closeMenu();" id="'
						+ B[A].appname
						+ '" wtf:qtip="'
						+ B[A].appname
						+ '">'
						+ B[A].appname + "</a></div>")
	}
	this.button1.showMenu()
}
function closeMenu(A) {
	this.button1.hideMenu()
}
function updatePreferences() {
	Wtf.Ajax.requestEx({
		url : Wtf.req.base + "UserManager.jsp",
		params : {
			mode : 31
		}
	}, this, function(result, req) {
		if (result) {
			Wtf.pref = eval(result.data)[0]
		}
	})
}
function loadAdminPage(B) {
	var A = "adminclicked";
	switch (B) {
	case "1":
		A = "adminclicked";
		break;
	case 1:
		A = "adminclicked";
		break;
	case "2":
		A = "masterclicked";
		break;
	case 2:
		A = "masterclicked";
		break;
	case "3":
		A = "companyclicked";
		break;
	case 3:
		A = "companyclicked";
		break;
	case "4":
		A = "featureclicked";
		break;
	case 4:
		A = "featureclicked";
		break
	}
	mainPanel
			.loadTab(
					"admin.html",
					"   companyadminpanel",
					"<div wtf:qtip="
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.Administration.tooltip")
							+ ">"
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.Administration")
							+ "</div>", "navareadashboard",
					Wtf.etype.adminpanel, false, A)
}
function ConfigMaster() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("masterConfigTab");
	if (A == null) {
		A = new Wtf.MasterConfigurator({
			layout : "fit",
			title : WtfGlobal
					.getLocaleText("hrms.administration.master.configuration"),
			closable : true,
			border : false,
			id : "masterConfigTab",
			iconCls : getTabIconCls(Wtf.etype.hrmsmaster)
		});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function ConfigAppraisalCycleMaster() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("AppraisalCycleConfigTab");
	if (A == null) {
		A = new Wtf.appraisalCycleMasterGrid({
			layout : "fit",
			title : WtfGlobal
					.getLocaleText("hrms.performance.set.appraisal.cycle"),
			closable : true,
			border : false,
			id : "AppraisalCycleConfigTab",
			iconCls : getTabIconCls(Wtf.etype.hrmsmaster)
		});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function signOut(C) {
	var B = "";
	if (C !== undefined && typeof C != "object") {
		B = "?type=" + C
	}
	_dC("lastlogin");
	_dC("featureaccess");
	_dC("username");
	_dC("lid");
	_dC("companyid");
	var A = Wtf.DomainPatt.exec(window.location);
	var D = "error.dsh";
	if (C == "noaccess" || C == "alreadyloggedin") {
		D += "?e=" + C;
		if (A && A[1]) {
			D += "&n=" + A[1]
		}
	} else {
		
			D = "b/" + 'hrms' + "/signOut.dsh" + B
		
	}
	_u = window.location.origin +'/hrms/'+ D;
	_r(D)
}
function _dC(A) {
	document.cookie = A + "=;path=/;expires=Thu, 01-Jan-1970 00:00:01 GMT"
}
function getPermissionObjects(C) {
	var B = C;
	if (B.Perm) {
		Wtf.Perm = B.Perm
	}
	if (B.UPerm) {
		Wtf.UPerm = B.UPerm
	}
	if (B.deskeraadmin) {
		deskeraAdmin = true
	}
	if (B.hrms_modules) {
		Wtf.cmpPerm = B.hrms_modules;
		for ( var A = 0; A < Wtf.cmpPerm.data.length; A++) {
			Wtf[Wtf.cmpPerm.data[A].modulename] = Wtf.cmpPerm.data[A].moduleid
		}
	}
}
function initLocaleInfo() {
	Wtf.getCmp("tabdashboard").setTitle(
			WtfGlobal.getLocaleText("hrms.dashboard"))
}
function validateServerSession() {
	Wtf.Ajax
			.requestEx(
					{
						url : "AuthHandler/verifyLogin.common",
						params : {
							blank : -1
						}
					},
					this,
					function(result, req) {
						if (!window["messages"]) {
							window.location.reload(true)
						}
						var res = eval("(" + result + ")");
						getPermissionObjects(res.perm);
						if (res) {
							if (!deskeraAdmin) {
								setUsername(res.fullname, res.username);
								Wtf.pref = eval(res.preferences);
								Wtf.cmpPref = res.companypreferences[0];
								loginid = res.lid;
								userroleid = res.roleid;
								loginname = res.username;
								companyid = res.companyid;
								isStandAlone = res.isStandAlone;
								isMalaysianCompany = res.isMalaysianCompany;
								isEleaveIntegration = res.isEleaveIntegration;
								companyName = res.company;
								Wtf.subCode = res.subscriptioncode;
								Wtf.CompanyName = res.company;
								pagebaseURL = res.base_url;
								subDomain = res.subdomain;
								otherLinks(res.subdomain, companyid);
								document.getElementById("Deskerahrmstitle").text = companyName
										+ " Workspace - HRMS";
								addRolePermlink();
								document.getElementById("myProfile").innerHTML = WtfGlobal
										.getLocaleText("hrms.common.MyProfile");
								document.getElementById("organisationlink").innerHTML = WtfGlobal
										.getLocaleText("hrms.common.my.organization");
								document.getElementById("whoami_sign_out").innerHTML = WtfGlobal
										.getLocaleText("hrms.common.SignOut");
								document
										.getElementById("whoami_show_person_profile").innerHTML = WtfGlobal
										.getLocaleText("hrms.common.MyAccount");
								document
										.getElementById("whoami_change_password").innerHTML = WtfGlobal
										.getLocaleText("hrms.common.ChangePassword");
								document.getElementById("myProfile").qtip = WtfGlobal
										.getLocaleText("hrms.administration.my.profile.tooltip");
								document.getElementById("organisationlink").qtip = WtfGlobal
										.getLocaleText("hrms.common.effortlessly.create.organization.chart")
							} else {
								WtfGlobal
										.loadScript("scripts/minified/superUser.js");
								WtfGlobal
										.loadStyleSheet("style/companystat.css")
							}
							if (isStandAlone) {
								document.getElementById("companyLogo").src = pagebaseURL
										+ "/b/"
										+ subDomain
										+ "/images/store/?company=true"
							} else {
								createMaintainanceCall()
							}
						} else {
							signOut()
						}
					}, signOut)
}
function addToXCuts(u, t, eh, no, tip, id) {
	var textLink = '<div id="' + id + '" style="color:#083772;" wtf:qtip=\''
			+ tip + "'>" + t + "</div>";
	var button = new Wtf.Toolbar.MenuButton({
		cls : "notification-menu",
		renderTo : "shortcutmenu1",
		text : textLink,
		tooltip : tip
	});
	if (no != "0") {
		Wtf.DomHelper.append("shortcutmenu1",
				'<table class="pipilinks"><tr><td>|</td></tr></table>')
	}
	button.on("click", function() {
		if (id == "Support") {
			document.getElementById("downloadframe").src = u
		} else {
			if (id == "signup") {
				eval(eh)
			} else {
				window.open(u)
			}
		}
	}, this)
}
function showPersnProfile() {
	var A = Wtf.getCmp("updateProfileWin");
	if (!A) {
		new Wtf.common.UpdateProfile({}).show()
	}
}
function changepass() {
	this.changepasswin = new Wtf.passwin({
		title : WtfGlobal.getLocaleText("hrms.common.ChangePassword"),
		width : 390,
		iconCls : getButtonIconCls(Wtf.btype.winicon),
		modal : true,
		height : 260,
		resizable : false,
		layout : "fit",
		profId : loginid
	}).show()
}
function addRolePermlink() {
	if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
			Wtf.Perm.useradmin.assignperm)) {
		Wtf.DomHelper
				.append(
						"userinfo",
						'&nbsp;&nbsp;<a onclick="requestPermissions();" href="#" wtf:qtip="'
								+ WtfGlobal
										.getLocaleText("hrms.common.AssignRolePermissions.tooltip")
								+ '">'
								+ WtfGlobal
										.getLocaleText("hrms.common.AssignRolePermissions")
								+ "</a> ")
	}
}
function requestPermissions() {
	var A = new Wtf.common.Permissions({
		title : WtfGlobal.getLocaleText("hrms.common.UserPermissions"),
		resizable : false,
		modal : true
	});
	A.show()
}
function loadSignupPage() {
	signOut();
	window.location = "http://www.deskera.com/hrms/pricing-and-signup"
}
Wtf.ux.Portal = Wtf.extend(Wtf.Panel, {
	layout : "column",
	autoScroll : true,
	initComponent : function() {
		Wtf.ux.Portal.superclass.initComponent.call(this);
		this.addEvents({
			validatedrop : true,
			beforedragover : true,
			dragover : true,
			beforedrop : true,
			drop : true,
			ondrag : true
		})
	},
	initEvents : function() {
		Wtf.ux.Portal.superclass.initEvents.call(this);
		this.dd = new Wtf.ux.Portal.DropZone(this, this.dropConfig)
	}
});
Wtf.reg("portal", Wtf.ux.Portal);
Wtf.ux.Portal.DropZone = function(A, B) {
	this.portal = A;
	Wtf.dd.ScrollManager.register(A.body);
	Wtf.ux.Portal.DropZone.superclass.constructor.call(this, A.bwrap.dom, B);
	A.body.ddScrollConfig = this.ddScrollConfig
};
Wtf.extend(Wtf.ux.Portal.DropZone, Wtf.dd.DropTarget, {
	ddScrollConfig : {
		vthresh : 50,
		hthresh : -1,
		animate : true,
		increment : 200
	},
	createEvent : function(A, D, C, B, F, E) {
		return {
			portal : this.portal,
			panel : C.panel,
			columnIndex : B,
			column : F,
			position : E,
			data : C,
			source : A,
			rawEvent : D,
			status : this.dropAllowed
		}
	},
	notifyOver : function(R, P, S) {
		var D = P.getXY(), A = this.portal, K = R.proxy;
		if (!this.grid) {
			this.grid = this.getGrid()
		}
		var B = A.body.dom.clientWidth;
		if (!this.lastCW) {
			this.lastCW = B
		} else {
			if (this.lastCW != B) {
				this.lastCW = B;
				A.doLayout();
				this.grid = this.getGrid()
			}
		}
		var C = 0, I = this.grid.columnX, J = false;
		for ( var N = I.length; C < N; C++) {
			if (D[0] < (I[C].x + I[C].w)) {
				J = true;
				break
			}
		}
		if (!J) {
			C--
		}
		var M, H = false, F = 0, Q = A.items.itemAt(C);
		var L = new Array();
		if (Q.items) {
			L = Q.items.items
		}
		for (N = L.length; F < N; F++) {
			M = L[F];
			var O = M.el.getHeight();
			if (O !== 0 && (M.el.getY() + (O / 2)) > D[1]) {
				H = true;
				break
			}
		}
		var G = 0;
		if (Q.items) {
			G = Q.items.getCount()
		}
		var E = this.createEvent(R, P, S, C, Q, H && M ? F : G);
		if (A.fireEvent("validatedrop", E) !== false
				&& A.fireEvent("beforedragover", E) !== false) {
			K.getProxy().setWidth("auto");
			if (M) {
				K.moveProxy(M.el.dom.parentNode, H ? M.el.dom : null)
			} else {
				K.moveProxy(Q.body.dom, null)
			}
			this.lastPos = {
				c : Q,
				col : C,
				p : H && M ? F : false
			};
			this.scrollPos = A.body.getScroll();
			A.fireEvent("dragover", E);
			return E.status
		} else {
			return E.status
		}
	},
	notifyOut : function() {
		delete this.grid
	},
	notifyDrop : function(I, D, C) {
		delete this.grid;
		var F = this.lastPos.c, B = this.lastPos.col, G = this.lastPos.p;
		var H = 0;
		if (F.items) {
			H = F.items.getCount()
		}
		var A = this.createEvent(I, D, C, B, F, G !== false ? G : H);
		if (this.portal.fireEvent("validatedrop", A) !== false
				&& this.portal.fireEvent("beforedrop", A) !== false) {
			I.proxy.getProxy().remove();
			if (I.panel.ownerCt == this.lastPos.c) {
				I.panel.el.dom.parentNode.removeChild(I.panel.el.dom)
			}
			if (this.lastPos.p !== false) {
				this.lastPos.c.insert(this.lastPos.p, I.panel)
			} else {
				this.lastPos.c.add(I.panel)
			}
			this.portal.doLayout();
			this.portal.fireEvent("drop", A);
			var J = this.scrollPos.top;
			if (J) {
				var E = this.portal.body.dom;
				setTimeout(function() {
					E.scrollTop = J
				}, 10)
			}
		}
	},
	getGrid : function() {
		var A = this.portal.bwrap.getBox();
		A.columnX = [];
		this.portal.items.each(function(B) {
			A.columnX.push({
				x : B.el.getX(),
				w : B.el.getWidth()
			})
		});
		return A
	}
});
var hexcase = 0;
var b64pad = "";
var chrsz = 8;
function hex_sha1(A) {
	return binb2hex(core_sha1(str2binb(A), A.length * chrsz))
}
function b64_sha1(A) {
	return binb2b64(core_sha1(str2binb(A), A.length * chrsz))
}
function str_sha1(A) {
	return binb2str(core_sha1(str2binb(A), A.length * chrsz))
}
function hex_hmac_sha1(A, B) {
	return binb2hex(core_hmac_sha1(A, B))
}
function b64_hmac_sha1(A, B) {
	return binb2b64(core_hmac_sha1(A, B))
}
function str_hmac_sha1(A, B) {
	return binb2str(core_hmac_sha1(A, B))
}
function sha1_vm_test() {
	return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d"
}
function core_sha1(N, H) {
	N[H >> 5] |= 128 << (24 - H % 32);
	N[((H + 64 >> 9) << 4) + 15] = H;
	var O = Array(80);
	var M = 1732584193;
	var L = -271733879;
	var K = -1732584194;
	var J = 271733878;
	var I = -1009589776;
	for ( var E = 0; E < N.length; E += 16) {
		var G = M;
		var F = L;
		var D = K;
		var C = J;
		var A = I;
		for ( var B = 0; B < 80; B++) {
			if (B < 16) {
				O[B] = N[E + B]
			} else {
				O[B] = rol(O[B - 3] ^ O[B - 8] ^ O[B - 14] ^ O[B - 16], 1)
			}
			var P = safe_add(safe_add(rol(M, 5), sha1_ft(B, L, K, J)),
					safe_add(safe_add(I, O[B]), sha1_kt(B)));
			I = J;
			J = K;
			K = rol(L, 30);
			L = M;
			M = P
		}
		M = safe_add(M, G);
		L = safe_add(L, F);
		K = safe_add(K, D);
		J = safe_add(J, C);
		I = safe_add(I, A)
	}
	return Array(M, L, K, J, I)
}
function sha1_ft(B, A, D, C) {
	if (B < 20) {
		return (A & D) | ((~A) & C)
	}
	if (B < 40) {
		return A ^ D ^ C
	}
	if (B < 60) {
		return (A & D) | (A & C) | (D & C)
	}
	return A ^ D ^ C
}
function sha1_kt(A) {
	return (A < 20) ? 1518500249 : (A < 40) ? 1859775393
			: (A < 60) ? -1894007588 : -899497514
}
function core_hmac_sha1(C, F) {
	var E = str2binb(C);
	if (E.length > 16) {
		E = core_sha1(E, C.length * chrsz)
	}
	var A = Array(16), D = Array(16);
	for ( var B = 0; B < 16; B++) {
		A[B] = E[B] ^ 909522486;
		D[B] = E[B] ^ 1549556828
	}
	var G = core_sha1(A.concat(str2binb(F)), 512 + F.length * chrsz);
	return core_sha1(D.concat(G), 512 + 160)
}
function safe_add(A, D) {
	var C = (A & 65535) + (D & 65535);
	var B = (A >> 16) + (D >> 16) + (C >> 16);
	return (B << 16) | (C & 65535)
}
function rol(A, B) {
	return (A << B) | (A >>> (32 - B))
}
function str2binb(D) {
	var C = Array();
	var A = (1 << chrsz) - 1;
	for ( var B = 0; B < D.length * chrsz; B += chrsz) {
		C[B >> 5] |= (D.charCodeAt(B / chrsz) & A) << (32 - chrsz - B % 32)
	}
	return C
}
function binb2str(C) {
	var D = "";
	var A = (1 << chrsz) - 1;
	for ( var B = 0; B < C.length * 32; B += chrsz) {
		D += String.fromCharCode((C[B >> 5] >>> (32 - chrsz - B % 32)) & A)
	}
	return D
}
function binb2hex(C) {
	var B = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	var D = "";
	for ( var A = 0; A < C.length * 4; A++) {
		D += B.charAt((C[A >> 2] >> ((3 - A % 4) * 8 + 4)) & 15)
				+ B.charAt((C[A >> 2] >> ((3 - A % 4) * 8)) & 15)
	}
	return D
}
function binb2b64(D) {
	var C = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var F = "";
	for ( var B = 0; B < D.length * 4; B += 3) {
		var E = (((D[B >> 2] >> 8 * (3 - B % 4)) & 255) << 16)
				| (((D[B + 1 >> 2] >> 8 * (3 - (B + 1) % 4)) & 255) << 8)
				| ((D[B + 2 >> 2] >> 8 * (3 - (B + 2) % 4)) & 255);
		for ( var A = 0; A < 4; A++) {
			if (B * 8 + A * 6 > D.length * 32) {
				F += b64pad
			} else {
				F += C.charAt((E >> 6 * (3 - A)) & 63)
			}
		}
	}
	return F
}
function getHTTPObject() {
	var B;
	if (!B && typeof XMLHttpRequest != "undefined") {
		try {
			B = new XMLHttpRequest()
		} catch (A) {
			B = false
		}
	}
	return B
}
var NORMAL_STATE = 4;
function setMsg(C, A) {
	var B = document.getElementById("usrFeedback");
	switch (A) {
	case 1:
		B.className = "loadingFB";
		break;
	case 0:
		B.className = "errorFB";
		break;
	case 2:
		B.className = "infoFB";
		break
	}
	B.innerText = C;
	B.textContent = C
}
function setVisibility(A, B) {
	B.style.visibility = (A ? "visible" : "hidden")
}
function trimStr(A) {
	return A.replace(/^\s*|\s*$/g, "")
}
function mm(A, B) {
	window.location = "mailto:" + B + "@" + A
}
function createMaintainanceCall() {
	var A = 300000;
	fnInt = setInterval(getSysMaintainanceData, A)
}
function abortMaintainanceCall() {
	clearInterval(fnInt)
}
function getSysMaintainanceData() {
	Wtf.Ajax.requestEx({
		url : "Dashboard/getMaintainanceDetails.dsh"
	}, this, function(res) {
		var result = eval("(" + res + ")");
		if (result.data != undefined && result.success == true) {
			var announcementpan = Wtf.getCmp("announcementpan");
			announcementpan.setVisible(true);
			notificationMessage(result.data[0].message);
			announcementpan.doLayout();
			Wtf.getCmp("viewport").doLayout()
		} else {
			hideTopPanel()
		}
	}, function(request, res) {
	})
}
function notificationMessage(B) {
	var A = Wtf.getCmp("announcementpan");
	if (A != null) {
		A.setVisible(true);
		document.getElementById("announcementpandiv").innerHTML = B;
		A.doLayout();
		Wtf.getCmp("viewport").doLayout()
	}
}
function hideTopPanel() {
	var A = Wtf.getCmp("announcementpan");
	if (A != null) {
		document.getElementById("announcementpandiv").innerHTML = "";
		A.setVisible(false);
		A.doLayout();
		Wtf.getCmp("viewport").doLayout();
		abortMaintainanceCall()
	}
}
if (typeof dojo == "undefined") {
	(function() {
		if ((!this["console"]) || (!console["firebug"])) {
			this.console = {}
		}
		if (!console["debug"]) {
			console["debug"] = function() {
			}
		}
		if (typeof this["dojo"] == "undefined") {
			this.dojo = {}
		}
		var _d = dojo;
		dojo.global = this;
		dojo._unloaders = [];
		dojo.unloaded = function() {
			var mll = this._unloaders;
			while (mll.length) {
				(mll.pop())()
			}
		};
		dojo.addOnUnload = function(obj, functionName) {
			if (arguments.length == 1) {
				_d._unloaders.push(obj)
			} else {
				if (arguments.length > 1) {
					_d._unloaders.push(function() {
						obj[functionName]()
					})
				}
			}
		};
		dojo._blockAsync = false;
		dojo._contentHandlers = {
			"text" : function(xhr) {
				return xhr.responseText
			},
			"json" : function(xhr) {
				return Wtf.decode(xhr.responseText)
			},
			"json-comment-filtered" : function(xhr) {
				var value = xhr.responseText;
				var cStartIdx = value.indexOf("/*");
				var cEndIdx = value.lastIndexOf("*/");
				if (cStartIdx == -1 || cEndIdx == -1) {
					throw new Error("JSON was not comment filtered")
				}
				return Wtf.decode(value.substring(cStartIdx + 2, cEndIdx))
			},
			"javascript" : function(xhr) {
				if (_d.global.eval) {
					return _d.global.eval(xhr.responseText)
				} else {
					return eval(xhr.responseText)
				}
			},
			"xml" : function(xhr) {
				if (Wtf.isIE && !xhr.responseXML) {
					Wtf.each([ "MSXML2", "Microsoft", "MSXML", "MSXML3" ],
							function(i) {
								try {
									var doc = new ActiveXObject(prefixes[i]
											+ ".XMLDOM");
									doc.async = false;
									doc.loadXML(xhr.responseText);
									return doc
								} catch (e) {
								}
							})
				} else {
					return xhr.responseXML
				}
			}
		};
		dojo._contentHandlers["json-comment-optional"] = function(xhr) {
			var handlers = _d._contentHandlers;
			try {
				return handlers["json-comment-filtered"](xhr)
			} catch (e) {
				return handlers["json"](xhr)
			}
		};
		dojo._ioSetArgs = function(args, canceller, okHandler, errHandler) {
			var ioArgs = {
				args : args,
				url : args.url
			};
			var miArgs = [ {} ];
			if (args.content) {
				miArgs.push(args.content)
			}
			if (args.preventCache) {
				miArgs.push({
					"dojo.preventCache" : new Date().valueOf()
				})
			}
			ioArgs.query = Wtf.urlEncode(Wtf.apply.apply(null, miArgs));
			ioArgs.handleAs = args.handleAs || "text";
			var d = new _d.Deferred(canceller);
			d.addCallbacks(okHandler, function(error) {
				return errHandler(error, d)
			});
			var ld = args.load;
			if (ld && _d.isFunction(ld)) {
				d.addCallback(function(value) {
					return ld.call(args, value, ioArgs)
				})
			}
			var err = args.error;
			if (err && _d.isFunction(err)) {
				d.addErrback(function(value) {
					return err.call(args, value, ioArgs)
				})
			}
			var handle = args.handle;
			if (handle && _d.isFunction(handle)) {
				d.addBoth(function(value) {
					return handle.call(args, value, ioArgs)
				})
			}
			d.ioArgs = ioArgs;
			return d
		};
		var _deferredCancel = function(dfd) {
			dfd.canceled = true;
			var xhr = dfd.ioArgs.xhr;
			var _at = (typeof xhr.abort);
			if ((_at == "function") || (_at == "unknown")) {
				xhr.abort()
			}
			var err = new Error("xhr cancelled");
			err.dojoType = "cancel";
			return err
		};
		var _deferredOk = function(dfd) {
			return _d._contentHandlers[dfd.ioArgs.handleAs](dfd.ioArgs.xhr)
		};
		var _deferError = function(error, dfd) {
			console.debug(error);
			return error
		};
		var _makeXhrDeferred = function(args) {
			var dfd = _d._ioSetArgs(args, _deferredCancel, _deferredOk,
					_deferError);
			dfd.ioArgs.xhr = _d._xhrObj(dfd.ioArgs.args);
			return dfd
		};
		var _inFlightIntvl = null;
		var _inFlight = [];
		var _watchInFlight = function() {
			var now = (new Date()).getTime();
			if (!_d._blockAsync) {
				for ( var i = 0, tif; (i < _inFlight.length)
						&& (tif = _inFlight[i]); i++) {
					var dfd = tif.dfd;
					try {
						if (!dfd || dfd.canceled || !tif.validCheck(dfd)) {
							_inFlight.splice(i--, 1)
						} else {
							if (tif.ioCheck(dfd)) {
								_inFlight.splice(i--, 1);
								tif.resHandle(dfd)
							} else {
								if (dfd.startTime) {
									if (dfd.startTime
											+ (dfd.ioArgs.args.timeout || 0) < now) {
										_inFlight.splice(i--, 1);
										var err = new Error("timeout exceeded");
										err.dojoType = "timeout";
										dfd.errback(err);
										dfd.cancel()
									}
								}
							}
						}
					} catch (e) {
						console.debug(e);
						dfd.errback(new Error("_watchInFlightError!"))
					}
				}
			}
			if (!_inFlight.length) {
				clearInterval(_inFlightIntvl);
				_inFlightIntvl = null;
				return
			}
		};
		dojo._ioCancelAll = function() {
			try {
				Wtf.each(_inFlight, function(i) {
					i.dfd.cancel()
				})
			} catch (e) {
			}
		};
		if (Wtf.isIE) {
			_d.addOnUnload(_d._ioCancelAll)
		}
		_d._ioWatch = function(dfd, validCheck, ioCheck, resHandle) {
			if (dfd.ioArgs.args.timeout) {
				dfd.startTime = (new Date()).getTime()
			}
			_inFlight.push({
				dfd : dfd,
				validCheck : validCheck,
				ioCheck : ioCheck,
				resHandle : resHandle
			});
			if (!_inFlightIntvl) {
				_inFlightIntvl = setInterval(_watchInFlight, 50)
			}
			_watchInFlight()
		};
		var _defaultContentType = "application/x-www-form-urlencoded";
		var _validCheck = function(dfd) {
			return dfd.ioArgs.xhr.readyState
		};
		var _ioCheck = function(dfd) {
			return 4 == dfd.ioArgs.xhr.readyState
		};
		var _resHandle = function(dfd) {
			if (_d._isDocumentOk(dfd.ioArgs.xhr)) {
				dfd.callback(dfd)
			} else {
				dfd.errback(new Error("bad http response code:"
						+ dfd.ioArgs.xhr.status))
			}
		};
		var _doIt = function(type, dfd) {
			var ioArgs = dfd.ioArgs;
			var args = ioArgs.args;
			ioArgs.xhr.open(type, ioArgs.url, args.sync !== true,
					args.user || undefined, args.password || undefined);
			if (args.headers) {
				for ( var hdr in args.headers) {
					if (hdr.toLowerCase() === "content-type"
							&& !args.contentType) {
						args.contentType = args.headers[hdr]
					} else {
						ioArgs.xhr.setRequestHeader(hdr, args.headers[hdr])
					}
				}
			}
			ioArgs.xhr.setRequestHeader("Content-Type",
					(args.contentType || _defaultContentType));
			try {
				ioArgs.xhr.send(ioArgs.query)
			} catch (e) {
				dfd.cancel()
			}
			_d._ioWatch(dfd, _validCheck, _ioCheck, _resHandle);
			return dfd
		};
		dojo._ioAddQueryToUrl = function(ioArgs) {
			if (ioArgs.query.length) {
				ioArgs.url += (ioArgs.url.indexOf("?") == -1 ? "?" : "&")
						+ ioArgs.query;
				ioArgs.query = null
			}
		};
		dojo.xhrGet = function(args) {
			var dfd = _makeXhrDeferred(args);
			_d._ioAddQueryToUrl(dfd.ioArgs);
			return _doIt("GET", dfd)
		};
		dojo.xhrPost = function(args) {
			return _doIt("POST", _makeXhrDeferred(args))
		}
	})();
	if (typeof window != "undefined") {
		(function() {
			var A = dojo;
			if (Wtf.isIE) {
				if (window.location.protocol === "file:") {
					Wtf.ieForceActiveXXhr = true
				}
				var B = true;
				Wtf.EventManager.on(window, "beforeunload", function() {
					window.setTimeout(function() {
						B = false
					}, 0)
				});
				Wtf.EventManager.on(window, "unload", function() {
					if (B) {
						dojo.unloaded()
					}
				})
			} else {
				Wtf.EventManager.on(window, "beforeunload", function() {
					dojo.unloaded()
				})
			}
			A._XMLHTTP_PROGIDS = [ "Msxml2.XMLHTTP", "Microsoft.XMLHTTP",
					"Msxml2.XMLHTTP.4.0" ];
			A._xhrObj = function() {
				var C = null;
				var G = null;
				if (!Wtf.isIE || !Wtf.ieForceActiveXXhr) {
					try {
						C = new XMLHttpRequest()
					} catch (F) {
					}
				}
				if (!C) {
					for ( var E = 0; E < 3; ++E) {
						var D = dojo._XMLHTTP_PROGIDS[E];
						try {
							C = new ActiveXObject(D)
						} catch (F) {
							G = F
						}
						if (C) {
							dojo._XMLHTTP_PROGIDS = [ D ];
							break
						}
					}
				}
				if (!C) {
					throw new Error("XMLHTTP not available: " + G)
				}
				return C
			};
			A._isDocumentOk = function(C) {
				var D = C.status || 0;
				return ((D >= 200) && (D < 300))
						|| (D == 304)
						|| (D == 1223)
						|| (!D && (location.protocol == "file:" || location.protocol == "chrome:"))
			}
		})();
		dojo.doc = window["document"] || null
	}
}
dojo.isString = function(A) {
	return (Wtf.type(A) == "string")
};
dojo.isArray = function(A) {
	return (Wtf.type(A) == "array")
};
dojo.isFunction = function(A) {
	return (Wtf.type(A) == "function")
};
dojo._hitchArgs = function(B, D) {
	var C = dojo._toArray(arguments, 2);
	var A = dojo.isString(D);
	return function() {
		var E = dojo._toArray(arguments);
		var F = A ? (B || dojo.global)[D] : D;
		return F && F.apply(B || this, C.concat(E))
	}
};
dojo.hitch = function(A, B) {
	if (arguments.length > 2) {
		return dojo._hitchArgs.apply(dojo, arguments)
	}
	if (!B) {
		B = A;
		A = null
	}
	if (dojo.isString(B)) {
		A = A || dojo.global;
		if (!A[B]) {
			throw ([ 'dojo.hitch: scope["', B, '"] is null (scope="', A, '")' ]
					.join(""))
		}
		return function() {
			return A[B].apply(A, arguments || [])
		}
	}
	return !A ? B : function() {
		return B.apply(A, arguments || [])
	}
};
dojo._toArray = function(C, D) {
	var B = [];
	for ( var A = D || 0; A < C.length; A++) {
		B.push(C[A])
	}
	return B
};
dojo._listener = {
	getDispatcher : function() {
		return function() {
			var D = Array.prototype, F = arguments.callee, A = F._listeners, C = F.target;
			var E = C && C.apply(this, arguments);
			for ( var B in A) {
				if (!(B in D)) {
					A[B].apply(this, arguments)
				}
			}
			return E
		}
	},
	add : function(C, E, B) {
		C = C || dojo.global;
		var A = C[E];
		if (!A || !A._listeners) {
			var D = dojo._listener.getDispatcher();
			D.target = A;
			D._listeners = [];
			A = C[E] = D
		}
		return A._listeners.push(B)
	},
	remove : function(C, D, B) {
		var A = (C || dojo.global)[D];
		if (A && A._listeners && B--) {
			delete A._listeners[B]
		}
	}
};
dojo._topics = {};
dojo.subscribe = function(A, B, C) {
	return [ A, dojo._listener.add(dojo._topics, A, dojo.hitch(B, C)) ]
};
dojo.unsubscribe = function(A) {
	if (A) {
		dojo._listener.remove(dojo._topics, A[0], A[1])
	}
};
dojo.publish = function(B, A) {
	var C = dojo._topics[B];
	if (C) {
		C.apply(this, A || [])
	}
};
dojo.AdapterRegistry = function(A) {
	this.pairs = [];
	this.returnWrappers = A || false
};
dojo.AdapterRegistry.prototype = {
	register : function(C, B, E, A, D) {
		this.pairs[((D) ? "unshift" : "push")]([ C, B, E, A ])
	},
	match : function() {
		for ( var A = 0; A < this.pairs.length; A++) {
			var B = this.pairs[A];
			if (B[1].apply(this, arguments)) {
				if ((B[3]) || (this.returnWrappers)) {
					return B[2]
				} else {
					return B[2].apply(this, arguments)
				}
			}
		}
		throw new Error("No match found")
	},
	unregister : function(A) {
		for ( var B = 0; B < this.pairs.length; B++) {
			var C = this.pairs[B];
			if (C[0] == A) {
				this.pairs.splice(B, 1);
				return true
			}
		}
		return false
	}
};
dojo.script = {
	get : function(C) {
		var A = this._makeScriptDeferred(C);
		var B = A.ioArgs;
		dojo._ioAddQueryToUrl(B);
		this.attach(B.id, B.url);
		dojo._ioWatch(A, this._validCheck, this._ioCheck, this._resHandle);
		return A
	},
	attach : function(C, A) {
		var B = dojo.doc.createElement("script");
		B.type = "text/javascript";
		B.src = A;
		B.id = C;
		dojo.doc.getElementsByTagName("head")[0].appendChild(B)
	},
	remove : function(A) {
		Wtf.destroy(Wtf.get(A));
		if (this["jsonp_" + A]) {
			delete this["jsonp_" + A]
		}
	},
	_makeScriptDeferred : function(C) {
		var A = dojo._ioSetArgs(C, this._deferredCancel, this._deferredOk,
				this._deferredError);
		var B = A.ioArgs;
		B.id = "dojoIoScript" + (this._counter++);
		B.canDelete = false;
		if (C.callbackParamName) {
			B.query = B.query || "";
			if (B.query.length > 0) {
				B.query += "&"
			}
			B.query += C.callbackParamName + "=dojo.script.jsonp_" + B.id
					+ "._jsonpCallback";
			B.canDelete = true;
			A._jsonpCallback = this._jsonpCallback;
			this["jsonp_" + B.id] = A
		}
		return A
	},
	_deferredCancel : function(A) {
		A.canceled = true;
		if (A.ioArgs.canDelete) {
			dojo.script._deadScripts.push(A.ioArgs.id)
		}
	},
	_deferredOk : function(A) {
		if (A.ioArgs.canDelete) {
			dojo.script._deadScripts.push(A.ioArgs.id)
		}
		if (A.ioArgs.json) {
			return A.ioArgs.json
		} else {
			return A.ioArgs
		}
	},
	_deferredError : function(B, A) {
		if (A.ioArgs.canDelete) {
			if (B.dojoType == "timeout") {
				dojo.script.remove(A.ioArgs.id)
			} else {
				dojo.script._deadScripts.push(A.ioArgs.id)
			}
		}
		console.debug("dojo.script error", B);
		return B
	},
	_deadScripts : [],
	_counter : 1,
	_validCheck : function(B) {
		var A = dojo.script;
		var C = A._deadScripts;
		if (C && C.length > 0) {
			for ( var D = 0; D < C.length; D++) {
				A.remove(C[D])
			}
			dojo.script._deadScripts = []
		}
		return true
	},
	_ioCheck : function(dfd) {
		if (dfd.ioArgs.json) {
			return true
		}
		var checkString = dfd.ioArgs.args.checkString;
		if (checkString && eval("typeof(" + checkString + ") != 'undefined'")) {
			return true
		}
		return false
	},
	_resHandle : function(A) {
		if (dojo.script._ioCheck(A)) {
			A.callback(A)
		} else {
			A.errback(new Error("inconceivable dojo.script._resHandle error"))
		}
	},
	_jsonpCallback : function(A) {
		this.ioArgs.json = A
	}
};
dojo.Deferred = function(A) {
	this.chain = [];
	this.id = this._nextId();
	this.fired = -1;
	this.paused = 0;
	this.results = [ null, null ];
	this.canceller = A;
	this.silentlyCancelled = false
};
dojo.Deferred.prototype = {
	_nextId : (function() {
		var A = 1;
		return function() {
			return A++
		}
	})(),
	cancel : function() {
		var B;
		if (this.fired == -1) {
			if (this.canceller) {
				B = this.canceller(this)
			} else {
				this.silentlyCancelled = true
			}
			if (this.fired == -1) {
				if (!(B instanceof Error)) {
					var A = B;
					B = new Error("Deferred Cancelled");
					B.dojoType = "cancel";
					B.cancelResult = A
				}
				this.errback(B)
			}
		} else {
			if ((this.fired == 0) && (this.results[0] instanceof dojo.Deferred)) {
				this.results[0].cancel()
			}
		}
	},
	_resback : function(A) {
		this.fired = ((A instanceof Error) ? 1 : 0);
		this.results[this.fired] = A;
		this._fire()
	},
	_check : function() {
		if (this.fired != -1) {
			if (!this.silentlyCancelled) {
				throw new Error("already called!")
			}
			this.silentlyCancelled = false;
			return
		}
	},
	callback : function(A) {
		this._check();
		this._resback(A)
	},
	errback : function(A) {
		this._check();
		if (!(A instanceof Error)) {
			A = new Error(A)
		}
		this._resback(A)
	},
	addBoth : function(A, B) {
		var C = dojo.hitch(A, B);
		if (arguments.length > 2) {
			C = dojo.partial(C, arguments, 2)
		}
		return this.addCallbacks(C, C)
	},
	addCallback : function(A, B) {
		var C = dojo.hitch(A, B);
		if (arguments.length > 2) {
			C = dojo.partial(C, arguments, 2)
		}
		return this.addCallbacks(C, null)
	},
	addErrback : function(A, B) {
		var C = dojo.hitch(A, B);
		if (arguments.length > 2) {
			C = dojo.partial(C, arguments, 2)
		}
		return this.addCallbacks(null, C)
	},
	addCallbacks : function(A, B) {
		this.chain.push([ A, B ]);
		if (this.fired >= 0) {
			this._fire()
		}
		return this
	},
	_fire : function() {
		var D = this.chain;
		var G = this.fired;
		var C = this.results[G];
		var B = this;
		var A = null;
		while ((D.length > 0) && (this.paused == 0)) {
			var F = D.shift()[G];
			if (!F) {
				continue
			}
			try {
				C = F(C);
				G = ((C instanceof Error) ? 1 : 0);
				if (C instanceof dojo.Deferred) {
					A = function(H) {
						B._resback(H);
						B.paused--;
						if ((B.paused == 0) && (B.fired >= 0)) {
							B._fire()
						}
					};
					this.paused++
				}
			} catch (E) {
				console.debug(E);
				G = 1;
				C = E
			}
		}
		this.fired = G;
		this.results[G] = C;
		if ((A) && (this.paused)) {
			C.addBoth(A)
		}
	}
};
dojo.cometd = new function() {
	this.DISCONNECTED = "DISCONNECTED";
	this.CONNECTING = "CONNECTING";
	this.CONNECTED = "CONNECTED";
	this.DISCONNECTING = "DISCONNECING";
	this._initialized = false;
	this._connected = false;
	this._polling = false;
	this.connectionTypes = new dojo.AdapterRegistry(true);
	this.version = "1.0";
	this.minimumVersion = "0.9";
	this.clientId = null;
	this.messageId = 0;
	this.batch = 0;
	this._isXD = false;
	this.handshakeReturn = null;
	this.currentTransport = null;
	this.url = null;
	this.lastMessage = null;
	this._messageQ = [];
	this.handleAs = "json-comment-optional";
	this._advice = {};
	this._maxInterval = 30000;
	this._backoffInterval = 1000;
	this._deferredSubscribes = {};
	this._deferredUnsubscribes = {};
	this._subscriptions = [];
	this._extendInList = [];
	this._extendOutList = [];
	this.state = function() {
		return this._initialized ? (this._connected ? this.CONNECTED
				: this.CONNECTING) : (this._connected ? this.DISCONNECTING
				: this.DISCONNECTED)
	};
	this.init = function(M, L, D) {
		L = L || {};
		L.version = this.version;
		L.minimumVersion = this.minimumVersion;
		L.channel = "/meta/handshake";
		L.id = "" + this.messageId++;
		this.url = M;
		if (!this.url) {
			console.debug("no cometd root passed");
			return null
		}
		var K = "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$";
		var G = ("" + window.location).match(new RegExp(K));
		if (G[4]) {
			var I = G[4].split(":");
			var C = I[0];
			var F = I[1] || "80";
			G = this.url.match(new RegExp(K));
			if (G[4]) {
				I = G[4].split(":");
				var E = I[0];
				var J = I[1] || "80";
				this._isXD = ((E != C) || (J != F))
			}
		}
		if (!this._isXD) {
			if (L.ext) {
				if (L.ext["json-comment-filtered"] !== true
						&& L.ext["json-comment-filtered"] !== false) {
					L.ext["json-comment-filtered"] = true
				}
			} else {
				L.ext = {
					"json-comment-filtered" : true
				}
			}
		}
		L = this._extendOut(L);
		var H = {
			url : this.url,
			handleAs : this.handleAs,
			content : {
				"message" : Wtf.encode([ L ])
			},
			load : dojo.hitch(this, function(O) {
				this._finishInit(O)
			}),
			error : dojo.hitch(this, function(O) {
				console.debug("handshake error!:", O);
				this._finishInit([ {} ])
			})
		};
		if (D) {
			Wtf.apply(H, D)
		}
		this._props = L;
		for ( var N in this._subscriptions) {
			for ( var B in this._subscriptions[N]) {
				if (this._subscriptions[N][B].topic) {
					dojo.unsubscribe(this._subscriptions[N][B].topic)
				}
			}
		}
		this._messageQ = [];
		this._subscriptions = [];
		this._initialized = true;
		this.batch = 0;
		this.startBatch();
		var A;
		if (this._isXD) {
			H.callbackParamName = "jsonp";
			A = dojo.script.get(H)
		} else {
			A = dojo.xhrPost(H)
		}
		dojo.publish("/cometd/meta", [ {
			cometd : this,
			action : "handshake",
			successful : true,
			state : this.state()
		} ]);
		return A
	};
	this.publish = function(C, D, A) {
		var B = {
			data : D,
			channel : C
		};
		if (A) {
			Wtf.apply(B, A)
		}
		this._sendMessage(B)
	};
	this.subscribe = function(G, E, H) {
		if (E) {
			var F = "/cometd" + G;
			var D = this._subscriptions[F];
			if (!D || D.length == 0) {
				D = [];
				this._sendMessage({
					channel : "/meta/subscribe",
					subscription : G
				});
				var A = this._deferredSubscribes;
				A[G] = new dojo.Deferred();
				if (A[G]) {
					A[G].cancel();
					delete A[G]
				}
			}
			for ( var C in D) {
				if (D[C].objOrFunc === E
						&& (!D[C].funcName && !H || D[C].funcName == H)) {
					return null
				}
			}
			var B = dojo.subscribe(F, E, H);
			D.push({
				topic : B,
				objOrFunc : E,
				funcName : H
			});
			this._subscriptions[F] = D
		}
		return this._deferredSubscribes[G]
	};
	this.unsubscribe = function(F, D, G) {
		var E = "/cometd" + F;
		var B = this._subscriptions[E];
		if (!B || B.length == 0) {
			return null
		}
		var C = 0;
		for ( var A in B) {
			var H = B[A];
			if ((!D)
					|| (H.objOrFunc === D && (!H.funcName && !G || H.funcName == G))) {
				dojo.unsubscribe(B[A].topic);
				delete B[A]
			} else {
				C++
			}
		}
		if (C == 0) {
			delete this._subscriptions[E];
			this._sendMessage({
				channel : "/meta/unsubscribe",
				subscription : F
			});
			this._deferredUnsubscribes[F] = new dojo.Deferred();
			if (this._deferredSubscribes[F]) {
				this._deferredSubscribes[F].cancel();
				delete this._deferredSubscribes[F]
			}
		}
		return this._deferredUnsubscribes[F]
	};
	this.disconnect = function() {
		for ( var B in this._subscriptions) {
			for ( var A in this._subscriptions[B]) {
				if (this._subscriptions[B][A].topic) {
					dojo.unsubscribe(this._subscriptions[B][A].topic)
				}
			}
		}
		this._subscriptions = [];
		this._messageQ = [];
		if (this._initialized && this.currentTransport) {
			this._initialized = false;
			this.currentTransport.disconnect()
		}
		if (!this._polling) {
			this._connected = false;
			dojo.publish("/cometd/meta", [ {
				cometd : this,
				action : "connect",
				successful : false,
				state : this.state()
			} ])
		}
		this._initialized = false;
		dojo.publish("/cometd/meta", [ {
			cometd : this,
			action : "disconnect",
			successful : true,
			state : this.state()
		} ])
	};
	this.subscribed = function(B, A) {
	};
	this.unsubscribed = function(B, A) {
	};
	this.tunnelInit = function(A, B) {
	};
	this.tunnelCollapse = function() {
	};
	this._backoff = function() {
		if (!this._advice || !this._advice.interval) {
			this._advice = {
				reconnect : "retry",
				interval : 0
			}
		}
		if (this._advice.interval < this._maxInterval) {
			this._advice.interval += this._backoffInterval
		}
	};
	this._finishInit = function(A) {
		A = A[0];
		this.handshakeReturn = A;
		if (A["advice"]) {
			this._advice = A.advice
		}
		var B = A.successful ? A.successful : false;
		if (A.version < this.minimumVersion) {
			console.debug("cometd protocol version mismatch. We wanted",
					this.minimumVersion, "but got", A.version);
			B = false;
			this._advice.reconnect = "none"
		}
		if (B) {
			this.currentTransport = this.connectionTypes.match(
					A.supportedConnectionTypes, A.version, this._isXD);
			this.currentTransport._cometd = this;
			this.currentTransport.version = A.version;
			this.clientId = A.clientId;
			this.tunnelInit = dojo.hitch(this.currentTransport, "tunnelInit");
			this.tunnelCollapse = dojo.hitch(this.currentTransport,
					"tunnelCollapse");
			this.currentTransport.startup(A)
		}
		dojo.publish("/cometd/meta", [ {
			cometd : this,
			action : "handshook",
			successful : B,
			state : this.state()
		} ]);
		if (!B) {
			console.debug("cometd init failed");
			this._backoff();
			if (this._advice && this._advice["reconnect"] == "none") {
				console.debug("cometd reconnect: none")
			} else {
				if (this._advice && this._advice["interval"]
						&& this._advice.interval > 0) {
					setTimeout(dojo.hitch(this, function() {
						this.init(this.url, this._props)
					}), this._advice.interval)
				} else {
					this.init(this.url, this._props)
				}
			}
		}
	};
	this._extendIn = function(B) {
		var A = B;
		Wtf.each(dojo.cometd._extendInList, function(C) {
			var D = C(A);
			if (D) {
				A = D
			}
		});
		return A
	};
	this._extendOut = function(B) {
		var A = B;
		Wtf.each(dojo.cometd._extendOutList, function(C) {
			var D = C(A);
			if (D) {
				A = D
			}
		});
		return A
	};
	this.deliver = function(A) {
		Wtf.each(A, this._deliver, this);
		return A
	};
	this._deliver = function(C) {
		C = this._extendIn(C);
		if (!C["channel"]) {
			if (C["success"] !== true) {
				console.debug("cometd error: no channel for message!", C);
				return
			}
		}
		this.lastMessage = C;
		if (C.advice) {
			this._advice = C.advice
		}
		var A = null;
		if ((C["channel"]) && (C.channel.length > 5)
				&& (C.channel.substr(0, 5) == "/meta")) {
			switch (C.channel) {
			case "/meta/connect":
				if (C.successful && !this._connected) {
					this._connected = this._initialized;
					this.endBatch()
				} else {
					if (!this._initialized) {
						this._connected = false
					}
				}
				dojo.publish("/cometd/meta", [ {
					cometd : this,
					action : "connect",
					successful : C.successful,
					state : this.state()
				} ]);
				break;
			case "/meta/subscribe":
				A = this._deferredSubscribes[C.subscription];
				if (!C.successful) {
					if (A) {
						A.errback(new Error(C.error))
					}
					return
				}
				dojo.cometd.subscribed(C.subscription, C);
				if (A) {
					A.callback(true)
				}
				break;
			case "/meta/unsubscribe":
				A = this._deferredUnsubscribes[C.subscription];
				if (!C.successful) {
					if (A) {
						A.errback(new Error(C.error))
					}
					return
				}
				this.unsubscribed(C.subscription, C);
				if (A) {
					A.callback(true)
				}
				break
			}
		}
		this.currentTransport.deliver(C);
		if (C.data) {
			try {
				var B = "/cometd" + C.channel;
				dojo.publish(B, [ C ])
			} catch (D) {
				console.debug(D)
			}
		}
	};
	this._sendMessage = function(A) {
		if (this.currentTransport && this._connected && this.batch == 0) {
			return this.currentTransport.sendMessages([ A ])
		} else {
			this._messageQ.push(A);
			return null
		}
	};
	this.startBatch = function() {
		this.batch++
	};
	this.endBatch = function() {
		if (--this.batch <= 0 && this.currentTransport && this._connected) {
			this.batch = 0;
			var A = this._messageQ;
			this._messageQ = [];
			if (A.length > 0) {
				this.currentTransport.sendMessages(A)
			}
		}
	};
	this._onUnload = function() {
		dojo.addOnUnload(dojo.cometd, "disconnect")
	}
};
dojo.cometd.longPollTransport = new function() {
	this._connectionType = "long-polling";
	this._cometd = null;
	this.check = function(C, A, B) {
		return ((!B) && (C.indexOf("long-polling") >= 0))
	};
	this.tunnelInit = function() {
		var A = {
			channel : "/meta/connect",
			clientId : this._cometd.clientId,
			connectionType : this._connectionType,
			id : "" + this._cometd.messageId++
		};
		A = this._cometd._extendOut(A);
		this.openTunnelWith({
			message : Wtf.encode([ A ])
		})
	};
	this.tunnelCollapse = function() {
		if (!this._cometd._initialized) {
			return
		}
		if (this._cometd._advice) {
			if (this._cometd._advice["reconnect"] == "none") {
				return
			}
			if ((this._cometd._advice["interval"])
					&& (this._cometd._advice.interval > 0)) {
				setTimeout(dojo.hitch(this, function() {
					this._connect()
				}), this._cometd._advice.interval)
			} else {
				this._connect()
			}
		} else {
			this._connect()
		}
	};
	this._connect = function() {
		if (!this._cometd._initialized) {
			return
		}
		if (this._cometd._polling) {
			console.debug("wait for poll to complete or fail");
			return
		}
		if ((this._cometd._advice)
				&& (this._cometd._advice["reconnect"] == "handshake")) {
			this._cometd._connected = false;
			this._initialized = false;
			this._cometd.init(this._cometd.url, this._cometd._props)
		} else {
			if (this._cometd._connected) {
				var A = {
					channel : "/meta/connect",
					connectionType : this._connectionType,
					clientId : this._cometd.clientId,
					id : "" + this._cometd.messageId++
				};
				A = this._cometd._extendOut(A);
				this.openTunnelWith({
					message : Wtf.encode([ A ])
				})
			}
		}
	};
	this.deliver = function(A) {
	};
	this.openTunnelWith = function(B, A) {
		this._cometd._polling = true;
		var C = dojo.xhrPost({
			url : (A || this._cometd.url),
			content : B,
			handleAs : this._cometd.handleAs,
			load : dojo.hitch(this, function(D) {
				this._cometd._polling = false;
				this._cometd.deliver(D);
				this.tunnelCollapse()
			}),
			error : dojo.hitch(this, function(D) {
				this._cometd._polling = false;
				console.debug("tunnel opening failed:", D);
				dojo.publish("/cometd/meta", [ {
					cometd : this._cometd,
					action : "connect",
					successful : false,
					state : this._cometd.state()
				} ]);
				this._cometd._backoff();
				this.tunnelCollapse()
			})
		})
	};
	this.sendMessages = function(B) {
		for ( var A = 0; A < B.length; A++) {
			B[A].clientId = this._cometd.clientId;
			B[A].id = "" + this._cometd.messageId++;
			B[A] = this._cometd._extendOut(B[A])
		}
		return dojo.xhrPost({
			url : this._cometd.url,
			handleAs : this._cometd.handleAs,
			load : dojo.hitch(this._cometd, "deliver"),
			content : {
				message : Wtf.encode(B)
			}
		})
	};
	this.startup = function(A) {
		if (this._cometd._connected) {
			return
		}
		this.tunnelInit()
	};
	this.disconnect = function() {
		var A = {
			channel : "/meta/disconnect",
			clientId : this._cometd.clientId,
			id : "" + this._cometd.messageId++
		};
		A = this._cometd._extendOut(A);
		dojo.xhrPost({
			url : this._cometd.url,
			handleAs : this._cometd.handleAs,
			content : {
				message : Wtf.encode([ A ])
			}
		})
	}
};
dojo.cometd.callbackPollTransport = new function() {
	this._connectionType = "callback-polling";
	this._cometd = null;
	this.check = function(C, A, B) {
		return (C.indexOf("callback-polling") >= 0)
	};
	this.tunnelInit = function() {
		var A = {
			channel : "/meta/connect",
			clientId : this._cometd.clientId,
			connectionType : this._connectionType,
			id : "" + this._cometd.messageId++
		};
		A = this._cometd._extendOut(A);
		this.openTunnelWith({
			message : Wtf.encode([ A ])
		})
	};
	this.tunnelCollapse = dojo.cometd.longPollTransport.tunnelCollapse;
	this._connect = dojo.cometd.longPollTransport._connect;
	this.deliver = dojo.cometd.longPollTransport.deliver;
	this.openTunnelWith = function(B, A) {
		this._cometd._polling = true;
		dojo.script.get({
			load : dojo.hitch(this, function(C) {
				this._cometd._polling = false;
				this._cometd.deliver(C);
				this.tunnelCollapse()
			}),
			error : dojo.hitch(this, function(C) {
				this._cometd._polling = false;
				console.debug("tunnel opening failed:", C);
				dojo.publish("/cometd/meta", [ {
					cometd : this._cometd,
					action : "connect",
					successful : false,
					state : this._cometd.state()
				} ]);
				this._cometd._backoff();
				this.tunnelCollapse()
			}),
			url : (A || this._cometd.url),
			content : B,
			callbackParamName : "jsonp"
		})
	};
	this.sendMessages = function(C) {
		for ( var B = 0; B < C.length; B++) {
			C[B].clientId = this._cometd.clientId;
			C[B].id = "" + this._cometd.messageId++;
			C[B] = this._cometd._extendOut(C[B])
		}
		var A = {
			url : this._cometd.url,
			load : dojo.hitch(this._cometd, "deliver"),
			callbackParamName : "jsonp",
			content : {
				message : Wtf.encode(C)
			}
		};
		return dojo.script.get(A)
	};
	this.startup = function(A) {
		if (this._cometd._connected) {
			return
		}
		this.tunnelInit()
	};
	this.disconnect = dojo.cometd.longPollTransport.disconnect;
	this.disconnect = function() {
		var A = {
			channel : "/meta/disconnect",
			clientId : this._cometd.clientId,
			id : "" + this._cometd.messageId++
		};
		A = this._cometd._extendOut(A);
		dojo.script.get({
			url : this._cometd.url,
			callbackParamName : "jsonp",
			content : {
				message : Wtf.encode([ A ])
			}
		})
	}
};
dojo.cometd.connectionTypes.register("long-polling",
		dojo.cometd.longPollTransport.check, dojo.cometd.longPollTransport);
dojo.cometd.connectionTypes.register("callback-polling",
		dojo.cometd.callbackPollTransport.check,
		dojo.cometd.callbackPollTransport);
dojo.addOnUnload(dojo.cometd, "_onUnload");
Wtf.WtfCustomPanel = function(A) {
	Wtf.WtfCustomPanel.superclass.constructor.call(this, A);
	this.oldinnerHtml = "";
	this.o1 = "";
	this.o2 = "";
	this.o3 = "";
	this.cmbcnt = 1;
	this.config1.emptyText = "No result found";
	this.config1.tableClassName = "datagridonDB";
	this.config1.tableHeader = ""
};
Wtf
		.extend(
				Wtf.WtfCustomPanel,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.WtfCustomPanel.superclass.onRender.call(this, A);
						this.header.replaceClass("x-panel-header",
								"portlet-panel-header");
						for ( var B = 0; B < this.config1.length; B++) {
							this.count = B;
							this.newObj = this.config1[B];
							this.callRequest()
						}
					},
					writeTemplateToBody : function(G, F, I, E, D) {
						var C = G;
						var A = "";
						if (this.config1.length == 4) {
							A = this.o1 + this.o2 + this.o3 + C;
							A = '<div style="background-color:#DFE8F6;padding:7px;float:left;width:99%">'
									+ this.o1
									+ this.o2
									+ this.o3
									+ "</td><td><div class='search_div' onclick='showResults(\""
									+ this.id
									+ "\")'>Search</div></td></tr></tbody></table>"
									+ C + "</div>";
							if (!this.o1) {
								this.o1 = F
							} else {
								if (!this.o2) {
									this.o2 = F
								} else {
									if (!this.o3) {
										this.o3 = F
									}
								}
							}
						} else {
							if (this.config1.length > 1) {
								var B = this.oldinnerHtml;
								A = '<div style="background-color:#DFE8F6;padding:7px;float:left;width:97%">'
										+ ((this.newObj.isSearch) ? this
												.addSearchBar1() : "")
										+ '<div style="background-color:#ffffff;padding:1%;float:left;width:95.5%">'
										+ B
										+ F
										+ ((this.newObj.isPaging) ? this
												.changePagingBar(D) : "")
										+ "</div></div>"
							} else {
								A = C
							}
						}
						var H = new Wtf.Template(A);
						this.oldinnerHtml += F;
						H.overwrite(this.body)
					},
					addSearchBar1 : function(C) {
						var A = "";
						if (C) {
							A = "value = " + C
						}
						var B = this.id;
						return ('<div style="height:24px;width:97.5%;background-image:url(images/search-field-bg.gif);margin-bottom:6px;"><div id="searchdiv"'
								+ B
								+ '" class="search_div" onclick="btnpressed(\''
								+ B
								+ '\')">Search</div><div class="searchspacer">&nbsp;</div><div style="width: 85%;overflow:hidden;"><input '
								+ A
								+ " onkeypress=\"javascript:if(event.keyCode==13)btnpressed('"
								+ B
								+ '\');" style="background-color: transparent;float:left;border:none; padding-top:3px; height:21px; border-left:solid 1px #a0bcda;width:100%;" type="text" id="search'
								+ B + '" /></div></div>')
					},
					paging : function(E, C) {
						var B = this.id;
						if (!C) {
							C = ""
						}
						var F = this.panelcount;
						if (this.panelcount > this.totalCount) {
							F = this.totalCount
						}
						var D = "<span id='"
								+ B
								+ "pagetext0' style='float:left;padding-top:3px;'> 1 - "
								+ F + " of " + this.totalCount + "</span>";
						var A = '<div id="pageinfobar' + B
								+ '" class="portlet-paging">' + D;
						if (E > 1) {
							A += '<span wtf:qtip="Older" id="'
									+ B
									+ 'nextpage0" class="pagination-div next-pagination" onclick="pagingRedirect(\''
									+ B + "',1," + this.count + ",'" + C + "',"
									+ this.panelcount + ');">1</span>';
							A += '<span wtf:qtip="Oldest" id="'
									+ B
									+ 'lastpage0" class="pagination-div last-pagination" onclick="pagingRedirect(\''
									+ B + "'," + (E - 1) + "," + this.count
									+ ",'" + C + "'," + this.panelcount
									+ ');">1</span>'
						}
						A = A + "</div>";
						return (A)
					},
					changePagingBar : function(C) {
						var B = this.id;
						var E = Math.ceil(this.totalCount / this.panelcount);
						var G = (C * this.panelcount) + 1;
						var F = G + this.panelcount - 1;
						if (F > this.totalCount) {
							F = this.totalCount
						}
						var D = "<span id='"
								+ B
								+ "pagetext"
								+ C
								+ "' style='float:left;padding:3px 0px 0px 6px;'> "
								+ G + " - " + F + " of " + this.totalCount
								+ "</span>";
						var A = '<div id="pageinfobar'
								+ B
								+ '" style="float:left;padding-right:7px;background-color:#f1f1f1;width:98%;">';
						if (E > 1 && C == 0) {
							A += D;
							A += '<span wtf:qtip="Older" id="'
									+ B
									+ "nextpage"
									+ C
									+ '" class="pagination-div next-pagination" onclick="pagingRedirect(\''
									+ B + "'," + (C + 1) + "," + this.count
									+ ",''," + this.panelcount + ');">1</span>';
							A += '<span wtf:qtip="Oldest" id="'
									+ B
									+ "lastpage"
									+ C
									+ '" class="pagination-div last-pagination" onclick="pagingRedirect(\''
									+ B + "'," + (E - 1) + "," + this.count
									+ ",''," + this.panelcount + ');">1</span>'
						} else {
							if (C == (E - 1)) {
								A += '<span wtf:qtip="Newest" id="'
										+ B
										+ "firstpage"
										+ C
										+ '" class="pagination-div first-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (0) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>';
								A += '<span wtf:qtip="Newer" id="'
										+ B
										+ "prevpage"
										+ C
										+ '" class="pagination-div prev-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (C - 1) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>';
								A += D
							} else {
								A += '<span wtf:qtip="Newest" id="'
										+ B
										+ "firstpage"
										+ C
										+ '" class="pagination-div first-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (0) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>';
								A += '<span wtf:qtip="Newer" id="'
										+ B
										+ "prevpage"
										+ C
										+ '" class="pagination-div prev-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (C - 1) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>';
								A += D;
								A += '<span wtf:qtip="Older" id="'
										+ B
										+ "nextpage"
										+ C
										+ '" class="pagination-div next-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (C + 1) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>';
								A += '<span wtf:qtip="Oldest" id="'
										+ B
										+ "lastpage"
										+ C
										+ '" class="pagination-div last-pagination" onclick="pagingRedirect(\''
										+ B + "'," + (E - 1) + "," + this.count
										+ ",''," + this.panelcount
										+ ');">1</span>'
							}
						}
						A = A + "</div>";
						return (A)
					},
					callRequest : function(C, M, G) {
						this.panelcount = (this.newObj.numRecs) ? this.newObj.numRecs
								: this.panelcount;
						var B = this.newObj.headerHtml;
						var K = this.newObj.template;
						var I = this.newObj.xtooltip;
						var J = this.newObj.formatField;
						var L = this.newObj.prefixImage;
						var H = this.newObj.imageField;
						var E = this.newObj.formatFileSize;
						var A = this.newObj.quoteFormatField;
						var O = "";
						var N = "";
						var Q = "";
						var P = "";
						var F = "";
						var D = this.newObj.isCombo;
						if (this.newObj.emptyText != null) {
							F = this.emptyText
						}
						if (this.newObj.tool_tip != null) {
							O = this.newObj.tool_tip.tpl_tool_tip;
							N = this.newObj.tool_tip.autoHide;
							Q = this.newObj.tool_tip.closable;
							P = this.newObj.tool_tip.height
						}
						Wtf.Ajax
								.requestEx(
										{
											url : (C) ? C : this.newObj.url
													+ "?limit="
													+ this.panelcount
													+ "&start=0&searchString=",
											params : this.newObj.paramsObj
										},
										this,
										function(R, U) {
											var X = "";
											var V = R;
											if (I && J) {
												this.newObj.formatField = J;
												this.formatSpecifiedField(V)
											}
											if (I && A) {
												this.newObj.quoteFormatField = A;
												this.formatquoteField(V)
											}
											if (L && H) {
												this.newObj.imageField = H;
												this.formatFileName(V)
											}
											if (E) {
												this.formatFileSize(V)
											}
											if (this.id == "DSBMyWorkspaces"
													|| this.id == "DSBAlerts"
													|| this.id == "DSBBookmarks"
													|| this.id == "DSBSavedSearches") {
												var W = this.getDataString(V,
														K, B, O, N, Q, P, F, D);
												this.totalCount = V.count;
												X = this.getPagingString(W, V,
														M, G);
												var T = Math.ceil(V.count
														/ this.panelcount);
												this.writeTemplateToBody(X, W,
														M, T, G);
												K = "";
												this.togglePageCss(this.id, G);
												if (this.cmb3) {
													document
															.getElementById("cmb3").selectedIndex = this.cmb3
												}
												if (C && this.isSearch) {
													document
															.getElementById("search"
																	+ this.id).value = M
												}
												if (this.storeflag) {
													this.storefunction.call()
												}
												if (this.id == "DSBMyWorkspaces") {
													document
															.getElementById("refreshiconupdates").className = "refreshWidgets";
													document
															.getElementById("refreshiconupdates").title = WtfGlobal
															.getLocaleText("hrms.common.refresh.icon")
												}
												if (this.id == "DSBSavedSearches") {
													document
															.getElementById("refreshiconsavesearch").className = "refreshWidgets";
													document
															.getElementById("refreshiconsavesearch").title = WtfGlobal
															.getLocaleText("hrms.common.refresh.icon")
												}
												if (this.id == "DSBAlerts") {
													document
															.getElementById("refreshiconalerts").className = "refreshWidgets";
													document
															.getElementById("refreshiconalerts").title = WtfGlobal
															.getLocaleText("hrms.common.refresh.icon")
												}
											} else {
												this.body.dom.innerHTML = '<div class="portlet-body"><div class ="hrmsDashboardThumbnailPortlet" style="background-color:#ffffff;padding:1%;float:left;width:95.5%" id="hrmsDashboardThumbnailPortlet'
														+ this.id
														+ '"></div></div>';
												for ( var S = 0; S < V.data.length; S++) {
													new Wtf.emailTemplateThumbnail(
															{
																tName : V.data[S].name,
																thumbnail : V.data[S].img,
																tqtip : V.data[S].qtip,
																tfun1 : V.data[S].onclick,
																tempRec : S,
																scope : this,
																listeners : {
																	"templateSelected" : this.selectTemplate
																},
																renderTo : "hrmsDashboardThumbnailPortlet"
																		+ this.id
															})
												}
											}
										}, function(R, S) {
											K = ""
										})
					},
					selectTemplate : function(obj) {
						eval(obj.tfun1)
					},
					getDataString : function(F, G, A, J, K, L, M, D, B) {
						var I = "";
						if (this.newObj.isTable == true) {
							I = I
									+ "<table class='"
									+ this.newObj.tableClassName
									+ "' border='0' cellspacing=0 width='100%' style='float:left;margin:0px;'>";
							if (this.newObj.tableHeader != null) {
								I = I + this.newObj.tableHeader
							}
						} else {
							I = I + "<div class='content-wrapper'>"
						}
						I = I + A;
						if (B) {
							I = I
									+ '<select id="cmb'
									+ this.cmbcnt
									+ '" style="width:200px;margin-right:3px;margin-left:5px;" onchange="filterBrands('
									+ this.cmbcnt
									+ ')"><option  value="">Select Value --<option>';
							this.cmbcnt++
						}
						for ( var E = 0; E < F.data.length; E++) {
							if (this.newObj.isToolTip == true) {
								var H = "KCUser" + F.data[E].userid;
								createtooltip1(H, J, K, L, M)
							}
							if (F.data.length == 0) {
								I = D
							}
							if (this.pagingflag) {
								if (F.count == -1) {
									this.config1[0].isPaging = false;
									this.config1[0].WorkspaceLinks = "";
									if (this.timeid) {
										clearTimeout(this.timeid)
									}
								} else {
									this.config1[0].isPaging = true;
									this.config1[0].WorkspaceLinks = signoutLinks;
									if (this.timeid) {
										clearTimeout(this.timeid)
									}
									var C = parseInt(Wtf.GS.td, 10);
									var N = C * 60 * 1000;
									this.timeid = this.doSearch.defer(N, this,
											[ this.url, "" ])
								}
							}
							I = I + G.applyTemplate(F.data[E])
						}
						if (B) {
							I = I + "</select></div>"
						} else {
							if (this.newObj.isTable == true) {
								I = I + "</table><br style='clear:both'/>"
							} else {
								I = I + "</div><br style='clear:both'/>"
							}
						}
						return I
					},
					getPagingString : function(G, F, C, B) {
						this.panelcount = (this.newObj.numRecs) ? this.newObj.numRecs
								: this.panelcount;
						var A = "";
						if (F.count != 0) {
							var D = " ";
							if (this.newObj.WorkspaceLinks != null) {
								D = this.newObj.WorkspaceLinks
							}
							var E = Math.ceil(F.count / this.panelcount);
							A = '<div class="portlet-body">'
									+ ((this.newObj.isSearch) ? this
											.addSearchBar1(C) : "")
									+ '<div style="background-color:#ffffff;padding:1%;float:left;width:95.5%">'
									+ G
									+ ((this.newObj.isPaging) ? (B === undefined ? this
											.paging(E, C)
											: this.changePagingBar(B))
											: "") + "</div>" + D + "</div>"
						} else {
							if (this.newObj.emptyText != null) {
								D = " ";
								if (this.newObj.WorkspaceLinks != null) {
									D = this.newObj.WorkspaceLinks
								}
								A = '<div class="portlet-body">'
										+ ((this.newObj.isSearch) ? this
												.addSearchBar1() : "")
										+ '<div style="background-color:#ffffff;padding:1%;float:left;width:95.5%">'
										+ this.newObj.emptyText + "</div>" + D
										+ "</div>"
							}
						}
						return A
					},
					doPaging : function(C, E, D, A, B) {
						C += "?limit=" + this.panelcount + "&start=" + E
								+ "&searchString=" + D;
						this.callRequest(C, D, A)
					},
					togglePageCss : function(D, C) {
						var E = document.getElementById(D + C);
						var B;
						for ( var A = 0; A < C; A++) {
							B = document.getElementById(D + (A));
							if (B) {
								B.className = "pagination-div deactive-pagination"
							}
						}
						if (E) {
							E.className = "pagination-div active-pagination"
						}
					},
					doSearch : function(B, C) {
						var E = this.newObj.url;
						var A = E.split("?");
						var D = A[0] + "?limit=" + this.panelcount
								+ "&start=0&searchString=" + C;
						this.callRequest(D, C)
					},
					formatSpecifiedField : function(A) {
						for (i = 0; i < A.data.length; i++) {
							for (j = 0; j < this.newObj.formatField.length; j++) {
								A.data[i][this.newObj.formatField[j]] = getFormattedDate(A.data[i][this.newObj.formatField[j]])
							}
						}
					},
					formatquoteField : function(A) {
						for (i = 0; i < A.data.length; i++) {
							for (j = 0; j < this.newObj.quoteFormatField.length; j++) {
								A.data[i][this.newObj.quoteFormatField[j]] = A.data[i][this.newObj.quoteFormatField[j]]
										.adjustQuotes()
							}
						}
					},
					formatFileName : function(C) {
						for ( var B = 0; B < C.data.length; B++) {
							if (C.data[B].docName != undefined
									&& C.data[B].docName != null
									&& C.data[B].docName != "") {
								var A = getimage(C.data[B].docName);
								C.data[B].imageClass = A
							}
						}
					},
					formatFileSize : function(A) {
						A.data[0].totalSize = getFileSize(A.data[0].totalSize)
					}
				});
function showResults(A) {
	var C = "";
	var B = Wtf.getCmp(A);
	B.cmb3 = document.getElementById("cmb3").selectedIndex;
	if ((document.getElementById("cmb1"))
			&& (document.getElementById("cmb1").value != "")) {
		C = C + document.getElementById("cmb1").value + ","
	}
	if ((document.getElementById("cmb2"))
			&& (document.getElementById("cmb2").value != "")) {
		C = C + document.getElementById("cmb2").value + ","
	}
	if ((document.getElementById("cmb3"))
			&& (document.getElementById("cmb3").value != "")) {
		C = C + document.getElementById("cmb3").value + ","
	}
	Wtf.getCmp("DSBKnowledgeCampus").doSearch(
			"jspfiles/knowledgeUni/workspace.jsp", C)
}
function filterBrands(A) {
	if ((A == 1) && (document.getElementById("cmb1"))) {
		Wtf.Ajax.requestEx({
			url : "jspfiles/knowledgeUni/CenterManagement.jsp",
			params : {
				flag : 119,
				segmentname : document.getElementById("cmb1").value
			}
		}, this, function(B, G) {
			if (B.success) {
				var H = document.getElementById("cmb2");
				H.innerHTML = "";
				var E = getOptionElement("Select Value --", "");
				Wtf.isIE ? H.add(E) : H.appendChild(E);
				E = getOptionElement("", "");
				Wtf.isIE ? H.add(E) : H.appendChild(E);
				for ( var D = 0; D < B.data.length; D++) {
					var F = B.data[D].name;
					var C = getOptionElement(F, F);
					Wtf.isIE ? H.add(C) : H.appendChild(C)
				}
			} else {
				msgBoxShow(6, 1)
			}
		}, function() {
			msgBoxShow(6, 1)
		})
	}
}
function getOptionElement(C, B) {
	var A = document.createElement("option");
	A.value = B;
	A.text = C;
	return A
}
Wtf.emailTemplateThumbnail = function(A) {
	Wtf.apply(this, A);
	this.addEvents({
		"templateSelected" : true
	});
	Wtf.emailTemplateThumbnail.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.emailTemplateThumbnail, Wtf.Component, {
	onRender : function(B) {
		Wtf.emailTemplateThumbnail.superclass.onRender.call(this, B);
		this.elDom = Wtf.get(this.renderTo).createChild({
			tag : "div",
			cls : "templateThumbCont templateThumbContainer"
		});
		this.templateImg = document.createElement("img");
		this.templateImg.width = "70";
		this.templateImg.height = "63";
		this.templateImg.src = this.thumbnail;
		this.templateImg.setAttribute("wtf:qtip", this.tqtip);
		var A = document.createElement("div");
		var C = document.createElement("center");
		this.nameSpan = document.createElement("span");
		A.appendChild(this.nameSpan);
		this.nameSpan.className = "templateThumbSpan";
		this.nameSpan.setAttribute("wtf:qtip", this.tqtip);
		A.className = "templateNameDiv";
		this.templateImg.className = "templateThumbImg";
		this.nameSpan.innerHTML = this.tName;
		this.elDom.addListener("click", this.fireSelect, this);
		C.appendChild(this.templateImg);
		this.elDom.appendChild(C);
		this.elDom.appendChild(A)
	},
	setName : function(A) {
		this.nameSpan.innerHTML = A
	},
	setImage : function(A) {
		this.templateImg.src = A
	},
	fireSelect : function() {
		this.fireEvent("templateSelected", this)
	},
	selectTemplate : function() {
		this.elDom.addClass("selectedTemplate");
		this.elDom.removeClass("templateThumbContainer")
	},
	deselectTemplate : function() {
		this.elDom.removeClass("selectedTemplate");
		this.elDom.addClass("templateThumbContainer")
	}
});
Wtf.KwlEditorGridPanel = function(C) {
	Wtf.apply(this, C);
	if (!this.id) {
		this.id = "id" + Math.random() * 100000
	}
	this.emptext = this.searchEmptyText ? this.searchEmptyText : "Search here ";
	if (this.serverSideSearch) {
		this.quickSearchTF = new Wtf.KWLTagSearch({
			id : "Quick" + this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext
		});
		if (this.bbar) {
			var E = "-";
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D + 1] = this.tmpBottom[D]
			}
			this.b1[0] = E;
			this.pag = new Wtf.PagingSearchToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			this.pag = new Wtf.PagingSearchToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	} else {
		this.quickSearchTF = new Wtf.wtfQuickSearch({
			id : "Quick" + this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext,
			field : this.searchField
		});
		if (this.bbar) {
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D] = this.tmpBottom[D]
			}
			this.pag = new Wtf.PagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			this.pag = new Wtf.PagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	}
	if (!this.nopaging) {
		this.bbar = this.pag
	}
	this.searchLabel = this.searchLabel ? this.searchLabel : WtfGlobal
			.getLocaleText("hrms.common.QuickSearch");
	this.searchLabelSeparator = this.searchLabelSeparator ? this.searchLabelSeparator
			: " : ";
	this.searchLabel = this.searchLabel + this.searchLabelSeparator;
	if (this.tbar) {
		this.elements += ",tbar";
		if (typeof this.tbar == "object") {
			this.tmptoolbar = this.tbar;
			this.topToolbar1 = new Array();
			var A = this.tmptoolbar.length;
			var D = 0;
			var B = 2;
			for (D = 0; D < A; D++) {
				this.topToolbar1[B++] = this.tmptoolbar[D]
			}
			this.topToolbar1[0] = this.searchLabel;
			this.topToolbar1[1] = this.quickSearchTF;
			this.topToolbar = this.topToolbar1
		}
		delete this.tbar
	} else {
		this.tbar = [ this.searchLabel, this.quickSearchTF ]
	}
	this.store.on("load", function() {
		this.quickSearchTF.StorageChanged(this.store)
	}, this);
	this.store.on("datachanged", function() {
		if (this.serverSideSearch) {
			if (this.pPageSizeObj.combo) {
				this.quickSearchTF.setPage(this.pPageSizeObj.combo.value)
			} else {
				this.quickSearchTF.setPage(15)
			}
		}
	}, this);
	this.doLayout();
	Wtf.KwlEditorGridPanel.superclass.constructor.call(this)
};
Wtf.extend(Wtf.KwlEditorGridPanel, Wtf.grid.EditorGridPanel, {
	layout : "fit",
	onRender : function(A) {
		Wtf.KwlEditorGridPanel.superclass.onRender.call(this, A)
	}
});
Wtf.wtfQuickSearch = function(A) {
	Wtf.wtfQuickSearch.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.wtfQuickSearch, Wtf.form.TextField, {
	Store : null,
	StorageArray : null,
	initComponent : function() {
		Wtf.wtfQuickSearch.superclass.initComponent.call(this);
		this.addEvents({
			"SearchComplete" : true
		})
	},
	onRender : function(B, A) {
		Wtf.wtfQuickSearch.superclass.onRender.call(this, B, A);
		this.el.dom.onkeyup = this.onKeyUp.createDelegate(this)
	},
	onKeyUp : function(B) {
		if (this.Store) {
			if (this.getValue() != "") {
				this.Store.removeAll();
				var A = 0;
				while (A < this.StorageArray.length) {
					var C = new RegExp("^" + this.getValue() + ".*$|\\s"
							+ this.getValue() + ".*$", "i");
					if (C.test(this.StorageArray[A].get(this.field))) {
						this.Store.add(this.StorageArray[A])
					}
					A++
				}
			} else {
				this.Store.removeAll();
				for (A = 0; A < this.StorageArray.length; A++) {
					this.Store.insert(A, this.StorageArray[A])
				}
			}
		}
		this.fireEvent("SearchComplete", this.Store)
	},
	StorageChanged : function(A) {
		this.Store = A;
		this.StorageArray = this.Store.getRange()
	}
});
Wtf.reg("MyQuickSearch1", Wtf.wtfQuickSearch);
Wtf.apply(Wtf.DataView.prototype, {
	deselect : function(B, A) {
		if (this.isSelected(B)) {
			var B = this.getNode(B);
			this.selected.removeElement(B);
			if (this.last == B.viewIndex) {
				this.last = false
			}
			Wtf.fly(B).removeClass(this.selectedClass);
			if (!A) {
				this.fireEvent("selectionchange", this, this.selected.elements)
			}
		}
	}
});
Wtf.common.Select = function(A) {
	if (A.transform && typeof A.multiSelect == "undefined") {
		var B = Wtf.getDom(A.transform);
		A.multiSelect = (Wtf.isIE ? B.getAttributeNode("multiple").specified
				: B.hasAttribute("multiple"))
	}
	A.hideTrigger2 = A.hideTrigger2 || A.hideTrigger;
	Wtf.common.Select.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.Select,
				Wtf.form.ComboBox,
				{
					multiSelect : false,
					minLength : 0,
					minLengthText : "Minimum {0} items required",
					maxLength : Number.MAX_VALUE,
					maxLengthText : "Maximum {0} items allowed",
					clearTrigger : true,
					history : false,
					historyMaxLength : 0,
					separator : ",",
					displaySeparator : ",",
					valueArray : [],
					rawValueArray : [],
					initComponent : function() {
						this.triggerConfig = {
							tag : "span",
							cls : "x-form-twin-triggers",
							cn : [ {
								tag : "img",
								src : Wtf.BLANK_IMAGE_URL,
								cls : "x-form-trigger " + this.trigger1Class
							}, {
								tag : "img",
								src : Wtf.BLANK_IMAGE_URL,
								cls : "x-form-trigger " + this.trigger2Class
							} ]
						};
						Wtf.common.Select.superclass.initComponent.call(this);
						if (this.multiSelect) {
							this.typeAhead = false;
							this.editable = false;
							this.triggerAction = "all";
							this.selectOnFocus = false
						}
						if (this.history) {
							this.forceSelection = false
						}
						if (this.value) {
							this.setValue(this.value)
						}
					},
					hideTrigger1 : true,
					getTrigger : Wtf.form.TwinTriggerField.prototype.getTrigger,
					initTrigger : Wtf.form.TwinTriggerField.prototype.initTrigger,
					trigger1Class : "x-form-clear-trigger",
					trigger2Class : "x-form-arrow-trigger",
					onTrigger2Click : function() {
						this.onTriggerClick()
					},
					onTrigger1Click : function() {
						this.clearValue()
					},
					initList : function() {
						if (!this.list) {
							var A = "x-combo-list";
							this.list = new Wtf.Layer({
								shadow : this.shadow,
								cls : [ A, this.listClass ].join(" "),
								constrain : false
							});
							var B = this.listWidth
									|| Math.max(this.wrap.getWidth(),
											this.minListWidth);
							this.list.setWidth(B);
							this.list.swallowEvent("mousewheel");
							this.assetHeight = 0;
							if (this.title) {
								this.header = this.list.createChild({
									cls : A + "-hd",
									html : this.title
								});
								this.assetHeight += this.header.getHeight()
							}
							this.innerList = this.list.createChild({
								cls : A + "-inner"
							});
							this.innerList.on("mouseover", this.onViewOver,
									this);
							this.innerList.on("mousemove", this.onViewMove,
									this);
							this.innerList.setWidth(B
									- this.list.getFrameWidth("lr"));
							if (this.pageSize) {
								this.footer = this.list.createChild({
									cls : A + "-ft"
								});
								this.pageTb = new Wtf.PagingToolbar({
									store : this.store,
									pageSize : this.pageSize,
									renderTo : this.footer
								});
								this.assetHeight += this.footer.getHeight()
							}
							if (!this.tpl) {
								this.tpl = new Wtf.XTemplate(
										'<tpl for="."><div class="'
												+ A
												+ '-item">{[this.f(values)]}</div></tpl>',
										{
											f : function(D) {
												var C = D[this.scope.displayField];
												if (typeof this.scope.renderer == "function") {
													C = this.scope.renderer(C,
															D)
												}
												return C
											},
											scope : this
										})
							}
							this.view = new Wtf.DataView({
								applyTo : this.innerList,
								tpl : this.tpl,
								singleSelect : true,
								scope : this,
								multiSelect : this.multiSelect,
								simpleSelect : true,
								overClass : A + "-cursor",
								selectedClass : this.selectedClass,
								itemSelector : this.itemSelector || "." + A
										+ "-item"
							});
							this.view.on("click", this.onViewClick, this);
							this.view.on("beforeClick", this.onViewBeforeClick,
									this);
							this.bindStore(this.store, true);
							if (this.valueArray.length) {
								this.selectByValue(this.valueArray)
							}
							if (this.resizable) {
								this.resizer = new Wtf.Resizable(this.list, {
									pinned : true,
									handles : "se"
								});
								this.resizer.on("resize", function(E, C, D) {
									this.maxHeight = D - this.handleHeight
											- this.list.getFrameWidth("tb")
											- this.assetHeight;
									this.listWidth = C;
									this.innerList.setWidth(C
											- this.list.getFrameWidth("lr"));
									this.restrictHeight()
								}, this);
								this[this.pageSize ? "footer" : "innerList"]
										.setStyle("margin-bottom",
												this.handleHeight + "px")
							}
						}
					},
					initEvents : function() {
						Wtf.form.ComboBox.superclass.initEvents.call(this);
						this.keyNav = new Wtf.KeyNav(this.el, {
							"up" : function(A) {
								this.inKeyMode = true;
								this.hoverPrev()
							},
							"down" : function(A) {
								if (!this.isExpanded()) {
									this.onTriggerClick()
								} else {
									this.inKeyMode = true;
									this.hoverNext()
								}
							},
							"enter" : function(B) {
								if (this.isExpanded()) {
									this.inKeyMode = true;
									var A = this.view
											.indexOf(this.view.lastItem);
									this.onViewBeforeClick(this.view, A,
											this.view.getNode(A), B);
									this.onViewClick(this.view, A, this.view
											.getNode(A), B)
								} else {
									this.onSingleBlur()
								}
								return true
							},
							"esc" : function(A) {
								this.collapse()
							},
							"tab" : function(A) {
								this.collapse();
								return true
							},
							"home" : function(A) {
								this.hoverFirst();
								return false
							},
							"end" : function(A) {
								this.hoverLast();
								return false
							},
							scope : this,
							doRelay : function(C, B, A) {
								if (A == "down" || this.scope.isExpanded()) {
									return Wtf.KeyNav.prototype.doRelay.apply(
											this, arguments)
								}
								if (A == "enter" || this.scope.isExpanded()) {
									return Wtf.KeyNav.prototype.doRelay.apply(
											this, arguments)
								}
								return true
							},
							forceKeyDown : true
						});
						this.queryDelay = Math.max(this.queryDelay || 10,
								this.mode == "local" ? 10 : 250);
						this.dqTask = new Wtf.util.DelayedTask(this.initQuery,
								this);
						if (this.typeAhead) {
							this.taTask = new Wtf.util.DelayedTask(
									this.onTypeAhead, this)
						}
						if (this.editable !== false) {
							this.el.on("keyup", this.onKeyUp, this)
						}
						if (!this.multiSelect) {
							if (this.forceSelection) {
								this.on("blur", this.doForce, this)
							}
							this.on("focus", this.onSingleFocus, this);
							this.on("blur", this.onSingleBlur, this)
						}
						this.on("change", this.onChange, this)
					},
					doForce : function() {
						if (this.el.dom.value.length > 0) {
							if (this.el.dom.value == this.emptyText) {
								this.clearValue()
							} else {
								if (!this.multiSelect) {
									this.el.dom.value = this.lastSelectionText === undefined ? ""
											: this.lastSelectionText;
									this.applyEmptyText()
								}
							}
						}
					},
					onLoad : function() {
						if (!this.hasFocus) {
							return
						}
						if (this.store.getCount() > 0) {
							this.expand();
							this.restrictHeight();
							if (this.lastQuery == this.allQuery) {
								if (this.editable) {
									this.el.dom.select()
								}
								this.selectByValue(this.value, true)
							} else {
								this.selectNext();
								if (this.typeAhead
										&& this.lastKey != Wtf.EventObject.BACKSPACE
										&& this.lastKey != Wtf.EventObject.DELETE) {
									this.taTask.delay(this.typeAheadDelay)
								}
							}
						} else {
							this.onEmptyResults()
						}
					},
					onSelect : function(A, B) {
						if (this.fireEvent("beforeselect", this, A, B) !== false) {
							this.addValue(A.data[this.valueField
									|| this.displayField]);
							this.fireEvent("select", this, A, B);
							if (!this.multiSelect) {
								this.collapse()
							}
						}
					},
					onSingleFocus : function() {
						this.oldValue = this.getRawValue()
					},
					onSingleBlur : function() {
						var A = this.findRecord(this.displayField, this
								.getRawValue());
						if (A) {
							this.select(this.store.indexOf(A));
							return
						}
						if (String(this.oldValue) != String(this.getRawValue())) {
							this.setValue(this.getRawValue());
							this.fireEvent("change", this, this.oldValue, this
									.getRawValue())
						}
						this.oldValue = String(this.getRawValue())
					},
					onChange : function() {
						if (!this.clearTrigger) {
							return
						}
						if (this.getValue() != "") {
							this.triggers[0].show()
						} else {
							this.triggers[0].hide()
						}
					},
					collapse : function() {
						this.hoverOut();
						Wtf.common.Select.superclass.collapse.call(this)
					},
					expand : function() {
						Wtf.common.Select.superclass.expand.call(this);
						this.hoverFirst()
					},
					onViewOver : function(B, A) {
						if (this.inKeyMode) {
							return
						}
					},
					onViewBeforeClick : function(C, A, B, D) {
						this.preClickSelections = this.view
								.getSelectedIndexes()
					},
					onViewClick : function(E, B, D, F) {
						if (typeof B != "undefined") {
							var A = this.preClickSelections.indexOf(B);
							if (A != -1 && this.multiSelect) {
								this
										.removeValue(this.store.getAt(B).data[this.valueField
												|| this.displayField]);
								if (this.inKeyMode) {
									this.view.deselect(B, true)
								}
								this.hover(B, true)
							} else {
								var C = this.store.getAt(B);
								if (C) {
									if (this.inKeyMode) {
										this.view.select(B, true)
									}
									this.onSelect(C, B);
									this.hover(B, true)
								}
							}
						}
						if (E !== false) {
							this.el.focus()
						}
					},
					addValue : function(B) {
						if (!this.multiSelect) {
							this.setValue(B);
							return
						}
						if (B instanceof Array) {
							B = B[0]
						}
						B = String(B);
						if (this.valueArray.indexOf(B) == -1) {
							var E = B;
							var C = this.findRecord(this.valueField
									|| displayField, B);
							if (C) {
								E = C.data[this.displayField];
								if (this.view) {
									this.select(this.store.indexOf(C))
								}
							} else {
								if (this.forceSelection) {
									return
								}
							}
							var A = Wtf.apply([], this.valueArray);
							A.push(B);
							var D = Wtf.apply([], this.rawValueArray);
							D.push(E);
							B = A.join(this.separator || ",");
							E = D.join(this.displaySeparator || this.separator
									|| ",");
							this.commonChangeValue(B, E, A, D)
						}
					},
					removeValue : function(B) {
						if (B instanceof Array) {
							B = B[0]
						}
						B = String(B);
						if (this.valueArray.indexOf(B) != -1) {
							var E = B;
							var C = this.findRecord(this.valueField
									|| displayField, B);
							if (C) {
								E = C.data[this.displayField];
								if (this.view) {
									this.deselect(this.store.indexOf(C))
								}
							} else {
								if (this.forceSelection) {
									return
								}
							}
							var A = Wtf.apply([], this.valueArray);
							A.remove(B);
							var D = Wtf.apply([], this.rawValueArray);
							D.remove(E);
							B = A.join(this.separator || ",");
							E = D.join(this.displaySeparator || this.separator
									|| ",");
							this.commonChangeValue(B, E, A, D)
						}
					},
					setValue : function(C) {
						var B = [], H = [];
						if (!(C instanceof Array)) {
							if (this.separator && this.separator !== true) {
								C = C.split(String(this.separator))
							} else {
								C = [ C ]
							}
						} else {
							if (!this.multiSelect) {
								C = C.slice(0, 1)
							}
						}
						for ( var D = 0, A = C.length; D < A; D++) {
							var F = C[D];
							var G = F;
							if (this.valueField) {
								var E = this.findRecord(this.valueField
										|| this.displayField, F);
								if (E) {
									G = E.data[this.displayField]
								} else {
									if (this.forceSelection) {
										continue
									}
								}
							}
							B.push(F);
							H.push(G)
						}
						C = B.join(this.separator || ",");
						G = H.join(this.displaySeparator || this.separator
								|| ",");
						this.commonChangeValue(C, G, B, H);
						if (this.history && !this.multiSelect
								&& this.mode == "local") {
							this.addHistory(this.valueField ? this.getValue()
									: this.getRawValue())
						}
						if (this.view) {
							this.view.clearSelections();
							this.selectByValue(this.valueArray)
						}
					},
					commonChangeValue : function(B, D, A, C) {
						this.lastSelectionText = D;
						this.valueArray = A;
						this.rawValueArray = C;
						if (this.hiddenField) {
							this.hiddenField.value = B
						}
						Wtf.form.ComboBox.superclass.setValue.call(this, D);
						this.value = B;
						if (this.oldValueArray != this.valueArray) {
							this.fireEvent("change", this, this.oldValueArray,
									this.valueArray)
						}
						this.oldValueArray = Wtf.apply([], this.valueArray)
					},
					validateValue : function(A) {
						if (!Wtf.common.Select.superclass.validateValue.call(
								this, A)) {
							return false
						}
						if (this.valueArray.length < this.minLength) {
							this.markInvalid(String.format(this.minLengthText,
									this.minLength));
							return false
						}
						if (this.valueArray.length > this.maxLength) {
							this.markInvalid(String.format(this.maxLengthText,
									this.maxLength));
							return false
						}
						return true
					},
					clearValue : function() {
						this.commonChangeValue("", "", [], []);
						if (this.view) {
							this.view.clearSelections()
						}
						Wtf.common.Select.superclass.clearValue.call(this)
					},
					reset : function() {
						if (this.view) {
							this.view.clearSelections()
						}
						Wtf.common.Select.superclass.reset.call(this)
					},
					getValue : function(A) {
						if (A) {
							return typeof this.valueArray != "undefined" ? this.valueArray
									: []
						}
						return Wtf.common.Select.superclass.getValue.call(this)
					},
					getRawValue : function(A) {
						if (A) {
							return typeof this.rawValueArray != "undefined" ? this.rawValueArray
									: []
						}
						return Wtf.common.Select.superclass.getRawValue
								.call(this)
					},
					select : function(A, C) {
						this.selectedIndex = A;
						if (!this.view) {
							return
						}
						this.view.select(A, this.multiSelect);
						if (C !== false) {
							var B = this.view.getNode(A);
							if (B) {
								this.innerList.scrollChildIntoView(B, false)
							}
						}
					},
					deselect : function(A, C) {
						this.selectedIndex = A;
						this.view.deselect(A, this.multiSelect);
						if (C !== false) {
							var B = this.view.getNode(A);
							if (B) {
								this.innerList.scrollChildIntoView(B, false)
							}
						}
					},
					selectByValue : function(C, G) {
						this.hoverOut();
						if (C !== undefined && C !== null) {
							if (!(C instanceof Array)) {
								C = [ C ]
							}
							var B = [];
							for ( var D = 0, A = C.length; D < A; D++) {
								var F = C[D];
								var E = this.findRecord(this.valueField
										|| this.displayField, F);
								if (E) {
									this.select(this.store.indexOf(E), G);
									B.push(F)
								}
							}
							return B.join(",")
						}
						return false
					},
					selectFirst : function() {
						var A = this.store.getCount();
						if (A > 0) {
							this.select(0)
						}
					},
					selectLast : function() {
						var A = this.store.getCount();
						if (A > 0) {
							this.select(A)
						}
					},
					hover : function(A, D) {
						if (!this.view) {
							return
						}
						this.hoverOut();
						var C = this.view.getNode(A);
						this.view.lastItem = C;
						Wtf.fly(C).addClass(this.view.overClass);
						if (D !== false) {
							var B = this.view.getNode(A);
							if (B) {
								this.innerList.scrollChildIntoView(B, false)
							}
						}
					},
					hoverOut : function() {
						if (!this.view) {
							return
						}
						if (this.view.lastItem) {
							Wtf.fly(this.view.lastItem).removeClass(
									this.view.overClass);
							delete this.view.lastItem
						}
					},
					hoverNext : function() {
						if (!this.view) {
							return
						}
						var B = this.store.getCount();
						if (B > 0) {
							if (!this.view.lastItem) {
								this.hover(0)
							} else {
								var A = this.view.indexOf(this.view.lastItem);
								if (A < B - 1) {
									this.hover(A + 1)
								}
							}
						}
					},
					hoverPrev : function() {
						if (!this.view) {
							return
						}
						var B = this.store.getCount();
						if (B > 0) {
							if (!this.view.lastItem) {
								this.hover(0)
							} else {
								var A = this.view.indexOf(this.view.lastItem);
								if (A != 0) {
									this.hover(A - 1)
								}
							}
						}
					},
					hoverFirst : function() {
						var A = this.store.getCount();
						if (A > 0) {
							this.hover(0)
						}
					},
					hoverLast : function() {
						var A = this.store.getCount();
						if (A > 0) {
							this.hover(A)
						}
					},
					addHistory : function(B) {
						if (!B.length) {
							return
						}
						var A = this.findRecord(this.valueField
								|| this.displayField, B);
						if (A) {
							this.store.remove(A)
						} else {
							var C = {};
							if (this.valueField) {
								C[this.valueField] = B
							}
							C[this.displayField] = B;
							A = new this.store.reader.recordType(C)
						}
						this.store.clearFilter();
						this.store.insert(0, A);
						this.pruneHistory()
					},
					pruneHistory : function() {
						if (this.historyMaxLength == 0) {
							return
						}
						if (this.store.getCount() > this.historyMaxLength) {
							var C = this.store.getRange(this.historyMaxLength,
									this.store.getCount());
							for ( var B = 0, A = C.length; B < A; B++) {
								this.store.remove(C[B])
							}
						}
					}
				});
Wtf.reg("select", Wtf.common.Select);
Wtf.KwlGridPanel = function(C) {
	Wtf.apply(this, C);
	if (!this.id) {
		this.id = "kwlgrid" + Math.random() * 10000000
	}
	this.emptext = this.searchEmptyText ? this.searchEmptyText : WtfGlobal
			.getLocaleText("hrms.common.search.here");
	var F = new Array();
	for (D = 0; D < this.cm.config.length; D++) {
		var E = new Array();
		if (this.cm.config[D].dbname) {
			E.push(this.cm.config[D].header);
			E.push(this.cm.config[D].dbname);
			F.push(E)
		}
	}
	var G = F;
	this.combostore = new Wtf.data.SimpleStore({
		fields : [ {
			name : "header"
		}, {
			name : "name"
		} ]
	});
	this.combostore.loadData(G);
	this.MSComboconfig = {
		store : this.combostore,
		displayField : "header",
		valueField : "name",
		triggerAction : "all",
		hideTrigger : true,
		emptyText : WtfGlobal.getLocaleText("hrms.common.select.column.name"),
		mode : "local"
	};
	this.Combo = new Wtf.common.Select(Wtf.applyIf({
		multiSelect : true,
		labelSeparator : ",",
		forceSelection : false
	}, this.MSComboconfig));
	if (this.serverSideSearch) {
		this.quickSearchTF = new Wtf.KWLTagSearch({
			id : "Quick" + this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext
		});
		if (this.bbar) {
			var H = "-";
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D + 1] = this.tmpBottom[D]
			}
			this.b1[0] = H;
			this.pag = new Wtf.PagingSearchToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			this.pag = new Wtf.PagingSearchToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	} else {
		this.quickSearchTF = new Wtf.wtfQuickSearch({
			id : "Quick" + this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext,
			field : this.searchField
		});
		if (this.bbar) {
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D] = this.tmpBottom[D]
			}
			this.pag = new Wtf.PagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			this.pag = new Wtf.PagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.pPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	}
	if (this.paging != false) {
		this.bbar = this.pag
	}
	this.searchLabel = this.searchLabel ? this.searchLabel : WtfGlobal
			.getLocaleText("hrms.common.QuickSearch");
	this.searchLabelSeparator = this.searchLabelSeparator ? this.searchLabelSeparator
			: " : ";
	this.searchLabel = this.searchLabel + this.searchLabelSeparator;
	this.searchByLabel = this.searchByLabel ? this.searchByLabel : WtfGlobal
			.getLocaleText("hrms.common.search.by");
	this.searchByLabel = this.searchByLabel + this.searchLabelSeparator;
	if (this.tbar) {
		this.elements += ",tbar";
		if (typeof this.tbar == "object") {
			this.tmptoolbar = this.tbar;
			this.topToolbar1 = new Array();
			var A = this.tmptoolbar.length;
			var D = 0;
			var B = 0;
			if (this.advanceSearch) {
				B = 4;
				for (D = 0; D < A; D++) {
					this.topToolbar1[B++] = this.tmptoolbar[D]
				}
				this.topToolbar1[0] = this.searchLabel;
				this.topToolbar1[1] = this.quickSearchTF;
				this.topToolbar1[2] = this.searchByLabel;
				this.topToolbar1[3] = this.Combo
			} else {
				if (this.noSearch) {
					this.topToolbar1 = this.tmptoolbar
				} else {
					B = 2;
					for (D = 0; D < A; D++) {
						this.topToolbar1[B++] = this.tmptoolbar[D]
					}
					this.topToolbar1[0] = this.searchLabel;
					this.topToolbar1[1] = this.quickSearchTF
				}
			}
			this.topToolbar = this.topToolbar1
		}
		delete this.tbar
	} else {
		if (this.advanceSearch) {
			this.tbar = [ this.searchLabel, this.quickSearchTF,
					this.searchByLabel, this.Combo ]
		} else {
			if (!this.noSearch) {
				this.tbar = [ this.searchLabel, this.quickSearchTF ]
			}
		}
	}
	this.store.on("load", function() {
		this.quickSearchTF.StorageChanged(this.store)
	}, this);
	this.store
			.on(
					"datachanged",
					function() {
						if (this.serverSideSearch) {
							if (this.pPageSizeObj.combo) {
								this.quickSearchTF
										.setPage(this.paging != false ? this.pPageSizeObj.combo.value
												: 1)
							} else {
								this.quickSearchTF
										.setPage(this.paging != false ? 15 : 1)
							}
						}
					}, this);
	this.Combo.on("change", function(K, I, J) {
		this.quickSearchTF.SearchArray1(this.Combo.getValue())
	}, this);
	this.doLayout();
	Wtf.KwlGridPanel.superclass.constructor.call(this)
};
Wtf.extend(Wtf.KwlGridPanel, Wtf.grid.GridPanel, {
	layout : "fit",
	onRender : function(A) {
		Wtf.KwlGridPanel.superclass.onRender.call(this, A)
	}
});
Wtf.KWLTagSearch = function(A) {
	Wtf.KWLTagSearch.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.KWLTagSearch, Wtf.form.TextField, {
	Store : null,
	emptyText : WtfGlobal.getLocaleText("hrms.common.search"),
	StorageArray : null,
	SearchArray : null,
	limit : this.limit,
	initComponent : function() {
		Wtf.KWLTagSearch.superclass.initComponent.call(this);
		this.SearchArray = new Array();
		this.addEvents({
			"SearchComplete" : true
		})
	},
	timer : new Wtf.util.DelayedTask(this.callKeyUp),
	setPage : function(A) {
		this.limit = A
	},
	onRender : function(B, A) {
		Wtf.KWLTagSearch.superclass.onRender.call(this, B, A);
		this.el.dom.onkeyup = this.onKeyUp.createDelegate(this)
	},
	onKeyUp : function(A) {
		if (this.Store) {
			if (this.getValue() != "") {
				this.timer.cancel();
				this.timer.delay(1000, this.callKeyUp, this)
			} else {
				this.Store.reload({
					params : {
						start : 0,
						limit : this.limit,
						ss : "",
						searchArray : " "
					}
				})
			}
			this.fireEvent("SearchComplete", this.Store)
		}
	},
	callKeyUp : function() {
		this.Store.reload({
			params : {
				start : 0,
				limit : this.limit,
				ss : this.getValue(),
				searchArray : this.SearchArray.toString()
			}
		})
	},
	StorageChanged : function(A) {
		this.Store = A;
		this.StorageArray = this.Store.getRange()
	},
	SearchArray1 : function(A) {
		this.SearchArray = new Array();
		this.SearchArray.push(A);
		this.callKeyUp()
	},
	GetSearchArray : function() {
		return this.SearchArray.toString()
	}
});
Wtf.reg("KWLTagSearch", Wtf.KWLTagSearch);
Wtf.KWLQuickSearchUseFilter = function(A) {
	Wtf.KWLQuickSearchUseFilter.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.KWLQuickSearchUseFilter, Wtf.form.TextField, {
	Store : null,
	initComponent : function() {
		Wtf.KWLQuickSearchUseFilter.superclass.initComponent.call(this)
	},
	onRender : function(B, A) {
		Wtf.KWLQuickSearchUseFilter.superclass.onRender.call(this, B, A);
		this.el.dom.onkeyup = this.onKeyUp.createDelegate(this)
	},
	onKeyUp : function(A) {
		this.Store.filter(this.field, this.getValue())
	},
	StorageChanged : function(A) {
		this.Store = A;
		this.StorageArray = this.Store.getRange()
	}
});
Wtf.PagingSearchToolbar = Wtf.extend(Wtf.PagingToolbar, {
	searchField : null,
	paramNames : {
		start : "start",
		limit : "limit",
		ss : "ss",
		searchArray : "searchArray"
	},
	doLoad : function(C) {
		var B = {}, A = this.paramNames;
		B[A.start] = C;
		B[A.limit] = this.pageSize;
		if (this.searchField) {
			B[A.ss] = this.searchField.getValue();
			B[A.searchArray] = this.searchField.GetSearchArray()
		} else {
			B[A.ss] = "";
			B[A.searchArray] = ""
		}
		this.store.load({
			params : B
		})
	}
});
Wtf.data.PagingMemoryProxy = function(B, A) {
	Wtf.data.PagingMemoryProxy.superclass.constructor.call(this);
	this.data = B;
	Wtf.apply(this, A)
};
Wtf.extend(Wtf.data.PagingMemoryProxy, Wtf.data.MemoryProxy, {
	customFilter : null,
	initComponent : function(A) {
		this.addEvents({
			"pagechange" : true
		})
	},
	load : function(B, C, F, H, I) {
		B = B || {};
		var J;
		try {
			J = C.readRecords(this.data)
		} catch (D) {
			this.fireEvent("loadexception", this, I, null, D);
			F.call(H, null, I, false);
			return
		}
		if (this.customFilter != null) {
			J.records = J.records.filter(this.customFilter);
			J.totalRecords = J.records.length
		} else {
			if (B.filter !== undefined) {
				J.records = J.records.filter(function(L) {
					if (typeof (L) == "object") {
						var K = B.filterCol || 0;
						return String(L.data[K]).match(B.filter) ? true : false
					} else {
						return String(L).match(B.filter) ? true : false
					}
				});
				J.totalRecords = J.records.length
			}
		}
		if (B.sort !== undefined) {
			var A = String(B.dir).toUpperCase() == "DESC" ? -1 : 1;
			var E = function(L, K) {
				return L == K ? 0 : L < K ? -1 : 1
			};
			var G = C.recordType.getField(B.sort).sortType;
			J.records.sort(function(L, K) {
				var M = 0;
				if (typeof (L) == "object") {
					M = E(G(L.data[B.sort]), G(K.data[B.sort])) * A
				} else {
					M = E(L, K) * A
				}
				if (M == 0) {
					M = (L.index < K.index ? -1 : 1)
				}
				return M
			})
		}
		if (B.start !== undefined && B.limit !== undefined) {
			J.records = J.records.slice(B.start, B.start + B.limit)
		}
		F.call(H, J, I, true);
		this.fireEvent("pagechange", this.id, B.start, B.limit)
	}
});
Wtf.ns("Wtf.ux.grid");
Wtf.getValidNumberOrDefault = function(C, A) {
	var D = 0;
	try {
		D = Wtf.num(isNaN(parseFloat(C)) ? 0 : parseFloat(C), A)
	} catch (B) {
		D = 0
	} finally {
		return D
	}
};
Wtf.ux.grid.GridSummary = function(A) {
	Wtf.apply(this, A)
};
Wtf
		.extend(
				Wtf.ux.grid.GridSummary,
				Wtf.util.Observable,
				{
					init : function(B) {
						this.grid = B;
						this.cm = B.getColumnModel();
						this.view = B.getView();
						var A = this.view;
						A.onLayout = this.onLayout;
						A.afterMethod("render", this.refreshSummary, this);
						A.afterMethod("refresh", this.refreshSummary, this);
						A.afterMethod("syncScroll", this.syncSummaryScroll,
								this);
						A.afterMethod("onColumnWidthUpdated", this.doWidth,
								this);
						A.afterMethod("onAllColumnWidthsUpdated",
								this.doAllWidths, this);
						A.afterMethod("onColumnHiddenUpdated", this.doHidden,
								this);
						B.store.on({
							add : this.refreshSummary,
							remove : this.refreshSummary,
							clear : this.refreshSummary,
							update : this.refreshSummary,
							scope : this
						});
						if (!this.rowTpl) {
							this.rowTpl = new Wtf.Template(
									'<div class="x-grid3-summary-row x-grid3-gridsummary-row-offset">',
									'<table class="x-grid3-summary-table" border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
									'<tbody><tr style="background-color:#f1f1f1;">{cells}</tr></tbody>',
									"</table>", "</div>");
							this.rowTpl.disableFormats = true
						}
						this.rowTpl.compile();
						if (!this.cellTpl) {
							this.cellTpl = new Wtf.Template(
									'<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}">',
									'<div class="x-grid3-cell-inner x-grid3-col-{id}" unselectable="on" {attr}>{value}</div>',
									"</td>");
							this.cellTpl.disableFormats = true
						}
						this.cellTpl.compile()
					},
					calculate : function(C, J) {
						var E = {}, H = J.config;
						for ( var F = 0, I = H.length; F < I; F++) {
							var B = H[F], G = B.dataIndex;
							E[G] = 0;
							if (B.summaryType) {
								for ( var D = 0, K = C.length; D < K; D++) {
									var A = C[D];
									E[G] = Wtf.ux.grid.GridSummary.Calculations[B.summaryType]
											(A.get(G), A, G, E, D)
								}
							}
						}
						return E
					},
					onLayout : function(A, B) {
						if (Wtf.type(B) != "number") {
							return
						}
						if (!this.grid.getGridEl().hasClass(
								"x-grid-hide-gridsummary")) {
							this.scroller.setHeight(B
									- this.summary.getHeight())
						}
					},
					syncSummaryScroll : function() {
						var A = this.view.scroller.dom;
						this.view.summaryWrap.dom.scrollLeft = A.scrollLeft;
						this.view.summaryWrap.dom.scrollLeft = A.scrollLeft
					},
					doWidth : function(C, A, B) {
						var D = this.view.summary.dom;
						D.firstChild.style.width = B;
						D.firstChild.rows[0].childNodes[C].style.width = A
					},
					doAllWidths : function(A, B) {
						var E = this.view.summary.dom, F = A.length;
						E.firstChild.style.width = B;
						var D = E.firstChild.rows[0].childNodes;
						for ( var C = 0; C < F; C++) {
							if (D[C] !== undefined) {
								D[C].style.width = A[C]
							}
						}
					},
					doHidden : function(B, D, A) {
						var C = this.view.summary.dom, E = D ? "none" : "";
						C.firstChild.style.width = A;
						C.firstChild.rows[0].childNodes[B].style.display = E
					},
					renderSummary : function(C, F, J) {
						F = F || this.view.getColumnData();
						var G = J.config, D = [], K = F.length - 1;
						for ( var E = 0, H = F.length; E < H; E++) {
							var I = F[E], B = G[E], A = {};
							A.id = I.id;
							A.style = I.style;
							A.css = E == 0 ? "x-grid3-cell-first "
									: (E == K ? "x-grid3-cell-last " : "");
							if (B.summaryType || B.summaryRenderer) {
								A.value = (B.summaryRenderer || I.renderer)(
										C.data[I.name], A, C)
							} else {
								A.value = ""
							}
							if (A.value == undefined || A.value === "") {
								A.value = "&#160;"
							}
							D[D.length] = this.cellTpl.apply(A)
						}
						return this.rowTpl
								.apply({
									tstyle : "width:"
											+ this.view.getTotalWidth() + ";",
									cells : D.join("")
								})
					},
					refreshSummary : function() {
						var E = this.grid, G = E.store, D = this.view
								.getColumnData(), A = this.cm, B = G.getRange(), F = this
								.calculate(B, A), C = this.renderSummary({
							data : F
						}, D, A);
						if (!this.view.summaryWrap) {
							this.view.summaryWrap = Wtf.DomHelper.insertAfter(
									this.view.scroller, {
										tag : "div",
										cls : "x-grid3-gridsummary-row-inner"
									}, true)
						}
						this.view.summary = this.view.summaryWrap.update(C)
								.first()
					},
					toggleSummary : function(B) {
						var A = this.grid.getGridEl();
						if (A) {
							if (B === undefined) {
								B = A.hasClass("x-grid-hide-gridsummary")
							}
							A[B ? "removeClass" : "addClass"]
									("x-grid-hide-gridsummary");
							this.view.layout()
						}
					},
					getSummaryNode : function() {
						return this.view.summary
					}
				});
Wtf.reg("gridsummary", Wtf.ux.grid.GridSummary);
Wtf.ux.grid.GridSummary.Calculations = {
	sum : function(B, A, C, E, D) {
		return E[C] + Wtf.getValidNumberOrDefault(B, 0)
	},
	count : function(B, A, C, E, D) {
		return D + 1
	},
	max : function(B, A, C, E, D) {
		return Math.max(Wtf.getValidNumberOrDefault(B, 0), E[C])
	},
	min : function(B, A, C, E, D) {
		return Math.min(Wtf.getValidNumberOrDefault(B, 0), E[C])
	},
	average : function(B, A, D, G, F) {
		var C = G[D] + Wtf.getValidNumberOrDefault(B, 0), E = A.store
				.getCount();
		return F == E - 1 ? (C / E) : C
	}
};
Wtf.grid.RowExpander = function(A) {
	Wtf.apply(this, A);
	Wtf.grid.RowExpander.superclass.constructor.call(this);
	if (this.tpl) {
		if (typeof this.tpl == "string") {
			this.tpl = new Wtf.Template(this.tpl)
		}
		this.tpl.compile()
	}
	this.state = {};
	this.bodyContent = {};
	this.addEvents({
		beforeexpand : true,
		expand : true,
		beforecollapse : true,
		collapse : true
	})
};
Wtf.extend(Wtf.grid.RowExpander, Wtf.util.Observable, {
	header : "",
	width : 20,
	sortable : false,
	fixed : true,
	dataIndex : "",
	id : "expander",
	lazyRender : true,
	enableCaching : true,
	getRowClass : function(A, E, D, C) {
		D.cols = D.cols - 1;
		var B = this.bodyContent[A.id];
		if (!B && !this.lazyRender) {
			B = this.getBodyContent(A, E)
		}
		if (B) {
			D.body = B
		}
		return this.state[A.id] ? "x-grid3-row-expanded"
				: "x-grid3-row-collapsed"
	},
	init : function(B) {
		this.grid = B;
		var A = B.getView();
		A.getRowClass = this.getRowClass.createDelegate(this);
		A.enableRowBody = true;
		B.on("render", function() {
			A.mainBody.on("mousedown", this.onMouseDown, this)
		}, this)
	},
	getBodyContent : function(A, B) {
		if (!this.enableCaching) {
			return this.tpl.apply(A.data)
		}
		var C = this.bodyContent[A.id];
		if (!C) {
			C = this.tpl.apply(A.data);
			this.bodyContent[A.id] = C
		}
		return C
	},
	onMouseDown : function(B, A) {
		if (A.className == "x-grid3-row-expander") {
			B.stopEvent();
			var C = B.getTarget(".x-grid3-row");
			this.toggleRow(C)
		}
	},
	renderer : function(B, C, A) {
		C.cellAttr = 'rowspan="2"';
		return '<div class="x-grid3-row-expander">&#160;</div>'
	},
	beforeExpand : function(B, A, C) {
		if (this.fireEvent("beforexpand", this, B, A, C) !== false) {
			if (this.tpl && this.lazyRender) {
				A.innerHTML = this.getBodyContent(B, C)
			}
			return true
		} else {
			return false
		}
	},
	toggleRow : function(A) {
		if (typeof A == "number") {
			A = this.grid.view.getRow(A)
		}
		this[Wtf.fly(A).hasClass("x-grid3-row-collapsed") ? "expandRow"
				: "collapseRow"](A)
	},
	expandRow : function(C) {
		if (typeof C == "number") {
			C = this.grid.view.getRow(C)
		}
		var B = this.grid.store.getAt(C.rowIndex);
		var A = Wtf.DomQuery.selectNode("tr:nth(2) div.x-grid3-row-body", C);
		if (this.beforeExpand(B, A, C.rowIndex)) {
			this.state[B.id] = true;
			Wtf.fly(C).replaceClass("x-grid3-row-collapsed",
					"x-grid3-row-expanded");
			this.fireEvent("expand", this, B, A, C.rowIndex)
		}
	},
	collapseRow : function(C) {
		if (typeof C == "number") {
			C = this.grid.view.getRow(C)
		}
		var B = this.grid.store.getAt(C.rowIndex);
		var A = Wtf.fly(C).child("tr:nth(1) div.x-grid3-row-body", true);
		if (this.fireEvent("beforcollapse", this, B, A, C.rowIndex) !== false) {
			this.state[B.id] = false;
			Wtf.fly(C).replaceClass("x-grid3-row-expanded",
					"x-grid3-row-collapsed");
			this.fireEvent("collapse", this, B, A, C.rowIndex)
		}
	}
});
Wtf.override(Wtf.Element, {
	getHeight : function(C) {
		try {
			var B = this;
			var G = B.dom;
			var F = B.getStyle("display");
			var D = Wtf.isIE && (F == "none");
			var A = Math.max(G.offsetHeight, D ? 0 : G.clientHeight) || 0;
			A = !C ? A : A - B.getBorderWidth("tb") - B.getPadding("tb");
			return A < 0 ? 0 : A
		} catch (E) {
			clog(E)
		}
	},
	getWidth : function(B) {
		try {
			var C = this;
			var G = C.dom;
			var F = C.getStyle("display");
			var D = Wtf.isIE && (F == "none");
			var A = Math.max(G.offsetWidth, D ? 0 : G.clientWidth) || 0;
			A = !B ? A : A - C.getBorderWidth("tb") - C.getPadding("tb");
			return A < 0 ? 0 : A
		} catch (E) {
			clog(E)
		}
	}
});
Wtf.override(Wtf.grid.RowExpander, {
	getBodyContent : function(A, B) {
		var C = this.tpl.apply(A.data);
		this.bodyContent[A.id] = C;
		return C
	}
});
Wtf.override(Wtf.data.Connection,
		{
			handleResponse : function(response) {
				try {
					this.transId = false;
					var json = response.responseText.trim();
					var obj = eval("(" + json + ")");
					var options;
					if (obj.grouper != null && obj.grouper != undefined) {
						for ( var ctr = 0; ctr < obj.data.length; ctr++) {
							response.responseText = Wtf
									.encode(obj.data[ctr].data);
							var callobj = callbackmap[obj.data[ctr].no];
							delete callbackmap[obj.data[ctr].no];
							options = callobj.argument.options;
							this.fireEvent("requestcomplete", this, response,
									options);
							Wtf.callback(options.success, options.scope, [
									response, options ]);
							Wtf.callback(options.callback, options.scope, [
									options, true, response ])
						}
					} else {
						options = response.argument.options;
						response.argument = options ? options.argument : null;
						this.fireEvent("requestcomplete", this, response,
								options);
						Wtf.callback(options.success, options.scope, [
								response, options ]);
						Wtf.callback(options.callback, options.scope, [
								options, true, response ])
					}
				} catch (e) {
					options = response.argument.options;
					response.argument = options ? options.argument : null;
					this.fireEvent("requestcomplete", this, response, options);
					Wtf.callback(options.success, options.scope, [ response,
							options ]);
					Wtf.callback(options.callback, options.scope, [ options,
							true, response ])
				}
			}
		});
Wtf.data.Store.prototype.oldhandler = Wtf.data.Store.prototype.loadRecords;
Wtf.override(Wtf.data.Store, {
	loadRecords : function(D, A, C) {
		try {
			this.oldhandler(D, A, C)
		} catch (B) {
			clog(B)
		}
	}
});
Wtf.override(Wtf.form.Field, {
	initEvents : function() {
		this.el.on(Wtf.isIE || Wtf.isSafari || Wtf.isChrome ? "keydown"
				: "keypress", this.fireKey, this);
		this.el.on("focus", this.onFocus, this);
		this.el.on("blur", this.onBlur, this);
		this.originalValue = this.getValue()
	}
});
function checkUA(A) {
	ua = navigator.userAgent.toLowerCase();
	return A.test(ua)
}
Wtf.isOpera = checkUA(/opera/), Wtf.isChrome = checkUA(/chrome/),
		Wtf.isWebKit = checkUA(/webkit/), Wtf.isSafari = !Wtf.isChrome
				&& checkUA(/safari/), Wtf.isSafari2 = Wtf.isSafari
				&& checkUA(/applewebkit\/4/), Wtf.isSafari3 = Wtf.isSafari
				&& checkUA(/version\/3/), Wtf.isSafari4 = Wtf.isSafari
				&& checkUA(/version\/4/), Wtf.isIE = !Wtf.isOpera
				&& checkUA(/msie/), Wtf.isIE7 = Wtf.isIE && checkUA(/msie 7/),
		Wtf.isIE8 = Wtf.isIE && checkUA(/msie 8/), Wtf.isIE6 = Wtf.isIE
				&& !Wtf.isIE7 && !Wtf.isIE8, Wtf.isGecko = !Wtf.isWebKit
				&& checkUA(/gecko/), Wtf.isGecko2 = Wtf.isGecko
				&& checkUA(/rv:1\.8/), Wtf.isGecko3 = Wtf.isGecko
				&& checkUA(/rv:1\.9/), Wtf.isBorderBox = Wtf.isIE
				&& !Wtf.isStrict, Wtf.isWindows = checkUA(/windows|win32/),
		Wtf.isMac = checkUA(/macintosh|mac os x/),
		Wtf.isAir = checkUA(/adobeair/), Wtf.isLinux = checkUA(/linux/), Wtf
				.override(Wtf.Button, {
					onDisable : function() {
						if (this.el) {
							if (!Wtf.isIE6 || !this.text) {
								this.el.addClass("x-item-disabled")
							}
							this.el.dom.disabled = true
						}
						this.disabled = true
					},
					onEnable : function() {
						if (this.el) {
							if (!Wtf.isIE6 || !this.text) {
								this.el.removeClass("x-item-disabled")
							}
							this.el.dom.disabled = false
						}
						this.disabled = false
					}
				});
function recycleCursor() {
	var A = Wtf.get("cursor_bin");
	A.show();
	A.focus();
	A.hide()
}
if (Wtf.isIE7) {
	Wtf.TabPanel.prototype.oldSetActiveTab = Wtf.TabPanel.prototype.setActiveTab;
	Wtf
			.override(
					Wtf.TabPanel,
					{
						setActiveTab : function(A) {
							A = this.getComponent(A);
							if (this.activeTab) {
								if (this.activeTab
										.findByType(Wtf.newHTMLEditor).length == 1
										|| this.activeTab
												.findByType(Wtf.form.HtmlEditor).length == 1) {
									recycleCursor()
								}
							}
							this.oldSetActiveTab(A)
						}
					})
}
Wtf
		.override(
				Wtf.form.HtmlEditor,
				{
					createToolbar : function(D) {
						var A = Wtf.QuickTips && Wtf.QuickTips.isEnabled();
						function C(G, E, F) {
							return {
								itemId : G,
								cls : "x-btn-icon x-edit-" + G,
								enableToggle : E !== false,
								scope : D,
								handler : F || D.relayBtnCmd,
								clickEvent : "mousedown",
								tooltip : A ? D.buttonTips[G] || undefined
										: undefined,
								overflowText : D.buttonTips[G].title || undefined,
								tabIndex : -1
							}
						}
						var B = new Wtf.Toolbar({
							renderTo : this.wrap.dom.firstChild
						});
						B.on("click", function(E) {
							E.preventDefault()
						});
						if (this.enableFont && !Wtf.isSafari2) {
							this.fontSelect = B.el.createChild({
								tag : "select",
								cls : "x-font-select",
								html : this.createFontOptions()
							});
							this.fontSelect.on("change", function() {
								var E = this.fontSelect.dom.value;
								this.relayCmd("fontname", E);
								this.deferFocus()
							}, this);
							B.add(this.fontSelect.dom, "-")
						}
						if (this.enableFormat) {
							B.add(C("bold"), C("italic"), C("underline"))
						}
						if (this.enableFontSize) {
							B.add("-", C("increasefontsize", false,
									this.adjustFont), C("decreasefontsize",
									false, this.adjustFont))
						}
						if (this.enableColors) {
							B
									.add(
											"-",
											{
												itemId : "forecolor",
												cls : "x-btn-icon x-edit-forecolor",
												clickEvent : "mousedown",
												tooltip : A ? D.buttonTips.forecolor || undefined
														: undefined,
												tabIndex : -1,
												menu : new Wtf.menu.ColorMenu(
														{
															allowReselect : true,
															focus : Wtf.emptyFn,
															value : "000000",
															plain : true,
															listeners : {
																scope : this,
																select : function(
																		F, E) {
																	this
																			.execCmd(
																					"forecolor",
																					Wtf.isWebKit
																							|| Wtf.isIE ? "#"
																							+ E
																							: E);
																	this
																			.deferFocus()
																}
															},
															clickEvent : "mousedown"
														})
											},
											{
												itemId : "backcolor",
												cls : "x-btn-icon x-edit-backcolor",
												clickEvent : "mousedown",
												tooltip : A ? D.buttonTips.backcolor || undefined
														: undefined,
												tabIndex : -1,
												menu : new Wtf.menu.ColorMenu(
														{
															focus : Wtf.emptyFn,
															value : "FFFFFF",
															plain : true,
															allowReselect : true,
															listeners : {
																scope : this,
																select : function(
																		F, E) {
																	if (Wtf.isGecko) {
																		this
																				.execCmd(
																						"useCSS",
																						false);
																		this
																				.execCmd(
																						"hilitecolor",
																						E);
																		this
																				.execCmd(
																						"useCSS",
																						true);
																		this
																				.deferFocus()
																	} else {
																		this
																				.execCmd(
																						Wtf.isOpera ? "hilitecolor"
																								: "backcolor",
																						Wtf.isWebKit
																								|| Wtf.isIE ? "#"
																								+ E
																								: E);
																		this
																				.deferFocus()
																	}
																}
															},
															clickEvent : "mousedown"
														})
											})
						}
						if (this.enableAlignments) {
							B.add("-", C("justifyleft"), C("justifycenter"),
									C("justifyright"))
						}
						if (!Wtf.isSafari2) {
							if (this.enableLinks) {
								B.add("-", C("createlink", false,
										this.createLink))
							}
							if (this.enableLists) {
								B.add("-", C("insertorderedlist"),
										C("insertunorderedlist"))
							}
							if (this.enableSourceEdit) {
								B.add("-", C("sourceedit", true, function(E) {
									this.toggleSourceEdit(!this.sourceEditMode)
								}))
							}
						}
						this.tb = B
					},
					insertAtCursor : function(D) {
						if (!this.activated) {
							return
						}
						if (Wtf.isIE) {
							this.win.focus();
							var C = this.doc.selection.createRange();
							if (C) {
								C.collapse(true);
								C.pasteHTML(D);
								this.syncValue();
								this.deferFocus()
							}
						} else {
							if (Wtf.isGecko || Wtf.isOpera) {
								this.win.focus();
								this.execCmd("InsertHTML", D);
								this.deferFocus()
							} else {
								if (Wtf.isSafari || Wtf.isChrome) {
									this.execCmd("InsertHTML", D);
									this.deferFocus()
								}
							}
						}
					},
					getDoc : function() {
						return Wtf.isIE ? this.getWin().document
								: (this.iframe.contentDocument || this.getWin().document)
					},
					getWin : function() {
						return Wtf.isIE ? this.iframe.contentWindow
								: window.frames[this.iframe.name]
					},
					adjustFont : function(B) {
						var D = B.getItemId() == "increasefontsize" ? 1 : -1, C = this
								.getDoc(), A = parseInt(C
								.queryCommandValue("FontSize") || 2, 10);
						if ((Wtf.isSafari && !Wtf.isSafari2) || Wtf.isChrome) {
							if (A <= 10) {
								A = 1 + D
							} else {
								if (A <= 13) {
									A = 2 + D
								} else {
									if (A <= 16) {
										A = 3 + D
									} else {
										if (A <= 18) {
											A = 4 + D
										} else {
											if (A <= 24) {
												A = 5 + D
											} else {
												A = 6 + D
											}
										}
									}
								}
							}
							A = A.constrain(1, 6)
						} else {
							if (Wtf.isSafari) {
								D *= 2
							}
							A = Math.max(1, A + D) + (Wtf.isSafari ? "px" : 0)
						}
						this.execCmd("FontSize", A)
					},
					fixKeys : function() {
						if (Wtf.isIE) {
							return function(D) {
								var A = D.getKey(), B;
								if (A == D.TAB) {
									D.stopEvent();
									B = this.doc.selection.createRange();
									if (B) {
										B.collapse(true);
										B.pasteHTML("&nbsp;&nbsp;&nbsp;&nbsp;");
										this.deferFocus()
									}
								} else {
									if (A == D.ENTER) {
										B = this.doc.selection.createRange();
										if (B) {
											var C = B.parentElement();
											if (!C
													|| C.tagName.toLowerCase() != "li") {
												D.stopEvent();
												B.pasteHTML("<br />");
												B.collapse(false);
												B.select()
											}
										}
									}
								}
							}
						} else {
							if (Wtf.isOpera) {
								return function(B) {
									var A = B.getKey();
									if (A == B.TAB) {
										B.stopEvent();
										this.win.focus();
										this.execCmd("InsertHTML",
												"&nbsp;&nbsp;&nbsp;&nbsp;");
										this.deferFocus()
									}
								}
							} else {
								if (Wtf.isWebKit) {
									return function(B) {
										var A = B.getKey();
										if (A == B.TAB) {
											B.stopEvent();
											this.execCmd("InsertText", "\t");
											this.deferFocus()
										} else {
											if (A == B.ENTER) {
												B.stopEvent();
												this.execCmd("InsertHtml",
														"<br /><br />");
												this.deferFocus()
											}
										}
									}
								}
							}
						}
					}
				});
Wtf
		.override(
				Wtf.Element,
				{
					getAttributeNS : function(B, A) {
						return this.getAttribute(A, B)
					},
					getAttribute : (function() {
						var E = document.createElement("table"), D = false, B = "getAttribute" in E, A = /undefined|unknown/;
						if (B) {
							try {
								E.getAttribute("ext:qtip")
							} catch (C) {
								D = true
							}
							return function(F, H) {
								var G = this.dom, I;
								if (G.getAttributeNS) {
									I = G.getAttributeNS(H, F) || null
								}
								if (I == null) {
									if (H) {
										if (D
												&& G.tagName.toUpperCase() == "TABLE") {
											try {
												I = G.getAttribute(H + ":" + F)
											} catch (J) {
												I = ""
											}
										} else {
											I = G.getAttribute(H + ":" + F)
										}
									} else {
										I = G.getAttribute(F) || G[F]
									}
								}
								return I || ""
							}
						} else {
							return function(F, H) {
								var G = this.om, J, I;
								if (H) {
									I = G[H + ":" + F];
									J = A.test(typeof I) ? undefined : I
								} else {
									J = G[F]
								}
								return J || ""
							}
						}
						E = null
					})()
				});
Wtf.common.pPageSize = function(A) {
	Wtf.apply(this, A)
};
Wtf.extend(Wtf.common.pPageSize, Wtf.util.Observable, {
	beforeText : WtfGlobal.getLocaleText("wtf.paging.plugin.show"),
	afterText : WtfGlobal.getLocaleText("wtf.paging.plugin.items"),
	addBefore : "-",
	addAfter : null,
	variations : [ 5, 10, 20, 50, 100 ],
	init : function(A) {
		this.pagingToolbar = A;
		this.pagingToolbar.on("render", this.onRender, this)
	},
	addToStore : function(A) {
		if (A > 0) {
			this.sizes.push([ A ])
		}
	},
	updateStore : function() {
		var B = this.pagingToolbar.pageSize, E;
		B = (B > 0) ? B : 1;
		this.sizes = [];
		var C = this.variations;
		for ( var D = 0, A = C.length; D < A; D++) {
			this.addToStore(B - C[C.length - 1 - D])
		}
		this.addToStore(B);
		for ( var D = 0, A = C.length; D < A; D++) {
			this.addToStore(B + C[D])
		}
		this.combo.store.loadData(this.sizes);
		this.combo.setValue(this.pagingToolbar.pageSize)
	},
	changePageSize : function(E) {
		var F = this.pagingToolbar;
		E = parseInt(E) || parseInt(this.combo.getValue());
		E = (E > 0) ? E : 1;
		if (E < F.pageSize) {
			F.pageSize = E;
			var D = Math.round(F.cursor / E) + 1;
			var H = (D - 1) * E;
			var B = F.store;
			B.suspendEvents();
			for ( var C = 0, A = H - F.cursor; C < A; C++) {
				B.remove(B.getAt(0))
			}
			while (B.getCount() > E) {
				B.remove(B.getAt(B.getCount() - 1))
			}
			B.resumeEvents();
			B.fireEvent("datachanged", B);
			F.cursor = H;
			var G = F.getPageData();
			F.afterTextEl.el.innerHTML = String
					.format(F.afterPageText, G.pages);
			F.field.dom.value = D;
			F.first.setDisabled(D == 1);
			F.prev.setDisabled(D == 1);
			F.next.setDisabled(D == G.pages);
			F.last.setDisabled(D == G.pages);
			F.updateInfo()
		} else {
			this.pagingToolbar.pageSize = E;
			this.pagingToolbar.doLoad(Math.floor(this.pagingToolbar.cursor
					/ this.pagingToolbar.pageSize)
					* this.pagingToolbar.pageSize)
		}
		this.updateStore();
		this.combo.collapse()
	},
	onRender : function() {
		var A = Wtf.form.ComboBox;
		this.combo = new A({
			store : new Wtf.data.SimpleStore({
				fields : [ "pageSize" ],
				data : []
			}),
			clearTrigger : false,
			displayField : "pageSize",
			valueField : "pageSize",
			editable : false,
			mode : "local",
			triggerAction : "all",
			width : 50
		});
		this.combo.on("select", this.changePageSize, this);
		this.updateStore();
		if (this.addBefore) {
			this.pagingToolbar.add(this.addBefore)
		}
		if (this.beforeText) {
			this.pagingToolbar.add(this.beforeText)
		}
		this.pagingToolbar.add(this.combo);
		if (this.afterText) {
			this.pagingToolbar.add(this.afterText)
		}
		if (this.addAfter) {
			this.pagingToolbar.add(this.addAfter)
		}
	}
});
Wtf.KwlPagingEditorGrid = function(C) {
	Wtf.apply(this, C);
	if (!this.id) {
		this.id = "id" + Math.random() * 100000
	}
	this.emptext = this.searchEmptyText ? this.searchEmptyText : WtfGlobal
			.getLocaleText("hrms.common.search.here");
	if (this.serverSideSearch) {
		this.quickSearchTF = new Wtf.KWLTagSearch({
			id : "Quick" + this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext
		});
		if (this.bbar) {
			var E = "-";
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D + 1] = this.tmpBottom[D]
			}
			this.b1[0] = E;
			pag = new Wtf.EditorPagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.EditorPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			pag = new Wtf.EditorPagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				searchField : this.quickSearchTF,
				store : this.store,
				plugins : this.pPageSizeObj = new Wtf.common.EditorPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	} else {
		this.quickSearchTF = new Wtf.editorSearch({
			id : "Quick" + this.id,
			parentId : this.id,
			width : this.qsWidth ? this.qsWidth : 200,
			emptyText : this.emptext,
			field : this.searchField
		});
		if (this.bbar) {
			this.tmpBottom = this.bbar;
			this.b1 = new Array();
			for (D = 0; D < this.tmpBottom.length; D++) {
				this.b1[D] = this.tmpBottom[D]
			}
			pag = new Wtf.EditorPagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				parentId : this.id,
				searchField : this.quickSearchTF,
				plugins : this.pPageSizeObj = new Wtf.common.EditorPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false,
				items : this.b1
			})
		} else {
			pag = new Wtf.EditorPagingToolbar({
				pageSize : 15,
				border : false,
				id : "paggintoolbar" + this.id,
				store : this.store,
				parentId : this.id,
				searchField : this.quickSearchTF,
				plugins : this.pPageSizeObj = new Wtf.common.EditorPageSize({
					id : "pPageSize_" + this.id
				}),
				autoWidth : true,
				displayInfo : this.displayInfo ? this.displayInfo : false
			})
		}
	}
	if (!this.nopaging) {
		this.bbar = pag
	}
	this.searchLabel = this.searchLabel ? this.searchLabel : WtfGlobal
			.getLocaleText("hrms.common.QuickSearch");
	this.searchLabelSeparator = this.searchLabelSeparator ? this.searchLabelSeparator
			: " : ";
	this.searchLabel = this.searchLabel + this.searchLabelSeparator;
	if (this.tbar) {
		this.elements += ",tbar";
		if (typeof this.tbar == "object") {
			this.tmptoolbar = this.tbar;
			this.topToolbar1 = new Array();
			var A = this.tmptoolbar.length;
			var D = 0;
			var B = 2;
			for (D = 0; D < A; D++) {
				this.topToolbar1[B++] = this.tmptoolbar[D]
			}
			this.topToolbar1[0] = this.searchLabel;
			this.topToolbar1[1] = this.quickSearchTF;
			this.topToolbar = this.topToolbar1
		}
		delete this.tbar
	} else {
		this.tbar = [ this.searchLabel, this.quickSearchTF ]
	}
	this.store.on("load", function() {
		this.quickSearchTF.StorageChanged(this.store)
	}, this);
	this.store.on("datachanged", function() {
		if (this.serverSideSearch) {
			this.quickSearchTF.setPage(this.pPageSizeObj.combo.value)
		}
	}, this);
	this.doLayout();
	Wtf.KwlPagingEditorGrid.superclass.constructor.call(this)
};
Wtf.extend(Wtf.KwlPagingEditorGrid, Wtf.grid.EditorGridPanel, {
	layout : "fit",
	onRender : function(A) {
		Wtf.KwlPagingEditorGrid.superclass.onRender.call(this, A)
	}
});
Wtf.EditorPagingToolbar = Wtf.extend(Wtf.PagingToolbar, {
	searchField : null,
	paramNames : {
		start : "start",
		limit : "limit",
		ss : "ss",
		searchArray : "searchArray"
	},
	doLoad : function(C) {
		var B = {}, A = this.paramNames;
		this.myStart = C;
		B[A.start] = C;
		B[A.limit] = this.pageSize;
		if (this.searchField) {
			B[A.ss] = this.searchField.getValue()
		} else {
			B[A.ss] = "";
			B[A.searchArray] = ""
		}
		this.store.load({
			params : B
		})
	},
	onDataChange : function() {
		if (!this.rendered) {
			return
		}
		this.cursor = this.myStart;
		var C = this.getPageData(), A = C.activePage, B = C.pages;
		this.afterTextEl.el.innerHTML = String.format(this.afterPageText,
				C.pages);
		this.field.dom.value = A;
		this.first.setDisabled(A == 1);
		this.prev.setDisabled(A == 1);
		this.next.setDisabled(A == B);
		this.last.setDisabled(A == B);
		this.loading.enable();
		this.updateInfo()
	},
	onDataChange1 : function(B) {
		if (!this.rendered) {
			return
		}
		this.cursor = 0;
		var D = B.getCount();
		var F = Math.ceil((this.cursor + this.pageSize) / this.pageSize);
		var A = 0;
		if (D < this.pageSize) {
			A = 1
		} else {
			A = Math.ceil(D / this.pageSize)
		}
		var C = F;
		var E = A;
		this.afterTextEl.el.innerHTML = String.format(this.afterPageText, A);
		this.field.dom.value = C;
		this.first.setDisabled(C == 1);
		this.prev.setDisabled(C == 1);
		this.next.setDisabled(C == E);
		this.last.setDisabled(C == E);
		this.loading.enable();
		this.updateInfo1()
	},
	updateInfo1 : function() {
		if (this.displayEl) {
			var A = this.store.getCount();
			var B = A == 0 ? this.emptyMsg : String.format(this.displayMsg,
					this.cursor + 1, this.cursor + A, this.store.getCount());
			this.displayEl.update(B)
		}
	}
});
Wtf.common.EditorPageSize = function(A) {
	Wtf.apply(this, A)
};
Wtf.extend(Wtf.common.EditorPageSize, Wtf.util.Observable, {
	beforeText : "Show",
	afterText : "items",
	addBefore : "-",
	addAfter : null,
	variations : [ 5, 10, 20, 50, 100 ],
	init : function(A) {
		this.pagingToolbar = A;
		this.pagingToolbar.on("render", this.onRender, this)
	},
	addToStore : function(A) {
		if (A > 0) {
			this.sizes.push([ A ])
		}
	},
	updateStore : function() {
		var B = this.pagingToolbar.pageSize, E;
		B = (B > 0) ? B : 1;
		this.sizes = [];
		var C = this.variations;
		for ( var D = 0, A = C.length; D < A; D++) {
			this.addToStore(B - C[C.length - 1 - D])
		}
		this.addToStore(B);
		for ( var D = 0, A = C.length; D < A; D++) {
			this.addToStore(B + C[D])
		}
		this.combo.store.loadData(this.sizes);
		this.combo.setValue(this.pagingToolbar.pageSize)
	},
	changePageSize : function(F) {
		var I = this.pagingToolbar;
		F = parseInt(F) || parseInt(this.combo.getValue());
		F = (F > 0) ? F : 1;
		if (F < I.pageSize) {
			I.pageSize = F;
			var A = Math.round(I.cursor / F) + 1;
			var H = (A - 1) * F;
			var G = I.store;
			G.suspendEvents();
			for ( var B = 0, D = H - I.cursor; B < D; B++) {
				G.remove(G.getAt(0))
			}
			var C = 0;
			G.filterBy(function() {
				C++;
				if (C > F) {
					return false
				} else {
					return true
				}
			}, this);
			G.resumeEvents();
			G.fireEvent("datachanged", G);
			I.cursor = H;
			var E = I.getPageData();
			I.afterTextEl.el.innerHTML = String
					.format(I.afterPageText, E.pages);
			I.field.dom.value = A;
			I.first.setDisabled(A == 1);
			I.prev.setDisabled(A == 1);
			I.next.setDisabled(A == E.pages);
			I.last.setDisabled(A == E.pages);
			I.updateInfo()
		} else {
			this.pagingToolbar.pageSize = F;
			this.pagingToolbar.doLoad(Math.floor(this.pagingToolbar.cursor
					/ this.pagingToolbar.pageSize)
					* this.pagingToolbar.pageSize)
		}
		this.updateStore();
		this.combo.collapse()
	},
	onRender : function() {
		var A = Wtf.form.ComboBox;
		this.combo = new A({
			store : new Wtf.data.SimpleStore({
				fields : [ "pageSize" ],
				data : []
			}),
			clearTrigger : false,
			displayField : "pageSize",
			valueField : "pageSize",
			editable : false,
			mode : "local",
			triggerAction : "all",
			width : 50
		});
		this.combo.on("select", this.changePageSize, this);
		this.updateStore();
		if (this.addBefore) {
			this.pagingToolbar.add(this.addBefore)
		}
		if (this.beforeText) {
			this.pagingToolbar.add(this.beforeText)
		}
		this.pagingToolbar.add(this.combo);
		if (this.afterText) {
			this.pagingToolbar.add(this.afterText)
		}
		if (this.addAfter) {
			this.pagingToolbar.add(this.addAfter)
		}
	}
});
Wtf.editorSearch = function(A) {
	Wtf.editorSearch.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.editorSearch, Wtf.form.TextField, {
	Store : null,
	StorageArray : null,
	initComponent : function() {
		Wtf.editorSearch.superclass.initComponent.call(this);
		this.addEvents({
			"SearchComplete" : true
		})
	},
	onRender : function(B, A) {
		Wtf.editorSearch.superclass.onRender.call(this, B, A);
		this.el.dom.onkeyup = this.onKeyUp.createDelegate(this)
	},
	onKeyUp : function(C) {
		if (this.Store) {
			this.Store.clearFilter(true);
			var A = Wtf.getCmp("paggintoolbar" + this.parentId);
			if (this.getValue() != "") {
				this.Store.removeAll();
				var B = 0;
				while (B < this.StorageArray.length) {
					var D = new RegExp("^" + this.getValue() + ".*$|\\s"
							+ this.getValue() + ".*$", "i");
					if (D.test(this.StorageArray[B].get(this.field))) {
						this.Store.add(this.StorageArray[B])
					}
					B++
				}
				A.onDataChange1(this.Store)
			} else {
				this.Store.removeAll();
				for (B = 0; B < this.StorageArray.length; B++) {
					this.Store.insert(B, this.StorageArray[B])
				}
				A.doLoad(0)
			}
		}
		this.fireEvent("SearchComplete", this.Store)
	},
	StorageChanged : function(A) {
		this.Store = A;
		this.StorageArray = this.Store.getRange()
	}
});
Wtf.reg("MyQuickSearch1", Wtf.editorSearch);
Wtf.common.WtfAuditTrail = function(A) {
	Wtf.common.WtfAuditTrail.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.WtfAuditTrail,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.common.WtfAuditTrail.superclass.onRender.call(this,
								A);
						this.groupingView1 = new Wtf.grid.GroupingView({
							forceFit : true,
							showGroupName : false,
							enableGroupingMenu : true,
							hideGroupedColumn : true
						});
						this.auditRecord = Wtf.data.Record.create([ {
							name : "username",
							type : "string"
						}, {
							name : "auditid",
							type : "string"
						}, {
							name : "details",
							type : "string"
						}, {
							name : "timestamp",
							type : "date"
						}, {
							name : "ipaddr",
							type : "string"
						} ]);
						this.auditReader = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "count"
						}, this.auditRecord);
						this.auditStore = new Wtf.data.Store({
							proxy : new Wtf.data.HttpProxy({
								url : "Common/AuditTrail/getAuditData.common"
							}),
							reader : this.auditReader
						});
						this.cmodel = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer({
											width : 26
										}),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Details"),
											width : 150,
											dataIndex : "details"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.User"),
											width : 150,
											dataIndex : "username"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.AuditTrail.PerformedOn"),
											width : 150,
											renderer : WtfGlobal.dateRenderer,
											dataIndex : "timestamp",
											align : "center"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.AuditTrail.IPAddress"),
											width : 150,
											dataIndex : "ipaddr",
											groupable : true
										} ]);
						this.grid = new Wtf.grid.GridPanel(
								{
									ds : this.auditStore,
									cm : this.cmodel,
									border : false,
									loadMask : true,
									view : this.groupingView,
									trackMouseOver : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.AuditTrail.Norecordstodisplay"))
									}
								});
						this.cmodel.defaultSortable = true;
						this.comboReader = new Wtf.data.Record.create([ {
							name : "id",
							type : "string"
						}, {
							name : "name",
							type : "string"
						} ]);
						this.groupRecord = Wtf.data.Record.create([ {
							name : "groupname",
							type : "string"
						}, {
							name : "groupid",
							type : "string"
						} ]);
						this.groupReader = new Wtf.data.KwlJsonReader({
							root : "data"
						}, this.groupRecord);
						this.groupStore = new Wtf.data.Store(
								{
									proxy : new Wtf.data.HttpProxy(
											{
												url : "Common/AuditTrail/getAuditGroupData.common"
											}),
									reader : this.groupReader
								});
						this.resetBttn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									iconCls : "pwndCommon updatebuttonIcon",
									tooltip : WtfGlobal
											.getLocaleText("hrms.AuditTrail.ResetSearchResults"),
									id : "btnRec" + this.id,
									scope : this,
									disabled : false
								});
						this.resetBttn.on("click", this.handleResetClick, this);
						var B = new Wtf.Panel(
								{
									border : false,
									layout : "border",
									id : this.id + "_innerPanel",
									bodyStyle : "background:transparent;",
									items : [
											{
												border : false,
												layout : "border",
												region : "north",
												height : 70,
												bodyStyle : "background:transparent;",
												items : [ {
													region : "center",
													layout : "column",
													bodyStyle : "padding-left: 16px;padding-top: 16px",
													border : false,
													items : [ {
														border : false,
														layout : "column",
														columnWidth : 1,
														bodyStyle : "background: transparent; padding: 8px;",
														id : "searchAlert"
																+ this.id,
														items : [
																{
																	layout : "form",
																	border : false,
																	columnWidth : 0.4,
																	labelWidth : "50",
																	items : [ this.groupCombo = new Wtf.form.ComboBox(
																			{
																				id : "group"
																						+ this.id,
																				store : this.groupStore,
																				displayField : "groupname",
																				typeAhead : true,
																				mode : "local",
																				triggerAction : "all",
																				emptyText : WtfGlobal
																						.getLocaleText("hrms.AuditTrail.Selectatransaction"),
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.AuditTrail.Transaction"),
																				name : "groupid",
																				valueField : "groupid"
																			}) ]
																},
																{
																	layout : "form",
																	border : false,
																	columnWidth : 0.4,
																	anchor : "90%",
																	labelWidth : "50",
																	items : [ this.fT = new Wtf.form.TextField(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.AuditTrail.Contains"),
																				width : 200
																			}) ]
																},
																{
																	layout : "form",
																	border : false,
																	columnWidth : 0.1,
																	anchor : "90%",
																	labelWidth : "10",
																	items : [ this.bttn = new Wtf.Button(
																			{
																				text : WtfGlobal
																						.getLocaleText("hrms.common.search"),
																				scope : this,
																				handler : this.searchHandler
																			}) ]
																},
																{
																	layout : "form",
																	border : false,
																	columnWidth : 0.1,
																	anchor : "90%",
																	labelWidth : "10",
																	items : [ this.bttnReset = new Wtf.Button(
																			{
																				text : WtfGlobal
																						.getLocaleText("hrms.common.reset"),
																				scope : this,
																				handler : this.resetHandler
																			}) ]
																} ]
													} ]
												} ]
											},
											{
												region : "center",
												layout : "fit",
												items : [ new Wtf.Panel({
													layout : "fit",
													border : false,
													items : [ this.grid ]
												}) ],
												bbar : new Wtf.PagingSearchToolbar(
														{
															id : "pgTbar"
																	+ this.id,
															pageSize : 30,
															store : this.auditStore,
															displayInfo : true,
															plugins : this.pP = new Wtf.common.pPageSize(
																	{})
														})
											} ]
								});
						this.auditStore.on("datachanged", function() {
							var C = this.pP.combo.value
						}, this);
						this.auditStore.on("load", this.auditStoreload, this);
						this.add(B);
						this.auditStore.baseParams = {
							mode : 41,
							groupid : this.groupCombo.getValue(),
							search : this.fT.getValue()
						};
						calMsgBoxShow(202, 4, true);
						this.auditStore.load({
							params : {
								start : 0,
								limit : 30
							}
						});
						this.groupStore.load({
							params : {
								mode : 42
							}
						})
					},
					auditStoreload : function(A) {
						WtfGlobal.closeProgressbar()
					},
					handleResetClick : function() {
						this.groupCombo.reset();
						this.fT.reset();
						this.auditStore.baseParams = {
							mode : 41
						};
						this.auditStore.load({
							params : {
								start : 0,
								limit : this.pP.combo.value
							}
						})
					},
					searchHandler : function() {
						this.auditStore.removeAll();
						this.auditStore.baseParams = {
							mode : 41,
							groupid : this.groupCombo.getValue(),
							search : this.fT.getValue()
						};
						this.auditStore.load({
							params : {
								start : 0,
								limit : this.pP.combo.value
							}
						})
					},
					resetHandler : function() {
						this.groupCombo.setValue("");
						this.groupCombo.clearValue();
						this.fT.setValue("");
						this.auditStore.baseParams = {
							mode : 41,
							groupid : this.groupCombo.getValue(),
							search : this.fT.getValue()
						};
						this.auditStore.load({
							params : {
								start : 0,
								limit : this.pP.combo.value
							}
						})
					}
				});
//Reports module
Wtf.common.WtfReports = function(A) {
	Wtf.common.WtfReports.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.common.WtfReports,Wtf.Panel,{
 onRender : function(A){
     Wtf.common.WtfReports.superclass.onRender.call(this, A);
        
        this.groupingView = new Wtf.grid.GroupingView({
            forceFit: true,
            showGroupName: false,
            enableGroupingMenu: true,
            hideGroupedColumn: true
        });

        this.auditRecord = Wtf.data.Record.create([
	           { 
	               name: 'username',
	               type: 'string'
	           },{
	               name: 'auditid',
	               type: 'string'
	           },{
	               name: 'details',
	               type: 'string'
	           },{
	               name: 'timestamp',
	               type: 'string'
	           },{
	               name: 'ipaddr',
	               type: 'string'
	           }
	       ]);
	       
	       
	       this.auditReader = new Wtf.data.KwlJsonReader({
	           root: "data",
	            totalProperty:"count"
	       }, this.auditRecord);
	       
	       this.auditStore = new Wtf.data.Store({
	               proxy: new Wtf.data.HttpProxy({
	             url:"Common/Reports/getReportData.common"
//	               url:"Common/AuditTrail/getAuditData.common"
	           }),
	           reader: this.auditReader
	       });
	       
	       this.cmodel = new Wtf.grid.ColumnModel([new Wtf.grid.RowNumberer({
	               width:26
	       }),
	               {
	                   header: WtfGlobal.getLocaleText("hrms.common.Details"),
	                   width: 150,
	                   dataIndex: 'details'               
	               }, {
	                   header: WtfGlobal.getLocaleText("hrms.common.User"),
	                   width: 150,
	                   dataIndex: 'username'
	               }, {
	                   header: WtfGlobal.getLocaleText("hrms.AuditTrail.PerformedOn"),
	                   width: 150,
	                   renderer:WtfGlobal.dateRenderer,
	                   dataIndex: 'timestamp',
	                   align:'center'
	               }, {
	                   header: WtfGlobal.getLocaleText("hrms.AuditTrail.IPAddress"),
	                   width: 150,
	                   dataIndex: 'ipaddr',
	                   groupable:true
	               }]);
	               
	      this.grid=new Wtf.grid.GridPanel({
	           ds: this.auditStore,
	           cm: this.cmodel,
	           border: false,
	           loadMask:true,
	           view: this.groupingView,
	           trackMouseOver: true,
	           viewConfig: {
	               forceFit: true,
	               emptyText:WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("hrms.AuditTrail.Norecordstodisplay"))
	           }
	       });
	       
	       this.cmodel.defaultSortable = true;  
	       
	           this.comboReader = new Wtf.data.Record.create([
	               {name: 'id', type: 'string'},
	               {name: 'name', type: 'string'}
	           ]);
	
	       this.groupRecord = Wtf.data.Record.create([
	               {   name: 'groupname',
	                   type: 'string'
	               },{
	                   name: 'groupid',
	                   type: 'string'
	               }
	           ]);
	
	           this.groupReader = new Wtf.data.KwlJsonReader({
	               root: "data"
	           }, this.groupRecord);
	
	           this.groupStore = new Wtf.data.Store({
	                   proxy: new Wtf.data.HttpProxy({
//	                   url: "Common/Reports/getProjectData.common"
	                   url:"Common/AuditTrail/getAuditGroupData.common"
	               }),
	               reader: this.groupReader
	           });
	         
	           this.resetBttn=new Wtf.Toolbar.Button({
	                   text:WtfGlobal.getLocaleText("hrms.common.reset"),
	                   iconCls:'pwndCommon updatebuttonIcon',
	                   tooltip :WtfGlobal.getLocaleText("hrms.AuditTrail.ResetSearchResults"),
	                   id: 'btnRec' + this.id,
	                   scope: this,
	                   disabled :false
	           });
	           this.resetBttn.on('click',this.handleResetClick,this);   
	                    
	                                  
	         var innerPanel = new Wtf.Panel({
	               border : false,
	               layout : "border",
	               id : this.id + "_innerPanel",
	               bodyStyle : "background:transparent;",
	               items:[{
	                   border:false,
	                   layout:'border',
	                   //hidden:true,
	                   region:'north',
	                   height:70,
	                   bodyStyle : "background:transparent;",
	                   items : [{
	                           region:'center',
	                           layout:"column",
	                           bodyStyle:'padding-left: 16px;padding-top: 16px',
	                           border:false,
	                           items:[{
	                                   border : false,
	                                   layout : "column",
	                                   columnWidth : 1,
	                                   bodyStyle : "background: transparent; padding: 8px;",
	                                   id:"searchAlert"+this.id,
	                                   items:[{
	                                       layout : "form",
	                                       border : false,
	                                       columnWidth: .4,
	                                       labelWidth :'50',
	                                       items:[this.groupCombo=new Wtf.form.ComboBox({
	                                                       id:'group' + this.id,
	                                                       store : this.groupStore,
	                                                       displayField:'groupname',
	                                                       typeAhead:true,
	                                                       mode: 'local',
	                                                       triggerAction: 'all',
	                                                       emptyText : WtfGlobal.getLocaleText("hrms.AuditTrail.Selectatransaction"),
	                                                       fieldLabel : WtfGlobal.getLocaleText("hrms.AuditTrail.Transaction"),
	                                                       name : 'groupid',
	                                                       valueField:'groupid'
	                                                   })
	                                       ]
	                                   },{
	                                       layout : "form",
	                                       border : false,
	                                       columnWidth: .4,
	                                       anchor: '90%',
	                                       labelWidth :'50',
	                                       items:[this.fT = new Wtf.form.TextField({
	                                               fieldLabel : WtfGlobal.getLocaleText("hrms.AuditTrail.Contains"),
	                                               width : 200})
	                                       ]},{
	                                       layout : "form",
	                                       border : false,
	                                       columnWidth: .1,
	                                       anchor: '90%',
	                                       labelWidth :'10',
	                                       items:[this.bttn = new Wtf.Button({
	                                               text: WtfGlobal.getLocaleText("hrms.common.search"),
	                                               scope: this,
	                                               handler: this.searchHandler
	                                           })
	                                       ]},{
	                                           layout : "form",
	                                           border : false,
	                                           columnWidth: .1,
	                                           anchor: '90%',
	                                           labelWidth :'10',
	                                           items:[this.bttnReset = new Wtf.Button({
	                                                   text: WtfGlobal.getLocaleText("hrms.common.reset"),
	                                                   scope: this,
	                                                   handler: this.resetHandler
	                                               })
	                                           ]}
	                           ]}]}]
	                },{
	                region:'center',
	                layout:'fit',
	                items:[new Wtf.Panel({
	                                       layout:'fit',
	                                       border:false,
	                                       items:[this.grid]})],
	                                       /*tbar: ['Quick Search: ', this.quickPanelSearch = new Wtf.KWLTagSearch({
	                                           width: 200,
	                                           emptyText:'Search by User',
	                                           field: "username"
	                                       }),this.resetBttn],*/
	                                        bbar: new Wtf.PagingSearchToolbar({
	                                           id: 'pgTbar' + this.id,
	//                                                                                   searchField: this.quickPanelSearch,
	                                           pageSize: 30,
	                                           store: this.auditStore,
	                                           displayInfo: true,
	                                           plugins: this.pP =new Wtf.common.pPageSize({})
	                                       })
	               }]
	           });
	            this.auditStore.on('datachanged', function() {
	               var p = this.pP.combo.value;
	//                                                       this.quickPanelSearch.setPage(p);
	            }, this);
	            this.auditStore.on('load',this.auditStoreload,this);
	             this.add(innerPanel);
	             this.auditStore.baseParams = {
	               mode:41,
	               groupid:this.groupCombo.getValue(),
	               search:this.fT.getValue()
	             };
	             calMsgBoxShow(202,4,true);
	             this.auditStore.load({
	               params: {
	                   start:0,
	                   limit:30
	                  } 
	               });
	               this.groupStore.load({
	               params: {
	                   mode:42
	                  } 
	               });
	           },
	           auditStoreload:function(store){
	               WtfGlobal.closeProgressbar();
	//                                                       this.quickPanelSearch.StorageChanged(store);
	           },
	           handleResetClick:function(){
	               this.groupCombo.reset();
	               this.fT.reset();
	                this.auditStore.baseParams = {
	               mode:41
	             };
	             this.auditStore.load({
	               params: {
	                   start:0,
	                   limit:this.pP.combo.value
	                  } 
	               });
	           },
	           searchHandler: function() {
	             this.auditStore.removeAll();
	             this.auditStore.baseParams = {
	               mode:41,
	               groupid:this.groupCombo.getValue(),
	               search:this.fT.getValue()
	             };
	             this.auditStore.load({
	               params: {
	                   start:0,
	                   limit:this.pP.combo.value
	                  } 
	               });
	           },
	           resetHandler: function() {
	           	this.groupCombo.setValue('');
	           	this.groupCombo.clearValue();
	           	this.fT.setValue("");
	           	this.auditStore.baseParams = {
	           			mode:41,
	                       groupid:this.groupCombo.getValue(),
	                       search:this.fT.getValue()
	               };
	               this.auditStore.load({
	                 params: {
	                     start:0,
	                     limit:this.pP.combo.value
	                    } 
	                 });
	             }
	
	   });

//End

Wtf.ux.KWLGridView = function(A) {
	Wtf.apply(this, A);
	Wtf.ux.KWLGridView.superclass.constructor.call(this)
};
Wtf
		.extend(
				Wtf.ux.KWLGridView,
				Wtf.grid.GridView,
				{
					initTemplates : function() {
						var C = this.templates || {};
						if (!C.master) {
							C.master = new Wtf.Template(
									'<div class="x-grid3" hidefocus="true">',
									'<div class="x-grid3-viewport">',
									'<div class="x-grid3-header"><div class="x-grid3-header-inner"><div class="x-grid3-header-offset">{header}</div></div><div class="x-clear"></div></div>',
									'<div class="x-grid3-scroller"><div class="x-grid3-body">{body}</div><a href="#" class="x-grid3-focus" tabIndex="-1"></a></div>',
									"</div>",
									'<div class="x-grid3-resize-marker"> </div>',
									'<div class="x-grid3-resize-proxy"> </div>',
									"</div>")
						}
						if (!C.header) {
							C.header = new Wtf.Template(
									'<table border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
									'<thead><tr class="x-grid3-hd-row">{cells}</tr></thead>',
									"</table>")
						}
						if (!C.hcell) {
							C.hcell = new Wtf.Template(
									'<td class="x-grid3-hd x-grid3-cell x-grid3-td-{id}" style="{style}"><div Wtf:qtip="{tip}" {attr} class="x-grid3-hd-inner x-grid3-hd-{id}" unselectable="on" style="{istyle}">',
									this.grid.enableHdMenu ? '<a class="x-grid3-hd-btn" href="#"></a>'
											: "",
									'{value}<img class="x-grid3-sort-icon" src="',
									Wtf.BLANK_IMAGE_URL, '" />', "</div></td>")
						}
						if (!C.body) {
							C.body = new Wtf.Template("{rows}")
						}
						if (!C.row) {
							C.row = new Wtf.Template(
									'<div class="x-grid3-row {alt}" style="{tstyle}"><table class="x-grid3-row-table" border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
									"<tbody><tr>{cells}</tr>",
									(this.enableRowBody ? '<tr class="x-grid3-row-body-tr" style="{bodyStyle}"><td colspan="{cols}" class="x-grid3-body-cell" tabIndex="0" hidefocus="on"><div class="x-grid3-row-body">{body}</div></td></tr>'
											: ""), "</tbody></table></div>")
						}
						if (!C.cell) {
							C.cell = new Wtf.Template(
									'<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}" tabIndex="0" {cellAttr}>',
									'<div class="x-grid3-cell-inner x-grid3-col-{id}" unselectable="on" {attr}>{value}</div>',
									"</td>")
						}
						for ( var A in C) {
							var B = C[A];
							if (B && typeof B.compile == "function"
									&& !B.compiled) {
								B.disableFormats = true;
								B.compile()
							}
						}
						this.templates = C;
						this.tdClass = "x-grid3-cell";
						this.cellSelector = "td.x-grid3-cell";
						this.hdCls = "x-grid3-hd";
						this.rowSelector = "div.x-grid3-row";
						this.colRe = new RegExp("x-grid3-td-([^\\s]+)", "")
					},
					renderHeaders : function() {
						var C = this.cm, F = this.templates;
						var E = F.hcell;
						var B = [], H = [], G = {};
						for ( var D = 0, A = C.getColumnCount(); D < A; D++) {
							G.id = C.getColumnId(D);
							G.value = C.getColumnHeader(D) || "";
							G.style = this.getColumnStyle(D, true);
							G.tip = C.config[D].tip;
							if (C.config[D].align == "right") {
								G.istyle = "padding-right:16px"
							}
							B[B.length] = E.apply(G)
						}
						return F.header.apply({
							cells : B.join(""),
							tstyle : "width:" + this.getTotalWidth() + ";"
						})
					}
				});
Wtf.common.UpdateProfile = function(A) {
	Wtf.apply(this, {
		title : WtfGlobal.getLocaleText("hrms.common.UpdateProfile"),
		id : "updateProfileWin",
		closable : true,
		modal : true,
		iconCls : "deskeralogo",
		width : 470,
		height : 560,
		resizable : false,
		layout : "border",
		buttonAlign : "right",
		renderTo : document.body,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Update"),
			scope : this,
			handler : this.saveForm.createDelegate(this),
			disabled : true
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			scope : this,
			handler : function() {
				this.close()
			}
		} ]
	}, A);
	Wtf.common.UpdateProfile.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.UpdateProfile,
				Wtf.Window,
				{
					onRender : function(A) {
						Wtf.common.UpdateProfile.superclass.onRender.call(this,
								A);
						this.createForm();
						this
								.add(
										{
											region : "north",
											height : 75,
											border : false,
											bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
											html : getTopHtml(
													WtfGlobal
															.getLocaleText("hrms.common.UpdateProfile"),
													WtfGlobal
															.getLocaleText("hrms.common.UpdateProfile"))
										},
										{
											region : "center",
											border : false,
											bodyStyle : "background:#f1f1f1;font-size:10px;",
											autoScroll : true,
											items : this.userinfo
										})
					},
					createForm : function() {
						this.dfCmb = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Dateformat"),
							hiddenName : "formatid",
							store : Wtf.dfStore,
							width : 220,
							valueField : "formatid",
							displayField : "name",
							mode : "local",
							triggerAction : "all",
							editable : false
						});
						this.tzCmb = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Timezone"),
							hiddenName : "tzid",
							store : Wtf.timezoneStore,
							valueField : "id",
							width : 220,
							displayField : "name",
							mode : "local",
							triggerAction : "all",
							editable : false
						});
						if (!Wtf.StoreMgr.containsKey("timezone")) {
							Wtf.timezoneStore.load();
							Wtf.StoreMgr.add("timezone", Wtf.timezoneStore)
						}
						this.userinfo = new Wtf.form.FormPanel(
								{
									fileUpload : true,
									baseParams : {
										mode : 12,
										formname : "account"
									},
									url : "Common/saveUser.common",
									region : "center",
									cls : "visibleDisabled",
									bodyStyle : "background: transparent;",
									border : false,
									style : "background: transparent;padding:20px;",
									defaultType : "textfield",
									labelWidth : 125,
									items : [
											{
												name : "userid",
												xtype : "hidden"
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.username"),
												name : "username",
												id : "username",
												readOnly : true,
												cls : "readOnly",
												width : 220
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.employee.id"),
												name : "employeeid",
												readOnly : true,
												cls : "readOnly",
												width : 220
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.EMail")
														+ "*",
												name : "emailid",
												allowBlank : false,
												validator : WtfGlobal.noBlankCheck,
												width : 220,
												maxLength : 50,
												vtype : "email"
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.FirstName")
														+ "*",
												name : "firstname",
												id : "fname",
												width : 220,
												maxLength : 50,
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.LastName")
														+ "*",
												name : "lastname",
												id : "lname",
												maxLength : 50,
												width : 220,
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											},
											/*{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.userpicture"),
												name : "userimage",
												width : 225,
												inputType : "file",
												id : "userimage",
												hidden : isStandAlone ? false
														: true,
												hideLabel : isStandAlone ? false
														: true
											},*/
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.contact.no")
														+ "*",
												name : "contactnumber",
												width : 220,
												allowDecimals : false,
												validationDelay : 0,
												allowBlank : false,
												maxLength : 20,
												id : "contactno",
												xtype : "textfield"
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.address"),
												name : "address",
												width : 220,
												id : "address",
												maxLength : 255,
												xtype : "textarea"
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.AboutMe"),
												name : "aboutuser",
												width : 220,
												id : "aboutme",
												maxLength : 255,
												xtype : "textarea"
											}, this.dfCmb, this.tzCmb ]
								});
						if (!Wtf.StoreMgr.containsKey("dfstore")) {
							Wtf.dfStore.on("load", function() {
								this.getRecord()
							}, this);
							Wtf.dfStore.load();
							Wtf.StoreMgr.add("dfstore", Wtf.dfStore)
						} else {
							this.getRecord()
						}
					},
					getRecord : function() {
						Wtf.Ajax.requestEx({
							url : "Common/getparticularUserDetails.common",
							params : {
								mode : 24,
								lid : loginid
							}
						}, this, this.genSuccessResponse,
								this.genFailureResponse)
					},
					saveForm : function() {
						if (!this.userinfo.getForm().isValid()) {
							calMsgBoxShow(5, 0);
							return
						}
						this.userinfo
								.getForm()
								.submit(
										{
											waitMsg : WtfGlobal
													.getLocaleText("hrms.common.Savinguserinformation"),
											waitTitle : WtfGlobal
													.getLocaleText("hrms.common.PleaseWait"),
											success : function(f, a) {
												this
														.genSaveSuccessResponse(eval("("
																+ a.response.responseText
																+ ")"))
											},
											failure : function(f, a) {
												this
														.genSaveFailureResponse(eval("("
																+ a.response.responseText
																+ ")"))
											},
											scope : this
										})
					},
					genSuccessResponse : function(A) {
						this.userinfo.getForm().setValues(A.data[0]);
						this.buttons[0].enable()
					},
					genFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						Wtf.Msg.alert(WtfGlobal
								.getLocaleText("hrms.common.UpdateProfile"), B)
					},
					genSaveSuccessResponse : function(A) {
						if (A.success == true) {
							updatePreferences()
						}
						msgBoxShow([
								WtfGlobal.getLocaleText("hrms.common.success"),
								A.msg ], 1);
						Wtf.getCmp("updateProfileWin").close()
					},
					genSaveFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						msgBoxShow(
								[ WtfGlobal.getLocaleText("hrms.common.error"),
										B ], 2);
						Wtf.getCmp("updateProfileWin").close()
					}
				});
Wtf.common.Features = function(A) {
	Wtf.common.Features.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.Features,
				Wtf.Panel,
				{
					layout : "border",
					defaults : {
						split : true,
						border : false
					},
					initComponent : function(A) {
						Wtf
								.apply(
										this,
										{
											bbar : [
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.add.feature"),
														handler : function() {
															this
																	.showFeatureForm(false)
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.edit.feature"),
														handler : function() {
															this
																	.showFeatureForm(true)
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.delete.feature"),
														handler : this.deleteFeature,
														scope : this
													},
													"->",
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.add.activity"),
														handler : function() {
															this
																	.showActivityForm(false)
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.edit.activity"),
														handler : function() {
															this
																	.showActivityForm(true)
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.delete.activity"),
														handler : this.deleteActivity,
														scope : this
													} ]
										});
						Wtf.common.Features.superclass.initComponent.call(this,
								A)
					},
					onRender : function(A) {
						Wtf.common.Features.superclass.onRender.call(this, A);
						this.featureRecord = new Wtf.data.Record.create([
								"featureid", "featurename",
								"displayfeaturename" ]);
						this.featureStore = new Wtf.data.Store({
							url : Wtf.req.base + "UserManager.jsp",
							baseParams : {
								mode : 1
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.featureRecord)
						});
						this.featureGrid = new Wtf.grid.GridPanel({
							region : "west",
							width : "40%",
							store : this.featureStore,
							sm : new Wtf.grid.RowSelectionModel({
								singleSelect : true
							}),
							viewConfig : {
								forceFit : true
							},
							layout : "fit",
							columns : [ {
								header : "Feature Name",
								dataIndex : "featurename"
							}, {
								header : "Feature Display Name",
								dataIndex : "displayfeaturename"
							} ]
						});
						this.activityRecord = new Wtf.data.Record.create([
								"activityid", "featureid", "activityname",
								"displayactivityname" ]);
						this.activityStore = new Wtf.data.Store({
							url : Wtf.req.base + "UserManager.jsp",
							baseParams : {
								mode : 2
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.activityRecord)
						});
						this.activityGrid = new Wtf.grid.GridPanel(
								{
									region : "center",
									store : this.activityStore,
									sm : new Wtf.grid.RowSelectionModel({
										singleSelect : true
									}),
									layout : "fit",
									viewConfig : {
										forceFit : true
									},
									columns : [
											{
												header : WtfGlobal
														.getLocaleText("hrms.common.activity.name"),
												dataIndex : "activityname"
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.common.activity.display.name"),
												dataIndex : "displayactivityname"
											} ]
								});
						this.add(this.featureGrid);
						this.add(this.activityGrid);
						this.featureGrid.on("rowclick", this.filterActivities,
								this);
						this.featureStore.on("load", this.loadActivities, this);
						this.featureStore.load()
					},
					loadActivities : function() {
						this.activityStore.on("load", function() {
							this.activityStore.filter("featureid", /^[\0]*$/)
						}, this);
						this.activityStore.load()
					},
					filterActivities : function() {
						var A = this.featureGrid.getSelectionModel()
								.getSelected().get("featureid");
						this.activityStore.filter("featureid", A)
					},
					showFeatureForm : function(A) {
						var B = null;
						if (A) {
							if (this.featureGrid.getSelectionModel()
									.hasSelection() == false) {
								Wtf.MessageBox.alert("Edit Feature",
										"Please select a feature to edit.");
								return
							}
							B = this.featureGrid.getSelectionModel()
									.getSelected()
						}
						this.createFeatureWindow(B, A)
					},
					createFeatureWindow : function(rec, isEdit) {
						this.form = new Wtf.form.FormPanel(
								{
									frame : true,
									url : Wtf.req.base
											+ "UserManager.jsp?mode=3",
									labelWidth : 125,
									autoHeight : true,
									bodyStyle : "padding:5px 5px 0",
									autoWidth : true,
									defaults : {
										width : 175
									},
									defaultType : "textfield",
									items : [
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.feature.name"),
												name : "featurename",
												maskRe : /[A-Za-z_]+/,
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.feature.display.name"),
												name : "displayfeaturename",
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											} ],
									buttons : [ {
										text : WtfGlobal
												.getLocaleText("hrms.common.Save"),
										handler : function() {
											this.form
													.getForm()
													.submit(
															{
																waitMsg : WtfGlobal
																		.getLocaleText("hrms.common.saving.feature"),
																scope : this,
																success : function(
																		f, a) {
																	this.win
																			.close();
																	this
																			.genSuccessResponse(eval("("
																					+ a.response.responseText
																					+ ")"))
																},
																failure : function(
																		f, a) {
																	this.win
																			.close();
																	this
																			.genFailureResponse(eval("("
																					+ a.response.responseText
																					+ ")"))
																}
															})
										},
										scope : this
									} ]
								});
						this.form.add({
							xtype : "hidden",
							name : "featureid"
						});
						this.win = new Wtf.Window(
								{
									title : (isEdit ? WtfGlobal
											.getLocaleText("hrms.common.edit")
											: WtfGlobal
													.getLocaleText("hrms.activityList.add"))
											+ " "
											+ WtfGlobal
													.getLocaleText("hrms.common.feature"),
									closable : true,
									autoWidth : true,
									autoHeight : true,
									plain : true,
									modal : true,
									items : this.form
								});
						this.win.show();
						if (isEdit) {
							this.form.getForm().loadRecord(rec)
						}
					},
					genSuccessResponse : function(A) {
						Wtf.Msg.alert(WtfGlobal
								.getLocaleText("hrms.common.project.feature"),
								A.msg);
						if (A.success == true) {
							this.featureStore.reload()
						}
					},
					genFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						Wtf.Msg.alert(WtfGlobal
								.getLocaleText("hrms.common.project.feature"),
								B)
					},
					deleteFeature : function() {
						if (this.featureGrid.getSelectionModel().hasSelection() == false) {
							Wtf.MessageBox
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.common.select.feature.delete"));
							return
						}
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.common.delete.selected.feature"),
										function(A) {
											if (A != "yes") {
												return
											}
											var B = this.featureGrid
													.getSelectionModel()
													.getSelected();
											Wtf.Ajax.requestEx({
												url : Wtf.req.base
														+ "UserManager.jsp",
												params : {
													mode : 5,
													featureid : B
															.get("featureid")
												}
											}, this, this.genSuccessResponse,
													this.genFailureResponse)
										}, this)
					},
					showActivityForm : function(A) {
						var B = null;
						if (A) {
							if (this.activityGrid.getSelectionModel()
									.hasSelection() == false) {
								Wtf.MessageBox
										.alert(
												WtfGlobal
														.getLocaleText("hrms.common.edit.activity"),
												WtfGlobal
														.getLocaleText("hrms.common.select.activity.edit"));
								return
							}
							B = this.activityGrid.getSelectionModel()
									.getSelected()
						}
						this.createActivityWindow(B, A)
					},
					createActivityWindow : function(rec, isEdit) {
						this.aform = new Wtf.form.FormPanel(
								{
									frame : true,
									url : Wtf.req.base
											+ "UserManager.jsp?mode=4",
									labelWidth : 125,
									autoHeight : true,
									bodyStyle : "padding:5px 5px 0",
									autoWidth : true,
									defaults : {
										width : 175
									},
									defaultType : "textfield",
									items : [
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.activity.name"),
												name : "activityname",
												maskRe : /[A-Za-z_]+/,
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.activity.display.name"),
												name : "displayactivityname",
												validator : WtfGlobal.noBlankCheck,
												allowBlank : false
											},
											new Wtf.form.ComboBox(
													{
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.common.feature"),
														hiddenName : "featureid",
														store : this.featureStore,
														mode : "local",
														valueField : "featureid",
														displayField : "displayfeaturename",
														disableKeyFilter : true,
														triggerAction : "all",
														forceSelection : true,
														readOnly : isEdit,
														allowBlank : false
													}) ],
									buttons : [ {
										text : WtfGlobal
												.getLocaleText("hrms.common.Save"),
										handler : function() {
											this.aform
													.getForm()
													.submit(
															{
																waitMsg : WtfGlobal
																		.getLocaleText("hrms.common.saving.activity"),
																scope : this,
																success : function(
																		f, a) {
																	this.awin
																			.close();
																	this
																			.genSuccessResponse(eval("("
																					+ a.response.responseText
																					+ ")"))
																},
																failure : function(
																		f, a) {
																	this.awin
																			.close();
																	this
																			.genFailureResponse(eval("("
																					+ a.response.responseText
																					+ ")"))
																}
															})
										},
										scope : this
									} ]
								});
						this.aform.add({
							xtype : "hidden",
							name : "activityid"
						});
						this.awin = new Wtf.Window(
								{
									title : (isEdit ? WtfGlobal
											.getLocaleText("hrms.activityList.edit")
											: WtfGlobal
													.getLocaleText("hrms.activityList.add"))
											+ " "
											+ WtfGlobal
													.getLocaleText("hrms.common.activity"),
									closable : true,
									autoWidth : true,
									autoHeight : true,
									plain : true,
									modal : true,
									items : this.aform
								});
						this.awin.show();
						if (isEdit) {
							this.aform.getForm().loadRecord(rec)
						}
					},
					deleteActivity : function() {
						if (this.activityGrid.getSelectionModel()
								.hasSelection() == false) {
							Wtf.MessageBox
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.common.select.activity.delete"));
							return
						}
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.common.delete.selected.activity"),
										function(A) {
											if (A != "yes") {
												return
											}
											var B = this.activityGrid
													.getSelectionModel()
													.getSelected();
											Wtf.Ajax.requestEx({
												url : Wtf.req.base
														+ "UserManager.jsp",
												params : {
													mode : 6,
													activityid : B
															.get("activityid")
												}
											}, this, this.genSuccessResponse,
													this.genFailureResponse)
										}, this)
					}
				});
Wtf.common.CreateUser = function(config) {
	Wtf.apply(this, {}, config);
	this.depCmb = new Wtf.form.FnComboBox({
		store : Wtf.depStore,
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.department") + "*",
		mode : "local",
		hiddenName : "department",
		name : "department",
		width : 227,
		valueField : "id",
		displayField : "name",
		triggerAction : "all",
		forceSelection : true,
		typeAhead : true,
		allowBlank : false,
		disabled : userroleid == "1" ? false : true,
		validator : WtfGlobal.validateDropDowns,
		addNewFn : this.addDepartment.createDelegate(this),
		plugins : [ new Wtf.common.comboAddNew({
			handler : function() {
				if (userroleid == "1") {
					WtfGlobal.showmasterWindow(7, Wtf.depStore, "Add")
				}
			},
			scope : this
		}) ]
	});
	var disableRole = false;
	if (companyid == "a4792363-b0e1-4b67-992b-2851234d5ea6") {
		disableRole = true
	} else {
		if (userroleid == "1") {
			disableRole = false
		} else {
			disableRole = true
		}
	}
	this.roleCmb = new Wtf.form.ComboBox({
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.Role") + "*",
		hiddenName : "roleid",
		store : Wtf.roleStore,
		valueField : "roleid",
		displayField : "rolename",
		name : "roleid",
		allowBlank : false,
		forceSelection : true,
		disabled : disableRole,
		mode : "local",
		width : 227,
		triggerAction : "all",
		typeAhead : true
	});
	this.templaterec = new Wtf.data.Record.create([ {
		name : "name"
	}, {
		name : "templateid"
	} ]);
	this.templateStore = new Wtf.data.Store({
		url : Wtf.req.base + "PayrollHandler.jsp",
		baseParams : {
			type : "getTemplistperDesign"
		},
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, this.templaterec),
		autoLoad : false
	});
	this.templateStore
			.on(
					"load",
					function() {
						if (this.templateStore.getCount() == 0) {
							this.templateCmb.emptyText = WtfGlobal
									.getLocaleText("hrms.common.Notemplateassignedforselecteddesignation");
							this.templateCmb.reset()
						} else {
							var row = this.templateStore.findBy(
									this.findrecord, this);
							if (row != -1) {
								this.templateCmb
										.setValue(config.record.data.templateid)
							} else {
								this.templateCmb.emptyText = WtfGlobal
										.getLocaleText("hrms.common.Selectatemplate");
								this.templateCmb.reset()
							}
						}
					}, this);
	this.templateStore
			.on(
					"loadexception",
					function() {
						this.templateCmb.emptyText = WtfGlobal
								.getLocaleText("hrms.common.Notemplateassignedforselecteddesignation");
						this.templateCmb.reset()
					}, this);
	this.templateCmb = new Wtf.form.ComboBox({
		store : this.templateStore,
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.Salarytemplate"),
		hidden : true,
		hideLabel : true,
		mode : "local",
		hiddenName : "templateid",
		name : "templateid",
		width : 227,
		valueField : "templateid",
		displayField : "name",
		triggerAction : "all",
		typeAhead : true
	});
	this.desigCmb = new Wtf.form.FnComboBox({
		store : Wtf.desigStore,
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.designation") + "*",
		mode : "local",
		hiddenName : "designationid",
		name : "designationid",
		width : 227,
		allowBlank : false,
		valueField : "id",
		displayField : "name",
		disabled : userroleid == "1" ? false : true,
		triggerAction : "all",
		forceSelection : true,
		validator : WtfGlobal.validateDropDowns,
		typeAhead : true,
		addNewFn : this.addDesignation.createDelegate(this),
		plugins : [ new Wtf.common.comboAddNew({
			handler : function() {
				if (userroleid == "1") {
					WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
				}
			},
			scope : this
		}) ],
		listeners : {
			scope : this,
			Select : function(combo, record) {
				this.templateCmb.clearValue();
				this.templateStore.removeAll();
				this.templateStore.baseParams = {
					type : "getTemplistperDesign"
				};
				this.templateStore.load({
					params : {
						desigid : record.get("id"),
						sal : Wtf.getCmp("empsalary").getValue()
					}
				})
			}
		}
	});
	this.codeid = new Wtf.form.TextField(
			{
				fieldLabel : WtfGlobal.getLocaleText("hrms.common.employee.id")
						+ "*",
				name : "employeeid",
				allowBlank : false,
				width : "75%",
				id : "employeeid1"
//				regex : /^[a-zA-Z]{1,}-{1}[0-9]{1,}$|^[a-zA-Z]{1,}-{1}[0-9]{1,}-{1}[a-zA-Z]{1,}$|^[0-9]{0,}$/
			});
	var itemarr = [];
	itemarr.push({
		name : "userid",
		xtype : "hidden"
	}, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.UserName"),
		name : "username",
		readOnly : config.isEdit,
		width : "75%",
		maxLength : 30,
		allowBlank : false,
		cls : "readOnly"
	}, this.codeid, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.EMail") + "*",
		name : "emailid",
		allowBlank : false,
		maxLength : 50,
		width : "75%",
		vtype : "email"
	}, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.BankAc"),
		name : "accno",
		maxLength : 30,
		width : "75%"
	}, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.FirstName") + "*",
		name : "firstname",
		id : "fname",
		width : "75%",
		maxLength : 50,
		validator : WtfGlobal.noBlankCheck,
		allowBlank : false
	}, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.LastName") + "*",
		name : "lastname",
		id : "lname",
		width : "75%",
		maxLength : 50,
		validator : WtfGlobal.noBlankCheck,
		allowBlank : false
	}, this.roleCmb, this.depCmb, this.desigCmb, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.contact.no"),
		name : "contactnumber",
		width : "75%",
		maxLength : 20,
		id : "contactno"
	}, {
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.address"),
		name : "address",
		width : "75%",
		id : "address",
		maxLength : 255,
		xtype : "textarea"
	}, this.templateCmb, {
		xtype : "numberfield",
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.SalaryMonth"),
		hideLabel : true,
		id : "empsalary",
		hidden : true,
		name : "salary",
		maxLength : 20,
		width : "75%"
	});
	this.userinfo = new Wtf.form.FormPanel(
			{
				fileUpload : true,
				baseParams : {
					mode : 12,
					formname : "user"
				},
				url : "Common/saveUser.common",
				region : "center",
				cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder visibleDisabled",
				bodyStyle : "background: transparent;",
				border : false,
				bodyBorder : false,
				style : "background: transparent;padding-left:20px;padding-top: 20px;padding-right: 0px;",
				width : "100%",
				height : "100%",
				id : "userinfo",
				defaultType : "textfield",
				items : itemarr
			});
	this.MainWinPanel = new Wtf.Panel(
			{
				border : false,
				autoScroll : true,
				layout : "border",
				items : [
						{
							region : "north",
							id : "north1",
							border : false,
							height : 80,
							style : "background: #FFFFFF;",
							html : getTopHtml(
									(config.record == null ? WtfGlobal
											.getLocaleText("hrms.common.CreateUser")
											: WtfGlobal
													.getLocaleText("hrms.common.EditUser")),
									(config.record == null ? WtfGlobal
											.getLocaleText("hrms.common.Enteruserdetails")
											: WtfGlobal
													.getLocaleText("hrms.common.Edituserdetails")),
									"images/edit-user-popup.jpg"),
							layout : "fit"
						}, {
							region : "center",
							id : "center1",
							border : false,
							layout : "fit",
							cls : "formstyleClass2",
							items : [ this.userinfo ]
						} ]
			});
	this.win = new Wtf.Window(
			{
				iconCls : getButtonIconCls(Wtf.btype.winicon),
				title : WtfGlobal.getLocaleText("hrms.common.User"),
				id : "CNU",
				height : 600,
				width : 430,
				modal : true,
				resizable : false,
				layout : "fit",
				scope : this,
				items : [ this.MainWinPanel ],
				buttonAlign : "right",
				listeners : {
					scope : this,
					close : function() {
						this.fireEvent("close")
					}
				},
				buttons : [
						{
							text : (config.isEdit == true ? WtfGlobal
									.getLocaleText("hrms.common.Save")
									: WtfGlobal
											.getLocaleText("hrms.common.create")),
							scope : this,
							disabled : true,
							handler : function() {
								if (!this.userinfo.form.isValid()) {
									return
								} else {
									calMsgBoxShow(200, 4, true);
									this.userinfo
											.getForm()
											.submit(
													{
														waitMsg : WtfGlobal
																.getLocaleText("hrms.common.Savinguserinformation"),
														waitTitle : WtfGlobal
																.getLocaleText("hrms.common.PleaseWait"),
														success : function(f, a) {
															this.win.close();
															this
																	.genSuccessResponse(eval("("
																			+ a.response.responseText
																			+ ")"));
															Wtf.managerStore
																	.load();
															if (!Wtf.StoreMgr
																	.containsKey("manager")) {
																Wtf.StoreMgr
																		.add(
																				"manager",
																				Wtf.managerStore)
															}
														},
														failure : function(f, a) {
															this.win.close();
															this
																	.genFailureResponse(eval("("
																			+ a.response.responseText
																			+ ")"))
														},
														scope : this
													})
								}
							}
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							disabled : true,
							handler : this.cancel.createDelegate(this)
						} ]
			});
	this.win.on("show", function(obj) {
		if (obj.tools) {
			obj.tools.close.dom.style.display = "none"
		}
	}, this);
	Wtf.getCmp("empsalary").on("blur", function() {
		if (this.desigCmb.getValue() != "") {
			this.templateCmb.clearValue();
			this.templateStore.removeAll();
			this.templateStore.baseParams = {
				type : "getTemplistperDesign"
			};
			this.templateStore.load({
				params : {
					desigid : this.desigCmb.getValue(),
					sal : Wtf.getCmp("empsalary").getValue()
				}
			})
		}
	}, this);
	this.win.show();
	if (!Wtf.StoreMgr.containsKey("dep")) {
		Wtf.depStore.on("load", function() {
			this.loadDesigstore()
		}, this);
		Wtf.depStore.load();
		Wtf.StoreMgr.add("dep", Wtf.depStore)
	} else {
		this.loadDesigstore()
	}
	Wtf.common.CreateUser.superclass.constructor.call(this, config);
	this.addEvents({
		"save" : true,
		"notsave" : true,
		"close" : true
	})
};
Wtf.extend(Wtf.common.CreateUser, Wtf.Panel, {
	findrecord : function(A) {
		if (A.get("templateid") == this.record.data.templateid) {
			return true
		} else {
			return false
		}
	},
	loadRecord : function() {
		if (this.record != null) {
			this.userinfo.getForm().loadRecord(this.record)
		}
		this.templateCmb.reset();
		var ID = this.record.data.designationid;
		var RecIndex = this.desigCmb.store.findBy(function(rec) {
			if (rec.data.id == ID) {
				return true
			} else {
				return false
			}
		}, this);
		if (RecIndex != -1) {
			var desRec = this.desigCmb.store.getAt(RecIndex);
			this.desigCmb.fireEvent("select", this.desigCmb, desRec)
		}
		if (this.record.get("employeeid") == "") {
			Wtf.Ajax.requestEx({
				url : "Rec/Job/getEmpidFormat.rec",
				params : {
					flag : 208
				}
			}, this, function(req, res) {
				this.resp = eval("(" + req + ")");
				this.values = this.resp.data[0].maxempid;
				this.codeid.setValue(this.values)
			}, function(req, res) {
			})
		}
	},
	onRender : function(A) {
		Wtf.common.CreateUser.superclass.onRender.call(A)
	},
	cancel : function() {
		this.win.close();
		this.fireEvent("close")
	},
	genSuccessResponse : function(A) {
		this.fireEvent("save", A);
		this.fireEvent("close")
	},
	genFailureResponse : function(A) {
		var B = WtfGlobal.getLocaleText("hrms.common.FailedconnectionServer");
		this.fireEvent("close");
		if (A.msg) {
			B = A.msg
		}
		Wtf.Msg.alert(WtfGlobal.getLocaleText("hrms.common.UserManagement"), B)
	},
	addDesignation : function() {
		WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
	},
	addDepartment : function() {
		WtfGlobal.showmasterWindow(7, Wtf.depStore, "Add")
	},
	loadDesigstore : function() {
		if (!Wtf.StoreMgr.containsKey("desig")) {
			Wtf.desigStore.on("load", function() {
				this.loadRolestore()
			}, this);
			Wtf.desigStore.load();
			Wtf.StoreMgr.add("desig", Wtf.desigStore)
		} else {
			this.loadRolestore()
		}
	},
	loadRolestore : function() {
		if (!Wtf.StoreMgr.containsKey("role")) {
			Wtf.roleStore.on("load", function() {
				this.loadRecord();
				this.winButtonEnable()
			}, this);
			Wtf.roleStore.load();
			Wtf.StoreMgr.add("role", Wtf.roleStore)
		} else {
			this.loadRecord();
			this.winButtonEnable()
		}
	},
	winButtonEnable : function() {
		this.win.buttons[0].enable();
		this.win.buttons[1].enable();
		this.win.tools.close.dom.style.display = "block"
	}
});
Wtf.common.Permissions = function(A) {
	this.PerRecord = new Wtf.data.Record.create([ "featureid", "permission" ]);
	this.PerStore = new Wtf.data.Store({
		url : "Common/Permission/getPermissionCode.common",
		baseParams : {
			mode : 7
		},
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, this.PerRecord)
	});
	this.PerStore.on("load", this.checkActivities, this);
	this.roleRecord = new Wtf.data.Record.create([ "roleid", "rolename" ]);
	this.roleStore = new Wtf.data.Store({
		url : "Common/Permission/getRoles.common",
		baseParams : {
			mode : 8
		},
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, this.roleRecord)
	});
	this.roleCmb = new Wtf.form.ComboBox({
		fieldLabel : WtfGlobal.getLocaleText("hrms.common.Role"),
		hiddenName : "roleid",
		store : this.roleStore,
		valueField : "roleid",
		displayField : "rolename",
		mode : "local",
		anchor : "90%",
		triggerAction : "all",
		editable : false
	});
	this.applyBtn = new Wtf.Button({
		text : WtfGlobal.getLocaleText("hrms.common.Apply"),
		scope : this,
		handler : this.ApplyPermission,
		minWidth : 75
	});
	Wtf.apply(this, {
		buttons : [ this.applyBtn, {
			text : WtfGlobal.getLocaleText("hrms.common.Close"),
			scope : this,
			handler : this.cancel
		} ]
	}, A);
	Wtf.common.Permissions.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.Permissions,
				Wtf.Window,
				{
					title : WtfGlobal
							.getLocaleText("hrms.common.AssignPermission"),
					id : "AP",
					height : 500,
					width : 500,
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						if (Wtf.isIE7 || Wtf.isSafari || Wtf.isIE6) {
							this.width = 550
						}
						this.featureRecord = new Wtf.data.Record.create([
								"featureid", "featurename",
								"displayfeaturename" ]);
						this.featureStore = new Wtf.data.Store({
							url : "Common/Permission/getFeatureList.common",
							baseParams : {
								mode : 1
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.featureRecord)
						});
						this.featureStore.on("load", this.loadActivities, this);
						this.roleStore.on("load", function() {
							this.roleCmb.setValue(1);
							var B = this.roleStore.getCount();
							var C = new this.roleRecord({
								roleid : 1234,
								rolename : WtfGlobal
										.getLocaleText("hrms.payroll.addnew")
							});
							this.roleStore.insert(B, C);
							this.loadPermissions()
						}, this);
						this.roleCmb.on("select", this.loadPermissions, this);
						Wtf.common.Permissions.superclass.onRender
								.call(this, A);
						this.featureStore.load()
					},
					loadActivities : function() {
						this.ActRecord = new Wtf.data.Record.create([
								"featureid", "activityid", "activityname",
								"displayactivityname" ]);
						this.ActStore = new Wtf.data.Store({
							url : "Common/Permission/getActivityList.common",
							baseParams : {
								mode : 2
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.ActRecord)
						});
						this.ActStore.on("load", this.createWindow, this);
						this.ActStore.load()
					},
					openNewRoleWindow : function() {
						this.roleNameField = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.RoleName")
									+ " *",
							anchor : "99%",
							allowBlank : false,
							maxLength : 50
						});
						this.groupForm = new Wtf.FormPanel({
							labelWidth : 100,
							labelAlign : "left",
							border : false,
							bodyStyle : "padding:5px 5px 0",
							layout : "form",
							anchor : "100%",
							defaultType : "textfield",
							buttonAlign : "right",
							items : [ this.roleNameField ]
						});
						this.win = new Wtf.Window(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									title : WtfGlobal
											.getLocaleText("hrms.common.Role"),
									height : 100,
									width : 300,
									id : "roleWin",
									modal : true,
									resizable : false,
									scope : this,
									items : [ this.groupForm ],
									buttonAlign : "right",
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Save"),
												scope : this,
												handler : function() {
													if (!this.roleNameField
															.isValid()) {
														return
													}
													Wtf.Ajax
															.requestEx(
																	{
																		url : Wtf.req.base
																				+ "UserManager.jsp",
																		params : {
																			mode : 9,
																			rolename : this.roleNameField
																					.getValue()
																		}
																	},
																	this,
																	this.genSuccessResponse,
																	this.genFailureResponse)
												}
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												handler : function() {
													Wtf.getCmp("roleWin")
															.close()
												}
											} ]
								});
						this.win.show()
					},
					loadPermissions : function(A) {
						if (A != null && A.getValue() == 1234) {
							A.setValue(this.roleStore.getAt(0).get("roleid"));
							this.openNewRoleWindow();
							return
						}
						this.PerStore.load({
							params : {
								roleid : this.roleCmb.getValue()
							}
						})
					},
					createForm : function() {
						this.AssPerForm = new Wtf.FormPanel(
								{
									region : "center",
									cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder",
									bodyStyle : "background: transparent;",
									border : false,
									autoScroll : true,
									bodyBorder : false,
									style : "background: transparent;",
									width : "100%",
									height : "100%",
									id : "AssPerForm",
									items : [
											{
												name : "userid",
												xtype : "hidden"
											},
											{
												layout : "column",
												style : "padding:20px",
												border : false,
												items : [
														{
															columnWidth : 0.73,
															layout : "form",
															border : false,
															labelWidth : 50,
															items : this.roleCmb
														},
														{
															columnWidth : 0.23,
															layout : "form",
															border : false,
															labelWidth : 50,
															items : {
																xtype : "button",
																text : WtfGlobal
																		.getLocaleText("hrms.common.DeleteRole"),
																scope : this,
																handler : this.deleteRole
															}
														} ]
											}, {
												layout : "column",
												border : false,
												items : [ {
													columnWidth : 0.48,
													layout : "form",
													id : this.id + "-col0",
													border : false
												}, {
													columnWidth : 0.48,
													layout : "form",
													id : this.id + "-col1",
													border : false
												} ]
											} ]
								});
						for ( var A = 0; A < this.featureStore.getCount(); A++) {
							this.createFeatureSet(A, A % 2)
						}
					},
					createWindow : function() {
						this.createForm();
						this.MainWinPanel = new Wtf.Panel(
								{
									border : false,
									height : 430,
									layout : "border",
									items : [
											{
												region : "north",
												border : false,
												height : 80,
												cls : "panelstyleClass1",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.common.SetUsersPermissions"),
														WtfGlobal
																.getLocaleText("hrms.common.Setpermissionfortheusers"),
														"images/user-permission.gif"),
												layout : "fit"
											}, {
												region : "center",
												border : false,
												layout : "fit",
												cls : "formstyleClass2",
												items : [ this.AssPerForm ]
											} ]
								});
						this.add(this.MainWinPanel);
						this.doLayout();
						this.MainWinPanel.doLayout();
						this.roleStore.load()
					},
					createFeatureSet : function(B, A) {
						var E = this.featureStore.getAt(B);
						var D = new Wtf.form.FieldSet({
							id : "feature" + E.get("featureid"),
							xtype : "fieldset",
							style : "margin:10px",
							collapsible : true,
							collapsed : true,
							autoHeight : true,
							title : E.get("displayfeaturename")
						});
						this.ActStore.filter("featureid", E.get("featureid"));
						for ( var C = 0; C < this.ActStore.getCount(); C++) {
							this.createActivity(C, D)
						}
						this.ActStore.clearFilter();
						Wtf.getCmp(this.id + "-col" + A).add(D)
					},
					createActivity : function(A, B) {
						var D = this.ActStore.getAt(A);
						var C = new Wtf.form.Checkbox({
							fieldLabel : D.get("displayactivityname"),
							name : "act" + D.get("activityid"),
							id : "activity" + D.get("activityid")
						});
						B.add(C)
					},
					isChecked : function(A, B) {
						var C = this.PerStore.getAt(this.PerStore.find(
								"featureid", A.get("featureid")));
						if (C == null) {
							return false
						}
						var D = C.get("permission");
						while (B > 0) {
							D = Math.floor(D / 2);
							B--
						}
						return D % 2 == 1
					},
					checkActivities : function() {
						var C;
						var F = this.ActStore.collect("featureid");
						var D = this.roleCmb.getValue();
						this.applyBtn.setDisabled(D == "1" || D == "2"
								|| D == "3");
						for ( var E = 0; E < F.length; E++) {
							this.ActStore.filter("featureid", F[E]);
							for ( var A = 0; A < this.ActStore.getCount(); A++) {
								var B = this.ActStore.getAt(A);
								C = Wtf
										.getCmp("activity"
												+ B.get("activityid"));
								C.setValue(this.isChecked(B, A));
								C.setDisabled(D == "1" || D == "2" || D == "3")
							}
							this.ActStore.clearFilter()
						}
					},
					ApplyPermission : function() {
						var E = [];
						var D = [];
						var A = this.AssPerForm.getForm().getValues();
						for ( var C = 0; C < this.featureStore.getCount(); C++) {
							var B = this.featureStore.getAt(C).get("featureid");
							D.push(B);
							E.push(this.getNewFeatureValue(B, A))
						}
						calMsgBoxShow(200, 4, true);
						Wtf.Ajax.requestEx({
							url : "Common/Permission/setPermissions.common",
							params : {
								mode : 15,
								roleid : this.roleCmb.getValue(),
								features : D,
								permissions : E
							}
						}, this, this.genSuccessResponse,
								this.genFailureResponse)
					},
					getNewFeatureValue : function(featureid, formVal) {
						var code = 0;
						var tmp = 1;
						this.ActStore.filter("featureid", featureid);
						for ( var i = 0; i < this.ActStore.getCount(); i++) {
							var id = this.ActStore.getAt(i).get("activityid");
							if (eval("(formVal.act" + id + ")")) {
								code = code + tmp
							}
							tmp = 2 * tmp
						}
						this.ActStore.clearFilter();
						return code
					},
					cancel : function() {
						this.close()
					},
					genSuccessResponse : function(A) {
						if (A.success) {
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.success"),
											A.msg ], 1)
						} else {
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											A.msg ], 0)
						}
						if (A.success == true) {
							this.roleStore.reload()
						}
						if (Wtf.getCmp("roleWin")) {
							Wtf.getCmp("roleWin").close()
						}
					},
					genFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						Wtf.Msg.alert(WtfGlobal
								.getLocaleText("hrms.common.UserPermissions"),
								B);
						if (Wtf.getCmp("roleWin")) {
							Wtf.getCmp("roleWin").close()
						}
					},
					deleteRole : function() {
						Wtf.MessageBox.confirm(WtfGlobal
								.getLocaleText("hrms.common.confirm"),
								deleteMsgBox("role"), function(A) {
									if (A != "yes") {
										return
									}
									Wtf.Ajax.requestEx({
										url : Wtf.req.base + "UserManager.jsp",
										params : {
											mode : 10,
											roleid : this.roleCmb.getValue()
										}
									}, this, this.genSuccessResponse,
											this.genFailureResponse)
								}, this)
					}
				});
		Wtf.common.UserGrid = function(B) {
			this.usersRec = new Wtf.data.Record.create([ {
				name : "userid"
			}, {
				name : "employeeid"
			}, {
				name : "username"
			}, {
				name : "designation"
			}, {
				name : "designationid"
			}, {
				name : "department"
			}, {
				name : "departmentname"
			}, {
				name : "fname"
			}, {
				name : "lname"
			}, {
				name : "image"
			}, {
				name : "emailid"
			}, {
				name : "lastlogin",
				type : "date"
			}, {
				name : "aboutuser"
			}, {
				name : "address"
			}, {
				name : "contactno"
			}, {
				name : "manager"
			}, {
				name : "salary"
			}, {
				name : "roleid",
				mapping : "role"
			}, {
				name : "accno"
			}, {
				name : "rolename"
			} ]);
			this.userds = new Wtf.data.Store({
				reader : new Wtf.data.KwlJsonReader({
					root : "data",
					totalProperty : "count"
				}, this.usersRec),
				url : Wtf.req.base + "UserManager.jsp",
				baseParams : {
					mode : 11
				}
			});
			this.userds.load();
			this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
			this.gridcm = new Wtf.grid.ColumnModel(
					[
							this.selectionModel,
							{
								dataIndex : "image",
								width : 30,
								renderer : function(C) {
									if (!C || C == "") {
										C = Wtf.DEFAULT_USER_URL
									}
									return String
											.format(
													"<img src='{0}' style='height:18px;width:18px;vertical-align:text-top;'/>",
													C)
								}
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.common.employee.id"),
								dataIndex : "employeeid",
								autoWidth : true,
								sortable : true,
								groupable : true
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.common.UserName"),
								dataIndex : "username",
								autoWidth : true,
								sortable : true,
								groupable : true
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.EmailTemplateCmb.Name"),
								dataIndex : "fullname",
								autoWidth : true,
								sortable : true,
								groupable : true,
								renderer : function(D, E, C) {
									return (C.data["fname"] + " " + C.data["lname"])
								}
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.common.department"),
								dataIndex : "departmentname",
								autoWidth : true,
								sortable : true,
								groupable : true
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.common.EmailAddress"),
								dataIndex : "emailid",
								autoSize : true,
								sortable : true,
								renderer : WtfGlobal.renderEmailTo,
								groupable : true
							},
							{
								header : WtfGlobal
										.getLocaleText("hrms.common.last.login"),
								dataIndex : "lastlogin",
								renderer : WtfGlobal.dateRenderer,
								autoSize : true,
								sortable : true,
								groupable : true
							} ]);
			var A = [ "-", "->" ];
			if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
					Wtf.Perm.useradmin.manageuser)) {
				if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
						Wtf.Perm.useradmin.assignperm)) {
					A.push("-", new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.common.EditUser"),
						scope : this,
						iconCls : "iconeditClass",
						handler : function() {
							this.showUserForm(true)
						}
					}))
				}
			}
			A.push("-", this.assignPermBtn = new Wtf.Toolbar.Button({
				text : WtfGlobal.getLocaleText("hrms.activityList.assignperm"),
				id : "permissions" + this.id,
				allowDomMove : false,
				iconCls : "pwnd permicon",
				scope : this,
				handler : this.requestPermissions
			}));
			if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
					Wtf.Perm.useradmin.assignmanager)) {
				A.push("-", this.assignManBtn = new Wtf.Toolbar.Button({
					text : WtfGlobal
							.getLocaleText("hrms.activityList.assignmanager"),
					iconCls : "pwnd managericon",
					allowDomMove : false,
					disabled : true,
					scope : this,
					handler : function() {
						this.assignManager()
					}
				}))
			}
			this.usergrid = new Wtf.KwlGridPanel({
				layout : "fit",
				store : this.userds,
				cm : this.gridcm,
				loadMask : true,
				sm : this.selectionModel,
				searchField : "username",
				searchEmptyText : WtfGlobal
						.getLocaleText("hrms.common.search.username"),
				border : false,
				viewConfig : {
					forceFit : true
				},
				bbar : A
			});
			this.UsergridPanel = new Wtf.Panel(
					{
						title : WtfGlobal
								.getInstrMsg(WtfGlobal
										.getLocaleText("hrms.common.double.click.view.profile")),
						autoLoad : false,
						paging : false,
						layout : "fit",
						items : [ this.usergrid ]
					});
			this.innerpanel = new Wtf.Panel({
				layout : "fit",
				cls : "backcolor",
				border : false,
				items : [ this.UsergridPanel ]
			});
			Wtf.apply(this, {
				layout : "fit",
				defaults : {
					border : false,
					bodyStyle : "background: transparent;"
				},
				loasMask : true,
				autoScroll : true,
				items : [ this.usergrid ]
			});
			Wtf.common.UserGrid.superclass.constructor.call(this, B);
			this.usergrid.getSelectionModel().on("selectionchange",
					this.enableDisable, this)
		},
		Wtf
				.extend(
						Wtf.common.UserGrid,
						Wtf.Panel,
						{
							enableDisable : function(A) {
								if (A.hasSelection()) {
									this.assignManBtn.enable()
								} else {
									this.assignManBtn.disable()
								}
							},
							showUserForm : function(B) {
								var C = null;
								if (B) {
									if (this.usergrid.getSelectionModel()
											.hasSelection() == false
											|| this.usergrid
													.getSelectionModel()
													.getCount() > 1) {
										Wtf.MessageBox
												.alert(
														WtfGlobal
																.getLocaleText("hrms.common.EditUser"),
														WtfGlobal
																.getLocaleText("hrms.admin.EditUser.msg"));
										return
									}
									C = this.usergrid.getSelectionModel()
											.getSelected()
								}
								var A = new Wtf.common.CreateUser({
									isEdit : B,
									record : C
								});
								A.on("save", this.genSuccessResponse, this);
								A.on("notsave", this.genFailureResponse, this)
							},
							deleteUser : function() {
								if (this.usergrid.getSelectionModel()
										.hasSelection() == false) {
									Wtf.MessageBox
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.user.deletion"),
													WtfGlobal
															.getLocaleText("hrms.common.select.user.delete"));
									return
								}
								Wtf.MessageBox
										.confirm(
												WtfGlobal
														.getLocaleText("hrms.common.Alert"),
												WtfGlobal
														.getLocaleText("hrms.common.delete.selected.user"),
												function(C) {
													if (C != "yes") {
														return
													}
													var D = this.usergrid
															.getSelectionModel()
															.getSelections();
													var A = [];
													for ( var B = 0; B < D.length; B++) {
														A.push(D[B]
																.get("userid"))
													}
													Wtf.Ajax
															.requestEx(
																	{
																		url : Wtf.req.base
																				+ "UserManager.jsp",
																		params : {
																			mode : 13,
																			userids : A
																		}
																	},
																	this,
																	this.genSuccessResponse,
																	this.genFailureResponse)
												}, this)
							},
							changePassword : function(B) {
								var A = "";
								if (this.usergrid.getSelectionModel()
										.hasSelection() == false
										|| this.usergrid.getSelectionModel()
												.getCount() > 1) {
									Wtf.MessageBox
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.ChangePassword"),
													WtfGlobal
															.getLocaleText("hrms.common.select.one.user"));
									return
								}
								if (!B) {
									Wtf.MessageBox
											.confirm(
													WtfGlobal
															.getLocaleText("hrms.common.Alert"),
													WtfGlobal
															.getLocaleText("hrms.common.reset.password"),
													function(C) {
														if (C != "yes") {
															return
														}
														var D = this.usergrid
																.getSelectionModel()
																.getSelected();
														this
																.confirmChangePassword(
																		D, A)
													}, this)
								} else {
									this.createPasswordWindow()
								}
							},
							confirmChangePassword : function(B, A) {
								Wtf.Ajax.requestEx({
									url : Wtf.req.base + "UserManager.jsp",
									params : {
										mode : 14,
										password : A,
										userid : B.get("userid")
									}
								}, this, this.genSuccessResponse,
										this.genFailureResponse)
							},
							genSuccessResponse : function(A) {
								Wtf.Msg
										.alert(
												WtfGlobal
														.getLocaleText("hrms.common.UserManagement"),
												A.msg);
								if (A.success == true) {
									this.userds.reload()
								}
								this.enable()
							},
							genFailureResponse : function(A) {
								var B = WtfGlobal
										.getLocaleText("hrms.common.FailedconnectionServer");
								if (A.msg) {
									B = A.msg
								}
								Wtf.Msg.alert("User Management", B);
								this.enable()
							},
							requestPermissions : function() {
								var B = null;
								B = this.usergrid.getSelectionModel()
										.getSelected();
								var A = new Wtf.common.Permissions(
										{
											title : WtfGlobal
													.getLocaleText("hrms.common.UserPermissions"),
											resizable : false,
											modal : true
										});
								A.show()
							},
							createPasswordWindow : function(A) {
								this.form = new Wtf.form.FormPanel(
										{
											url : Wtf.req.base
													+ "UserManager.jsp?mode=3",
											labelWidth : 150,
											region : "center",
											border : false,
											bodyStyle : "background:transparent;padding:15px",
											cls : "formstyleClass2",
											defaults : {
												width : 175
											},
											defaultType : "textfield",
											items : [
													{
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.common.NewPassword"),
														name : "password",
														inputType : "password",
														maxLength : 60,
														id : "pwdadminuser"
													},
													{
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.common.confirm.new.password"),
														inputType : "password",
														name : "cpassword",
														vtype : "password",
														id : "cpwdadminuser",
														initialPassField : "pwdadminuser"
													} ]
										});
								this.win = new Wtf.Window(
										{
											title : WtfGlobal
													.getLocaleText("hrms.common.ChangePassword"),
											closable : true,
											width : 400,
											height : 220,
											modal : true,
											iconCls : getButtonIconCls(Wtf.btype.winicon),
											layout : "border",
											items : [
													{
														height : 65,
														border : false,
														cls : "formstyleClass3",
														region : "north",
														html : getTopHtml(
																WtfGlobal
																		.getLocaleText("hrms.common.ChangePassword"),
																WtfGlobal
																		.getLocaleText("hrms.common.ChangePassword"))
													}, this.form ],
											buttons : [
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.set"),
														handler : function() {
															if (this.form
																	.getForm()
																	.isValid() == false) {
																return
															}
															this.disable();
															var B = this.usergrid
																	.getSelectionModel()
																	.getSelected();
															this
																	.confirmChangePassword(
																			B,
																			this.form
																					.getForm()
																					.getValues().password);
															this.win.close();
															this.win.destroy()
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.cancel"),
														handler : function() {
															this.win.close();
															this.win.destroy()
														},
														scope : this
													} ]
										});
								this.win.show()
							},
							assignManager : function() {
								if (this.usergrid.getSelectionModel()
										.getCount() == 0) {
									Wtf.Msg
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.error"),
													WtfGlobal
															.getLocaleText("hrms.common.select.record.first"))
								} else {
									this.sm = new Wtf.grid.CheckboxSelectionModel(
											{
												singleSelect : false
											});
									this.cm2 = new Wtf.grid.ColumnModel(
											[
													this.sm,
													{
														header : WtfGlobal
																.getLocaleText("hrms.EmailTemplateCmb.Name"),
														dataIndex : "username",
														sortable : true
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.designation"),
														dataIndex : "designation",
														sortable : true
													} ]);
									this.recGrid = new Wtf.grid.GridPanel({
										cm : this.cm2,
										store : Wtf.managerStore,
										sm : this.sm,
										viewConfig : {
											forceFit : true
										}
									});
									if (!Wtf.StoreMgr.containsKey("manager")) {
										Wtf.managerStore.load();
										Wtf.StoreMgr.add("manager",
												Wtf.managerStore)
									}
									this.recPanel = new Wtf.Panel(
											{
												frame : true,
												border : false,
												layout : "fit",
												autoScroll : false,
												items : [ {
													border : false,
													region : "center",
													layout : "border",
													items : [
															{
																region : "north",
																height : 75,
																border : false,
																bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
																html : getTopHtml(
																		WtfGlobal
																				.getLocaleText("hrms.activityList.assignmanager"),
																		WtfGlobal
																				.getLocaleText("hrms.common.select.following.manager"))
															},
															{
																border : false,
																region : "center",
																cls : "panelstyleClass2",
																layout : "fit",
																items : [ this.recGrid ]
															} ]
												} ]
											});
									var A = new Array();
									if (!WtfGlobal.EnableDisable(
											Wtf.UPerm.assignmanager,
											Wtf.Perm.assignmanager.manage)) {
										A
												.push({
													text : WtfGlobal
															.getLocaleText("hrms.common.Save"),
													handler : this.saveassignManager,
													scope : this
												})
									}
									A
											.push({
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.recWindow.close()
												}
											});
									this.recWindow = new Wtf.Window(
											{
												iconCls : getButtonIconCls(Wtf.btype.winicon),
												layout : "fit",
												closable : true,
												width : 600,
												title : WtfGlobal
														.getLocaleText("hrms.activityList.assignmanager"),
												height : 600,
												border : false,
												modal : true,
												scope : this,
												plain : true,
												buttonAlign : "right",
												buttons : A,
												items : [ this.recPanel ]
											});
									this.recWindow.show()
								}
							},
							saveassignManager : function() {
								if (this.recGrid.getSelectionModel().getCount() == 0) {
									Wtf.Msg
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.common.select.record.first"))
								} else {
									this.user = this.usergrid
											.getSelectionModel()
											.getSelections();
									this.userids = [];
									this.assignflag = "true";
									for ( var B = 0; B < this.user.length; B++) {
										this.userids.push(this.user[B]
												.get("userid"))
									}
									this.man = this.recGrid.getSelectionModel()
											.getSelections();
									this.managerids = [];
									for ( var B = 0; B < this.man.length; B++) {
										this.managerids.push(this.man[B]
												.get("userid"))
									}
									for ( var B = 0; B < this.user.length; B++) {
										for ( var A = 0; A < this.man.length; A++) {
											if (this.user[B].get("userid") == this.man[A]
													.get("userid")) {
												this.assignflag = "false";
												break
											}
										}
									}
									if (this.assignflag == "false") {
										this.recWindow.close();
										msgBoxShow([
												WtfGlobal
														.getLocaleText("hrms.common.warning"),
												WtfGlobal
														.getLocaleText("hrms.common.PleaseSelValidRecord") ])
									} else {
										Wtf.Ajax
												.requestEx(
														{
															url : Wtf.req.base
																	+ "hrms.jsp",
															params : {
																flag : 137,
																userid : this.userids,
																managerid : this.managerids
															}
														},
														this,
														function() {
															this.recWindow
																	.close();
															msgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.success"),
																			WtfGlobal
																					.getLocaleText("hrms.common.manager.assigned.successfully") ],
																	1, 1);
															this.userds.load()
														},
														function() {
															Wtf.Msg
																	.alert(
																			WtfGlobal
																					.getLocaleText("hrms.common.error"),
																			WtfGlobal
																					.getLocaleText("hrms.admin.Errorinassigningmanager"))
														})
									}
								}
							}
						});
Wtf.common.MainAdmin = function(A) {
	Wtf.common.MainAdmin.superclass.constructor.call(this, A);
	this.addEvents({
		"adminclicked" : true,
		"featureclicked" : true,
		"masterclicked" : true
	});
	this.on("adminclicked", this.handleAdminClick, this);
	this.on("featureclicked", this.handleFeatureClick, this);
	this.on("masterclicked", this.handleMasterClick, this);
	this.actTab = null
};
Wtf.extend(Wtf.common.MainAdmin, Wtf.Panel, {
	handleAdminClick : function() {
		this.actTab = 0;
		if (this.tabpanel) {
			this.tabpanel.setActiveTab(0)
		}
	},
	handleFeatureClick : function() {
		this.actTab = 1;
		if (this.tabpanel) {
			this.tabpanel.setActiveTab(3)
		}
	},
	handleMasterClick : function() {
		this.actTab = 1;
		if (this.tabpanel) {
			this.tabpanel.setActiveTab(1)
		}
	},
	onRender : function(A) {
		Wtf.common.MainAdmin.superclass.onRender.call(this, A);
		this.adminFeatures = new Wtf.common.Features({
			title : "feature Administration",
			border : false
		});
		this.masterconfig = new Wtf.MasterConfigurator({
			layout : "fit",
			title : WtfGlobal
					.getLocaleText("hrms.administration.master.configuration"),
			border : false,
			id : "masterConfigTab",
			iconCls : getTabIconCls(Wtf.etype.hrmsmaster)
		});
		this.tabpanel = this.add(new Wtf.TabPanel({
			title : "dfdf",
			id : "subtabpanel" + this.id,
			border : false,
			activeItem : 0
		}));
		this.tabpanel.add(this.masterconfig)
	}
});
function getInstrMsg(A) {
	return "<span style='font-size:10px !important;color:gray !important;'>"
			+ A + "</span>"
}
function deleteMsgBox(A) {
	return WtfGlobal.getLocaleText({
		key : "hrms.Messages.Deleteselected",
		params : [ A ]
	}) + "<br><br><b>"
			+ WtfGlobal.getLocaleText("hrms.Messages.DateCannotbeRetrive")
			+ "</b>"
}
function calMsgBoxShow(B, D, F, C) {
	if (F === null || F === undefined) {
		F = false
	}
	if (C === null || C === undefined) {
		C = 300
	}
	var G = "";
	var E = [];
	switch (B) {
	case 1:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 2:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 3:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 4:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 5:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 6:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 7:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 8:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 9:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 10:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 11:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 12:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 13:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 14:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 15:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 16:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 17:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 18:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 19:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 20:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 21:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 22:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 23:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 24:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 25:
		E = [ WtfGlobal.getLocaleText("hrms.common.status"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 26:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 27:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 28:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 29:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 30:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 31:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 32:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 33:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 34:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 35:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 36:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 37:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 38:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 39:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 40:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 41:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 42:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 43:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 44:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 45:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 46:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 47:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 48:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 49:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 50:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 51:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 52:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 53:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 54:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 55:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 56:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 57:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 58:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 59:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 60:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 61:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 62:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 63:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 64:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 65:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 66:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 67:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 68:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 69:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 70:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 71:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 72:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 73:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 74:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 75:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 76:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 77:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 78:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 79:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 80:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 81:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 82:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 83:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 84:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 85:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 86:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 87:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 88:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 89:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 90:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 91:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 92:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 93:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 94:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 95:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 96:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 97:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 98:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 99:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 100:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 101:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 102:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 103:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 104:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 105:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 106:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 107:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 108:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 109:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 110:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 111:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 112:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 113:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 114:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 115:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 116:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 117:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 118:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 119:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 120:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 121:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 122:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 123:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 124:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 125:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 126:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 127:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 128:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 129:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 130:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 131:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 132:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 133:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 134:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 135:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 136:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 137:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 138:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 139:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 140:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 141:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 142:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 143:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 144:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 145:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 146:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 147:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 148:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 149:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 150:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 151:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 152:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 153:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 154:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 155:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 156:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 157:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 158:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 159:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 160:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 161:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 162:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 163:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 164:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 165:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 166:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 168:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 169:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 170:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 171:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 172:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 173:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 174:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 175:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 176:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 177:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 178:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 179:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 180:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 181:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 182:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 183:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 184:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 185:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 186:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 187:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 188:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 189:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 190:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 191:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 192:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 193:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 194:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 200:
		E = [ WtfGlobal.getLocaleText("hrms.common.Savingdata") ];
		G = WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B);
		break;
	case 201:
		E = [ WtfGlobal.getLocaleText("hrms.common.Deletingdata") ];
		G = WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B);
		break;
	case 202:
		E = [ WtfGlobal.getLocaleText("hrms.common.Loadingdata") ];
		G = WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B);
		break;
	case 203:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 204:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 205:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 206:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 207:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 208:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 209:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 210:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 211:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 212:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 213:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 214:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 215:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 216:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 217:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 218:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 219:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 220:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 221:
		E = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 222:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 223:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 224:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 225:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 226:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 227:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 228:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 229:
		E = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 230:
		E = [
				WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal
						.getLocaleText("hrms.timesheet.selected.timesheets.rejected.successfully") ];
		break;
	case 231:
		E = [
				WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal
						.getLocaleText("hrms.timesheet.job.cannot.deleted.already.assigned") ];
		break;
	case 232:
		E = [
				WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal
						.getLocaleText("hrms.timesheet.component.subtype.cannot.deleted") ];
		break;
	case 233:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 234:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	case 235:
		E = [ WtfGlobal.getLocaleText("hrms.common.warning"),
				WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow" + B) ];
		break;
	default:
		E = [ B[0], B[1] ]
	}
	var A = Wtf.MessageBox.INFO;
	if (D == 0) {
		A = Wtf.MessageBox.INFO
	}
	if (D == 1) {
		A = Wtf.MessageBox.ERROR
	} else {
		if (D == 2) {
			A = Wtf.MessageBox.WARNING
		} else {
			if (D == 3) {
				A = Wtf.MessageBox.INFO
			} else {
				if (D == 4) {
					A = "wtf-mb-download"
				}
			}
		}
	}
	if (F) {
		Wtf.MessageBox.show({
			msg : E,
			width : C,
			wait : true,
			title : G,
			waitConfig : {
				interval : 200
			}
		});
		msgFlag = 1
	} else {
		Wtf.MessageBox.show({
			title : E[0],
			msg : E[1],
			width : C,
			buttons : Wtf.MessageBox.OK,
			animEl : "mb9",
			icon : A
		});
		msgFlag = 0
	}
}
Wtf.ux.MultiGroupingStore = Wtf
		.extend(
				Wtf.data.GroupingStore,
				{
					sortInfo : [],
					sort : function(E, C) {
						var D = [];
						if (E instanceof Array) {
							for (i = 0, len = E.length; i < len; ++i) {
								D.push(this.fields.get(E[i]))
							}
						} else {
							D.push(this.fields.get(E))
						}
						if (D.length < 1) {
							return false
						}
						if (!C) {
							if (this.sortInfo && this.sortInfo.length > 0
									&& this.sortInfo[0].field == D[0].name) {
								C = (this.sortToggle[D[0].name] || "ASC")
										.toggle("ASC", "DESC")
							} else {
								if (D[0]) {
									C = D[0].sortDir
								} else {
									C = "ASC"
								}
							}
						}
						var B = (this.sortToggle) ? ((D[0]) ? this.sortToggle[D[0].name]
								: null)
								: null;
						var A = (this.sortInfo) ? this.sortInfo : null;
						if (D[0]) {
							this.sortToggle[D[0].name] = C
						}
						this.sortInfo = [];
						if (D[0]) {
							for (i = 0, len = D.length; i < len; ++i) {
								this.sortInfo.push({
									field : D[i].name,
									direction : C
								})
							}
						}
						if (!this.remoteSort) {
							this.applySort();
							this.fireEvent("datachanged", this)
						} else {
							if (!this.load(this.lastOptions)) {
								if (B) {
									if (D[0]) {
										this.sortToggle[D[0].name] = B
									}
								}
								if (A) {
									this.sortInfo = A
								}
							}
						}
					},
					setDefaultSort : function(B, A) {
						A = A ? A.toUpperCase() : "ASC";
						this.sortInfo = [];
						if (!B instanceof Array) {
							this.sortInfo.push({
								field : B,
								direction : A
							})
						} else {
							for (i = 0, len = B.length; i < len; ++i) {
								this.sortInfo.push({
									field : B[i].field,
									direction : A
								});
								this.sortToggle[B[i]] = A
							}
						}
					},
					constructor : function(A) {
						Wtf.ux.MultiGroupingStore.superclass.constructor.apply(
								this, arguments)
					},
					groupBy : function(C, B) {
						if (!B && this.groupField == C) {
							return
						}
						if (this.groupField) {
							for (z = 0; z < this.groupField.length; z++) {
								if (C == this.groupField[z]) {
									return
								}
							}
							this.groupField.push(C)
						} else {
							this.groupField = [ C ]
						}
						if (this.remoteGroup) {
							if (!this.baseParams) {
								this.baseParams = {}
							}
							this.baseParams["groupBy"] = C
						}
						if (this.groupOnSort) {
							this.sort(C);
							return
						}
						if (this.remoteGroup) {
							this.reload()
						} else {
							var A = this.sortInfo || [];
							if (A.field != C) {
								this.applySort()
							} else {
								this.sortData(C)
							}
							this.fireEvent("datachanged", this)
						}
					},
					applySort : function() {
						var B = this.sortInfo;
						if (B && B.length > 0 && !this.remoteSort) {
							this.sortData(B, B[0].direction)
						}
						if (!this.groupOnSort && !this.remoteGroup) {
							var A = this.getGroupState();
							if (A && A != this.sortInfo) {
								this.sortData(this.groupField)
							}
						}
					},
					getGroupState : function() {
						return this.groupOnSort && this.groupField !== false ? (this.sortInfo ? this.sortInfo
								: undefined)
								: this.groupField
					},
					sortData : function(B, D) {
						D = D || "ASC";
						var A = [];
						var E;
						for (i = 0, len = B.length; i < len; ++i) {
							E = B[i];
							A
									.push(this.fields
											.get(E.field ? E.field : E).sortType)
						}
						var C = function(I, H) {
							var M = [];
							var L = [];
							var G = B.length;
							var K;
							var J;
							for (i = 0; i < G; ++i) {
								K = B[i];
								J = K.field ? K.field : K;
								M.push(A[i](I.data[J]));
								L.push(A[i](H.data[J]))
							}
							var F;
							for (i = 0; i < G; ++i) {
								F = M[i] > L[i] ? 1 : (M[i] < L[i] ? -1 : 0);
								if (F != 0) {
									return F
								}
							}
							return F
						};
						this.data.sort(D, C);
						if (this.snapshot && this.snapshot != this.data) {
							this.snapshot.sort(D, C)
						}
					}
				});
Wtf.ux.MultiGroupingView = Wtf
		.extend(
				Wtf.grid.GroupingView,
				{
					displayEmptyFields : false,
					displayFieldSeperator : ", ",
					renderRows : function() {
						var A = this.getGroupField();
						var C = !!A;
						if (this.hideGroupedColumn) {
							var B = [];
							for (i = 0, len = A.length; i < len; ++i) {
								B.push(this.cm.findColumnIndex(A[i]))
							}
							if (!C && this.lastGroupField !== undefined) {
								this.mainBody.update("");
								for (i = 0, len = this.lastGroupField.length; i < len; ++i) {
									this.cm
											.setHidden(
													this.cm
															.findColumnIndex(this.lastGroupField[i]),
													false)
								}
								delete this.lastGroupField;
								delete this.lgflen
							} else {
								if (C && B.length > 0
										&& this.lastGroupField === undefined) {
									this.lastGroupField = A;
									this.lgflen = A.length;
									for (i = 0, len = B.length; i < len; ++i) {
										this.cm.setHidden(B[i], true)
									}
								} else {
									if (C
											&& this.lastGroupField !== undefined
											&& (A !== this.lastGroupField || this.lgflen != this.lastGroupField.length)) {
										this.mainBody.update("");
										for (i = 0, len = this.lastGroupField.length; i < len; ++i) {
											this.cm
													.setHidden(
															this.cm
																	.findColumnIndex(this.lastGroupField[i]),
															false)
										}
										this.lastGroupField = A;
										this.lgflen = A.length;
										for (i = 0, len = B.length; i < len; ++i) {
											this.cm.setHidden(B[i], true)
										}
									}
								}
							}
						}
						return Wtf.ux.MultiGroupingView.superclass.renderRows
								.apply(this, arguments)
					},
					getRows : function() {
						if (!this.enableGrouping) {
							return Wtf.grid.GroupingView.superclass.getRows
									.call(this)
						}
						var B = this.getGroupField();
						var A = [];
						var F, C = this.getGroups();
						for ( var E = 0, G = C.length; E < G; E++) {
							var I = C[E].childNodes[0].childNodes[0].innerHTML;
							if (I.substring(0, I.indexOf(":")) == B[B.length - 1]) {
								F = C[E].childNodes[1].childNodes;
								for ( var D = 0, H = F.length; D < H; D++) {
									A[A.length] = F[D]
								}
							} else {
								A = getRowsFromGroup(A,
										C[E].childNodes[1].childNodes,
										B[B.length - 1])
							}
						}
						return A
					},
					doRender : function(R, T, F, d, K, V) {
						if (T.length < 1) {
							return ""
						}
						var X = this.getGroupField();
						this.enableGrouping = !!X;
						if (!this.enableGrouping || this.isUpdating) {
							return Wtf.grid.GroupingView.superclass.doRender
									.apply(this, arguments)
						}
						var o = "width:" + this.getTotalWidth() + ";";
						var S = this.grid.getGridEl().id;
						var H = [], D, l, M, Z;
						var B = [];
						var m = 0;
						for (l = 0, M = T.length; l < M; l++) {
							m = 0;
							var A = d + l;
							var c = T[l];
							var b = 0;
							var n = [];
							var O;
							var P = [];
							var a;
							var U = 0;
							for (j = 0, gfLen = X.length; j < gfLen; j++) {
								O = X[j];
								a = c.data[O];
								if (a) {
									if (l == 0) {
										B[j] = a;
										n.push(a);
										P.push(O + ": " + a);
										n.push(a)
									} else {
										if (B[j] != a) {
											U = 1;
											n.push(a);
											P.push(O + ": " + a);
											B[j] = a;
											b = 1
										} else {
											if (X.length - 1 == j && b != 1) {
												D.rs.push(c)
											}
											if (U == 1) {
												P.push(O + ": " + a)
											}
										}
									}
								} else {
									if (this.displayEmptyFields) {
										P.push(O + ": ")
									}
								}
							}
							if (n.length < 1 && this.emptyGroupText) {
								g = this.emptyGroupText
							} else {
								g = P
							}
							for (k = 0; k < P.length; k++) {
								g = P[k];
								if (!D || D.group != g) {
									Z = S + "-gp-" + X[k] + "-"
											+ Wtf.util.Format.htmlEncode(g);
									var E = typeof this.state[Z] !== "undefined" ? !this.state[Z]
											: this.startCollapsed;
									var L = E ? "x-grid-group-collapsed" : "";
									var C;
									for (C = 0; C < X.length; C++) {
										if (g.substring(0, g.indexOf(":")) == X[C]) {
											break
										}
									}
									if (k == P.length - 1) {
										D = {
											group : g,
											gvalue : n[k],
											text : g,
											groupId : Z,
											startRow : A,
											rs : [ c ],
											cls : L,
											style : o + "padding-left:"
													+ (C * 12) + "px;"
										}
									} else {
										D = {
											group : g,
											gvalue : n[k],
											text : g,
											groupId : Z,
											startRow : A,
											rs : [],
											cls : L,
											style : o + "padding-left:"
													+ (C * 12) + "px;"
										}
									}
									H.push(D)
								} else {
									D.rs.push(c)
								}
								c._groupId = Z
							}
						}
						var N = [];
						var h = 0;
						var W = [];
						for ( var Q = 0, M = H.length; Q < M; Q++) {
							h++;
							var Y = H[Q];
							W.push({
								group : Y.group.substring(0, Y.group
										.indexOf(":")),
								startRow : Q
							});
							this.doGroupStart(N, Y, R, F, K);
							if (Y.rs.length != 0) {
								N[N.length] = Wtf.grid.GroupingView.superclass.doRender
										.call(this, R, Y.rs, F, Y.startRow, K,
												V);
								if (Y.group.substring(0, Y.group.indexOf(":")) == X[X.length - 1]) {
									var I;
									var J = H[Q + 1];
									if (J != null) {
										for (I = 0; I < X.length; I++) {
											if (J.group.substring(0, J.group
													.indexOf(":")) == X[I]) {
												break
											}
										}
										h = X.length - I
									}
									for (k = 0; k < h; k++) {
										if (k == 0) {
											var f = H[Q - k];
											this.doGroupEnd(N, f, R, F, K)
										} else {
											var e = [];
											for (kg = Q; kg >= 0; kg--) {
												var f = H[kg];
												for (row = 0; row < f.rs.length; row++) {
													e.push(f.rs[row])
												}
												if (X[X.length - 1 - k] == f.group
														.substring(0, f.group
																.indexOf(":"))) {
													break
												}
											}
											var G = {
												cls : "",
												group : f.group,
												groupId : f.groupId,
												gvalue : f.gvalue,
												rs : e,
												startRow : f.startRow,
												style : f.style,
												text : f.text
											};
											this.doGroupEnd(N, G, R, F, K)
										}
									}
									h = I
								}
							}
						}
						return N.join("")
					}
				});
function getRowsFromGroup(F, C, G) {
	for ( var E = 0, A = C.length; E < A; E++) {
		var H = C[E].childNodes[0].childNodes[0].innerHTML;
		if (H.substring(0, H.indexOf(":")) == G) {
			g = C[E].childNodes[1].childNodes;
			for ( var D = 0, B = g.length; D < B; D++) {
				F[F.length] = g[D]
			}
		} else {
			F = getRowsFromGroup(F, C[E].childNodes[1].childNodes, G)
		}
	}
	return F
}
Wtf.importMenuArray1 = function(G, C, A, H, D) {
	var F = [];
	var E = new Wtf.Action({
		text : WtfGlobal.getLocaleText("hrms.Importlog.ImportCSVFile"),
		id : "importcsvfile" + G.id + C,
		tooltip : {
			text : WtfGlobal
					.getLocaleText("hrms.Importlog.ClicktoimportCSVfile")
		},
		iconCls : "pwnd importcsv",
		scope : G,
		handler : function() {
			var I = Wtf.commonFileImportWindow(G, C, A, H, D);
			I.show()
		}
	});
	F.push(E);
	var B = new Wtf.Action({
		text : WtfGlobal.getLocaleText("hrms.Importlog.ImportXLSFile"),
		tooltip : {
			text : WtfGlobal
					.getLocaleText("hrms.Importlog.ClicktoimportXLSfile")
		},
		iconCls : "pwnd importxls",
		scope : G,
		handler : function() {
			var I = Wtf.xlsCommonFileImportWindow(G, C, A, H, D);
			I.show()
		}
	});
	F.push(B);
	return F
};
Wtf.importMenuButtonA1 = function(A, D, C) {
	var B = new Wtf.Toolbar.Button({
		iconCls : (Wtf.isChrome ? "pwnd importChrome" : "pwnd import"),
		tooltip : {
			text : WtfGlobal.getLocaleText({
				key : "hrms.Importlog.ImportmodNamedetails",
				params : [ C ]
			})
		},
		id : "importMenu" + D.id + C,
		scope : D,
		text : WtfGlobal.getLocaleText("hrms.Importlog.Import"),
		menu : A
	});
	return B
};
Wtf.callMappingInterface = function(A, B) {
	var C = Wtf.getCmp("csvMappingInterface");
	if (!C) {
		this.mapCSV = new Wtf.csvFileMappingInterface({
			csvheaders : A.csvheaders,
			modName : A.modName,
			moduleid : A.moduleid,
			customColAddFlag : A.customColAddFlag,
			typeXLSFile : A.typeXLSFile,
			impWin1 : B,
			delimiterType : A.delimiterType,
			index : A.index,
			moduleName : A.moduleName,
			store : A.store,
			scopeobj : A.scopeobj,
			cm : A.cm,
			extraParams : A.extraParams,
			extraConfig : A.extraConfig
		}).show()
	} else {
		C.impWin1 = B, C.csvheaders = A.csvheaders, C.index = A.index,
				C.extraParams = A.extraParams, C.extraConfig = A.extraConfig;
		C.show()
	}
	if (dojoInitCount <= 0) {
		dojo.cometd.init("bind");
		dojoInitCount++
	}
	if (A.typeXLSFile) {
		Wtf.getCmp("csvMappingInterface").on("importfn",
				function(H, F, E, D, I, J, G) {
					if (G == undefined) {
						G = {}
					}
					G["filepath"] = Wtf.getCmp("importxls").xlsfilename;
					G["onlyfilename"] = Wtf.getCmp("importxls").onlyfilename;
					G["filename"] = Wtf.getCmp("importxls").onlyfilename;
					G["sheetindex"] = F;
					G["moduleName"] = E;
					G["modName"] = E;
					G["extraParams"] = J;
					G["resjson"] = H;
					Wtf.ValidateFileRecords(true, E, D, I, J, G)
				}, this)
	} else {
		Wtf.getCmp("csvMappingInterface").on("importfn",
				function(I, G, F, E, D, J, H) {
					if (H == undefined) {
						H = {}
					}
					H["resjson"] = I;
					H["modName"] = F;
					H["delimiterType"] = G;
					H["extraParams"] = J;
					Wtf.ValidateFileRecords(false, F, E, D, J, H)
				}, this)
	}
};
Wtf.csvFileMappingInterface = function(A) {
	Wtf.apply(this, A);
	Wtf.csvFileMappingInterface.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.csvFileMappingInterface,
				Wtf.Window,
				{
					iconCls : "importIcon",
					width : 750,
					height : 570,
					modal : true,
					layout : "fit",
					id : "csvMappingInterface",
					closable : false,
					initComponent : function() {
						Wtf.csvFileMappingInterface.superclass.initComponent
								.call(this)
					},
					onRender : function(C) {
						Wtf.csvFileMappingInterface.superclass.onRender.call(
								this, C);
						this.addEvents({
							"importfn" : true,
							"customColAdd" : true
						});
						this.title = this.typeXLSFile ? WtfGlobal
								.getLocaleText("hrms.Importlog.MapXLSheaders")
								: WtfGlobal
										.getLocaleText("hrms.Importlog.MapCSVheaders");
						this.mappingJSON = "";
						this.masterItemFields = "";
						this.moduleRefFields = "";
						this.unMappedColumns = "";
						this.isMappingModified = "";
						this.columnRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "configid"
						}, {
							name : "validatetype"
						}, {
							name : "customflag"
						}, {
							name : "columnName"
						}, {
							name : "pojoName"
						}, {
							name : "isMandatory"
						} ]);
						this.columnDs = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								totalProperty : "count",
								root : "data"
							}, this.columnRec),
							sortInfo : {
								field : "isMandatory",
								direction : "DESC"
							},
							url : "ImportRecords/getColumnConfig.dsh"
						});
						this.columnCm = new Wtf.grid.ColumnModel(
								[ {
									header : WtfGlobal
											.getLocaleText("hrms.Importlog.Columns"),
									dataIndex : "columnName",
									renderer : function(H, G, K) {
										var J = "";
										var I = "";
										if (K.get("isMandatory")) {
											I += "font-weight:bold;color:#500;";
											J += WtfGlobal
													.getLocaleText("hrms.Importlog.MandatoryField")
										}
										return "<span wtf:qtip='" + J
												+ "' style='cursor:pointer;"
												+ I + "'>" + H + "</span>"
									}
								} ]);
						this.quickSearchTF1 = new Wtf.KWLQuickSearchUseFilter(
								{
									id : "tableColumn" + this.id,
									width : 140,
									field : "columnName",
									emptyText : WtfGlobal
											.getLocaleText("hrms.Importlog.SearchTableColumn")
								});
						this.tableColumnGrid = new Wtf.grid.GridPanel({
							ddGroup : "mapColumn",
							enableDragDrop : true,
							store : this.columnDs,
							sm : new Wtf.grid.RowSelectionModel({
								singleSelect : true
							}),
							cm : this.columnCm,
							height : 370,
							border : false,
							tbar : [ this.quickSearchTF1 ],
							loadMask : true,
							view : new Wtf.grid.GridView({
								forceFit : true
							})
						});
						this.columnDs.on("load", function() {
							if (this.mappedColsDs.getCount() > 0) {
								for ( var H = 0; H < this.mappedColsDs
										.getCount(); H++) {
									for ( var G = 0; G < this.columnDs
											.getCount(); G++) {
										if (this.mappedColsDs.getAt(H)
												.get("id") == this.columnDs
												.getAt(G).get("id")) {
											this.columnDs.remove(this.columnDs
													.getAt(G));
											break
										}
									}
								}
							}
							this.quickSearchTF1.StorageChanged(this.columnDs)
						}, this);
						this.mappedColsData = "";
						this.mappedRecord = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "configid"
						}, {
							name : "validatetype"
						}, {
							name : "customflag"
						}, {
							name : "columnName",
							type : "string"
						}, {
							name : "pojoName",
							type : "string"
						}, {
							name : "isMandatory"
						} ]);
						this.mappedColsDs = new Wtf.data.JsonStore({
							jsonData : this.mappedColsData,
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, this.mappedRecord)
						});
						var B = new Wtf.grid.ColumnModel(
								[ {
									header : WtfGlobal
											.getLocaleText("hrms.Importlog.MappedColumns"),
									dataIndex : "columnName"
								} ]);
						this.mappedColsGrid = new Wtf.grid.GridPanel(
								{
									ddGroup : "restoreColumn",
									enableDragDrop : true,
									sm : new Wtf.grid.RowSelectionModel({
										singleSelect : true
									}),
									store : this.mappedColsDs,
									cm : B,
									height : 370,
									border : false,
									tbar : [ {
										xtype : "panel",
										height : 10,
										border : false
									} ],
									loadMask : true,
									view : new Wtf.grid.GridView(
											{
												forceFit : true,
												emptyText : WtfGlobal
														.getLocaleText("hrms.Importlog.DragandDropcolumnshere")
											})
								});
						this.quickSearchTF = new Wtf.KWLQuickSearchUseFilter(
								{
									id : "csvHeader" + this.id,
									width : 140,
									field : "header",
									emptyText : (this.typeXLSFile ? WtfGlobal
											.getLocaleText("hrms.Importlog.SearchxlsHeaders")
											: WtfGlobal
													.getLocaleText("hrms.Importlog.SearchcsvHeaders"))
								});
						this.csvHeaderDs = new Wtf.data.JsonStore({
							fields : [ {
								name : "header"
							}, {
								name : "index"
							}, {
								name : "isMapped"
							} ],
							sortInfo : {
								field : "header",
								direction : "ASC"
							}
						});
						this.csvHeaderDs.on("datachanged", function() {
							this.totalHeaders = this.csvHeaderDs.getCount()
						}, this);
						this.tempFileHeaderDs = new Wtf.data.JsonStore({
							fields : [ {
								name : "header"
							}, {
								name : "index"
							} ],
							sortInfo : {
								field : "header",
								direction : "ASC"
							}
						});
						var F = WtfGlobal
								.getLocaleText("hrms.Importlog.CSVHeaders");
						var A = WtfGlobal
								.getLocaleText("hrms.Importlog.CSVHeadersfromgivenCSVfile");
						if (this.typeXLSFile) {
							F = WtfGlobal
									.getLocaleText("hrms.Importlog.XLSHeaders");
							A = WtfGlobal
									.getLocaleText("hrms.Importlog.XLSHeadersfromgivenCSVfile")
						}
						var E = new Wtf.grid.ColumnModel([ {
							header : F,
							dataIndex : "header"
						} ]);
						this.csvHeaderGrid = new Wtf.grid.GridPanel({
							ddGroup : "mapHeader",
							enableDragDrop : true,
							sm : new Wtf.grid.RowSelectionModel({
								singleSelect : true
							}),
							height : 370,
							store : this.csvHeaderDs,
							cm : E,
							border : false,
							loadMask : true,
							tbar : [ this.quickSearchTF ],
							view : new Wtf.grid.GridView({
								forceFit : true
							})
						});
						this.mappedCsvheaders = "";
						this.mappedCsvHeaderDs = new Wtf.data.JsonStore({
							fields : [ {
								name : "header"
							}, {
								name : "index"
							} ]
						});
						this.mappedCsvHeaderDs.loadData(this.mappedCsvheaders);
						var D = new Wtf.grid.ColumnModel(
								[ {
									header : WtfGlobal
											.getLocaleText("hrms.Importlog.MappedHeaders"),
									dataIndex : "header"
								} ]);
						this.mappedCsvHeaderGrid = new Wtf.grid.GridPanel(
								{
									ddGroup : "restoreHeader",
									enableDragDrop : true,
									sm : new Wtf.grid.RowSelectionModel({
										singleSelect : true
									}),
									store : this.mappedCsvHeaderDs,
									cm : D,
									height : 370,
									border : false,
									loadMask : true,
									tbar : [ {
										xtype : "panel",
										height : 10,
										border : false
									} ],
									view : new Wtf.grid.GridView(
											{
												forceFit : true,
												emptyText : WtfGlobal
														.getLocaleText("hrms.Importlog.DragandDropHeadershere")
											})
								});
						this
								.add({
									border : false,
									layout : "border",
									items : [
											{
												region : "north",
												border : false,
												height : 80,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												items : [ {
													xtype : "panel",
													border : false,
													height : 70,
													html : getImportTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.Importlog.MapHeaders"),
															"<ul style='list-style-type:disc;padding-left:15px;'><li>"
																	+ WtfGlobal
																			.getLocaleText({
																				key : "hrms.Importlog.ImportformHeader1",
																				params : [ F ]
																			})
																	+ "</li><li>"
																	+ WtfGlobal
																			.getLocaleText("hrms.Importlog.ImportformHeader2")
																	+ "</li></ul>",
															"images/link2.jpg",
															true,
															"10px 0 0 5px",
															"7px 0px 0px 10px")
												} ]
											},
											{
												region : "center",
												autoScroll : true,
												bodyStyle : "background:white;font-size:10px;",
												border : false,
												layout : "column",
												items : [
														{
															xtype : "panel",
															columnWidth : 0.25,
															border : false,
															layout : "fit",
															autoScroll : true,
															items : this.csvHeaderGrid
														},
														{
															xtype : "panel",
															columnWidth : 0.24,
															border : false,
															layout : "fit",
															autoScroll : true,
															items : this.mappedCsvHeaderGrid
														},
														{
															xtype : "panel",
															columnWidth : 0.24,
															border : false,
															layout : "fit",
															autoScroll : true,
															items : this.mappedColsGrid
														},
														{
															xtype : "panel",
															columnWidth : 0.25,
															border : false,
															layout : "fit",
															autoScroll : true,
															items : this.tableColumnGrid
														} ]
											} ],
									buttonAlign : "right",
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.Importlog.ChangePreferences"),
												minWidth : 80,
												handler : function() {
													this.impWin1.show();
													this.hide()
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.Importlog.AutoMapColumns"),
												minWidth : 80,
												handler : this.autoMapHeaders,
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.Importlog.AnalyzeData"),
												minWidth : 80,
												handler : function() {
													var I = this.mappedCsvHeaderDs
															.getCount();
													var H = this.mappedColsDs
															.getCount();
													if (I == 0 && H == 0) {
														WtfImportMsgBox(43)
													} else {
														if (this.columnDs
																.getCount() > 0) {
															for ( var G = 0; G < this.columnDs
																	.getCount(); G++) {
																if (this.columnDs
																		.getAt(G).data.isMandatory) {
																	WtfImportMsgBox(44);
																	return
																}
															}
														}
														if (I == H) {
															this
																	.generateJsonForXML();
															if (this.typeXLSFile) {
																this
																		.fireEvent(
																				"importfn",
																				this.mappingJSON,
																				this.index,
																				this.moduleName,
																				this.store,
																				this.scopeobj,
																				this.extraParams,
																				this.extraConfig)
															} else {
																this
																		.fireEvent(
																				"importfn",
																				this.mappingJSON,
																				this.delimiterType,
																				this.moduleName,
																				this.store,
																				this.scopeobj,
																				this.extraParams,
																				this.extraConfig)
															}
															this.hide()
														} else {
															WtfImportMsgBox(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.Importlog.HeaderMapping"),
																			WtfGlobal
																					.getLocaleText("hrms.Importlog.Pleaseselectcolumnforselectedheader") ],
																	0)
														}
													}
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												minWidth : 80,
												handler : function() {
													closeImportWindow()
												},
												scope : this
											} ]
								});
						this
								.on(
										"show",
										function() {
											if (!this.headerConfig
													|| this.headerConfig != this.csvheaders) {
												this.headerConfig = this.csvheaders;
												this.mappedColsDs.removeAll();
												this.mappedCsvHeaderDs
														.removeAll();
												this.loadHeaderData();
												if (this.columnDs.getCount() > 0) {
													this.columnDs
															.loadData(this.columnDs.reader.jsonData)
												} else {
													this.columnDs
															.load({
																params : {
																	module : this.modName
																}
															})
												}
											}
										});
						this.columnDs.on("add", function() {
							this.isMappingModified = true
						}, this);
						this.mappedColsDs.on("add", function() {
							this.isMappingModified = true
						}, this);
						this.csvHeaderDs.on("add", function() {
							this.isMappingModified = true
						}, this);
						this.mappedCsvHeaderDs.on("add", function() {
							this.isMappingModified = true
						}, this);
						this
								.on(
										"afterlayout",
										function() {
											function H(J, I) {
												return diff = J.getCount()
														- I.getCount()
											}
											function G(J) {
												var K = mappedHeaderStore
														.getAt(J);
												if (K !== undefined) {
													mappedHeaderStore.remove(K)
												}
												var I = mappedColumnStore
														.getAt(J);
												if (I !== undefined) {
													mappedColumnStore.remove(I);
													columnStore.add(I);
													columnStore
															.sort("columnName",
																	"ASC");
													columnStore.sort(
															"isMandatory",
															"DESC")
												}
											}
											columnStore = this.columnDs;
											columnGrid = this.tableColumnGrid;
											mappedColumnStore = this.mappedColsDs;
											mappedColumGrid = this.mappedColsGrid;
											headerStore = this.csvHeaderDs;
											headerGrid = this.csvHeaderGrid;
											mappedHeaderStore = this.mappedCsvHeaderDs;
											mappedHeaderGrid = this.mappedCsvHeaderGrid;
											DropTargetEl = mappedHeaderGrid
													.getView().el.dom.childNodes[0].childNodes[1];
											DropTarget = new Wtf.dd.DropTarget(
													DropTargetEl,
													{
														ddGroup : "mapHeader",
														notifyDrop : function(
																L, K, J) {
															function I(M, N, O) {
																if (H(
																		mappedHeaderStore,
																		mappedColumnStore) == 0) {
																	if (columnStore
																			.getCount() != 0) {
																		var P = new Wtf.data.Record(
																				M.data);
																		mappedHeaderStore
																				.add(P)
																	} else {
																		WtfImportMsgBox(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.Importlog.HeaderMapping"),
																						WtfGlobal
																								.getLocaleText("hrms.Importlog.Nocolumnformapping") ],
																				0)
																	}
																} else {
																	WtfImportMsgBox(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.Importlog.HeaderMapping"),
																					WtfGlobal
																							.getLocaleText("hrms.Importlog.Pleasemapthepreviousheaderfirst") ],
																			0)
																}
															}
															Wtf
																	.each(
																			L.dragData.selections,
																			I);
															return (true)
														}
													});
											DropTargetEl = headerGrid.getView().el.dom.childNodes[0].childNodes[1];
											DropTarget = new Wtf.dd.DropTarget(
													DropTargetEl,
													{
														ddGroup : "restoreHeader",
														notifyDrop : function(
																L, K, J) {
															function I(M, N, O) {
																G(L.grid.store
																		.indexOf(M))
															}
															Wtf
																	.each(
																			L.dragData.selections,
																			I);
															return (true)
														}
													});
											DropTargetEl = mappedColumGrid
													.getView().el.dom.childNodes[0].childNodes[1];
											DropTarget = new Wtf.dd.DropTarget(
													DropTargetEl,
													{
														ddGroup : "mapColumn",
														copy : true,
														notifyDrop : function(
																L, K, J) {
															function I(M, N, O) {
																if (H(
																		mappedHeaderStore,
																		mappedColumnStore) == 1) {
																	mappedColumnStore
																			.add(M);
																	L.grid.store
																			.remove(M)
																} else {
																	WtfImportMsgBox(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.Importlog.HeaderMapping"),
																					WtfGlobal
																							.getLocaleText("hrms.Importlog.Pleaseselecttheheaderfirst") ],
																			0)
																}
															}
															Wtf
																	.each(
																			L.dragData.selections,
																			I);
															return (true)
														}
													});
											DropTargetEl = columnGrid.getView().el.dom.childNodes[0].childNodes[1];
											DropTarget = new Wtf.dd.DropTarget(
													DropTargetEl,
													{
														ddGroup : "restoreColumn",
														copy : true,
														notifyDrop : function(
																L, K, J) {
															function I(M, N, O) {
																G(L.grid.store
																		.indexOf(M))
															}
															Wtf
																	.each(
																			L.dragData.selections,
																			I);
															return (true)
														}
													})
										}, this)
					},
					loadHeaderData : function() {
						this.csvHeaderDs.loadData(this.csvheaders);
						this.quickSearchTF.StorageChanged(this.csvHeaderDs)
					},
					autoMapHeaders : function() {
						this.columnDs.sort("columnName", "ASC");
						this.csvHeaderDs.sort("header", "ASC");
						if (this.csvHeaderDs.getCount() > 0) {
							if (this.tempFileHeaderDs.getCount() > 0) {
								this.tempFileHeaderDs.removeAll()
							}
							this.tempFileHeaderDs.loadData(this.csvheaders)
						}
						for ( var C = 0; C < this.columnDs.getCount(); C++) {
							var A = this.columnDs.getAt(C);
							var F = A.data.columnName;
							F = F.trim();
							for ( var B = 0; B < this.tempFileHeaderDs
									.getCount(); B++) {
								var E = this.tempFileHeaderDs.getAt(B);
								var G = E.data.header;
								G = G.trim();
								if (F.toLowerCase() == G.toLowerCase()) {
									this.columnDs.remove(A);
									this.mappedColsDs.add(A);
									this.tempFileHeaderDs.remove(E);
									this.mappedCsvHeaderDs.add(E);
									C--
								}
							}
						}
						for (C = 0; C < this.columnDs.getCount(); C++) {
							A = this.columnDs.getAt(C);
							F = A.data.columnName;
							F = F.trim();
							var D = new RegExp("^" + F, "i");
							for (B = 0; B < this.tempFileHeaderDs.getCount(); B++) {
								E = this.tempFileHeaderDs.getAt(B);
								G = E.data.header;
								G = G.trim();
								if (D.test(G)) {
									this.columnDs.remove(A);
									this.mappedColsDs.add(A);
									this.tempFileHeaderDs.remove(E);
									this.mappedCsvHeaderDs.add(E);
									C--
								}
							}
						}
						for (B = 0; B < this.tempFileHeaderDs.getCount(); B++) {
							E = this.tempFileHeaderDs.getAt(B);
							G = E.data.header;
							G = G.trim();
							D = new RegExp("^" + G, "i");
							for (C = 0; C < this.columnDs.getCount(); C++) {
								A = this.columnDs.getAt(C);
								F = A.data.columnName;
								F = F.trim();
								if (D.test(F)) {
									this.columnDs.remove(A);
									this.mappedColsDs.add(A);
									this.tempFileHeaderDs.remove(E);
									this.mappedCsvHeaderDs.add(E);
									B--
								}
							}
						}
						this.columnDs.sort("isMandatory", "DESC");
						if (this.mappedColsDs.getCount() == 0) {
							WtfImportMsgBox(52, 0)
						}
					},
					generateJsonForXML : function() {
						this.mappingJSON = "";
						this.masterItemFields = "";
						this.moduleRefFields = "";
						this.unMappedColumns = "";
						for ( var A = 0; A < this.mappedCsvHeaderDs.getCount(); A++) {
							this.mappingJSON += '{"csvindex":"'
									+ this.mappedCsvHeaderDs.getAt(A).get(
											"index")
									+ '","csvheader":"'
									+ this.mappedCsvHeaderDs.getAt(A).get(
											"header")
									+ '","columnname":"'
									+ this.mappedColsDs.getAt(A)
											.get("pojoName") + '"},';
							var B = this.mappedColsDs.getAt(A).get(
									"validatetype");
							if (B == "ref" || B == "refdropdown") {
								if (this.mappedColsDs.getAt(A).get("configid")
										.trim().length > 0) {
									this.masterItemFields += " "
											+ this.mappedColsDs.getAt(A).get(
													"columnName") + ","
								} else {
									this.moduleRefFields += " "
											+ this.mappedColsDs.getAt(A).get(
													"columnName") + ","
								}
							}
						}
						this.mappingJSON = this.mappingJSON.substr(0,
								this.mappingJSON.length - 1);
						this.mappingJSON = '{"root":[' + this.mappingJSON
								+ "]}";
						this.masterItemFields = this.masterItemFields.length > 0 ? this.masterItemFields
								.substr(0, this.masterItemFields.length - 1)
								: this.masterItemFields.trim();
						this.moduleRefFields = this.moduleRefFields.length > 0 ? this.moduleRefFields
								.substr(0, this.moduleRefFields.length - 1)
								: this.moduleRefFields.trim();
						for (A = 0; A < this.columnDs.getCount(); A++) {
							this.unMappedColumns += " "
									+ this.columnDs.getAt(A).get("columnName")
									+ ","
						}
						this.unMappedColumns = this.unMappedColumns.length > 0 ? this.unMappedColumns
								.substr(0, this.unMappedColumns.length - 1)
								: this.unMappedColumns.trim()
					}
				});
Wtf.ValidateFileRecords = function(I, A, G, D, F, E) {
	var B = "ImportRecords/importRecords.dsh";
	if (E == undefined) {
		E = {}
	} else {
		if (E.url != undefined) {
			B = E.url
		}
	}
	E["moduleName"] = A;
	E["extraParams"] = F;
	var C = {};
	C.url = B;
	C.extraConfig = E;
	C.extraParams = F;
	C.store = G;
	C.scopeobj = D;
	var H = Wtf.getCmp("IWValidationWindow");
	if (!H) {
		new Wtf.IWValidationWindow({
			title : WtfGlobal
					.getLocaleText("hrms.Importlog.ValidationAnalysisReport"),
			prevWindow : Wtf.getCmp("csvMappingInterface"),
			typeXLSFile : I,
			importParams : C
		}).show()
	} else {
		H.show()
	}
};
Wtf.IWValidationWindow = function(A) {
	Wtf.IWValidationWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.IWValidationWindow,
				Wtf.Window,
				{
					iconCls : "importIcon",
					width : 750,
					height : 570,
					modal : true,
					layout : "border",
					id : "IWValidationWindow",
					closable : false,
					initComponent : function(A) {
						Wtf.IWValidationWindow.superclass.initComponent.call(
								this, A);
						this.prevButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Importlog.Remapheader"),
									scope : this,
									minWidth : 80,
									handler : function() {
										if (this.prevWindow) {
											this.prevWindow.show()
										}
										this.hide()
									}
								});
						this.importButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Importlog.ImportData"),
									scope : this,
									minWidth : 80,
									handler : this.importRecords
								});
						this.cancelButton = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							scope : this,
							minWidth : 80,
							handler : function() {
								closeImportWindow()
							}
						});
						this.buttons = [ this.prevButton, this.importButton,
								this.cancelButton ]
					},
					onRender : function(A) {
						Wtf.IWValidationWindow.superclass.onRender
								.call(this, A);
						this.on("show", function() {
							var B = Wtf.getCmp("importwindow");
							var C = Wtf.getCmp("csvMappingInterface");
							if ((B && B.isPrefModified)
									|| (C && C.isMappingModified)) {
								if (B) {
									B.isPrefModified = false
								}
								if (C) {
									C.isMappingModified = false
								}
								this.validateRecords()
							}
						}, this);
						this.northMessage = "<ul style='list-style-type:disc;padding-left:15px;'><li>"
								+ WtfGlobal
										.getLocaleText("hrms.Importlog.northMessage1")
								+ "</li><li>"
								+ WtfGlobal
										.getLocaleText("hrms.Importlog.northMessage2")
								+ "</li>";
						this
								.add(this.northPanel = new Wtf.Panel(
										{
											region : "north",
											height : 70,
											border : false,
											bodyStyle : "background:white;padding:7px",
											html : getImportTopHtml(
													WtfGlobal
															.getLocaleText("hrms.Importlog.Listofallinvalidrecordsfromthefile"),
													this.northMessage + "</ul>",
													"images/import.png",
													true, "0px",
													"2px 0px 0px 10px")
										}));
						this.columnRec = new Wtf.data.Record.create([ "col0",
								"col1", "col2", "col3", "col4", "col5", "col6",
								"col7", "col8", "col9", "col10", "col11",
								"col12", "col13", "col14", "col15", "col16",
								"col17", "col18", "col19", "col20", "col21",
								"col22", "col23", "col24", "col25", "col26",
								"col27", "col28", "col29", "col30", "col31",
								"col32", "col33", "col4", "col335", "col36",
								"col37", "col38", "col39", "col40", "col41",
								"col42", "col43", "col44", "col45", "col46",
								"col47", "col48", "col49", "col50", "col51",
								"col52", "col53", "col54", "col55", "col56",
								"col57", "col58", "col59", "col60", "col61",
								"col62", "col63", "col64", "col65", "col66",
								"col67", "col68", "col69", "col70", "col71",
								"col72", "col73", "col74", "col75", "col76",
								"col77", "col78", "col79", "col80", "col81",
								"col82", "col83", "col84", "col85", "col86",
								"col87", "col88", "col89", "invalidcolumns",
								"validateLog" ]);
						this.colsReader = new Wtf.data.JsonReader({
							root : "data",
							totalProperty : "count"
						}, this.columnRec);
						this.columnDs = new Wtf.data.Store({
							proxy : new Wtf.data.PagingMemoryProxy([]),
							reader : new Wtf.data.JsonReader({
								totalProperty : "count",
								root : "data"
							}, this.columnRec)
						});
						this.columnCm = new Wtf.grid.ColumnModel([ {
							header : " ",
							dataIndex : "col0"
						} ]);
						this.sm = new Wtf.grid.RowSelectionModel({
							singleSelect : true
						});
						this.gridView = new Wtf.grid.GridView({});
						this.Grid = new Wtf.grid.GridPanel(
								{
									store : this.columnDs,
									sm : this.sm,
									cm : this.columnCm,
									border : true,
									loadMask : true,
									view : this.gridView,
									bbar : this.pag = new Wtf.PagingToolbar(
											{
												pageSize : 30,
												border : false,
												id : "paggintoolbar" + this.id,
												store : this.columnDs,
												plugins : this.pPageSizeObj = new Wtf.common.pPageSize(
														{
															id : "pPageSize_"
																	+ this.id
														}),
												autoWidth : true,
												displayInfo : true,
												displayMsg : WtfGlobal
														.getLocaleText("hrms.Importlog.DisplayingInvalidRecords"),
												emptyMsg : ""
											})
								});
						this.sm.on("selectionChange", function() {
							this.updateLogDetails(true)
						}, this);
						this.add({
							region : "center",
							layout : "fit",
							border : false,
							autoScroll : true,
							bodyStyle : "background:white;padding:7px",
							items : this.Grid
						});
						this.ValidationDetails = new Wtf.Panel({
							border : false,
							bodyStyle : "padding-top:7px",
							html : "<div>&nbsp</div>"
						});
						this.progressBar = new Wtf.ProgressBar(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Importlog.Validating"),
									hidden : true,
									cls : "x-progress-bar-default"
								});
						this.add(this.ValidationDetails);
						this
								.add({
									region : "south",
									autoScroll : true,
									height : 70,
									border : false,
									bodyStyle : "background:white;padding:0 7px 7px 7px",
									items : [ this.progressBar,
											this.ValidationDetails ]
								})
					},
					validateRecords : function() {
						if (this.columnDs.getCount() > 0) {
							this.columnDs.removeAll()
						}
						this.updateLogDetails(true);
						this.enableDisableButtons(false);
						Wtf.Ajax.timeout = 900000;
						this.validateSubstr = "/ValidateFile/"
								+ this.importParams.extraConfig.filename;
						dojo.cometd.subscribe(this.validateSubstr, this,
								"globalInValidRecordsPublishHandler");
						Wtf.Ajax
								.requestEx(
										{
											url : this.importParams.url
													+ "?type=submit&do=validateData",
											waitMsg : WtfGlobal
													.getLocaleText("hrms.Importlog.Validating"),
											scope : this,
											params : this.importParams.extraConfig
										},
										this,
										function(B, A) {
											Wtf.updateProgress();
											if (B.success) {
												this.createGrid(B);
												this.enableDisableButtons(true)
											} else {
												WtfImportMsgBox(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.failure"),
																WtfGlobal
																		.getLocaleText("hrms.Importlog.Anerroroccurredwhilevalidatingtherecordsfromfile")
																		+ "<br/>"
																		+ B.msg ],
														1)
											}
											if (B.exceededLimit == "yes") {
												this.northMessage = this.northMessage
														+ "<li>"
														+ WtfGlobal
																.getLocaleText("hrms.Importlog.notmorethan1500")
														+ "</li><br/>";
												this.northPanel.body.dom.innerHTML = getImportTopHtml(
														WtfGlobal
																.getLocaleText("hrms.Importlog.Listofallinvalidrecordsfromthefile"),
														this.northMessage
																+ "</ul>",
														"images/import.png",
														true, "0px",
														"2px 0px 0px 10px")
											}
											this.importParams.extraConfig.exceededLimit = B.exceededLimit;
											Wtf.Ajax.timeout = 30000
										},
										function(B, A) {
											Wtf.updateProgress();
											WtfImportMsgBox(50, 1);
											this.importParams.extraConfig.exceededLimit = B.exceededLimit;
											Wtf.Ajax.timeout = 30000
										})
					},
					importRecords : function() {
						dojo.cometd.unsubscribe(this.validateSubstr);
						Wtf.Ajax.timeout = 900000;
						Wtf
								.commonWaitMsgBox(WtfGlobal
										.getLocaleText("hrms.Importlog.ImportingdataItmaytakefewmoments"));
						Wtf.Ajax
								.requestEx(
										{
											url : this.importParams.url
													+ "?type=submit&do=import",
											waitMsg : WtfGlobal
													.getLocaleText("hrms.Importlog.importing"),
											scope : this,
											params : this.importParams.extraConfig
										},
										this,
										function(A) {
											Wtf.updateProgress();
											if (A.success) {
												if (A.exceededLimit == "yes") {
													showImportSummary(true, A)
												} else {
													if (this.importParams.store != undefined
															&& A.TLID == undefined) {
														this.importParams.store
																.reload()
													}
													Wtf
															.globalStorereload(this.importParams.extraConfig);
													showImportSummary(false, A)
												}
												Wtf.Ajax.timeout = 30000;
												closeImportWindow()
											} else {
												WtfImportMsgBox(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.alert"),
																A.msg ], 1)
											}
										},
										function(A) {
											Wtf.updateProgress();
											Wtf.Msg
													.alert(
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															WtfGlobal
																	.getLocaleText("hrms.Importlog.ErrorwhileimportingrecordsPleasetryagainaftersometime"));
											Wtf.Ajax.timeout = 30000;
											closeImportWindow()
										})
					},
					createGrid : function(A) {
						this.createColumnModel(A);
						this.columnDs.proxy.data = A;
						this.columnDs.load({
							params : {
								start : 0,
								limit : this.pag.pageSize
							}
						});
						this.Grid.reconfigure(this.columnDs, this.columnCm);
						this.updateLogDetails(false)
					},
					createColumnModel : function(B) {
						this.columnRec = new Wtf.data.Record.create(B.record);
						this.columnCm = new Wtf.grid.ColumnModel(B.columns);
						var A = this.importParams.extraConfig.startindex;
						this.columnCm.setRenderer(0, function(F, D, E) {
							if (A != undefined) {
								F = (F * 1) + (A * 1)
							}
							return "" + F
						});
						for ( var C = 1; C < this.columnCm.getColumnCount() - 1; C++) {
							this.columnCm.setRenderer(C, function(D, H, F, J,
									L, K) {
								var E = F.data.invalidcolumns;
								var G = "col" + L + ",";
								var I = new RegExp(G);
								if (I.test(E)) {
									return "<div style='color:#F00'>" + D
											+ "</div>"
								} else {
									return D
								}
							})
						}
						this.columnCm.setRenderer(this.columnCm
								.getColumnCount() - 1, function(D) {
							return '<span wtf:qtip="' + D + '">' + D
									+ "</span>"
						});
						this.Grid.reconfigure(this.columnDs, this.columnCm)
					},
					updateLogDetails : function(B) {
						var E = "";
						if (this.columnDs.getCount() > 0) {
							if (this.sm.getCount() == 1) {
								var D = this.sm.getSelected();
								var C = D.data.col0;
								var A = this.importParams.extraConfig.startindex;
								if (A != undefined) {
									C = (C * 1) + (A * 1)
								}
								E = "<div><b> "
										+ WtfGlobal
												.getLocaleText("hrms.Importlog.ValidationDetailsforrow")
										+ C
										+ ":</b><br/>"
										+ replaceAll(D.data.validateLog, "\\.",
												".<br/>") + "</div>"
							} else {
								E = "<div><b>"
										+ WtfGlobal
												.getLocaleText("hrms.Importlog.ValidationDetails")
										+ ":</b><br/>"
										+ WtfGlobal
												.getLocaleText("hrms.common.please.select.record")
										+ ".</div>"
							}
						} else {
							if (this.columnDs.getCount() == 0) {
								if (!B) {
									E = WtfGlobal
											.getLocaleText("hrms.Importlog.AllrecordsarevalidPleaseclickonImportDatabuttontocontinue");
									this.gridView.emptyText = "<b>" + E
											+ "</b>";
									this.gridView.refresh()
								}
							}
						}
						this.ValidationDetails.body.dom.innerHTML = E
					},
					globalInValidRecordsPublishHandler : function(response) {
						var msg = "";
						var res = eval("(" + response.data + ")");
						if (res.finishedValidation) {
							this.enableDisableButtons(true);
							return
						}
						if (res.isHeader) {
							this.createColumnModel(res)
						} else {
							if (res.parsedCount) {
								msg = res.invalidCount == 0 ? WtfGlobal
										.getLocaleText({
											key : "hrms.Importlog.Validated0Record",
											params : [
													"<b>" + res.parsedCount
															+ "</b>",
													"<b>" + res.fileSize
															+ "</b>" ]
										})
										: WtfGlobal
												.getLocaleText({
													key : "hrms.Importlog.Validated2Record",
													params : [
															"<b>"
																	+ res.parsedCount
																	+ "</b>",
															"<b>"
																	+ res.invalidCount
																	+ "</b>",
															"<b>"
																	+ res.fileSize
																	+ "</b>" ]
												});
								this.progressBar.updateProgress(res.parsedCount
										/ res.fileSize, msg)
							} else {
								var newRec = new this.columnRec(res);
								this.columnDs.add(newRec);
								msg = res.invalidCount == 0 ? WtfGlobal
										.getLocaleText({
											key : "hrms.Importlog.Validated0Record",
											params : [
													"<b>" + res.totalrecords
															+ "</b>",
													"<b>" + res.fileSize
															+ "</b>" ]
										})
										: WtfGlobal
												.getLocaleText({
													key : "hrms.Importlog.Validated2Record",
													params : [
															"<b>"
																	+ res.totalrecords
																	+ "</b>",
															"<b>" + res.count
																	+ "</b>",
															"<b>"
																	+ res.fileSize
																	+ "</b>" ]
												});
								this.progressBar.updateProgress(res.parsedCount
										/ res.fileSize, msg);
								this.gridView.scroller.dom.scrollTop = this.gridView.scroller.dom.scrollHeight - 2
							}
						}
					},
					enableDisableButtons : function(A) {
						if (A) {
							this.prevButton.enable();
							this.importButton.enable();
							this.cancelButton.enable();
							this.progressBar.hide()
						} else {
							this.prevButton.disable();
							this.importButton.disable();
							this.cancelButton.disable();
							this.progressBar.show();
							this.progressBar
									.updateProgress(
											0,
											WtfGlobal
													.getLocaleText("hrms.Importlog.Validating"));
							this.gridView.emptyText = "";
							this.gridView.refresh()
						}
					}
				});
function showImportSummary(A, B) {
	var C = "";
	if (A) {
		C = '<div class="popup-info"><h2 class="blue-h2">'
				+ WtfGlobal
						.getLocaleText("hrms.Importlog.Viewyourimportprogress")
				+ '</h2><br/><div class="right-bullets"><span>1</span>'
				+ WtfGlobal
						.getLocaleText("hrms.Importlog.Wearenowimportingyourdatafromtheuploadedfile")
				+ '</div><div class="right-bullets"><span>2</span>'
				+ WtfGlobal
						.getLocaleText("hrms.Importlog.Dependingthisprocesscantakeseveralhours")
				+ '</div><div class="right-bullets"><span>3</span>'
				+ WtfGlobal
						.getLocaleText({
							key : "hrms.Importlog.detailedreportwillbesenttoyouviaemail",
							params : [ "<a wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.Importlog.ClickheretoopenImportLog")
									+ ' href="#" onclick="linkImportFilesLog()">'
									+ WtfGlobal
											.getLocaleText("hrms.Dashboard.ImportLog")
									+ "</a>" ]
						})
				+ '</div><img border="0" src="images/importWizard/import-log.jpg"/></div>'
	} else {
		C = '<div class="popup-info"><h2 class="blue-h2">'
				+ WtfGlobal.getLocaleText("hrms.Importlog.ImportStatus")
				+ '</h2><br/><div class="right-bullets"><span>1</span>'
				+ B.msg
				+ '</div><div class="right-bullets"><span>2</span>'
				+ WtfGlobal
						.getLocaleText({
							key : "hrms.Importlog.Youcanfinddetailedreportinthe",
							params : [ "<a wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.Importlog.ClickheretoopenImportLog")
									+ ' href="#" onclick="linkImportFilesLog()">'
									+ WtfGlobal
											.getLocaleText("hrms.Dashboard.ImportLog")
									+ "</a>." ]
						})
				+ '</div><img border="0" src="images/importWizard/import-log.jpg"/></div>'
	}
	var D = new Wtf.Window({
		resizable : true,
		layout : "border",
		modal : true,
		width : 655,
		height : 350,
		iconCls : "importIcon",
		title : WtfGlobal.getLocaleText("hrms.Importlog.ImportStatus"),
		id : "importSummaryWin",
		items : [ {
			region : "center",
			layout : "fit",
			border : false,
			bodyStyle : "background:white;font-size:10px;padding-left:10px;",
			html : C
		} ],
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.Importlog.ViewImportLog"),
			scope : this,
			handler : function() {
				linkImportFilesLog()
			}
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.close"),
			scope : this,
			handler : function() {
				Wtf.getCmp("importSummaryWin").close()
			}
		} ]
	}, this).show()
}
function linkImportFilesLog() {
	var A = Wtf.getCmp("importSummaryWin");
	if (A) {
		if (A.isVisible()) {
			A.close()
		} else {
			A.destroy()
		}
	}
	callImportFilesLog()
}
Wtf.commonFileImportWindow = function(D, B, A, F, C) {
	var E = new Wtf.UploadFileWindow({
		title : WtfGlobal.getLocaleText("hrms.Importlog.ImportCSVFile"),
		width : 600,
		height : 400,
		iconCls : "importIcon",
		obj : D,
		moduleName : B,
		store : A,
		extraParams : F,
		extraConfig : C,
		typeXLSFile : false
	});
	return E
};
Wtf.xlsCommonFileImportWindow = function(D, B, A, F, C) {
	var E = new Wtf.UploadFileWindow({
		title : WtfGlobal.getLocaleText("hrms.Importlog.ImportXLSFile"),
		width : 600,
		height : 380,
		iconCls : "importIcon",
		obj : D,
		moduleName : B,
		store : A,
		extraParams : F,
		extraConfig : C,
		typeXLSFile : true
	});
	return E
};
Wtf.UploadFileWindow = function(A) {
	Wtf.UploadFileWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.UploadFileWindow,
				Wtf.Window,
				{
					id : "importwindow",
					layout : "border",
					closable : false,
					resizable : false,
					modal : true,
					iconCls : "importIcon",
					initComponent : function(A) {
						Wtf.UploadFileWindow.superclass.initComponent.call(
								this, A);
						this.nextButton = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.Importlog.Next"),
							scope : this,
							minWidth : 80,
							handler : function() {
								if (this.typeXLSFile) {
									this.uploadXLSFile()
								} else {
									this.uploadCSVFile()
								}
							}
						});
						this.cancelButton = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							scope : this,
							minWidth : 80,
							handler : function() {
								closeImportWindow()
							}
						});
						this.buttons = [ this.nextButton, this.cancelButton ]
					},
					onRender : function(A) {
						Wtf.UploadFileWindow.superclass.onRender.call(this, A);
						this.isPrefModified = false;
						var B = new Wtf.data.SimpleStore(
								{
									fields : [ "delimiterid", "delimiter" ],
									data : [
											[
													0,
													WtfGlobal
															.getLocaleText("hrms.Importlog.Colon") ],
											[
													1,
													WtfGlobal
															.getLocaleText("hrms.Importlog.Comma") ],
											[
													2,
													WtfGlobal
															.getLocaleText("hrms.Importlog.Semicolon") ] ]
								});
						this.conowner = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.Importlog.Delimiter"),
							hiddenName : "Delimiter",
							store : B,
							valueField : "delimiter",
							displayField : "delimiter",
							mode : "local",
							triggerAction : "all",
							emptyText : "--Select delimiter--",
							typeAhead : true,
							selectOnFocus : true,
							allowBlank : false,
							width : 200,
							itemCls : (this.typeXLSFile) ? "hidden-from-item"
									: "",
							hidden : this.typeXLSFile,
							hideLabel : this.typeXLSFile,
							forceSelection : true,
							value : "Comma"
						});
						this.masterPreference = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.Importlog.Formissingentriesindropdownfields"),
									autoHeight : true,
									border : false,
									cls : "import-Wiz-fieldset",
									defaultType : "radio",
									items : [
											this.master0 = new Wtf.form.Radio(
													{
														checked : true,
														fieldLabel : "",
														labelSeparator : "",
														boxLabel : WtfGlobal
																.getLocaleText("hrms.Importlog.Ignoreentirerecord"),
														name : "masterPreference",
														inputValue : "0"
													}),
											this.master1 = new Wtf.form.Radio(
													{
														ctCls : "fieldset-item",
														fieldLabel : "",
														labelSeparator : "",
														boxLabel : WtfGlobal
																.getLocaleText("hrms.Importlog.Ignoreentryforthatrecord"),
														name : "masterPreference",
														inputValue : "1"
													}),
											this.master2 = new Wtf.form.Radio(
													{
														ctCls : "fieldset-item1",
														fieldLabel : "",
														labelSeparator : "",
														boxLabel : WtfGlobal
																.getLocaleText("hrms.Importlog.Addnewentrytomasterrecordindropdown"),
														name : "masterPreference",
														inputValue : "2"
													}) ]
								});
						this.dfRec = Wtf.data.Record.create([ {
							name : "formatid"
						}, {
							name : "name"
						} ]);
						this.dfStore = new Wtf.data.Store({
							url : "KwlCommonTables/getAllDateFormats.do",
							baseParams : {
								mode : 32
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.dfRec)
						});
						this.dfStore.load();
						this.dfStore.on("load", function() {
							if (this.dfStore.getCount() > 0) {
								this.datePreference.setValue("2")
							}
						}, this);
						this.datePreference = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Dateformat"),
							hiddenName : "dateFormat",
							store : this.dfStore,
							valueField : "formatid",
							displayField : "name",
							mode : "local",
							triggerAction : "all",
							width : 200,
							itemCls : (this.typeXLSFile) ? "hidden-from-item"
									: "",
							hidden : this.typeXLSFile,
							hideLabel : this.typeXLSFile,
							forceSelection : true
						});
						this.browseField = new Wtf.form.TextField({
							id : "browseBttn",
							border : false,
							inputType : "file",
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Filename"),
							name : "test"
						});
						this.ImportForm = new Wtf.FormPanel(
								{
									width : "90%",
									method : "POST",
									scope : this,
									border : false,
									fileUpload : true,
									waitMsgTarget : true,
									labelWidth : 80,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:15px 0 0 60px;",
									layout : "form",
									items : [ this.browseField, this.conowner,
											this.datePreference,
											this.masterPreference ]
								});
						this
								.add({
									region : "north",
									height : 70,
									border : false,
									bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
									html : getImportTopHtml(
											this.typeXLSFile ? WtfGlobal
													.getLocaleText("hrms.Importlog.ImportXLSFile")
													: WtfGlobal
															.getLocaleText("hrms.Importlog.ImportCSVFile"),
											"<ul style='list-style-type:disc;padding-left:15px;'><li>"
													+ (this.typeXLSFile ? WtfGlobal
															.getLocaleText("hrms.Importlog.ImportXlsIntoDeskera")
															: WtfGlobal
																	.getLocaleText("hrms.Importlog.ImportCsvIntoDeskera"))
													+ "</li></ul>",
											"images/import.png", true,
											"5px 0px 0px 0px",
											"7px 0px 0px 10px")
								});
						this
								.add({
									region : "center",
									border : false,
									bodyStyle : "background:#f1f1f1;font-size:10px;",
									items : [
											this.ImportForm,
											new Wtf.Panel(
													{
														border : false,
														bodyStyle : "padding:5px;",
														html : "<b>* "
																+ WtfGlobal
																		.getLocaleText("hrms.Importlog.RecomendedText")
																+ "</b> "
													}) ]
								});
						this.conowner.on("change", function() {
							this.isPrefModified = true
						}, this);
						this.master0.on("change", function() {
							this.isPrefModified = true
						}, this);
						this.master1.on("change", function() {
							this.isPrefModified = true
						}, this);
						this.master2.on("change", function() {
							this.isPrefModified = true
						}, this);
						this.datePreference.on("change", function() {
							this.isPrefModified = true
						}, this)
					},
					uploadCSVFile : function() {
						var master = 0;
						if (this.master0.getValue()) {
							master = 0
						} else {
							if (this.master1.getValue()) {
								master = 1
							} else {
								if (this.master2.getValue()) {
									master = 2
								}
							}
						}
						if (!this.browseField.disabled) {
							this.nextButton.disable();
							var parsedObject = document
									.getElementById("browseBttn").value;
							var extension = parsedObject.substr(parsedObject
									.lastIndexOf(".") + 1);
							var patt1 = new RegExp("csv", "i");
							var delimiterType = this.conowner.getValue();
							if (delimiterType == undefined
									|| delimiterType == "") {
								WtfImportMsgBox(47);
								return
							}
							if (patt1.test(extension)) {
								if (this.extraConfig == undefined) {
									this.extraConfig = {}
								}
								this.extraConfig["delimiterType"] = this.conowner
										.getValue();
								this.extraConfig["masterPreference"] = master;
								this.extraConfig["dateFormat"] = this.datePreference
										.getValue();
								this.ImportForm.form
										.submit({
											url : "ImportRecords/importRecords.dsh?type="
													+ this.moduleName
													+ "&do=getMapCSV&delimiterType="
													+ delimiterType,
											waitMsg : WtfGlobal
													.getLocaleText("hrms.Importlog.UploadingFile"),
											scope : this,
											success : function(action, res) {
												this.nextButton.enable();
												var resobj = eval("("
														+ res.response.responseText
																.trim() + ")");
												if (resobj.data != "") {
													this.mappingCSVInterface(
															resobj.Header,
															resobj, this,
															delimiterType,
															this.extraParams,
															this.extraConfig,
															this.obj,
															this.moduleName,
															this.store)
												}
												this.browseField.disable();
												this.conowner.disable()
											},
											failure : function(action, res) {
												this.nextButton.enable();
												var resobj = eval("("
														+ res.response.responseText
																.trim() + ")");
												WtfImportMsgBox(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																resobj.msg ], 1)
											}
										})
							} else {
								this.nextButton.enable();
								WtfImportMsgBox(48)
							}
						} else {
							var mappingWindow = Wtf
									.getCmp("csvMappingInterface");
							if (mappingWindow.extraConfig == undefined) {
								mappingWindow.extraConfig = {}
							}
							mappingWindow.extraConfig["delimiterType"] = this.conowner
									.getValue();
							mappingWindow.extraConfig["masterPreference"] = master;
							mappingWindow.extraConfig["dateFormat"] = this.datePreference
									.getValue();
							mappingWindow.show()
						}
					},
					mappingCSVInterface : function(G, E, B, I, F, D, C, A, H) {
						C.filename = E.FileName;
						if (D == undefined) {
							D = {}
						}
						D["delimiterType"] = I;
						D["filename"] = E.FileName;
						this.mappingParams = {};
						this.mappingParams.csvheaders = G;
						this.mappingParams.typeXLSFile = false;
						this.mappingParams.delimiterType = I;
						this.mappingParams.moduleName = A;
						this.mappingParams.modName = A;
						this.mappingParams.store = H;
						this.mappingParams.cm = C.gridcm;
						this.mappingParams.extraParams = F;
						this.mappingParams.extraConfig = D;
						Wtf.callMappingInterface(this.mappingParams, this);
						this.hide()
					},
					uploadXLSFile : function() {
						var C = 0;
						if (this.master0.getValue()) {
							C = 0
						} else {
							if (this.master1.getValue()) {
								C = 1
							} else {
								if (this.master2.getValue()) {
									C = 2
								}
							}
						}
						if (!this.browseField.disabled) {
							this.nextButton.disable();
							var E = document.getElementById("browseBttn").value;
							var D = E.substr(E.lastIndexOf(".") + 1);
							var A = new RegExp("xls", "i");
							if (A.test(D)) {
								if (this.extraConfig == undefined) {
									this.extraConfig = {}
								}
								this.extraConfig["masterPreference"] = C;
								this.ImportForm
										.getForm()
										.submit(
												{
													url : "ImportRecords/fileUploadXLS.dsh",
													waitMsg : WtfGlobal
															.getLocaleText("hrms.Importlog.UploadingFile"),
													scope : this,
													success : function(G, F) {
														this.browseField
																.disable();
														this.nextButton
																.enable();
														this
																.genUploadResponse(
																		F.request,
																		true,
																		F.response,
																		this.moduleName,
																		this.store,
																		this.obj,
																		this.extraParams,
																		this.extraConfig)
													},
													failure : function(G, F) {
														this.nextButton
																.enable();
														this
																.genUploadResponse(
																		F.request,
																		false,
																		F.response,
																		this.moduleName,
																		this.store,
																		this.obj,
																		this.extraParams,
																		this.extraConfig)
													}
												})
							} else {
								this.nextButton.enable();
								WtfImportMsgBox(48)
							}
						} else {
							var B = Wtf.getCmp("importxls");
							if (B.extraConfig == undefined) {
								B.extraConfig = {}
							}
							B.extraConfig["masterPreference"] = C;
							B.show()
						}
					},
					genUploadResponse : function(req, succeed, res, moduleName,
							store, obj, extraParams, extraConfig) {
						var msg = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						var response = eval("(" + res.responseText + ")");
						if (succeed) {
							succeed = response.lsuccess;
							if (succeed) {
								var xlsPreviewWindow = Wtf.getCmp("importxls");
								if (xlsPreviewWindow) {
									if (xlsPreviewWindow.isVisible()) {
										xlsPreviewWindow.close()
									} else {
										xlsPreviewWindow.destroy()
									}
								}
								this.win = new Wtf.SheetViewer2(
										{
											title : WtfGlobal
													.getLocaleText("hrms.Importlog.AvailableSheets"),
											iconCls : "importIcon",
											autoScroll : true,
											plain : true,
											modal : true,
											data : response,
											layout : "border",
											prevWindow : Wtf
													.getCmp("importwindow"),
											moduleName : moduleName,
											store : store,
											obj : obj,
											extraParams : extraParams,
											extraConfig : extraConfig
										});
								this.win.show();
								Wtf.getCmp("importwindow").hide()
							} else {
								msg = response.msg;
								Wtf.Msg
										.alert(
												WtfGlobal
														.getLocaleText("hrms.masterconf.FileUpload"),
												msg)
							}
						}
					}
				});
function callImportFilesLog() {
	var A = Wtf.getCmp("importFilesLog");
	if (A == null) {
		A = new Wtf.ImportedFilesLog({
			title : WtfGlobal.getLocaleText("hrms.Importlog.ImportedFilesLog"),
			closable : true,
			layout : "fit",
			border : false,
			iconCls : "pwnd projectTabIcon",
			id : "importFilesLog"
		});
		mainPanel.add(A)
	} else {
		A.dataStore.reload()
	}
	mainPanel.setActiveTab(A);
	mainPanel.doLayout()
}
Wtf.ImportedFilesLog = function(A) {
	Wtf.apply(this, A);
	Wtf.ImportedFilesLog.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.ImportedFilesLog,
				Wtf.Panel,
				{
					onRender : function(A) {
						this.startDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.form"),
							name : "stdate",
							format : WtfGlobal.getOnlyDateFormat(),
							readOnly : true,
							value : this.getDefaultDates(true)
						});
						this.endDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.to"),
							format : WtfGlobal.getOnlyDateFormat(),
							readOnly : true,
							name : "enddate",
							value : this.getDefaultDates(false)
						});
								this.fetchButton = new Wtf.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.Importlog.Fetch"),
											scope : this,
											iconCls : "pwndExport fetch",
											handler : function() {
												if (this.startDate.getValue() > this.endDate
														.getValue()) {
													WtfImportMsgBox(1, 1);
													return
												}
												this.initialLoad()
											}
										}),
								this.resetBttn = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.reset"),
											id : "btnRec" + this.id,
											scope : this,
											disabled : false,
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.Importlog.Clicktoremoveanyfiltersettingsorsearchcriteriaandviewallrecord")
											},
											iconCls : "pwndRefresh"
										});
						this.resetBttn.on("click", this.handleResetClick, this);
						this.columnRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "filename"
						}, {
							name : "storename"
						}, {
							name : "failurename"
						}, {
							name : "log"
						}, {
							name : "imported"
						}, {
							name : "total"
						}, {
							name : "rejected"
						}, {
							name : "type"
						}, {
							name : "importon",
							type : "date"
						}, {
							name : "module"
						}, {
							name : "importedby"
						}, {
							name : "company"
						} ]);
						this.dataStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								totalProperty : "count",
								root : "data"
							}, this.columnRec),
							url : "ImportRecords/getImportLog.dsh"
						});
						this.columnCm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Module"),
											dataIndex : "module"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.FirstName"),
											sortable : true,
											dataIndex : "filename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.FileType"),
											dataIndex : "type",
											renderer : function(B) {
												return Wtf.util.Format
														.capitalize(B)
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.ImportedBy"),
											sortable : true,
											dataIndex : "importedby"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.ImportedOn"),
											sortable : true,
											dataIndex : "importon",
											renderer : function(B) {
												return B.format("Y-m-d H:i:s")
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.TotalRecords"),
											align : "right",
											dataIndex : "total"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.ImportedRecords"),
											align : "right",
											dataIndex : "imported"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.RejectedRecords"),
											align : "right",
											dataIndex : "rejected"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Dashboard.Importlog"),
											sortable : true,
											dataIndex : "log",
											renderer : function(B) {
												return '<div wtf:qtip="' + B
														+ '">' + B + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.OriginalFile"),
											sortable : true,
											dataIndex : "imported",
											align : "center",
											renderer : function(B) {
												return '<div class="pwnd downloadIcon original" wtf:qtip='
														+ WtfGlobal
																.getLocaleText("hrms.Importlog.DownloadOriginalFile")
														+ ' style="height:16px;">&nbsp;</div>'
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.Importlog.RejectedFile"),
											sortable : true,
											align : "center",
											dataIndex : "rejected",
											renderer : function(B) {
												if (B > 0) {
													return '<div class="pwnd downloadIcon rejected" wtf:qtip='
															+ WtfGlobal
																	.getLocaleText("hrms.Importlog.DownloadOriginalFile")
															+ ' style="height:16px;">&nbsp;</div>'
												}
												return ""
											}
										} ]);
						this.sm = new Wtf.grid.RowSelectionModel({
							singleSelect : true
						});
						this.grid = new Wtf.grid.GridPanel(
								{
									store : this.dataStore,
									sm : this.sm,
									cm : this.columnCm,
									border : false,
									loadMask : true,
									view : new Wtf.grid.GridView(
											{
												forceFit : true,
												emptyText : WtfGlobal
														.getLocaleText("hrms.Importlog.Nofileswereimportedbetweenselecteddates")
											}),
									bbar : this.pag = new Wtf.PagingToolbar(
											{
												pageSize : 30,
												border : false,
												id : "paggintoolbar" + this.id,
												store : this.dataStore,
												plugins : this.pPageSizeObj = new Wtf.common.pPageSize(
														{
															id : "pPageSize_"
																	+ this.id
														}),
												autoWidth : true,
												displayInfo : true
											})
								});
						this.grid.on("rowclick", this.handleRowClick, this);
						this.sm.on("selectionchange", function(B) {
						}, this);
						this.wrapperBody = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									tbar : [
											WtfGlobal
													.getLocaleText("hrms.common.form"),
											this.startDate,
											"-",
											WtfGlobal
													.getLocaleText("hrms.common.to"),
											this.endDate, "-",
											this.fetchButton, this.resetBttn ],
									items : this.grid
								});
						this.initialLoad();
						this.add(this.wrapperBody);
						Wtf.csvFileMappingInterface.superclass.onRender.call(
								this, A)
					},
					handleResetClick : function() {
						this.startDate.reset();
						this.endDate.reset();
						this.initialLoad()
					},
					handleRowClick : function(C, B, F) {
						if (F.getTarget(".original")) {
							var G = this.grid.getSelectionModel()
									.getSelections()[0].data;
							Wtf.get("downloadframe").dom.src = "ImportRecords/downloadFileData.dsh?storagename="
									+ G.storename
									+ "&filename="
									+ G.filename
									+ "&type=" + G.type
						} else {
							if (F.getTarget(".rejected")) {
								G = this.grid.getSelectionModel()
										.getSelections()[0].data;
								var A = G.filename;
								var E = G.failurename;
								var D = G.type;
								if (D == "xls") {
									D = "csv";
									A = A.substr(0, A.lastIndexOf("."))
											+ ".csv";
									E = E.substr(0, E.lastIndexOf("."))
											+ ".csv"
								}
								Wtf.get("downloadframe").dom.src = "ImportRecords/downloadFileData.dsh?storagename="
										+ E
										+ "&filename=Failure_"
										+ A
										+ "&type=" + D
							}
						}
					},
					initialLoad : function() {
						this.dataStore.baseParams = {
							startdate : this.getDates(true).format(
									"Y-m-d H:i:s"),
							enddate : this.getDates(false)
									.format("Y-m-d H:i:s")
						};
						this.dataStore.load({
							params : {
								start : 0,
								limit : this.pag.pageSize
							}
						})
					},
					getDefaultDates : function(B) {
						var A = new Date();
						if (B) {
							A = new Date(A.getFullYear(), A.getMonth(), 1)
						}
						return A
					},
					getDates : function(B) {
						var A = new Date();
						if (B) {
							A = this.startDate.getValue();
							A = new Date(A.getFullYear(), A.getMonth(), A
									.getDate(), 0, 0, 0)
						} else {
							A = this.endDate.getValue();
							A = new Date(A.getFullYear(), A.getMonth(), A
									.getDate(), 23, 59, 59)
						}
						return A
					}
				});
Wtf.SheetViewer2 = function(A) {
	Wtf.SheetViewer2.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.SheetViewer2,
				Wtf.Window,
				{
					id : "importxls",
					closable : false,
					width : 750,
					height : 600,
					initComponent : function(A) {
						Wtf.SheetViewer2.superclass.initComponent.call(this, A);
						this.prevButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Importlog.ChangePreferences"),
									scope : this,
									minWidth : 80,
									handler : function() {
										if (this.prevWindow) {
											this.prevWindow.show()
										}
										this.hide()
									}
								});
						this.nextButton = new Wtf.Button({
							text : WtfGlobal.getLocaleText("hrms.common.Next"),
							scope : this,
							minWidth : 80,
							disabled : true,
							id : "nextButton" + this.id,
							handler : function() {
								var H = Wtf.getCmp("csvMappingInterface");
								if (!H) {
									this.dumpFileData()
								} else {
									var F = this.shgrid.getSelectionModel()
											.getSelected();
									var D = this.shdgrid.getSelectionModel()
											.getSelected();
									var C = F.get("index");
									var G = this.shdgrid.getStore().indexOf(D);
									var B = H.index;
									var E = H.extraConfig.startindex;
									if (C != B || G != E) {
										this.dumpFileData()
									} else {
										this.getMappingInterface()
									}
								}
							}
						});
						this.cancelButton = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							scope : this,
							minWidth : 80,
							handler : function() {
								closeImportWindow()
							}
						});
						this.buttons = [ this.prevButton, this.nextButton,
								this.cancelButton ]
					},
					onRender : function(E) {
						Wtf.SheetViewer2.superclass.onRender.call(this, E);
						this.xlsfilename = this.data.file;
						this.onlyfilename = this.data.filename;
						this.sheetIndex = 0;
						this.rowIndex = 0;
						this.totalColumns = 0;
						for ( var C = 0; C < this.data.data.length; C++) {
							this.data.data[C].srow = "1"
						}
						var F = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "index"
						}, {
							name : "srow"
						} ]);
						var D = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, F),
							data : this.data
						});
						this.shgrid = new Wtf.grid.GridPanel(
								{
									viewConfig : {
										forceFit : true
									},
									columns : [
											{
												header : WtfGlobal
														.getLocaleText("hrms.Importlog.SheetName"),
												dataIndex : "name"
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.Importlog.StartingRow"),
												dataIndex : "srow"
											} ],
									store : D
								});
						this.shgrid.on("render", function() {
							if (this.shgrid.getStore().getCount() > 0) {
								this.shgrid.getSelectionModel().selectRow(0);
								this.shgrid.fireEvent("rowclick", this.shgrid,
										0)
							}
						}, this);
						this.shgrid.on("rowclick", this.showDetail, this);
						var B = new Wtf.data.Record.create([ {
							name : "name"
						} ]);
						var A = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "fields"
							}, B)
						});
						this.shdgrid = new Wtf.grid.GridPanel({
							columns : [],
							store : A
						});
						this.shdgrid.on("rowclick", this.updateStartRow, this);
						this
								.add({
									region : "north",
									height : 70,
									border : false,
									bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
									html : getImportTopHtml(
											WtfGlobal
													.getLocaleText("hrms.Importlog.AvailableSheets"),
											WtfGlobal
													.getLocaleText("hrms.Importlog.StepAvailableSheets"),
											"images/import.png", true,
											"0px", "7px 0px 0px 10px")
								});
						this.add({
							region : "center",
							layout : "fit",
							autoScroll : true,
							items : this.shgrid
						});
						this.add({
							region : "south",
							height : 320,
							layout : "fit",
							autoScroll : true,
							items : this.shdgrid
						})
					},
					updateStartRow : function(E, D, F) {
						if (this.shdgrid.getSelectionModel().getCount() == 1) {
							var B = this.shgrid.getSelectionModel()
									.getSelected();
							B.set("srow", D + 1);
							var A = this.shdgrid.getSelectionModel()
									.getSelected();
							var H = A.fields.keys;
							var I = [];
							for ( var D = 0; D < H.length; D++) {
								if (A.get(A.fields.keys[D]).trim() != "") {
									var G = {};
									var C = D - 1;
									G.header = A.get(A.fields.keys[D]);
									G.index = C;
									if (D > 0) {
										I.push(G)
									}
								}
							}
							this.Header = I
						}
					},
					genUploadResponse12 : function(req, succeed, res) {
						var msg = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						var response = eval("(" + res.responseText + ")");
						if (succeed) {
							msg = response.msg;
							succeed = response.lsuccess;
							this.Header = response.Header;
							this.xlsParserResponse = response;
							if (succeed) {
								this.cursheet = response.index;
								var cm = this
										.createColumnModel1(response.maxcol);
								var store = this.createStore1(response, cm);
								this.shdgrid.reconfigure(store, cm);
								var rowno = this.shgrid.getStore().getAt(
										this.shgrid.getStore().find("index",
												this.cursheet)).get("srow");
								if (rowno) {
									this.shdgrid.getSelectionModel().selectRow(
											rowno - 1)
								}
								this.sheetIndex = response.index;
								this.totalColumns = response.maxcol;
								this.rowIndex = response.startrow;
								if (response.maxcol == 0
										|| response.maxrow == 0) {
									this.nextButton.disable()
								} else {
									this.nextButton.enable()
								}
							} else {
								Wtf.Msg
										.alert(
												WtfGlobal
														.getLocaleText("hrms.Importlog.FileImport"),
												msg)
							}
						}
						this.shdgrid.enable()
					},
					createColumnModel1 : function(E) {
						var A = [ new Wtf.grid.RowNumberer() ];
						for ( var C = 1; C <= E; C++) {
							var B = C;
							var D = "";
							while (B > 0) {
								B--;
								D = String.fromCharCode(Math.floor(B % 26)
										+ "A".charCodeAt(0))
										+ D;
								B = Math.floor(B / 26)
							}
							A.push({
								header : D,
								dataIndex : D
							})
						}
						return new Wtf.grid.ColumnModel(A)
					},
					createStore1 : function(E, C) {
						var B = [];
						for ( var A = 0; A < C.getColumnCount(); A++) {
							B.push({
								name : C.getDataIndex(A)
							})
						}
						var F = new Wtf.data.Record.create(B);
						var D = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, F),
							data : E
						});
						return D
					},
					showDetail : function(B, A, C) {
						if (this.shgrid.getSelectionModel().getCount() == 1) {
							Wtf.getCmp("nextButton" + this.id).enable();
							var D = this.shgrid.getStore().getAt(A);
							if (this.cursheet
									&& this.cursheet == D.get("index")) {
								return
							}
							this.shdgrid.disable();
							this.sheetIndex = D.get("index");
							Wtf.Ajax
									.request({
										method : "POST",
										url : "ImportRecords/importRecords.dsh?do=getXLSData",
										params : {
											filename : this.xlsfilename,
											onlyfilename : this.onlyfilename,
											index : this.sheetIndex
										},
										scope : this,
										success : function(E, F) {
											this
													.genUploadResponse12(F,
															true, E)
										},
										failure : function(E, F) {
											this.genUploadResponse12(F, false,
													E)
										}
									})
						} else {
							Wtf.getCmp("nextButton" + this.id).disable()
						}
					},
					dumpFileData : function() {
						var A = this.shdgrid.getSelectionModel().getSelected();
						this.rowIndex = this.shdgrid.getStore().indexOf(A);
						Wtf.Ajax.timeout = 900000;
						Wtf.Ajax.request({
							method : "POST",
							url : "ImportRecords/importRecords.dsh?do=dumpXLS",
							params : {
								filename : this.xlsfilename,
								onlyfilename : this.onlyfilename,
								index : this.sheetIndex,
								rowIndex : this.rowIndex,
								totalColumns : this.totalColumns
							},
							scope : this,
							success : function(B, C) {
								this.getMappingInterface();
								Wtf.Ajax.timeout = 30000
							},
							failure : function(B, C) {
								this.getMappingInterface();
								Wtf.Ajax.timeout = 30000
							}
						})
					},
					getMappingInterface : function(B, A, C) {
						var D = this.shgrid.getSelectionModel().getSelected();
						if (this.extraConfig == undefined) {
							this.extraConfig = {}
						}
						this.extraConfig["startindex"] = this.rowIndex;
						this.mappingParams = {};
						this.mappingParams.csvheaders = this.Header;
								this.mappingParams.modName = this.moduleName,
								this.mappingParams.moduleid = this.obj.moduleid,
								this.mappingParams.customColAddFlag = this.obj.customColAddFlag,
								this.mappingParams.typeXLSFile = true,
								this.mappingParams.delimiterType = "";
						this.mappingParams.index = D.get("index");
						this.mappingParams.moduleName = this.moduleName;
						this.mappingParams.store = this.store;
						this.mappingParams.scopeobj = this.obj;
						this.mappingParams.cm = this.obj.EditorColumnArray;
						this.mappingParams.extraParams = this.extraParams;
						this.mappingParams.extraConfig = this.extraConfig;
						Wtf.callMappingInterface(this.mappingParams, Wtf
								.getCmp("importxls"));
						Wtf.getCmp("importxls").hide()
					}
				});
function WtfImportMsgBox(B, C) {
	var D = [];
	switch (B) {
	case 1:
		D = [ WtfGlobal.getLocaleText("hrms.common.failure"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 43:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 44:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 45:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 46:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 47:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 48:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 50:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 51:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	case 52:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfImportMsgBox" + B) ];
		break;
	default:
		D = [ B[0], B[1] ];
		break
	}
	var A = Wtf.MessageBox.INFO;
	if (C == 0) {
		A = Wtf.MessageBox.INFO
	}
	if (C == 1) {
		A = Wtf.MessageBox.ERROR
	} else {
		if (C == 2) {
			A = Wtf.MessageBox.WARNING
		} else {
			if (C == 3) {
				A = Wtf.MessageBox.INFO
			}
		}
	}
	Wtf.MessageBox.show({
		title : D[0],
		msg : D[1],
		buttons : Wtf.MessageBox.OK,
		icon : A
	})
}
Wtf.globalStorereload = function(A) {
	if (A.moduleName == "Account"
			|| A.moduleName == WtfGlobal
					.getLocaleText("hrms.Importlog.Account")) {
	} else {
		if (A.moduleName == "Customer"
				|| A.moduleName == WtfGlobal
						.getLocaleText("hrms.Importlog.Customer")) {
			if (A.masterPreference == "2") {
				Wtf.CustomerCategoryStore.reload()
			}
		} else {
			if (A.moduleName == "Vendor"
					|| A.moduleName == WtfGlobal
							.getLocaleText("hrms.Importlog.Vendor")) {
				if (A.masterPreference == "2") {
					Wtf.VendorCategoryStore.reload()
				}
			}
		}
	}
};
function closeImportWindow() {
	destroyWindow("importwindow");
	destroyWindow("importxls");
	destroyWindow("csvMappingInterface");
	destroyWindow("IWValidationWindow")
}
function destroyWindow(A) {
	var B = Wtf.getCmp(A);
	if (B) {
		if (B.isVisible()) {
			B.close()
		} else {
			B.destroy()
		}
	}
}
function getImportTopHtml(F, A, B, D, G, C) {
	if (D === undefined) {
		D = false
	}
	if (G === undefined) {
		G = "0"
	}
	if (C === undefined) {
		C = "15px 0px 0px 10px"
	}
	if (B === undefined) {
		B = "images/import.png"
	}
	var E = "<div style = 'width:100%;height:100%;position:relative;float:left;'><div style='float:left;height:100%;width:auto;position:relative;margin:"
			+ G
			+ ";'><img src = "
			+ B
			+ " style='height:52px;margin:5px;width:40px;'></img></div><div style='float:left;height:100%;width:90%;position:relative;'><div style='font-size:12px;font-style:bold;float:left;margin:"
			+ C
			+ ";width:100%;position:relative;'><b>"
			+ F
			+ "</b></div><div style='font-size:10px;float:left;margin:5px 0px 10px 10px;width:100%;position:relative;'>"
			+ A
			+ "</div>"
			+ (D ? ""
					: "<div class='medatory-msg'>* "
							+ WtfGlobal
									.getLocaleText("hrms.common.indicatesrequiredfields")
							+ "</div>") + "</div></div>";
	return E
}
function replaceAll(A, B, C) {
	return A.replace(new RegExp(B, "g"), C)
}
Wtf.common.ManageUser = function(A) {
	Wtf.apply(this, {
		title : "User",
		id : this.id + "updateProfileWin",
		closable : true,
		modal : true,
		iconCls : "deskeralogo",
		width : 450,
		height : 450,
		autoScroll : true,
		resizable : false,
		layout : "border",
		buttonAlign : "right",
		renderTo : document.body,
		buttons : [ {
			text : "Save",
			scope : this,
			handler : this.saveForm.createDelegate(this)
		}, {
			text : "Cancel",
			scope : this,
			handler : function() {
				this.close()
			}
		} ]
	}, A);
	Wtf.common.ManageUser.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.common.ManageUser,
				Wtf.Window,
				{
					onRender : function(A) {
						Wtf.common.ManageUser.superclass.onRender.call(this, A);
						this.createUserForm();
						this
								.add(
										{
											region : "north",
											height : 75,
											border : false,
											bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
											html : getTopHtml(
													this.isEdit ? "Edit User"
															: "Create User",
													this.isEdit ? "Edit user profile"
															: "User user profile")
										},
										{
											region : "center",
											border : false,
											bodyStyle : "background:#f1f1f1;font-size:10px;",
											autoScroll : true,
											items : this.userinfo
										})
					},
					createUserForm : function() {
						this.userid = new Wtf.form.Hidden({
							name : "userid",
							id : "userid"
						});
						this.username = new Wtf.ux.TextField({
							fieldLabel : "Username*",
							name : "username",
							id : "username",
							readOnly : this.isEdit ? true : false,
							cls : this.isEdit ? "readOnly" : "",
							readOnly : this.isEdit ? true : false,
							width : 220,
							allowBlank : false,
							maxLength : 30,
							regex : /^\w[\w|\.]*$/
						});
						this.emailAdd = new Wtf.ux.TextField({
							fieldLabel : "Email Address*",
							name : "emailid",
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							width : 220,
							maxLength : 100,
							vtype : "email"
						});
						this.fname = new Wtf.ux.TextField({
							fieldLabel : "First Name*",
							name : "fname",
							id : "fname",
							width : 220,
							maxLength : 50,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.lname = new Wtf.ux.TextField({
							fieldLabel : "Last Name*",
							name : "lname",
							id : "lname",
							maxLength : 50,
							width : 220,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.rolestore = new Wtf.data.SimpleStore({
							fields : [ "role", "name" ],
							data : [ [ "h1", "Admin" ], [ "h2", "Manager" ],
									[ "h3", "User" ] ]
						});
						this.role = new Wtf.form.ComboBox({
							fieldLabel : "Role*",
							hiddenName : "role",
							store : this.rolestore,
							displayField : "name",
							valueField : "role",
							forceSelection : true,
							selectOnFocus : true,
							triggerAction : "all",
							typeAhead : true,
							mode : "local",
							width : 220,
							allowBlank : false
						});
						this.contactno = new Wtf.ux.TextField({
							fieldLabel : "Contact No.",
							name : "contactno",
							width : 220,
							validationDelay : 0,
							maxLength : 20,
							id : "contactno",
							xtype : "textfield"
						});
						this.address = new Wtf.ux.TextArea({
							fieldLabel : "Address",
							name : "address",
							width : 220,
							id : "address",
							maxLength : 255,
							xtype : "textarea"
						});
						this.setFormValues();
						var A = [ this.userid, this.username, this.emailAdd,
								this.fname, this.lname, this.role, /*{
									fieldLabel : "User Picture",
									name : "userimage",
									width : 225,
									inputType : "file",
									id : "userimage",
									hidden : isStandAlone ? false : true,
									hideLabel : isStandAlone ? false : true
								},*/ this.contactno, this.address ];
						this.userinfo = new Wtf.form.FormPanel({
							fileUpload : true,
							baseParams : {
								mode : 12,
								formname : "account"
							},
							url : this.url,
							region : "center",
							cls : "visibleDisabled",
							bodyStyle : "background: transparent;",
							border : false,
							style : "background: transparent;padding:20px;",
							defaultType : "striptextfield",
							labelWidth : 125,
							items : A
						})
					},
					saveForm : function() {
						if (!this.userinfo.getForm().isValid()) {
							calMsgBoxShow(5, 0);
							return
						}
						this.userinfo
								.getForm()
								.submit(
										{
											waitMsg : WtfGlobal
													.getLocaleText("hrms.common.Savinguserinformation"),
											waitTitle : WtfGlobal
													.getLocaleText("hrms.common.PleaseWait"),
											success : function(f, a) {
												var res = eval("("
														+ a.response.responseText
														+ ")");
												if (this.isEdit) {
													if (res.iscreator_role_change) {
														msgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText("hrms.stanalone.creator.role.edit.msg") ],
																0)
													} else {
														this.close();
														msgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.stanalone.user.edited.success") ],
																1);
														this.store
																.load({
																	params : {
																		grouper : "usergrid",
																		start : 0,
																		limit : this.grid.pag.pageSize
																	}
																})
													}
												} else {
													if (res.exists) {
														msgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText("hrms.stanalone.user.created.failure") ],
																0)
													} else {
														this.close();
														msgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.stanalone.user.created.success") ],
																1);
														this.store
																.load({
																	params : {
																		grouper : "usergrid",
																		start : 0,
																		limit : this.grid.pag.pageSize
																	}
																})
													}
												}
											},
											failure : function(f, a) {
												this.close();
												calMsgBoxShow(27, 1)
											},
											scope : this
										})
					},
					setFormValues : function() {
						if (this.isEdit) {
							this.userid.setValue(this.rec.data.userid);
							this.username.setValue(this.rec.data.username);
							this.emailAdd.setValue(this.rec.data.emailid);
							this.fname.setValue(this.rec.data.firstname);
							this.lname.setValue(this.rec.data.lastname);
							this.contactno
									.setValue(this.rec.data.contactnumber);
							this.address.setValue(this.rec.data.address);
							var A = "";
							if (this.rec.data.roleid == "1"
									|| this.rec.data.roleid == "2"
									|| this.rec.data.roleid == "3") {
								A = "h" + this.rec.data.roleid
							}
							this.role.setValue(A)
						}
					}
				});
Wtf.form.FnComboBox = function(A) {
	this.initial = "REC";
	Wtf.form.FnComboBox.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.form.FnComboBox, Wtf.form.ComboBox, {
	addNewDisplay : WtfGlobal.getLocaleText("hrms.common.AddNew"),
	initComponent : function(A) {
		Wtf.form.FnComboBox.superclass.initComponent.call(this, A);
		this.addNewID = this.initial + this.store.id;
		if (this.valueField && this.valueField === this.displayField) {
			this.addNewID = this.addNewDisplay
		}
		this.addLastEntry(this.store);
		this.store.on("load", this.addLastEntry, this);
		this.on("beforeselect", this.callFunction, this);
		if (this.hirarchical) {
			this.tpl = new Wtf.XTemplate(
					'<tpl for="."><div class="x-combo-list-item">{[this.getDots(values.level)]}{'
							+ this.displayField + "}</div></tpl>", {
						getDots : function(D) {
							var C = "";
							for ( var B = 0; B < D; B++) {
								C += "...."
							}
							return C
						}
					})
		}
	},
	addLastEntry : function(B) {
		var C = B.find(this.valueField || this.displayField, this.addNewID);
		if (C == -1) {
			var A = Wtf.data.Record.create(B.fields);
			var D = new A({});
			B.insert(0, D);
			D.beginEdit();
			D.set(this.valueField || this.displayField, this.addNewID);
			D.set(this.displayField, this.addNewDisplay);
			D.endEdit()
		}
	},
	callFunction : function(B, A) {
		if (A.data[this.valueField] == this.addNewID) {
			this.collapse();
			this.addNewFn();
			return false
		}
	}
});
Wtf.common.comboAddNew = function(A) {
	Wtf.apply(this, A);
	Wtf.common.comboAddNew.superclass.constructor.call(this, A);
	this.addEvents({
		beforeFilter : true,
		afterFilter : true
	})
};
Wtf.extend(Wtf.common.comboAddNew, Wtf.util.Observable, {
	init : function(A) {
		this.combo = A;
		A.on("render", function(B) {
			this.addNewButton()
		}, this);
		A.on("invalid", function(B) {
			this.moveErrorIcon()
		}, this)
	},
	addNewButton : function() {
		var C = this.combo.getSize();
		this.width = (this.combo.width !== undefined) ? this.combo.width
				: C.width;
		this.width -= 25;
		this.combo.setWidth(this.width);
		var A = this.combo.el.dom;
		var B = A.parentNode;
		A.style.width = (this.width - 25) + "px";
		this._fI = document.createElement("img");
		this._fI.src = "images/add.gif";
		this._fI.height = 20;
		this._fI.width = 20;
		this._fI.style.left = this.width + "px";
		this._fI.style.position = "absolute";
		this._fI.style.margin = "0px 0px 0px 5px";
		this._fI.style.cursor = "pointer";
		this._fI.onclick = this.handler.createDelegate(this.scope, []);
		B.appendChild(this._fI)
	},
	moveErrorIcon : function() {
		var B = this.combo.el.dom.parentNode;
		var A = B.nextSibling;
		if (A !== null) {
			var C = A.style.left;
			if (C !== undefined) {
				if (typeof C == "string") {
					C = C.substring(0, C.length - 2);
					C = parseInt(C)
				}
				C = C + 25
			}
			A.style.left = C + "px"
		}
	}
});
Wtf.advancedSearchComponent = function(A) {
	Wtf.apply(this, A);
	this.events = {
		"filterStore" : true,
		"saveStore" : true,
		"reloadgridStore" : true,
		"clearStoreFilter" : true
	};
	this.RecruiterRecord = Wtf.data.Record.create([ {
		name : "fname"
	}, {
		name : "rid"
	}, {
		name : "lname"
	}, {
		name : "name"
	} ]);
	this.RecruiterReader = new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "count"
	}, this.RecruiterRecord);
	this.RecruiterStore = new Wtf.data.Store({
		url : "Rec/Job/getRecruiter.rec",
		reader : this.RecruiterReader,
		baseParams : {
			flag : 126,
			firequery : "1"
		}
	});
	this.RecruiterStore.load();
	this.combovalArr = [];
	var C = new Array();
	for (i = 0; i < this.cm.length; i++) {
		var B = new Array();
		if (this.cm[i].dbname
				&& (this.cm[i].hidden == undefined || this.cm[i].hidden == false)) {
			var E = headerCheck(WtfGlobal.HTMLStripper(this.cm[i].header));
			B.push(E);
			B.push(this.cm[i].dbname);
			B.push(this.cm[i].xtype);
			B.push(this.cm[i].cname);
			B.push(this.cm[i].iscustom);
			C.push(B)
		}
	}
	var D = C;
	this.combostore = new Wtf.data.SimpleStore({
		fields : [ {
			name : "header"
		}, {
			name : "name"
		}, {
			name : "xtype"
		}, {
			name : "cname"
		}, {
			name : "iscustom"
		} ]
	});
	this.combostore.loadData(D);
	this.columnCombo = new Wtf.form.ComboBox({
		store : this.combostore,
		typeAhead : true,
		displayField : "header",
		valueField : "name",
		triggerAction : "all",
		emptyText : WtfGlobal.getLocaleText("hrms.common.Selectanoption"),
		mode : "local"
	});
	this.columnCombo.on("select", this.displayField, this);
	this.cm = new Wtf.grid.ColumnModel([ {
		header : WtfGlobal.getLocaleText("hrms.common.Column"),
		dataIndex : "column"
	}, {
		header : WtfGlobal.getLocaleText("hrms.common.Search1Text"),
		dataIndex : "searchText",
		hidden : true
	}, {
		header : WtfGlobal.getLocaleText("hrms.common.SearchText"),
		dataIndex : "id"
	}, {
		header : WtfGlobal.getLocaleText("hrms.common.delete"),
		renderer : function(J, F, I, K, G, H) {
			return "<div class='pwndCommon deletecolIcon'>&nbsp;</div>"
		}
	} ]);
	this.searchRecord = Wtf.data.Record.create([ {
		name : "column"
	}, {
		name : "searchText"
	}, {
		name : "dbname"
	}, {
		name : "id"
	}, {
		name : "xtype"
	}, {
		name : "iscustom"
	}, {
		name : "stateid"
	} ]);
	this.GridJsonReader = new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "count"
	}, this.searchRecord);
	this.searchStore = new Wtf.data.Store({
		reader : this.GridJsonReader,
		url : "Common/getSavedSearch.common"
	});
	if (this.searchid != undefined) {
		this.searchStore.on("load", this.savedSearchStoreload, this)
	}
	this.on("cellclick", this.deleteFilter, this);
	Wtf.advancedSearchComponent.superclass.constructor
			.call(
					this,
					{
						region : "north",
						height : 150,
						hidden : true,
						store : this.searchStore,
						cm : this.cm,
						stripeRows : true,
						autoScroll : true,
						border : false,
						clicksToEdit : 1,
						viewConfig : {
							forceFit : true
						},
						tbar : [
								this.columnCombo,
								"-",
								this.text = new Wtf.Toolbar.TextItem(
										WtfGlobal
												.getLocaleText("hrms.common.SearchText")
												+ ": "),
								this.searchText = new Wtf.ux.TextField(
										{
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.common.NewMasterRecord"),
											anchor : "95%",
											maxLength : 100,
											width : 125
										}),
								this.add = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.activityList.add"),
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.common.Addatermtosearch")
											},
											handler : this.addSearchFilter,
											scope : this,
											iconCls : "pwndExport addfilter"
										}),
								this.search = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.search"),
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.common.add.terms.search")
											},
											handler : this.doSearch,
											scope : this,
											disabled : true,
											iconCls : "pwnd searchtabpane"
										}),
								this.cancel = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.Close"),
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.common.Clearsearchtermsandcloseadvancedsearch")
											},
											handler : this.cancelSearch,
											scope : this,
											iconCls : "pwndCommon cancelbuttonIcon"
										}),
								this.save = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.remember.search"),
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.common.Savesearchterms")
											},
											handler : this.saveSearchHandler,
											scope : this,
											iconCls : "pwndCommon submitbuttonIcon"
										}),
								this.saveSearchName = new Wtf.ux.TextField({
									anchor : "95%",
									maxLength : 100,
									width : 125
								}) ]
					})
};
Wtf
		.extend(
				Wtf.advancedSearchComponent,
				Wtf.grid.EditorGridPanel,
				{
					addSearchFilter : function() {
						var E = this.columnCombo.getValue();
						var C = 0;
						var F;
						if (E != ""
								&& (this.searchText.getValue() != "" || (this.searchText
										.getXType() == "numberfield" && this.searchText
										.getValue() == 0))) {
							if (this.searchText.getXType() == "datefield") {
								F = this.searchText.getValue().format("m/d/Y")
										+ "##"
										+ this.searchtillText.getValue()
												.format("m/d/Y");
								this.searchText1 = "between "
										+ this.searchText.getRawValue()
										+ " and "
										+ this.searchtillText.getRawValue()
							} else {
								F = this.searchText.getValue();
								this.searchText1 = this.searchText
										.getRawValue()
							}
							this.combovalArr.push(this.searchText1);
							this.columnText = "";
							this.iscustom = false;
							if (F != ""
									|| (this.searchText.getXType() == "numberfield" && this.searchText
											.getValue() == 0)) {
								for ( var D = 0; D < this.combostore.getCount(); D++) {
									if (this.combostore.getAt(D).get("name") == E) {
										this.columnText = this.combostore
												.getAt(D).get("header");
										this.iscustom = this.combostore
												.getAt(D).get("iscustom");
										C = 1
									}
								}
								if (C == 1) {
									this.search.enable();
									this.search
											.setTooltip(WtfGlobal
													.getLocaleText("hrms.common.Searchonmultipleterms"));
									var A = new this.searchRecord({
										column : this.columnText,
										searchText : F,
										dbname : E,
										id : this.searchText1,
										xtype : this.searchText.getXType(),
										iscustom : this.iscustom
									});
									var B = this.searchStore.find("column",
											this.columnText);
									if (B == -1) {
										this.searchStore.add(A)
									} else {
										this.combovalArr.splice(B, 1);
										this.searchStore
												.remove(this.searchStore
														.getAt(B));
										this.searchStore.insert(B, A)
									}
								}
							}
						} else {
							if (E == "") {
								calMsgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.warning"),
												WtfGlobal
														.getLocaleText("hrms.common.Selectacolumntosearch") ],
										2)
							} else {
								if (this.searchText.getValue() == "") {
									calMsgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.common.PleasespecifyaSearchText") ],
											2)
								}
							}
						}
						this.searchText.setValue("");
						if (this.searchtillText != null) {
							this.searchtillText.setValue("")
						}
					},
					savedSearchStoreload : function(B, A, C) {
						if (this.searchStore.getCount() > 0) {
							var E = [];
							var D = 0;
							this.searchStore
									.each(
											function(F) {
												var I = F.data;
												var G = I.searchText;
												G = WtfGlobal.replaceAll(G,
														"\\\\", "\\\\");
												var H = F.data.xtype;
												E
														.push({
															iscustom : I.iscustom,
															column : I.dbname,
															searchText : G,
															columnheader : encodeURIComponent(I.column),
															search : G,
															combosearch : G,
															xtype : H
														});
												D++
											}, this);
							E = {
								root : E
							};
							this.fireEvent("reloadgridStore", Wtf.encode(E));
							this.search.enable()
						} else {
							this.search.disable()
						}
					},
					getJsonofStore : function() {
						var B = [];
						var A = 0;
						this.searchStore.each(function(C) {
							var G = C.data;
							var E = G.searchText + "";
							var F = G.xtype;
							if (F == "datefield" || F == "Date") {
								if (G.searchText && G.searchText.format) {
									E = WtfGlobal
											.convertToOnlyDate(G.searchText)
								}
							}
							E = WtfGlobal.replaceAll(E, "\\\\", "\\\\");
							if (this.combovalArr[A]) {
								this.combovalArr[A] = WtfGlobal.replaceAll(
										this.combovalArr[A], "\\\\", "\\\\")
							}
							var D = G.dbname;
							if (G.iscustom == true) {
								D = "cfd.col" + G.dbname
							}
							B.push({
								column : encodeURIComponent(G.column),
								refdbname : G.refdbname,
								xfield : G.xfield,
								iscustom : G.iscustom,
								fieldtype : G.fieldtype,
								searchText : E,
								dbname : D,
								id : G.id,
								xtype : F,
								combosearch : this.combovalArr[A]
							});
							A++
						}, this);
						B = {
							data : B
						};
						return Wtf.encode(B)
					},
					saveSearchHandler : function() {
						if (this.searchStore.getCount() > 0) {
							this.saveSearchName.setValue(WtfGlobal
									.HTMLStripper(this.saveSearchName
											.getValue()));
							if (this.saveSearchName.getValue() != ""
									&& this.saveSearchName.validate()) {
								var A = this.getJsonofStore();
								var B = this.saveSearchName.getValue();
								this.fireEvent("saveStore", A, B)
							} else {
								calMsgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.Alert"),
												WtfGlobal
														.getLocaleText("hrms.common.please.enter.valid.search.add") ],
										0)
							}
						} else {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.common.Selectsearchtextandsavesearchresults") ],
									0)
						}
					},
					doSearch : function() {
						if (this.searchStore.getCount() > 0) {
							var B = '{"root":[';
							var A = 0;
							this.searchStore.each(function(C) {
								var F = C.data.searchText;
								var E = "";
								E = C.data.searchText;
								var G = C.data.xtype;
								if (C.data.iscustom == undefined
										|| C.data.iscustom == "") {
									C.data.iscustom = false;
									B += '{ "iscustom":' + C.data.iscustom
											+ ',"column":"' + C.data.dbname
											+ '","searchText":"' + F
											+ '","columnheader":"'
											+ encodeURIComponent(C.data.column)
											+ '","search":"' + E
											+ '","combosearch":"'
											+ this.combovalArr[A]
											+ '","xtype":"' + G + '"},'
								} else {
									var D = C.data.dbname;
									if (this.searchid == undefined) {
										D = "cfd.col" + D
									}
									B += '{ "iscustom":' + C.data.iscustom
											+ ',"column":"' + D
											+ '","searchText":"' + F
											+ '","columnheader":"'
											+ encodeURIComponent(C.data.column)
											+ '","search":"' + E
											+ '","combosearch":"'
											+ this.combovalArr[A]
											+ '","xtype":"' + G + '"},'
								}
								A++
							}, this);
							B = B.substring(0, B.length - 1);
							B += "]}";
							this.fireEvent("filterStore", B)
						} else {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.common.Selectsearchtextandaddgetsearchresults") ],
									2);
							this.fireEvent("filterStore", "")
						}
					},
					cancelSearch : function() {
						this.columnCombo.setValue("");
						var A = this.searchText.getXType();
						if (A == "combo") {
							this.columnCombo.fireEvent("select", undefined, "")
						}
						(this.toDate != undefined) ? this.toDate.setValue("")
								: null;
						(this.fromDate != undefined) ? this.fromDate
								.setValue("") : null;
						this.searchStore.removeAll();
						this.search.disable();
						this.combovalArr = [];
						this.fireEvent("clearStoreFilter")
					},
					deleteFilter : function(D, A, B, E) {
						var C = E;
						if (B == 3) {
							this.searchStore.remove(this.searchStore.getAt(A));
							if (this.searchStore.getCount() == 0) {
								this.search.disable();
								this.search
										.setTooltip(WtfGlobal
												.getLocaleText("hrms.common.add.terms.search"))
							}
							this.combovalArr.splice(A, 1)
						}
					},
					displayField : function(F, B) {
						if (B == "") {
							var D = "textfield"
						} else {
							D = B.get("xtype")
						}
						if (D == "None") {
							B.set("xtype", "textfield")
						}
						if (this.text) {
							this.text.destroy()
						}
						if (this.text1 || this.searchtillText) {
							this.text1.destroy();
							this.searchtillText.destroy()
						}
						this.searchText.destroy();
						this.add.destroy();
						this.search.destroy();
						this.cancel.destroy();
						this.save.destroy();
						this.saveSearchName.destroy();
						this.doLayout();
						if (D == "textfield" || D == "Text" || D == "textarea") {
							this.searchText = new Wtf.ux.TextField({
								anchor : "95%",
								maxLength : 100,
								width : 125
							})
						}
						if (D == "numberfield" || D == "Number(Integer)"
								|| D == "Number(Float)") {
							this.searchText = new Wtf.form.NumberField({
								anchor : "95%",
								maxLength : 100,
								width : 125
							})
						}
						if (D == "time" || D == "timefield") {
							this.searchText = new Wtf.form.TimeField({
								width : 125,
								minValue : new Date(new Date().format("M d, Y")
										+ " 8:00:00 AM"),
								maxValue : new Date(new Date().add(Date.DAY, 1)
										.format("M d, Y")
										+ " 7:45:00 AM")
							})
						}
						if (D == "date" || D == "datefield") {
							this.searchText = new Wtf.form.DateField({
								width : 125,
								format : "Y-m-d"
							});
							this.searchtillText = new Wtf.form.DateField({
								width : 125,
								format : "Y-m-d"
							})
						}
						if (D == "combo" || D == "Combobox") {
							var C = "";
							var A = "";
							var G = B.get("cname");
							var E;
							if (G == "gender") {
								this.comboStore = new Wtf.data.SimpleStore(
										{
											fields : [ "id", "name" ],
											data : [
													[
															"1",
															WtfGlobal
																	.getLocaleText("hrms.common.Male") ],
													[
															"2",
															WtfGlobal
																	.getLocaleText("hrms.common.Female") ] ]
										});
								E = "name"
							} else {
								if (G == "weeklyoff") {
									this.comboStore = new Wtf.data.SimpleStore(
											{
												fields : [ "id", "name" ],
												data : [ [ "1", "sunday" ],
														[ "2", "monday" ],
														[ "3", "tuesday" ],
														[ "4", "wednesday" ],
														[ "5", "thursday" ],
														[ "6", "friday" ],
														[ "7", "saturday" ] ]
											});
									E = "name"
								} else {
									if (G == "marital") {
										this.comboStore = new Wtf.data.SimpleStore(
												{
													fields : [ "id", "name" ],
													data : [
															[
																	"1",
																	WtfGlobal
																			.getLocaleText("hrms.common.Single") ],
															[
																	"2",
																	WtfGlobal
																			.getLocaleText("hrms.common.Married") ] ]
												});
										E = "id"
									} else {
										if (G == "country") {
											if (!Wtf.StoreMgr
													.containsKey("country")) {
												Wtf.countryStore.load();
												Wtf.StoreMgr.add("country",
														Wtf.countryStore)
											}
											this.comboStore = Wtf.countryStore;
											E = "id"
										} else {
											if (G == "qualification") {
												if (!Wtf.StoreMgr
														.containsKey("qua")) {
													Wtf.quaStore.load();
													Wtf.StoreMgr.add("qua",
															Wtf.quaStore)
												}
												this.comboStore = Wtf.quaStore;
												E = "name"
											} else {
												if (G == "department") {
													if (!Wtf.StoreMgr
															.containsKey("dep")) {
														Wtf.depStore.load();
														Wtf.StoreMgr.add("dep",
																Wtf.depStore)
													}
													this.comboStore = Wtf.depStore;
													E = "id"
												} else {
													if (G == "designation") {
														if (!Wtf.StoreMgr
																.containsKey("desig")) {
															Wtf.desigStore
																	.load();
															Wtf.StoreMgr
																	.add(
																			"desig",
																			Wtf.desigStore)
														}
														this.comboStore = Wtf.desigStore;
														E = "id"
													} else {
														if (G == "manager") {
															if (!Wtf.StoreMgr
																	.containsKey("manager")) {
																Wtf.managerStore
																		.load();
																Wtf.StoreMgr
																		.add(
																				"manager",
																				Wtf.managerStore)
															}
															this.comboStore = Wtf.managerStore;
															E = "userid"
														} else {
															if (G == "recruiter") {
																this.comboStore = this.RecruiterStore;
																E = "rid"
															} else {
																if (G == "status") {
																	this.comboStore = new Wtf.data.SimpleStore(
																			{
																				fields : [
																						"id",
																						"name" ],
																				data : [
																						[
																								"1",
																								WtfGlobal
																										.getLocaleText("hrms.recruitment.pending") ],
																						[
																								"2",
																								WtfGlobal
																										.getLocaleText("hrms.recruitment.shortlisted") ],
																						[
																								"3",
																								WtfGlobal
																										.getLocaleText("hrms.recruitment.in.process") ],
																						[
																								"4",
																								WtfGlobal
																										.getLocaleText("hrms.recruitment.on.hold") ],
																						[
																								"5",
																								WtfGlobal
																										.getLocaleText("hrms.common.All") ] ]
																			});
																	E = "id"
																} else {
																	if (G == "applicant") {
																		this.comboStore = new Wtf.data.SimpleStore(
																				{
																					fields : [
																							"id",
																							"name" ],
																					data : [
																							[
																									"1",
																									WtfGlobal
																											.getLocaleText("hrms.common.Internal") ],
																							[
																									"2",
																									WtfGlobal
																											.getLocaleText("hrms.common.External") ],
																							[
																									"3",
																									WtfGlobal
																											.getLocaleText("hrms.common.All") ] ]
																				});
																		E = "id"
																	} else {
																		if (G == "jobstatus") {
																			this.jobstatusdata = [
																					[
																							"0",
																							"Open" ],
																					[
																							"2",
																							"Expired" ],
																					[
																							"3",
																							"Filled" ],
																					[
																							"4",
																							"All" ] ];
																			this.comboStore = new Wtf.data.SimpleStore(
																					{
																						fields : [
																								"id",
																								"name" ],
																						data : this.jobstatusdata
																					});
																			E = "id"
																		} else {
																			if (G == "jobtype") {
																				this.jobtypedata = [
																						[
																								"1",
																								WtfGlobal
																										.getLocaleText("hrms.common.Both") ],
																						[
																								"2",
																								WtfGlobal
																										.getLocaleText("hrms.common.External") ],
																						[
																								"3",
																								WtfGlobal
																										.getLocaleText("hrms.common.Internal") ],
																						[
																								"4",
																								WtfGlobal
																										.getLocaleText("hrms.common.All") ] ];
																				this.comboStore = new Wtf.data.SimpleStore(
																						{
																							fields : [
																									"id",
																									"name" ],
																							data : this.jobtypedata
																						});
																				E = "id"
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							this.displayField = F.getValue();
							this.searchText = new Wtf.form.ComboBox(
									{
										valueField : E,
										displayField : "name",
										store : this.comboStore,
										typeAhead : true,
										forceSelection : true,
										anchor : "95%",
										mode : "local",
										triggerAction : "all",
										selectOnFocus : true,
										emptyText : WtfGlobal
												.getLocaleText("hrms.common.Selectanoption"),
										width : 125
									})
						}
						if (D != "datefield" && D != "Date") {
							this.text = new Wtf.Toolbar.TextItem(WtfGlobal
									.getLocaleText("hrms.common.SearchText")
									+ ": ");
							this.getTopToolbar().add(this.text);
							this.getTopToolbar().add(this.searchText)
						} else {
							this.text = new Wtf.Toolbar.TextItem(WtfGlobal
									.getLocaleText("hrms.common.SearchBetween")
									+ ": ");
							this.getTopToolbar().add(this.text);
							this.getTopToolbar().add(this.searchText);
							this.text1 = new Wtf.Toolbar.TextItem(WtfGlobal
									.getLocaleText("hrms.common.and")
									+ ": ");
							this.getTopToolbar().add(this.text1);
							this.getTopToolbar().add(this.searchtillText)
						}
						this
								.getTopToolbar()
								.addButton(
										[
												this.add = new Wtf.Toolbar.Button(
														{
															text : WtfGlobal
																	.getLocaleText("hrms.activityList.add"),
															tooltip : {
																text : WtfGlobal
																		.getLocaleText("hrms.common.Addatermtosearch")
															},
															handler : this.addSearchFilter,
															scope : this,
															iconCls : "pwndExport addfilter"
														}),
												this.search = new Wtf.Toolbar.Button(
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.search"),
															tooltip : {
																text : WtfGlobal
																		.getLocaleText("hrms.common.add.terms.search")
															},
															handler : this.doSearch,
															disabled : true,
															scope : this,
															iconCls : "pwnd searchtabpane"
														}),
												this.cancel = new Wtf.Toolbar.Button(
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.Close"),
															tooltip : {
																text : WtfGlobal
																		.getLocaleText("hrms.common.Clearsearchtermsandcloseadvancedsearch")
															},
															handler : this.cancelSearch,
															scope : this,
															iconCls : "pwndCommon cancelbuttonIcon"
														}) ]);
						this.save = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.remember.search"),
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.common.Savesearchterms")
									},
									handler : this.saveSearchHandler,
									scope : this,
									iconCls : "pwndCommon submitbuttonIcon"
								});
						this.saveSearchName = new Wtf.ux.TextField({
							anchor : "95%",
							maxLength : 100,
							allowBlank : false,
							width : 125
						});
						this.getTopToolbar().add(this.save);
						this.getTopToolbar().add(this.saveSearchName);
						this.add.getEl().dom.style.paddingLeft = "4px";
						this.doLayout();
						if (this.searchStore.getCount() > 0) {
							this.search.enable()
						} else {
							this.search.disable()
						}
					}
				});
Wtf.attributeComponent = function(A) {
	Wtf.apply(this, A);
	Wtf.attributeComponent.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.attributeComponent,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.attributeComponent.superclass.initComponent
								.call(this);
						this.addEvents({
							"closeform" : true
						})
					},
					onRender : function(config) {
						Wtf.attributeComponent.superclass.onRender.call(this,
								config);
						this.count = 0;
						var paramobj;
						if (this.grouper != null && this.grouper != undefined) {
							paramobj = {
								configFlag : "true",
								configType : this.configType,
								flag : 218,
								grouper : this.grouper,
								refid : this.refid
							}
						} else {
							paramobj = {
								configFlag : "true",
								configType : this.configType,
								flag : 218,
								refid : this.refid
							}
						}
						Wtf.Ajax
								.requestEx(
										{
											url : "CustomCol/getConfigData.do",
											method : "POST",
											params : paramobj
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												this.count = responseObj.data.length;
												for ( var i = 0; i < responseObj.data.length; i++) {
													if (responseObj.data[i].configtype == 0) {
														this.text = new Wtf.form.TextField(
																{
																	id : this.id
																			+ "text"
																			+ i,
																	fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																			+ "*"
																			: responseObj.data[i].fieldname,
																	name : responseObj.data[i].fieldname,
																	value : responseObj.data[i].configdata[0],
																	scope : this,
																	width : this.widthValue,
																	maxLength : 250,
																	allowBlank : (responseObj.data[i].allowblank == 0) ? false
																			: true,
																	disabled : userroleid == 1 ? false
																			: (responseObj.data[i].blockemployees == 1 ? true
																					: false)
																});
														Wtf.getCmp(this.id)
																.add(this.text)
													} else {
														if (responseObj.data[i].configtype == 1) {
															Wtf
																	.getCmp(
																			this.id)
																	.add(
																			new Wtf.form.NumberField(
																					{
																						id : this.id
																								+ "text"
																								+ i,
																						fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																								+ "*"
																								: responseObj.data[i].fieldname,
																						name : responseObj.data[i].fieldname,
																						value : (!isNaN(responseObj.data[i].configdata[0])) ? responseObj.data[i].configdata
																								: 0,
																						maxLength : 50,
																						scope : this,
																						width : this.widthValue,
																						allowBlank : (responseObj.data[i].allowblank == 0) ? false
																								: true
																					}))
														} else {
															if (responseObj.data[i].configtype == 2) {
																Wtf
																		.getCmp(
																				this.id)
																		.add(
																				new Wtf.form.Checkbox(
																						{
																							id : this.id
																									+ "text"
																									+ i,
																							fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																									+ " *"
																									: responseObj.data[i].fieldname,
																							name : responseObj.data[i].fieldname,
																							checked : (this.refid.length == 0) ? false
																									: responseObj.data[i].configdata[0],
																							scope : this
																						}))
															} else {
																if (responseObj.data[i].configtype == 3) {
																	Wtf
																			.getCmp(
																					this.id)
																			.add(
																					new Wtf.form.DateField(
																							{
																								id : this.id
																										+ "text"
																										+ i,
																								fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																										+ "*"
																										: responseObj.data[i].fieldname,
																								name : responseObj.data[i].fieldname,
																								value : responseObj.data[i].configdata[0],
																								width : this.widthValue,
																								format : "Y-m-j",
																								allowBlank : (responseObj.data[i].allowblank == 0) ? false
																										: true
																							}))
																} else {
																	if (responseObj.data[i].configtype == 4) {
																		var storedata = [];
																		if (responseObj.data[i].masterdata != null) {
																			for ( var ctr = 0; ctr < responseObj.data[i].masterdata.length; ctr++) {
																				var storerecord = [];
																				storerecord
																						.push(responseObj.data[i].masterdata[ctr].id);
																				storerecord
																						.push(responseObj.data[i].masterdata[ctr].data);
																				storedata
																						.push(storerecord)
																			}
																		}
																		this.ruleTypeStore = new Wtf.data.SimpleStore(
																				{
																					fields : [
																							"id",
																							"name" ],
																					data : storedata
																				});
																		this.ruleTypeCombo = new Wtf.form.ComboBox(
																				{
																					id : this.id
																							+ "text"
																							+ i,
																					triggerAction : "all",
																					store : this.ruleTypeStore,
																					mode : "local",
																					width : this.widthValue,
																					listWidth : this.widthValue,
																					displayField : "name",
																					fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																							+ "*"
																							: responseObj.data[i].fieldname,
																					valueField : "id",
																					name : responseObj.data[i].fieldname,
																					hiddenName : responseObj.data[i].fieldname,
																					editable : false,
																					value : responseObj.data[i].configdata[0],
																					allowBlank : (responseObj.data[i].allowblank == 0) ? false
																							: true
																				});
																		Wtf
																				.getCmp(
																						this.id)
																				.add(
																						this.ruleTypeCombo)
																	} else {
																		if (responseObj.data[i].configtype == 5) {
																			Wtf
																					.getCmp(
																							this.id)
																					.add(
																							new Wtf.MenuHTMLEditor(
																									{
																										id : this.id
																												+ "text"
																												+ i,
																										fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																												+ "*"
																												: responseObj.data[i].fieldname,
																										width : this.widthValue,
																										height : 100,
																										value : responseObj.data[i].configdata[0],
																										name : responseObj.data[i].fieldname,
																										allowBlank : (responseObj.data[i].allowblank == 0) ? false
																												: true
																									}))
																		} else {
																			if (responseObj.data[i].configtype == 6) {
																				Wtf
																						.getCmp(
																								this.id)
																						.add(
																								new Wtf.form.TextArea(
																										{
																											id : this.id
																													+ "text"
																													+ i,
																											fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																													+ "*"
																													: responseObj.data[i].fieldname,
																											name : responseObj.data[i].fieldname,
																											value : responseObj.data[i].configdata[0],
																											scope : this,
																											width : this.widthValue,
																											allowBlank : (responseObj.data[i].allowblank == 0) ? false
																													: true
																										}))
																			} else {
																				if (responseObj.data[i].configtype == 7) {
																					var storedata1 = [];
																					if (responseObj.data[i].masterdata != null) {
																						for ( var ctr1 = 0; ctr1 < responseObj.data[i].masterdata.length; ctr1++) {
																							var storerecord1 = [];
																							storerecord1
																									.push(responseObj.data[i].masterdata[ctr1].id);
																							storerecord1
																									.push(responseObj.data[i].masterdata[ctr1].data);
																							storedata1
																									.push(storerecord1)
																						}
																					}
																					this.ruleTypeStore1 = new Wtf.data.SimpleStore(
																							{
																								fields : [
																										"id",
																										"name" ],
																								data : storedata1
																							});
																					Wtf
																							.getCmp(
																									this.id)
																							.add(
																									new Wtf.common.Select(
																											Wtf
																													.applyIf(
																															{
																																multiSelect : true,
																																forceSelection : true
																															},
																															{
																																id : this.id
																																		+ "text"
																																		+ i,
																																triggerAction : "all",
																																store : this.ruleTypeStore1,
																																mode : "local",
																																width : this.widthValue,
																																listWidth : this.widthValue,
																																displayField : "name",
																																fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																																		+ "*"
																																		: responseObj.data[i].fieldname,
																																valueField : "id",
																																hiddenName : responseObj.data[i].fieldname,
																																name : responseObj.data[i].fieldname,
																																value : responseObj.data[i].configdata,
																																scope : this,
																																allowBlank : (responseObj.data[i].allowblank == 0) ? false
																																		: true
																															})))
																				} else {
																					if (responseObj.data[i].configtype == 8) {
																						Wtf
																								.getCmp(
																										this.id)
																								.add(
																										new Wtf.form.TextField(
																												{
																													id : this.id
																															+ "text"
																															+ i,
																													fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																															+ "*"
																															: responseObj.data[i].fieldname,
																													name : responseObj.data[i].fieldname,
																													scope : this,
																													width : this.widthValue,
																													autoCreate : {
																														tag : "input",
																														type : "text",
																														size : "35",
																														autocomplete : "off"
																													},
																													msgTarget : "under",
																													disabled : (responseObj.data[i].disable == 0) ? false
																															: true,
																													allowBlank : (responseObj.data[i].allowblank == 0) ? false
																															: true,
																													inputType : "file"
																												}))
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
											this
													.fireEvent("closeform",
															this.id)
										}, function() {
											this
													.fireEvent("closeform",
															this.id)
										})
					},
					isValidate : function() {
						var A = 0;
						for ( var B = 0; B < this.count; B++) {
							if (Wtf.getCmp(this.id + "text" + B)
									&& Wtf.getCmp(this.id + "text" + B)
											.validate() == false) {
								A = 1;
								break
							}
						}
						if (A == 1) {
							return false
						} else {
							return true
						}
					}
				});
function ConfigMaster() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("masterConfigTab");
	if (A == null) {
		A = new Wtf.MasterConfigurator(
				{
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.master.configuration.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.master.configuration")
							+ "</div>",
					closable : true,
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsmaster),
					id : "masterConfigTab"
				});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function ConfigAppraisalCycleMaster() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("AppraisalCycleConfigTab");
	if (A == null) {
		A = new Wtf.appraisalCycleMasterGrid(
				{
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.set.appraisal.cycle.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.set.appraisal.cycle")
							+ "</div>",
					closable : true,
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsmaster),
					id : "AppraisalCycleConfigTab"
				});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function auditTrail() {
	var A = Wtf.getCmp("auditTrail");
	if (A == null) {
		A = new Wtf.common.WtfAuditTrail(
				{
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.audit.trail.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.audit.trail")
							+ "</div>",
					border : false,
					id : "auditTrail",
					iconCls : getTabIconCls(Wtf.etype.hrmsaudit),
					closable : true
				});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	Wtf.getCmp("as").doLayout()
}
//Reports module
function reports() {
	var A = Wtf.getCmp("reports");
	if (A == null) {
		A = new Wtf.common.WtfReports(
				{
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.reports.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.reports")
							+ "</div>",
					border : false,
					id : "reports",
					iconCls : getTabIconCls(Wtf.etype.reports),
					closable : true
				});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	Wtf.getCmp("as").doLayout()
}
//End
//Summary Reports
function summaryreports() {
	var A = Wtf.getCmp("summaryreports");
	if (A == null) {
		A = new Wtf.common.WtfSummaryReports(
				{
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.reports.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.reports.summaryreport")
							+ "</div>",
					border : false,
					id : "summaryreports",
					iconCls : getTabIconCls(Wtf.etype.reports),
					closable : true
				});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	Wtf.getCmp("as").doLayout()
}
//End
function payrollData(parentPanel, userID, empname) {
	var usrid = loginid + "main";
	if (usrid != undefined) {
		usrid = userID
	}
	var title = WtfGlobal.getLocaleText("hrms.payroll.my.tax.declaration");
	if (empname != undefined) {
		title = empname + ": Tax Declaration"
	}
	var panel = Wtf.getCmp("payrollData" + usrid);
	this.year = new Date("2012/01/01").format("Y-m-d");
	if (panel == null) {
		calMsgBoxShow(202, 4, true);
		Wtf.Ajax
				.requestEx(
						{
							url : "Payroll/MalaysianIncomeTax/getMalaysianDeductionComponents.py",
							params : {
								userID : userID != undefined ? userID : loginid,
								year : this.year
							}
						},
						this,
						function(response) {
							var deductions = eval("(" + response + ")");
							panel = new Wtf.MalaysianUserIncomeTaxForm(
									{
										layout : "fit",
										title : '<div wtf:qtip="'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.manage.monthly.contributions.deductions.allowances.current.month")
												+ '">' + title + "</div>",
										border : false,
										id : "payrollData" + usrid,
										iconCls : "pwndHRMS incometaxformTabIcon",
										closable : true,
										usrid : usrid,
										userid : userID != undefined ? userID
												: loginid,
										year : this.year,
										compulsoryDeductions : deductions.data.compulsoryDeductions,
										optionalDeductions : deductions.data.optionalDeductions,
										allowanceDeductions : deductions.data.allowanceDeductions,
										userdata : deductions.data.userdata
									});
							if (parentPanel != undefined) {
								parentPanel.add(panel);
								parentPanel.setActiveTab(panel);
								parentPanel.doLayout();
								Wtf.getCmp("as").doLayout()
							} else {
								Wtf.getCmp("as").add(panel);
								Wtf.getCmp("as").setActiveTab(panel);
								Wtf.getCmp("as").doLayout()
							}
							WtfGlobal.closeProgressbar()
						}, function(response) {
						})
	} else {
		if (parentPanel != undefined) {
			parentPanel.setActiveTab(panel);
			parentPanel.doLayout();
			Wtf.getCmp("as").doLayout()
		} else {
			Wtf.getCmp("as").setActiveTab(panel);
			Wtf.getCmp("as").doLayout()
		}
	}
}
function payrollDeclarationForm(usrid) {
	var userid = usrid != undefined ? usrid : loginid;
	var title = WtfGlobal.getLocaleText("hrms.payroll.my.tax.declaration");
	if (usrid != undefined) {
		title = WtfGlobal.getLocaleText("hrms.payroll.user.tax.declaration")
	}
	this.year = new Date("2012/01/01").format("Y-m-d");
	calMsgBoxShow(202, 4, true);
	Wtf.Ajax
			.requestEx(
					{
						url : "Payroll/Date/getTaxableComponents.py",
						params : {
							userID : userid,
							year : this.year
						}
					},
					this,
					function(response) {
						this.components = eval("(" + response + ")");
						this.panel = new Wtf.MyTaxDeclarationForm(
								{
									layout : "fit",
									title : '<div wtf:qtip="'
											+ WtfGlobal
													.getLocaleText("hrms.payroll.manage.monthly.contributions.deductions.allowances.current.month")
											+ '">' + title + "</div>",
									border : false,
									iconCls : "pwndHRMS incometaxformTabIcon",
									closable : true,
									autoScroll : true,
									height : 500,
									userid : userid,
									width : 400,
									year : this.year,
									modal : true,
									components : this.components
								});
						this.panel.show();
						WtfGlobal.closeProgressbar()
					}, function(response) {
					})
}
function payrollUserData(parentPanel, userID, empname, statutoryForm) {
	var userid = loginid + "mainuser";
	if (userid != undefined) {
		userid = userID
	}
	var id = "payrollUserData" + userid;
	var title = WtfGlobal
			.getLocaleText("hrms.payroll.my.statutory.forms.details");
	if (empname != undefined) {
		title = WtfGlobal.getLocaleText({
			key : "hrms.payroll.my.statutory.forms.details.params",
			params : [ empname ]
		});
		id = id + "Admin"
	}
	var panel = Wtf.getCmp("payrollUserData" + userid);
	this.year = new Date("2012/01/01").format("Y-m-d");
	if (panel == null) {
		calMsgBoxShow(202, 4, true);
		Wtf.Ajax
				.requestEx(
						{
							url : "Payroll/MalaysianStatutoryForm/getUserStatutoryFormInformation.py",
							params : {
								year : this.year,
								userID : userID != undefined ? userID : loginid,
								declarationMonth : statutoryForm != undefined ? statutoryForm.monthCmb
										.getValue()
										: new Date().getMonth(),
								declarationYear : statutoryForm != undefined ? statutoryForm.yearCmb
										.getValue()
										: new Date().getFullYear()
							}
						},
						this,
						function(response) {
							var userdata = eval("(" + response + ")");
							panel = new Wtf.MalaysianUserIncomeTax(
									{
										layout : "fit",
										title : title,
										border : false,
										id : id,
										iconCls : "pwndHRMS incometaxuserformTabIcon",
										closable : true,
										year : this.year,
										userid : userID != undefined ? userID
												: loginid,
										userdata : userdata.data.userdata,
										statutoryForm : statutoryForm
									});
							if (parentPanel != undefined) {
								parentPanel.add(panel);
								parentPanel.setActiveTab(panel);
								parentPanel.doLayout();
								Wtf.getCmp("as").doLayout()
							} else {
								Wtf.getCmp("as").add(panel);
								Wtf.getCmp("as").setActiveTab(panel);
								Wtf.getCmp("as").doLayout()
							}
							WtfGlobal.closeProgressbar()
						}, function(response) {
						})
	} else {
		if (parentPanel != undefined) {
			parentPanel.setActiveTab(panel);
			parentPanel.doLayout();
			Wtf.getCmp("as").doLayout()
		} else {
			Wtf.getCmp("as").setActiveTab(panel);
			Wtf.getCmp("as").doLayout()
		}
	}
}
function statutoryFormCompanyDetails(parentPanel, statutoryForm) {
	var title = WtfGlobal
			.getLocaleText("hrms.payroll.company.statutory.forms.details");
	var panel = Wtf.getCmp("statutoryFormCompanyDetails" + companyid);
	if (panel == null) {
		calMsgBoxShow(202, 4, true);
		Wtf.Ajax
				.requestEx(
						{
							url : "Payroll/MalaysianStatutoryForm/getCompanyFormInformation.py",
							params : {
								companyid : companyid,
								month : statutoryForm != undefined ? statutoryForm.monthCmb
										.getValue()
										: new Date().getMonth(),
								year : statutoryForm != undefined ? statutoryForm.yearCmb
										.getValue()
										: new Date().getFullYear()
							}
						}, this, function(response) {
							var userdata = eval("(" + response + ")");
							panel = new Wtf.MalaysianCompanyStatutoryForm({
								layout : "fit",
								title : title,
								border : false,
								id : "statutoryFormCompanyDetails" + companyid,
								iconCls : "pwndHRMS incometaxuserformTabIcon",
								closable : true,
								year : this.year,
								companyid : companyid,
								userdata : userdata.data.userdata,
								statutoryForm : statutoryForm
							});
							if (parentPanel != undefined) {
								parentPanel.add(panel);
								parentPanel.setActiveTab(panel);
								parentPanel.doLayout();
								Wtf.getCmp("as").doLayout()
							}
							WtfGlobal.closeProgressbar()
						}, function(response) {
						})
	} else {
		if (parentPanel != undefined) {
			parentPanel.setActiveTab(panel);
			parentPanel.doLayout();
			Wtf.getCmp("as").doLayout()
		} else {
			Wtf.getCmp("as").setActiveTab(panel);
			Wtf.getCmp("as").doLayout()
		}
	}
}
function payrollUserList() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("payrollUserListtabpanel");
	if (B == null) {
		this.panel = new Wtf.MalaysianPayrollUser({
			id : "payrollUserList",
			title : WtfGlobal
					.getLocaleText("hrms.administration.user.tax.details"),
			layout : "fit",
			border : false,
			parentPanel : B,
			iconCls : getTabIconCls(Wtf.etype.hrmsgoals)
		});
		B = new Wtf.TabPanel({
			title : WtfGlobal
					.getLocaleText("hrms.administration.user.tax.details"),
			id : "payrollUserListtabpanel",
			activeTab : 0,
			border : false,
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsgoals),
			items : [ this.panel ]
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function checkForm(D) {
	var C = D;
	for (i = 0; i < C.form.items.items.length; i++) {
		var B = C.form.items.items[i];
		if (B.xtype == "textfield" || B.xtype == "textarea") {
			var A = B.getValue();
			B.setValue(WtfGlobal.ScriptStripper(WtfGlobal.HTMLStripper(A)))
		}
	}
}
function enableDisableButton(A, B, C) {
	C.on("selectionchange", function() {
		changeEnable(A, C)
	}, this);
	B.on("load", function() {
		changeEnable(A, C)
	}, this)
}
function loadOrganizationPage(B) {
	var A = "adminclicked";
	switch (B) {
	case 1, "1":
		A = "adminclicked";
		break;
	case 2, "2":
		A = "projectclicked";
		break;
	case 3, "3":
		A = "companyclicked";
		break
	}
	mainPanel
			.loadTab(
					"chart.html",
					"   myorganizationpanel",
					"<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.common.effortlessly.create.organization.chart")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.common.Organization")
							+ "</div>", "navareadashboard", Wtf.etype.orgaTab,
					false, A)
}
function changeEnable(B, D) {
	var C = D.getSelections();
	var A = 0;
	if (C.length == 1) {
		for (i = 0; i < B.length; i++) {
			if (Wtf.getCmp(B[i])) {
				Wtf.getCmp(B[i]).enable();
				A = 1
			}
		}
		if (A == 0) {
			if (Wtf.getCmp(B)) {
				Wtf.getCmp(B).enable()
			}
		}
	}
	if (C.length < 1 || C.length > 1) {
		for (i = 0; i < B.length; i++) {
			if (Wtf.getCmp(B[i])) {
				Wtf.getCmp(B[i]).disable();
				A = 1
			}
		}
		if (A == 0) {
			if (Wtf.getCmp(B)) {
				Wtf.getCmp(B).disable()
			}
		}
	}
}
function NewlineRemove(A) {
	if (A) {
		return A.replace(/\n/g, " ")
	} else {
		return A
	}
}
function demo() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("demo");
	if (B == null) {
		B = new Wtf.Panel({
			id : "demo",
			title : "Demo Hrms",
			closable : true
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout()
}
function keypositions() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("successionmanage");
	if (B == null) {
		this.keypos = new Wtf.keyPositions({
			id : "empSuccessionTab",
			title : "Key Positions",
			layout : "fit",
			closable : true,
			height : 800,
			iconCls : getTabIconCls(Wtf.etype.hrmskey)
		});
		B = new Wtf.TabPanel({
			title : WtfGlobal
					.getLocaleText("hrms.common.succession.management"),
			id : "successionmanage",
			activeTab : 0,
			border : false,
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmssuccession),
			items : [ this.keypos ]
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function internaljobs() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("recruitmentmanage");
	if (B == null) {
		B = new Wtf.TabPanel({
			title : WtfGlobal.getLocaleText("hrms.recruitment.management"),
			id : "recruitmentmanage",
			activeTab : 0,
			border : false,
			closable : true,
			enableTabScroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsrecruitment)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function internaljobBoard1() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("internaljobBoard");
	if (B == null) {
		this.internaljobBoard = new Wtf.InternalJob(
				{
					id : "internaljobBoard",
					scope : this,
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.internal.job.board.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.internal.job.board")
							+ "</div>",
					layout : "fit",
					iconCls : getTabIconCls(Wtf.etype.hrmsinternaljobmanage)
				});
		A.add(this.internaljobBoard)
	}
	A.setActiveTab(this.internaljobBoard);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function compensation() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("compensation");
	if (B == null) {
		B = new Wtf.TabPanel({
			title : WtfGlobal
					.getLocaleText("hrms.Featurelist.compensationmanage"),
			id : "compensation",
			activeTab : 0,
			border : false,
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmscompensation)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function timesheetmanagement() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("timesheetmanage");
	if (B == null) {
		B = new Wtf.TabPanel({
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.timesheet.management.tooltip")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.timesheet.management")
					+ "</div>",
			id : "timesheetmanage",
			activeTab : 0,
			border : false,
			closable : true,
			enableTabScroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmstime)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function GoalManagement() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("GoalManagement");
	if (B == null) {
		B = new Wtf.GoalManagement(
				{
					id : "GoalManagement",
					title : WtfGlobal
							.getLocaleText("hrms.performance.goal.management"),
					layout : "fit",
					closable : true
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function myAppraisal(B) {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var C = Wtf.getCmp("myappraisal");
	if (C == null) {
		C = new Wtf.competencyEval(
				{
					id : "myappraisal",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.my.appraisal.form.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.my.appraisal.form")
							+ "</div>",
					employee : true,
					read : false,
					modify : true,
					viewappraisal : false,
					apptype : B,
					autoScroll : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsappraisalform)
				});
		A.add(C)
	} else {
		C.apptype = B;
		C.appTypeStore.load()
	}
	A.on("activate", function() {
		if (C.compEvalpanel != null) {
			C.compEvalpanel.doLayout()
		}
		if (Wtf.getCmp("southgoalpanelmyappraisal") != undefined) {
			Wtf.getCmp("southgoalpanelmyappraisal").setHeight(250)
		}
		Wtf.getCmp("southpanelcontmyappraisal").doLayout()
	}, this);
	A.setActiveTab(C);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function InitiateAppraisal() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("viewapp");
	if (B == null) {
		B = new Wtf.Appraisalsmanagement(
				{
					id : "viewapp",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.initiate.appraisal.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.initiate.appraisal")
							+ "</div>",
					layout : "fit",
					iconCls : getTabIconCls(Wtf.etype.hrmsinitapp)
				});
		A.add(B)
	}
	A.on("activate", function() {
		Wtf.getCmp("npanel" + B.id).setHeight(120);
		if (B.appraisalPanel != null) {
			B.appraisalPanel.doLayout()
		}
	}, this);
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function AddJobs() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("addjobs");
	if (B == null) {
		this.edjobTab1 = new Wtf.jobmaster({
			id : "addjobs",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.internal.job.management"),
			scope : this,
			height : 800,
			layout : "fit",
			iconCls : getTabIconCls(Wtf.etype.hrmsinternalmanage)
		});
		this.internalTab = new Wtf.TabPanel({
			title : WtfGlobal.getLocaleText("hrms.recruitment.internal.jobs"),
			id : "internalTab",
			height : 800,
			scope : this,
			enableTabScroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsinternaljob),
			items : [ this.edjobTab1 ]
		});
		A.add(this.internalTab)
	}
	A.setActiveTab(this.internalTab);
	A.doLayout();
	this.internalTab.setActiveTab(this.edjobTab1);
	this.internalTab.doLayout();
	Wtf.getCmp("as").doLayout()
}
function AddJobs2(C) {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("addjobs2");
	if (B == null) {
		this.edjobTab2 = new Wtf.jobmaster2({
			id : "addjobs2",
			scope : this,
			height : 800,
			title : WtfGlobal.getLocaleText("hrms.recruitment.job.management"),
			layout : "fit",
			jobbuttons : true,
			searchid : C,
			agency : false,
			disableBut : false,
			iconCls : getTabIconCls(Wtf.etype.hrmsexternalmanage)
		});
		this.externalTab = new Wtf.TabPanel({
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.recruitment.add.jobs.tooltip")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.recruitment.add.jobs")
					+ "</div>",
			id : "externalTab",
			height : 800,
			scope : this,
			enableTabScroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsexternaljob),
			items : [ this.edjobTab2 ]
		});
		A.add(this.externalTab)
	}
	A.setActiveTab(this.externalTab);
	A.doLayout();
	this.externalTab.setActiveTab(this.edjobTab2);
	this.externalTab.doLayout();
	if (C != undefined) {
		this.edjobTab2.searchid = C;
		this.edjobTab2.configurAdvancedSearch()
	}
	Wtf.getCmp("as").doLayout()
}
function recruiters() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("recruiters");
	if (B == null) {
		B = new Wtf.recruiters(
				{
					id : "recruiters",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.interviewers.list.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.interviewers.list")
							+ "</div>",
					scope : this,
					height : 800,
					layout : "fit",
					iconCls : getTabIconCls(Wtf.etype.hrmsrecruiter)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function internaljobs() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("recruitmentmanage");
	if (B == null) {
		B = new Wtf.TabPanel(
				{
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.management.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.management")
							+ "</div>",
					id : "recruitmentmanage",
					activeTab : 0,
					border : false,
					closable : true,
					enableTabScroll : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsrecruitment)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function applicantlist() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("applicants");
	if (B == null) {
		this.applicantlistTab = new Wtf.appsList(
				{
					id : "applicants",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.applicants.list.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.recruitment.applicants.list")
							+ "</div>",
					scope : this,
					height : 800,
					layout : "fit",
					iconCls : getTabIconCls(Wtf.etype.hrmsapplicantlist)
				});
		A.add(this.applicantlistTab)
	}
	A.setActiveTab(this.applicantlistTab);
	A.doLayout();
	this.applicantlistTab.doLayout();
	Wtf.getCmp("as").doLayout()
}
function Recruitagencies() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("jobagencies");
	if (B == null) {
		this.edagency = new Wtf.recruitAgencies({
			id : "jobagencies",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.manage.job.agencies"),
			layout : "fit",
			height : 800,
			scope : this,
			iconCls : getTabIconCls(Wtf.etype.hrmsmanageagency)
		});
		this.agencyTab = new Wtf.TabPanel({
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.recruitment.agency.tooltip")
					+ "'>" + WtfGlobal.getLocaleText("hrms.recruitment.agency")
					+ "</div>",
			id : "agencyTab",
			height : 800,
			scope : this,
			iconCls : getTabIconCls(Wtf.etype.hrmsrecruit),
			items : [ this.edagency ]
		});
		A.add(this.agencyTab)
	}
	A.setActiveTab(this.agencyTab);
	A.doLayout();
	this.agencyTab.setActiveTab(this.edagency);
	this.agencyTab.doLayout();
	Wtf.getCmp("as").doLayout()
}
function competencyedit(C) {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("cmpts");
	if (B == null) {
		B = new Wtf.competencyEval(
				{
					id : "cmpts",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal.form.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal.form")
							+ "</div>",
					employee : false,
					read : true,
					modify : false,
					viewappraisal : false,
					autoScroll : true,
					apptype : C,
					iconCls : getTabIconCls(Wtf.etype.hrmsappraisalform)
				});
		A.add(B)
	} else {
		B.apptype = C;
		B.appTypeStore.load()
	}
	A.on("activate", function() {
		if (B.compEvalpanel != null) {
			B.compEvalpanel.doLayout()
		}
		if (Wtf.getCmp("southgoalpanelcmpts") != null) {
			Wtf.getCmp("southgoalpanelcmpts").setHeight(250)
		}
		Wtf.getCmp("southpanelcontcmpts").doLayout()
	}, this);
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function competencymanage() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("manageComp");
	if (B == null) {
		B = new Wtf.manageCompetency({
			id : "manageComp",
			title : WtfGlobal
					.getLocaleText("hrms.performance.competency.master"),
			layout : "fit",
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmscompetencymaster)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function myAppraisalForm() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("employeecompetency");
	if (B == null) {
		B = new Wtf.employeeCompetency({
			id : "employeecompetency",
			title : WtfGlobal.getLocaleText("hrms.common.employee.form"),
			layout : "fit",
			border : false,
			closable : true
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function configCompetency() {
	GoalManagementTabPanel();
	var B = Wtf.getCmp("goalmanagementtabpanel");
	var C = Wtf.getCmp("configComp");
	if (C == null) {
		C = new Wtf.assignCompetency(
				{
					id : "configComp",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.competency.management.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.competency.management")
							+ "</div>",
					layout : "fit",
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsmanagecompensation)
				});
		var A = new Wtf.manageCompetency({
			id : "manageComp",
			title : WtfGlobal
					.getLocaleText("hrms.performance.competency.master"),
			layout : "fit",
			border : false,
			iconCls : getTabIconCls(Wtf.etype.hrmscompetencymaster)
		});
		B.add(A);
		B.add(C)
	}
	B.setActiveTab(C);
	B.doLayout();
	Wtf.getCmp("as").doLayout()
}
function timesheet(B) {
	timesheetmanagement();
	var A = Wtf.getCmp("timesheetmanage");
	var C = Wtf.getCmp("timesheetemp");
	if (C == null) {
		C = new Wtf.timesheetemp({
			id : "timesheetemp",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.timesheet.timesheet.tooltip")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.timesheet.timesheet")
					+ "</div>",
			layout : "fit",
			viewtimesheet : false,
			border : false,
			viewstdate : B,
			iconCls : getTabIconCls(Wtf.etype.hrmstimesheet)
		});
		A.add(C)
	}
	A.setActiveTab(C);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function viewtimesheet(B) {
	timesheetmanagement();
	var A = Wtf.getCmp("timesheetmanage");
	var C = Wtf.getCmp("viewtimesheet");
	if (C == null) {
		C = new Wtf.viewtimesheet(
				{
					id : "viewtimesheet",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.timesheet.view.timesheets.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.timesheet.view.timesheets")
							+ "</div>",
					layout : "fit",
					border : false,
					startdate : B,
					iconCls : getTabIconCls(Wtf.etype.hrmsviewtimesheet)
				});
		A.add(C)
	}
	A.setActiveTab(C);
	A.doLayout();
	C.doLayout();
	Wtf.getCmp("as").doLayout()
}

/**Timesheet History*/
function timesheethistory(B) {
	timesheetmanagement();
	var A = Wtf.getCmp("timesheetmanage");
	var C = Wtf.getCmp("timesheethistory");
	if (C == null) {
		C = new Wtf.timesheethistory(
				{
					id : "timesheethistory",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.TimesheetHistory.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.TimesheetHistory")
							+ "</div>",
					layout : "fit",
					border : false,
					startdate : B,
					iconCls : getTabIconCls(Wtf.etype.hrmsviewtimesheet)
				});
		A.add(C)
	}
	A.setActiveTab(C);
	A.doLayout();
	C.doLayout();
	Wtf.getCmp("as").doLayout()
}
function viewedittimesheet() {
	timesheetmanagement();
	var A = Wtf.getCmp("timesheetmanage");
	var B = Wtf.getCmp("viewedittimesheet");
	if (B == null) {
		B = new Wtf.Panel({
			id : "viewedittimesheet",
			layout : "fit",
			title : WtfGlobal
					.getLocaleText("hrms.common.employee.schedule.payroll"),
			iconCls : getTabIconCls(Wtf.etype.hrmsgoals),
			border : false,
			closable : false,
			items : [ new Wtf.AttendanceInfopanel({
				id : "EmppSchedule",
				layout : "fit",
				title : "EmployeeSchedule",
				tabname : "Employee",
				act : 2,
				clicksToEdit : 1
			}) ]
		});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function viewmypayslip() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("viewmypayslip");
	if (B == null) {
		B = new Wtf.viewmypayslip({
			id : "viewmypayslip",
			layout : "fit",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.payroll.my.payslip.tooltip")
					+ "'>" + WtfGlobal.getLocaleText("hrms.payroll.my.payslip")
					+ "</div>",
			border : false,
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function myPayslipDate() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("myPayslip");
	if (B == null) {
		B = new Wtf.MyPayslip({
			id : "myPayslip",
			layout : "fit",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.Dashboard.MyPayslip.tooltip")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.Dashboard.MyPayslip")
					+ "</div>",
			border : false,
			closable : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function generatePayrollProcess() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("GeneratePayrollProcessGridID");
	if (B == null) {
		B = new Wtf.GeneratePayrollProcessGrid(
				{
					id : "GeneratePayrollProcessGridID",
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.generate.salary.process")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.generate.salary.process")
							+ "</div>",
					border : false,
					closable : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function authorizePayrollProcess() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("authorizePayrollProcessGridID");
	if (B == null) {
		B = new Wtf.authorizePayrollProcessGrid(
				{
					id : "authorizePayrollProcessGridID",
					layout : "fit",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.AuthorizeSalary")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.authorize.salary.process")
							+ "</div>",
					border : false,
					closable : true,
					authorize : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function processPayroll() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("processPayrollGridID");
	if (B == null) {
		B = new Wtf.processPayrollGrid({
			id : "processPayrollGridID",
			layout : "fit",
			title : "<div wtf:qtip='"
					+ WtfGlobal.getLocaleText("hrms.payroll.process.salary")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.payroll.process.salary")
					+ "</div>",
			border : false,
			closable : true,
			authorize : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("as").doLayout()
}
function finalReport() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var C = Wtf.getCmp("finalreport");
	if (C == null) {
		var B = "";
		if (Wtf.cmpPref.annmng) {
			B = Wtf.AppraisalReport
		} else {
			B = Wtf.finalReport
		}
		C = new B(
				{
					id : "finalreport",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal.report.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal.report")
							+ "</div>",
					layout : "fit",
					border : false,
					reviewappraisal : false,
					reviewer : false,
					myfinalReport : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsappraisalreport)
				});
		A.add(C)
	}
	A.setActiveTab(C);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function myfinalReport(C) {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var D = Wtf.getCmp("myfinalreport");
	if (D == null) {
		var B = "";
		if (Wtf.cmpPref.annmng) {
			B = Wtf.AppraisalReport
		} else {
			B = Wtf.finalReport
		}
		D = new B(
				{
					id : "myfinalreport",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.my.appraisal.report.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.my.appraisal.report")
							+ "</div>",
					layout : "fit",
					border : false,
					reviewer : false,
					reviewappraisal : false,
					apptype : C,
					myfinalReport : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsmyappraisalreport)
				});
		A.add(D)
	} else {
		D.apptype = C;
		D.appTypeStore.load()
	}
	A.setActiveTab(D);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function GoalManagementTabPanel() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("goalmanagementtabpanel");
	if (B == null) {
		B = new Wtf.TabPanel(
				{
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.appraisal")
							+ "</div>",
					id : "goalmanagementtabpanel",
					activeTab : 0,
					border : false,
					closable : true,
					enableTabScroll : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsperformance)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function compensationFunction() {
	compensation();
	var A = Wtf.getCmp("compensation");
	var B = Wtf.getCmp("compmanage");
	if (B == null) {
		B = new Wtf.compensationManage({
			id : "compmanage",
			title : WtfGlobal
					.getLocaleText("hrms.Featurelist.compensationmanage"),
			layout : "fit",
			border : false,
			autoScroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsmanagecompensation)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function compensationRecFunction() {
	compensation();
	var A = Wtf.getCmp("compensation");
	var B = Wtf.getCmp("compenreport");
	if (B == null) {
		B = new Wtf.compensationRec({
			id : "compenreport",
			title : WtfGlobal
					.getLocaleText("hrms.featurelist.compensation.report"),
			layout : "fit",
			border : false,
			mycompensation : 0,
			iconCls : getTabIconCls(Wtf.etype.hrmsreport)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function mycompensationRecFunction() {
	compensation();
	var A = Wtf.getCmp("compensation");
	var B = Wtf.getCmp("mycompenreport");
	if (B == null) {
		B = new Wtf.compensationRec({
			id : "mycompenreport",
			title : WtfGlobal
					.getLocaleText("hrms.common.my.compensation.report"),
			layout : "fit",
			border : false,
			mycompensation : 1,
			iconCls : getTabIconCls(Wtf.etype.hrmsreport)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function allemployeegoals() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("allemployeesforgoal");
	if (B == null) {
		B = new Wtf.allemployeegoals(
				{
					id : "allemployeesforgoal",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.assign.goal.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.assign.goal")
							+ "</div>",
					layout : "fit",
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsgoals)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function archivedgoals() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("archivedgoals");
	if (B == null) {
		B = new Wtf.archivedGoals(
				{
					id : "archivedgoals",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.performance.archived.goals.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.archived.goals")
							+ "</div>",
					layout : "fit",
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsarchive)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function GoalAssign() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("perticularemployeesforgoal");
	if (B == null) {
		B = new Wtf.perticularemployeegoals(
				{
					id : "perticularemployeesforgoal",
					title : WtfGlobal
							.getLocaleText("hrms.performance.goal.management"),
					layout : "fit",
					border : false,
					closable : true
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function myGoals() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var B = Wtf.getCmp("mygoals");
	if (B == null) {
		B = new Wtf.myGoals({
			id : "mygoals",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.performance.my.goals.tooltip")
					+ "'>"
					+ WtfGlobal.getLocaleText("hrms.performance.my.goals")
					+ "</div>",
			layout : "fit",
			border : false,
			iconCls : getTabIconCls(Wtf.etype.hrmsmygoals)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function Rejectedapps() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("rejected");
	if (B == null) {
		B = new Wtf.rejectedApps({
			id : "rejected",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.rejected.applications"),
			layout : "fit",
			border : false,
			iconCls : getTabIconCls(Wtf.etype.hrmsrejectapps)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function allapps(B, H, F) {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var C = Wtf.getCmp("allappls");
	var G = Wtf.getCmp("rejected");
	var E = Wtf.getCmp("qualified");
	var D = Wtf.getCmp("applicants");
	if (C == null) {
		C = new Wtf.allApps({
			id : "allappls",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.pending.applications"),
			layout : "fit",
			border : false,
			isInternal : B,
			scope : this,
			searchid : H,
			iconCls : getTabIconCls(Wtf.etype.hrmsaddapps)
		});
		G = new Wtf.rejectedApps({
			id : "rejected",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.rejected.applications"),
			layout : "fit",
			border : false,
			scope : this,
			searchid : H,
			iconCls : getTabIconCls(Wtf.etype.hrmsrejectapps)
		});
		E = new Wtf.qualifiedApps({
			id : "qualified",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.selected.applications"),
			layout : "fit",
			border : false,
			searchid : H,
			iconCls : getTabIconCls(Wtf.etype.hrmsviewapps)
		});
		D = new Wtf.appsList(
				{
					id : "applicants",
					title : WtfGlobal
							.getLocaleText("hrms.recruitment.external.applicants.list"),
					scope : this,
					border : false,
					layout : "fit",
					searchid : H,
					iconCls : getTabIconCls(Wtf.etype.hrmsapplicantlist)
				});
		A.add(C);
		if (!WtfGlobal.EnableDisable(Wtf.UPerm.rejectedapps,
				Wtf.Perm.rejectedapps.view)) {
			A.add(G)
		}
		if (!WtfGlobal.EnableDisable(Wtf.UPerm.qualifiedapps,
				Wtf.Perm.qualifiedapps.view)) {
			A.add(E);
			A.add(D)
		}
	}
	A.setActiveTab(C);
	A.doLayout();
	if (H != undefined) {
		if (F == 3) {
			C.searchid = H;
			C.configurAdvancedSearch()
		} else {
			if (F == 4) {
				G.searchid = H;
				A.setActiveTab(G);
				G.configurAdvancedSearch()
			} else {
				if (F == 5) {
					E.searchid = H;
					A.setActiveTab(E);
					E.configurAdvancedSearch()
				} else {
					if (F == 6) {
						D.searchid = H;
						A.setActiveTab(D);
						D.configurAdvancedSearch()
					}
				}
			}
		}
	}
	Wtf.getCmp("as").doLayout()
}
function prerequisites() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("prerequisites");
	if (B == null) {
		B = new Wtf.jobProfile({
			id : "prerequisites",
			title : WtfGlobal
					.getLocaleText("hrms.common.DesignationPrerequisites"),
			layout : "fit",
			border : false,
			autoscroll : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsdesignation)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function testing(C) {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("mastertabpanel");
	if (B == null) {
		B = new Wtf.MasterTabPanel({
			id : "mastertabpanel",
			title : WtfGlobal.getLocaleText("hrms.performance.management"),
			layout : "fit",
			border : false,
			closable : true
		});
		A.add(B)
	}
	A.setActiveTab(B);
	Wtf.getCmp("goalmanagementtabpanel").setActiveTab(Wtf.getCmp(C));
	Wtf.getCmp("goalmanagementtabpanel").doLayout();
	A.doLayout()
}
function qualified() {
	internaljobs();
	var A = Wtf.getCmp("recruitmentmanage");
	var B = Wtf.getCmp("qualified");
	if (B == null) {
		B = new Wtf.qualifiedApps({
			id : "qualified",
			title : WtfGlobal
					.getLocaleText("hrms.recruitment.qualified.applications"),
			layout : "fit",
			border : false,
			iconCls : getTabIconCls(Wtf.etype.hrmsviewapps)
		});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function PayrollManagement(D, C) {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("payrollmanagementtab");
	if (A == null) {
		A = new Wtf.TempEmpMaster({
			title : WtfGlobal.getLocaleText("hrms.payroll.management"),
			iconCls : getTabIconCls(Wtf.etype.payroll),
			companyid : C,
			id : "payrollmanagementtab",
			companyname : D,
			closable : true,
			border : false,
			layout : "fit",
			scope : this
		});
		B.add(A)
	}
	B.setActiveTab(Wtf.getCmp("payrollmanagementtab"));
	mainPanel.doLayout()
}
function TemplateManagement(D, C) {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("templatemanagementtab");
	if (A == null) {
		A = new Wtf.PayrollGroupTemplate({
			title : WtfGlobal.getLocaleText("hrms.payroll.templatemanagement"),
			iconCls : getTabIconCls(Wtf.etype.acc),
			companyid : C,
			id : "templatemanagementtab",
			companyname : D,
			closable : true,
			border : false,
			layout : "fit",
			scope : this
		});
		B.add(A)
	}
	B.setActiveTab(Wtf.getCmp("templatemanagementtab"));
	mainPanel.doLayout()
}
function masterConfig() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("PayCompoSetting");
	if (A == null) {
		A = new Wtf.PayCompoSetting({
			layout : "fit",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.payroll.components.tooltip")
					+ "'>" + WtfGlobal.getLocaleText("hrms.payroll.components")
					+ "</div>",
			closable : true,
			border : false,
			iconCls : getTabIconCls(Wtf.etype.master),
			id : "PayCompoSetting"
		});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function datePayrollComponentList() {
	var B = Wtf.getCmp("as");
	var A = Wtf.getCmp("datePaycomponent");
	if (A == null) {
		A = new Wtf.datePayCompoSetting({
			layout : "fit",
			title : "<div wtf:qtip='"
					+ WtfGlobal
							.getLocaleText("hrms.payroll.components.tooltip")
					+ "'>" + WtfGlobal.getLocaleText("hrms.payroll.components")
					+ "</div>",
			closable : true,
			border : false,
			iconCls : getTabIconCls(Wtf.etype.master),
			id : "datePaycomponent"
		});
		B.add(A)
	}
	B.setActiveTab(A);
	B.doLayout()
}
function SalaryReport() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("genSalaryReport");
	if (B == null) {
		B = new Wtf.GenSalaryReport(
				{
					id : "genSalaryReport",
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.salary.report.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.salary.report")
							+ "</div>",
					layout : "fit",
					border : false,
					closable : true,
					iconCls : getTabIconCls(Wtf.etype.hrmssalaryreport)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	mainPanel.doLayout()
}
function ApproveSalary() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("ApproveSalaryList");
	if (B == null) {
		B = new Wtf.ApproveSalaryList(
				{
					id : "ApproveSalaryList",
					title : "<div wtf:qtip="
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.AuthorizeSalary.tooltip")
							+ ">"
							+ WtfGlobal
									.getLocaleText("hrms.Dashboard.AuthorizeSalary")
							+ "</div>",
					layout : "fit",
					border : false,
					closable : true,
					iconCls : getTabIconCls(Wtf.etype.hrmssalaryreport)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	mainPanel.doLayout()
}
function callSystemAdmin() {
	var A = Wtf.getCmp("systemadmin");
	if (A == null) {
		A = new Wtf.common.SystemAdmin({
			title : WtfGlobal
					.getLocaleText("hrms.common.CompanyAdministration"),
			layout : "fit",
			id : "systemadmin",
			iconCls : "systemadmin",
			border : false,
			closable : true
		});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	Wtf.getCmp("as").doLayout()
}
function callCreateCompany() {
	var A = Wtf.getCmp("createcompany");
	if (!A) {
		new Wtf.common.CreateCompany({
			title : WtfGlobal.getLocaleText("hrms.common.CreateCompany"),
			id : "createcompany",
			closable : true,
			modal : true,
			iconCls : "systemadmin",
			width : 410,
			height : 370,
			resizable : false,
			layout : "fit",
			buttonAlign : "right"
		}).show()
	}
}
function ess() {
	var A = Wtf.getCmp("as");
	var B = Wtf.getCmp("empmanagement");
	if (B == null) {
		B = new Wtf.TabPanel(
				{
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.user.administration.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.user.administration")
							+ "</div>",
					id : "empmanagement",
					activeTab : 0,
					border : false,
					closable : true,
					enableTabScroll : true,
					iconCls : getTabIconCls(Wtf.etype.hrmsrecruitment)
				});
		A.add(B)
	}
	A.setActiveTab(B);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function employeemnt(D) {
	ess();
	var A = Wtf.getCmp("empmanagement");
	var B = Wtf.getCmp("empmntgrid");
	if (B == null) {
		B = new Wtf.empmnt({
			id : "empmntgrid",
			title : WtfGlobal.getLocaleText("hrms.administration.user.list"),
			layout : "fit",
			border : false,
			searchid : D,
			iconCls : getTabIconCls(Wtf.etype.hrmsgoals)
		});
		var C = new Wtf.exemp(
				{
					id : "exempgrid",
					title : WtfGlobal
							.getLocaleText("hrms.administration.ex.employees"),
					layout : "fit",
					border : false,
					iconCls : getTabIconCls(Wtf.etype.hrmsgoals)
				});
		A.add(B, C)
	}
	A.setActiveTab(B);
	A.doLayout();
	if (D != undefined) {
		B.searchid = D;
		B.configurAdvancedSearch()
	}
	Wtf.getCmp("as").doLayout()
}
function myProfile() {
	ess();
	var A = Wtf.getCmp("empmanagement");
	var D = Wtf.getCmp("empmntprofile");
	if (D == null) {
		var B = true;
		var C = Wtf.cmpPref.blockemployees;
		if (userroleid == 1) {
			B = false;
			C = false
		}
		D = new Wtf.myProfileWindow(
				{
					title : "<div wtf:qtip='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.my.profile.tooltip")
							+ "'>"
							+ WtfGlobal
									.getLocaleText("hrms.administration.my.profile")
							+ "</div>",
					id : "empmntprofile",
					editperm : B,
					blockemployeestoedit : C,
					manager : false,
					lid : loginid,
					layout : "fit",
					iconCls : "pwnd myProfileIcon"
				});
		A.add(D)
	}
	A.setActiveTab(D);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function reviewAppraisal() {
	GoalManagementTabPanel();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var C = Wtf.getCmp("reviewAppraisal");
	if (C == null) {
		var B = "";
		if (Wtf.cmpPref.annmng) {
			B = Wtf.AppraisalReport
		} else {
			B = Wtf.finalReport
		}
		C = new B({
			id : "reviewAppraisal",
			autoScroll : true,
			title : WtfGlobal
					.getLocaleText("hrms.performance.review.appraisal"),
			layout : "fit",
			border : false,
			reviewer : true,
			reviewappraisal : true,
			iconCls : getTabIconCls(Wtf.etype.hrmsreview)
		});
		A.add(C)
	}
	A.setActiveTab(C);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function interviewerPosition(accept) {
	Wtf.Ajax.requestEx({
		url : Wtf.req.base + "hrms.jsp",
		params : {
			flag : 176,
			acpt : accept
		}
	}, this, function(response) {
		var resp = eval("(" + response + ")");
		if (resp.success == true) {
			calMsgBoxShow([ WtfGlobal.getLocaleText("hrms.common.success"),
					resp.msg ], 3)
		} else {
			calMsgBoxShow([ WtfGlobal.getLocaleText("hrms.common.warning"),
					resp.msg ], 2, false, 600)
		}
		var a = Wtf.getCmp("DSBMyWorkspaces");
		if (a) {
			a.doSearch(a.url, "")
		}
		var b = Wtf.getCmp("DSBAlerts");
		if (b) {
			b.doSearch(b.url, "")
		}
	}, function() {
	})
}
function addEmailTemplate(B) {
	var C = Wtf.getCmp("as");
	var A = Wtf.getCmp("emailTemplatedashboard");
	if (A == null) {
		A = new Wtf.emailTemplate({
			mainTab : this.mainTab,
			id : "emailTemplatedashboard"
		});
		C.add(A)
	} else {
		C.setActiveTab(A);
		Wtf.highLightGlobal(B, A.EditorGrid, A.EditorStore, "targetModuleid")
	}
	C.setActiveTab(A);
	C.doLayout()
}
function addNewEmailTemplate(B) {
	var D = Wtf.getCmp("as");
	var A = Wtf.getCmp("template_wiz_win_addnew_dash");
	if (A == null) {
		var C = WtfGlobal.getLocaleText("hrms.administration.new.template");
		var E = Wtf.util.Format.ellipsis(C, 18);
		A = new Wtf.newEmailTemplate(
				{
					title : '<div wtf:qtip="'
							+ C
							+ "\"wtf:qtitle='"
							+ WtfGlobal
									.getLocaleText("hrms.administration.email.template.tooltip")
							+ "'>" + E + "</div>",
					tipTitle : C,
					id : "template_wiz_win_addnew_dash",
					closable : true,
					addNewDashboardCall : true
				});
		D.add(A)
	} else {
		D.setActiveTab(A);
		Wtf.highLightGlobal(B, A.EditorGrid, A.EditorStore, "targetModuleid")
	}
	D.setActiveTab(A);
	D.doLayout()
}
function viewEmpGoals(B, C) {
	allemployeegoals();
	var A = Wtf.getCmp("goalmanagementtabpanel");
	var D = Wtf.getCmp(B + "perticularemployeesforgoal");
	if (D == null) {
		D = new Wtf.perticularemployeegoals({
			id : B + "perticularemployeesforgoal",
			title : WtfGlobal.getLocaleText("hrms.performance.assign.goals.to")
					+ " " + C,
			iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
			layout : "fit",
			border : false,
			closable : true,
			assign : true,
			empid : B
		});
		A.add(D)
	}
	A.setActiveTab(D);
	A.doLayout();
	Wtf.getCmp("as").doLayout()
}
function timer() {
	this.day = new Date().format("D");
	var myDate = new Date();
	var myDate1 = new Date();
	switch (this.day) {
	case "Sun":
		myDate.setDate(myDate.getDate());
		myDate1.setDate(myDate1.getDate() + 6);
		break;
	case "Mon":
		myDate.setDate(myDate.getDate() - 1);
		myDate1.setDate(myDate1.getDate() + 5);
		break;
	case "Tue":
		myDate.setDate(myDate.getDate() - 2);
		myDate1.setDate(myDate1.getDate() + 4);
		break;
	case "Wed":
		myDate.setDate(myDate.getDate() - 3);
		myDate1.setDate(myDate1.getDate() + 3);
		break;
	case "Thu":
		myDate.setDate(myDate.getDate() - 4);
		myDate1.setDate(myDate1.getDate() + 2);
		break;
	case "Fri":
		myDate.setDate(myDate.getDate() - 5);
		myDate1.setDate(myDate1.getDate() + 1);
		break;
	case "Sat":
		myDate.setDate(myDate.getDate() - 6);
		myDate1.setDate(myDate1.getDate());
		break
	}
	this.dateArray = new Array();
	this.dateArray.push(myDate.format("Y-m-d"));
	var temp = myDate.clone();
	for (i = 0; i < 6; i++) {
		temp.setDate(temp.getDate() + 1);
		this.dateArray.push(temp.format("Y-m-d"))
	}
	calMsgBoxShow(202, 4, true);
	Wtf.Ajax.requestEx({
		url : "Timesheet/timerStatus.ts"
	}, this, function(response) {
		checkForJobTypeStoreLoad();
		var res = eval("(" + response + ")");
		this.StartTimer = new Wtf.StartTimer({
			layout : "fit",
			iconCls : getButtonIconCls(Wtf.btype.winicon),
			title : WtfGlobal.getLocaleText("hrms.timesheet.job.timer"),
			modal : true,
			width : 400,
			height : 220,
			isFreeText : Wtf.cmpPref.timesheetjob,
			startdate : myDate.format("Y-m-d"),
			enddate : myDate1.format("Y-m-d"),
			colHeader : this.dateArray,
			res : res
		}).show();
		WtfGlobal.closeProgressbar()
	}, function(response) {
		calMsgBoxShow(82, 1)
	})
}
Wtf.MasterConfigurator = function(A) {
	Wtf.apply(this, A);
	Wtf.MasterConfigurator.superclass.constructor.call(this)
};
Wtf
		.extend(
				Wtf.MasterConfigurator,
				Wtf.Panel,
				{
					initComponent : function() {
						this.weekcount = 0;
						Wtf.MasterConfigurator.superclass.initComponent
								.call(this);
						calMsgBoxShow(202, 4, true);
						this.getMasterGrid();
						this.getSystemAdmin();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.newP = new Wtf.Panel({
								layout : "fit",
								region : "center"
							}), this.masterGrid, this.systemPanel ]
						});
								this.msgPanel = new Wtf.Panel(
										{
											html : '<div id="empty" class="emptyGridText">'
													+ WtfGlobal
															.getLocaleText("hrms.masterconf.SelectMastertype")
													+ "</div>",
											frame : false
										}), this.newP.add(this.msgPanel);
						this.newP.add(this.getMasterDataGrid());
						this.mainPanel.doLayout();
						this.masterSm
								.on(
										"selectionchange",
										function() {
											if (this.newP
													.getComponent(this.msgPanel
															.getId()) != null) {
												this.newP.remove(this.msgPanel);
												if (this.masterSm.getSelected()
														.get("name") != "Recruitment"
														&& this.masterSm
																.getSelected()
																.get("name") != "Custom Fields") {
													this.newP
															.remove(this.masterDataGrid);
													this.newP
															.add(this
																	.getMasterDataGrid());
													this.mainPanel.doLayout()
												}
											}
											if (this.masterSm.getSelected()) {
												if (this.masterDataGrid != null) {
													this.newP
															.remove(this.masterDataGrid)
												}
												if (this.configRecruitment != null) {
													this.newP
															.remove(this.configRecruitment)
												}
												if (this.CostCenterGrid != null) {
													this.newP
															.remove(this.CostCenterGrid)
												}
												if (this.customFieldCompo != null) {
													this.newP
															.remove(this.customFieldCompo)
												}
												if (this.masterSm.getSelected()
														.get("id") == 17) {
													this.newP
															.add(this
																	.getCustomFieldCompo());
													this.mainPanel.doLayout()
												} else {
													if (this.masterSm
															.getSelected().get(
																	"id") == 19) {
														this.newP
																.add(this
																		.getRecruitmentCompo());
														this.mainPanel
																.doLayout()
													} else {
														if (this.masterSm
																.getSelected()
																.get("id") == 20) {
															this.newP
																	.add(this
																			.getCostCenterGrid());
															this.CostCenterStore
																	.load();
															this.mainPanel
																	.doLayout()
														} else {
															this.newP
																	.add(this
																			.getMasterDataGrid());
															this.mainPanel
																	.doLayout();
															calMsgBoxShow(202,
																	4, true);
															this.masterDataAdd
																	.enable();
															this.masterEdit
																	.enable();
															this.masterDataStore
																	.load({
																		params : {
																			configid : this.masterGrid
																					.getSelectionModel()
																					.getSelected()
																					.get(
																							"id")
																		}
																	})
														}
													}
												}
												if (!Wtf.StoreMgr
														.containsKey("dep")) {
													Wtf.depStore.load();
													Wtf.StoreMgr.add("dep",
															Wtf.depStore)
												}
												if (this.masterSm.getSelected()
														.get("id") == 24
														|| this.masterSm
																.getSelected()
																.get("id") == 22) {
													this.masterDataAdd
															.disable();
													this.masterEdit.disable();
													this.masterDataDelete
															.disable()
												}
											} else {
												this.masterDataAdd.disable();
												this.masterEdit.disable()
											}
										}, this);
						this.createLeavePanel();
						this.add(this.mainPanel)
					},
					getMasterGrid : function() {
						this.masterRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "parentid"
						}, {
							name : "mappingid"
						} ]);
						this.masterReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.masterRec);
						this.masterStore = new Wtf.data.Store({
							url : "Common/Master/getMasterField.common",
							reader : this.masterReader,
							baseParams : {
								flag : 201
							}
						});
						this.masterStore.load();
						this.masterColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.masterconf.MasterType"),
											sortable : true,
											dataIndex : "name"
										} ]);
						var A = new Array();
						this.masterAdd = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.AddMasterType"),
									handler : function() {
										this.AddMaster("Add")
									},
									scope : this
								});
						this.masterEdit = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.EditMasterType"),
									handler : function() {
										this.AddMaster("Edit")
									},
									scope : this,
									disabled : true
								});
						this.masterGrid = new Wtf.grid.GridPanel(
								{
									sm : this.masterSm = new Wtf.grid.RowSelectionModel(),
									region : "west",
									width : 300,
									store : this.masterStore,
									sortable : true,
									cm : this.masterColumn,
									viewConfig : {
										forceFit : true
									}
								})
					},
					getMasterDataGrid : function() {
						this.masterDataRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "weightage"
						}, {
							name : "parentid"
						}, {
							name : "configid"
						}, {
							name : "mappingid"
						} ]);
						this.masterDataReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.masterDataRec);
						this.masterDataStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							reader : this.masterDataReader,
							baseParams : {
								flag : 203
							}
						});
						this.masterDataStore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.masterDataColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.masterconf.SubFields"),
											sortable : true,
											dataIndex : "name"
										} ]);
						this.masterDataAdd = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.AddSubFields"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.masterconf.AddSubFields.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									handler : function() {
										this.AddMasterData("Add")
									},
									disabled : true,
									scope : this
								});
						this.masterDataEdit = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.EditSubFields"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.masterconf.EditSubFields.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									handler : function() {
										this.AddMasterData("Edit")
									},
									scope : this,
									disabled : true
								});
						this.masterDataDelete = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.DeleteSubFields"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.masterconf.DeleteSubFields.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									handler : function() {
										this.DeleteMasterData()
									},
									scope : this,
									disabled : true
								});
						this.companySave = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.masterconf.DeleteSubFields"),
									handler : function() {
										this.DeleteMasterData()
									},
									scope : this,
									disabled : true
								});
						var A = new Array();
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.masterconf,
								Wtf.Perm.masterconf.manage)) {
							A.push(this.masterDataAdd);
							A.push("-");
							A.push(this.masterDataEdit);
							A.push("-");
							A.push(this.masterDataDelete)
						}
						this.masterDataGrid = new Wtf.grid.GridPanel(
								{
									sm : this.masterDataSm = new Wtf.grid.RowSelectionModel(),
									store : this.masterDataStore,
									cm : this.masterDataColumn,
									viewConfig : {
										forceFit : true
									},
									bbar : A,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.masterconf.SelectMastertype"))
								});
						this.masterDataSm.on("selectionchange", function() {
							if (this.masterDataSm.getSelected()) {
								this.masterDataEdit.enable();
								this.masterDataDelete.enable()
							} else {
								this.masterDataEdit.disable();
								this.masterDataDelete.disable()
							}
						}, this);
						return this.masterDataGrid
					},
					getCostCenterGrid : function() {
						this.CostCenterRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "code"
						}, {
							name : "creationDate"
						} ]);
						this.CostCenterReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.CostCenterRec);
						this.CostCenterStore = new Wtf.data.Store({
							url : "Common/getCostCenter.common",
							reader : this.CostCenterReader
						});
						this.CostCenterStore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.CostCenterColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.cost.center.code"),
											sortable : true,
											dataIndex : "code"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.cost.center.name"),
											sortable : true,
											dataIndex : "name"
										} ]);
						this.CostCenterAdd = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.MasterData.add.cost.center"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.MasterData.list.cost.centers.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									handler : function() {
										this.AddCostCenter("Add")
									},
									scope : this
								});
						this.CostCenterEdit = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.MasterData.edit.cost.center"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.MasterData.cost.center.edit"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									handler : function() {
										this.AddCostCenter("Edit")
									},
									scope : this,
									disabled : true
								});
						this.CostCenterDelete = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.MasterData.delete.cost.center"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.MasterData.remove.cost.center"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									handler : function() {
										this.DeleteCostCenter()
									},
									scope : this,
									disabled : true
								});
						var A = new Array();
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.masterconf,
								Wtf.Perm.masterconf.manage)) {
							A.push(this.CostCenterAdd);
							A.push("-");
							A.push(this.CostCenterEdit);
							A.push("-");
							A.push(this.CostCenterDelete)
						}
						this.CostCenterGrid = new Wtf.grid.GridPanel(
								{
									sm : this.CostCenterSm = new Wtf.grid.RowSelectionModel(),
									store : this.CostCenterStore,
									cm : this.CostCenterColumn,
									viewConfig : {
										forceFit : true
									},
									bbar : A,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.MasterData.select.cost.center.subfields"))
								});
						this.CostCenterSm.on("selectionchange", function() {
							if (this.CostCenterSm.getSelected()) {
								this.CostCenterEdit.enable();
								this.CostCenterDelete.enable()
							} else {
								this.CostCenterEdit.disable();
								this.CostCenterDelete.disable()
							}
						}, this);
						return this.CostCenterGrid
					},
					AddMaster : function(A) {
						new Wtf.AddEditMaster({
							title : WtfGlobal.getLocaleText({
								key : "hrms.common.actionMasterField",
								params : [ A ]
							}),
							layout : "fit",
							modal : true,
							width : 400,
							height : 230,
							action : A,
							rec : this.masterSm.getSelected(),
							store : this.masterStore
						}).show()
					},
					AddMasterData : function(A) {
						var C = this.masterGrid.getSelectionModel()
								.getSelected().get("id");
						var B = this.masterGrid.getSelectionModel()
								.getSelected().get("parentid");
						this.addeditmaster = new Wtf.AddEditMasterData({
							layout : "fit",
							iconCls : getButtonIconCls(Wtf.btype.winicon),
							title : WtfGlobal.getLocaleText({
								key : "hrms.masterconf.actionSubField",
								params : [ A ]
							}),
							modal : true,
							configid : C,
							parentid : B,
							width : 400,
							height : 230,
							rec : this.masterDataSm.getSelected(),
							action : A,
							store : this.masterDataStore
						});
						this.addeditmaster.on("show", function() {
							this.addeditmaster.name.focus(true, 100)
						}, this);
						this.addeditmaster.show()
					},
					AddCostCenter : function(A) {
						if (A != "Add") {
							var C = this.CostCenterGrid.getSelectionModel()
									.getSelected().get("id");
							var B = this.CostCenterGrid.getSelectionModel()
									.getSelected().get("parentid")
						}
						this.addcostcenter = new Wtf.AddCostCenter({
							layout : "fit",
							iconCls : getButtonIconCls(Wtf.btype.winicon),
							title : WtfGlobal.getLocaleText({
								key : "hrms.common.cost.center.params",
								params : [ A ]
							}),
							modal : true,
							configid : C,
							parentid : B,
							width : 400,
							height : 260,
							rec : this.CostCenterSm.getSelected(),
							action : A,
							store : this.CostCenterStore
						});
						this.addcostcenter.show()
					},
					DeleteMasterData : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										deleteMsgBox("field"),
										function(btn) {
											if (btn != "yes") {
												return
											}
											var configid = this.masterGrid
													.getSelectionModel()
													.getSelected().get("id");
											calMsgBoxShow(201, 4, true);
											Wtf.Ajax
													.requestEx(
															{
																url : "Common/Master/deletemasterdata.common",
																params : {
																	flag : 48,
																	ids : this.masterDataSm
																			.getSelected()
																			.get(
																					"id")
																}
															},
															this,
															function(response) {
																var res = eval("("
																		+ response
																		+ ")");
																if (res.success == false) {
																	if (res.masterid == "1") {
																		calMsgBoxShow(
																				210,
																				2)
																	} else {
																		if (res.masterid == "25") {
																			calMsgBoxShow(
																					231,
																					2)
																		}
																	}
																} else {
																	this.masterDataStore
																			.load({
																				params : {
																					configid : configid
																				}
																			});
																	msgFlag = 0;
																	this
																			.loadMasterStores(configid);
																	msgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					res.data ],
																			1)
																}
															},
															function() {
																var configid = this.masterGrid
																		.getSelectionModel()
																		.getSelected()
																		.get(
																				"id");
																var flag = 86;
																switch (configid) {
																case 1:
																	flag = 210;
																	break;
																case 7:
																	flag = 211;
																	break;
																case 13:
																	flag = 193;
																	break;
																case 15:
																	flag = 192;
																	break;
																case 21:
																	flag = 232;
																	break
																}
																calMsgBoxShow(
																		flag, 2)
															})
										}, this)
					},
					DeleteCostCenter : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.common.delete.selected.field")
												+ "<br><br><b>"
												+ WtfGlobal
														.getLocaleText("hrms.Messages.DateCannotbeRetrive"),
										function(btn) {
											if (btn != "yes") {
												return
											}
											calMsgBoxShow(201, 4, true);
											Wtf.Ajax
													.requestEx(
															{
																url : "Common/Master/deletecostcenter.common",
																params : {
																	flag : 48,
																	ids : this.CostCenterSm
																			.getSelected()
																			.get(
																					"id")
																}
															},
															this,
															function(response) {
																var res = eval("("
																		+ response
																		+ ")");
																if (res.success == false) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					WtfGlobal
																							.getLocaleText("hrms.common.cost.center.cannot.deleted") ],
																			2)
																} else {
																	this.CostCenterStore
																			.load();
																	msgBoxShow(
																			[
																					"Success",
																					res.data ],
																			1)
																}
															},
															function() {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.warning"),
																				WtfGlobal
																						.getLocaleText("hrms.common.cost.center.cannot.deleted") ],
																		2)
															})
										}, this)
					},
					loadMasterStores : function(A) {
						switch (A) {
						case 1:
							Wtf.desigStore.removeListener("load");
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore);
							break;
						case 2:
							Wtf.contextstore.removeListener("load");
							Wtf.contextstore.load();
							Wtf.StoreMgr.add("context", Wtf.contextstore);
							break;
						case 3:
							Wtf.priostore.removeListener("load");
							Wtf.priostore.load();
							Wtf.StoreMgr.add("prio", Wtf.priostore);
							break;
						case 4:
							Wtf.wthstore.removeListener("load");
							Wtf.wthstore.load();
							Wtf.StoreMgr.add("wth", Wtf.wthstore);
							break;
						case 5:
							Wtf.completedStore.removeListener("load");
							Wtf.completedStore.load();
							Wtf.StoreMgr.add("comp", Wtf.completedStore);
							break;
						case 7:
							Wtf.depStore.removeListener("load");
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore);
							break;
						case 10:
							Wtf.rankStore.removeListener("load");
							Wtf.rankStore.load();
							Wtf.StoreMgr.add("rank", Wtf.rankStore);
							break;
						case 12:
							Wtf.quaStore.removeListener("load");
							Wtf.quaStore.load();
							Wtf.StoreMgr.add("qua", Wtf.quaStore);
							break;
						case 14:
							Wtf.catgStore.removeListener("load");
							Wtf.catgStore.load();
							Wtf.StoreMgr.add("catg", Wtf.catgStore);
							break;
						case 15:
							Wtf.terStore.removeListener("load");
							Wtf.terStore.load();
							Wtf.StoreMgr.add("ter", Wtf.terStore);
							break
						}
					},
					getSystemAdmin : function() {
						var A = [];
						this.companySave = new Wtf.Toolbar.Button({
							text : WtfGlobal.getLocaleText("hrms.common.Save"),
							iconCls : getButtonIconCls(Wtf.btype.submitbutton),
							handler : function() {
								this.saveEmpIDformat()
							},
							scope : this
						});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.masterconf,
								Wtf.Perm.masterconf.manage)) {
							A.push("->", this.companySave)
						}
						this.check1 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Updates.SelfAppraisal"),
									name : "selfappraisal"
								});
						this.check2 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.competencies"),
									name : "competencies"
								});
						this.check3 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.performance.goals"),
							name : "goals"
						});
						this.check4 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.AnonymousAppraiser"),
									name : "annmng"
								});
						this.check5 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.overall.approve.appraisal"),
									name : "approveappr"
								});
						this.check6 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.promotion.recommendation"),
									name : "promotionrec"
								});
						this.check7 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.weightage"),
									name : "weightage"
								});
						this.check8 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.PartialSubmission"),
									name : "partial"
								});
						this.check9 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.Dashboard.ReviewAppraisal"),
									name : "reviewappraisal"
								});
						this.check10 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.FullUpdates"),
									name : "fullupdates"
								});
						this.check11 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.ModAverage"),
									name : "modaverage"
								});
						this.check12 = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.OverallComments"),
									name : "overallcomments"
								});
						this.infoPan = new Wtf.Panel(
								{
									border : false,
									bodyStyle : "padding-bottom:3px;",
									html : WtfGlobal
											.getLocaleText("hrms.masterconf.DefaultviewJobsandApplications")
											+ " :"
								});
						this.radio2 = new Wtf.form.Radio({
							boxLabel : WtfGlobal
									.getLocaleText("hrms.common.Internal"),
							hideLabel : true,
							name : "defaultapps",
							inputValue : "Internal"
						});
						this.radio3 = new Wtf.form.Radio({
							boxLabel : WtfGlobal
									.getLocaleText("hrms.common.External"),
							hideLabel : true,
							name : "defaultapps",
							inputValue : "External"
						});
						this.payInfoPan = new Wtf.Panel(
								{
									border : false,
									bodyStyle : "padding-bottom:3px;",
									html : WtfGlobal
											.getLocaleText("hrms.masterconf.payroll.based.on")
											+ " :"
								});
						this.payRadio2 = new Wtf.form.Radio({
							boxLabel : WtfGlobal
									.getLocaleText("hrms.common.Template"),
							hideLabel : true,
							name : "payrollbase",
							inputValue : "Template"
						});
						this.payRadio3 = new Wtf.form.Radio({
							boxLabel : WtfGlobal
									.getLocaleText("hrms.payroll.Date"),
							hideLabel : true,
							name : "payrollbase",
							inputValue : "Date"
						});
						this.day0 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.sunday"),
							name : "sunday",
							id : "master_configuration_working_days_0"
						});
						this.day1 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.monday"),
							name : "monday",
							id : "master_configuration_working_days_1"
						});
						this.day2 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.tuesday"),
							name : "tuesday",
							id : "master_configuration_working_days_2"
						});
						this.day3 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.wednesday"),
							name : "wednesday",
							id : "master_configuration_working_days_3"
						});
						this.day4 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.thursday"),
							name : "thursday",
							id : "master_configuration_working_days_4"
						});
						this.day5 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.friday"),
							name : "friday",
							id : "master_configuration_working_days_5"
						});
						this.day6 = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.timesheet.saturday"),
							name : "saturday",
							id : "master_configuration_working_days_6"
						});
						this.dayPanel = new Wtf.Panel(
								{
									html : '<font color="#15428B">'
											+ WtfGlobal
													.getLocaleText("hrms.common.WeeklyOff")
											+ "</font>",
									border : false
								});
						this.mon = [
								[ "0", WtfGlobal.getLocaleText("hrms.January") ],
								[ "1", WtfGlobal.getLocaleText("hrms.February") ],
								[ "2", WtfGlobal.getLocaleText("hrms.March") ],
								[ "3", WtfGlobal.getLocaleText("hrms.April") ],
								[ "4", WtfGlobal.getLocaleText("hrms.May") ],
								[ "5", WtfGlobal.getLocaleText("hrms.June") ],
								[ "6", WtfGlobal.getLocaleText("hrms.July") ],
								[ "7", WtfGlobal.getLocaleText("hrms.August") ],
								[
										"8",
										WtfGlobal
												.getLocaleText("hrms.September") ],
								[ "9", WtfGlobal.getLocaleText("hrms.October") ],
								[
										"10",
										WtfGlobal
												.getLocaleText("hrms.November") ],
								[
										"11",
										WtfGlobal
												.getLocaleText("hrms.December") ] ];
						this.monthStore = new Wtf.data.SimpleStore({
							id : "monStore",
							fields : [ "id", "name" ],
							data : this.mon
						});
						this.systemPanel = new Wtf.form.FormPanel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.masterconf.CompanyPreferences"),
									region : "east",
									width : 400,
									autoScroll : true,
									layout : "form",
									url : "Common/Master/setEmpIdFormat.common",
									baseParams : {
										mode : 25
									},
									border : true,
									labelWidth : 125,
									cls : "formstyleClass3",
									defaults : {
										labelWidth : 150
									},
									bodyStyle : "padding-top:25px;padding-left:15px",
									items : [
											{
												xtype : "textfield",
												name : "employeeidformat",
												id : "employeeidformat",
												width : 200,
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.masterconf.EmployeeIDFormat"),
												regex : /^[a-zA-Z]{1,}-{1}[0]{1,}$|^[a-zA-Z]{1,}-{1}[0]{1,}-{1}[a-zA-Z]{1,}$|^[0]{0,}$/
											},
											{
												border : false,
												cls : "compLogoinfo11",
												height : 60,
												html : "eg.  0000 <br>eg.  ABC-0000<br>eg.  ABC-0000-XYZ"
											},
											{
												xtype : "textfield",
												name : "jobidformat",
												id : "jobidformat",
												width : 200,
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.masterconf.JobIDFormat"),
												regex : /^[a-zA-Z]{1,}-{1}[0]{1,}$|^[a-zA-Z]{1,}-{1}[0]{1,}-{1}[a-zA-Z]{1,}$|^[0]{0,}$/
											},
											{
												border : false,
												cls : "compLogoinfo11",
												height : 60,
												html : "eg.  0000 <br>eg.  JB-0000<br>eg.  JB-0000-XYZ"
											},
											{
												xtype : "textfield",
												name : "emailNotification",
												id : "emailNotification",
												width : 200,
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.masterconf.EmailNotificationforRecruitment"),
												regex : /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
											},
											{
												border : false,
												cls : "compLogoinfo11",
												height : 20,
												html : " "
											},
											this.empCmb = new Wtf.form.ComboBox(
													{
														triggerAction : "all",
														id : "finmonth",
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.masterconf.FinancialMonth")
																+ ' <font color="SeaGreen">* </font>',
														hiddenName : "financialmonth",
														mode : "local",
														valueField : "id",
														displayField : "name",
														store : this.monthStore,
														width : 150,
														typeAhead : true
													}),
											{
												border : false,
												bodyStyle : "margin-bottom:10px;",
												html : '<div style="color:SeaGreen;font-size:11px;padding-left:25px;">* '
														+ WtfGlobal
																.getLocaleText("hrms.common.Usewhilegeneratingsalary")
														+ "</div>"
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.masterconf.SubscribedModules"),
												autoHeight : true,
												id : this.id + "modulefieldset"
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.hrmsModules.appraisal"),
												id : this.id
														+ "perfappfieldset",
												hidden : true,
												autoHeight : true,
												items : [ this.check1,
														this.check2,
														this.check3,
														this.check4,
														this.check5,
														this.check7,
														this.check6,
														this.check8,
														this.check9,
														this.check10,
														this.check11,
														this.check12 ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.Dashboard.RecruitmentManagement"),
												id : this.id
														+ "recmgmtfieldset",
												hidden : true,
												autoHeight : true,
												items : [ this.infoPan,
														this.radio2,
														this.radio3 ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.payroll.management"),
												id : this.id
														+ "paymgmtfieldset",
												hidden : true,
												autoHeight : true,
												items : [
														this.checkapprovesalary = new Wtf.form.Checkbox(
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.payroll.Checktosendsalaryforauthorization"),
																	name : "approvesalary"
																}),
														this.payInfoPan,
														this.payRadio2,
														this.payRadio3,
														this.dayPanel,
														this.day0, this.day1,
														this.day2, this.day3,
														this.day4, this.day5,
														this.day6 ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.timesheet.management"),
												id : this.id
														+ "timemgmtfieldset",
												hidden : true,
												autoHeight : true,
												items : [ this.checktimesheetjob = new Wtf.form.Checkbox(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.timesheet.job.free.text"),
															name : "timesheetjob"
														}) ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.Dashboard.Administration"),
												id : this.id + "administration",
												autoHeight : true,
												items : [ this.checkadministration = new Wtf.form.Checkbox(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.admin.block.employees.edit.details"),
															name : "blockemployees"
														}) ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.Dashboard.eleave.integration"),
												id : this.id
														+ "eleaveintegration",
												autoHeight : true,
												items : [ this.eleaveintegration = new Wtf.form.Checkbox(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.Dashboard.eleave.integration.text"),
															name : "eleaveintegration"
														}) ]
											},
											{
												xtype : "fieldset",
												width : "75%",
												title : WtfGlobal
														.getLocaleText("hrms.masterconf.SetWeeklyHolidays"),
												id : this.id + "holiday",
												hidden : true,
												autoHeight : true
											} ],
									bbar : A
								});
						this.allModule = "";
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/Master/getCompanyInformation.common",
											params : {
												mode : 18
											}
										},
										this,
										function(E, B) {
											var D = E;
											if (D && D.data) {
												this.doLayout();
												Wtf
														.getCmp(
																"employeeidformat")
														.setValue(
																D.data[0].employeeidformat);
												Wtf
														.getCmp("jobidformat")
														.setValue(
																D.data[0].jobidformat);
												Wtf
														.getCmp("finmonth")
														.setValue(
																D.data[0].finanacialmonth);
												Wtf
														.getCmp(
																"emailNotification")
														.setValue(
																D.data[0].emailNotification);
												this.weekcount = D.data[0].weeklyholiday;
												this.check1
														.setValue(D.data[0].selfapp);
												this.check2
														.setValue(D.data[0].competency);
												this.check3
														.setValue(D.data[0].goal);
												this.check4
														.setValue(D.data[0].annmng);
												this.check5
														.setValue(D.data[0].approveappraisal);
												this.check6
														.setValue(D.data[0].promotionrec);
												this.check7
														.setValue(D.data[0].weightage);
												this.check8
														.setValue(D.data[0].partial);
												this.check9
														.setValue(D.data[0].reviewappraisal);
												this.check10
														.setValue(D.data[0].fullupdates);
												this.check11
														.setValue(D.data[0].modaverage);
												this.check12
														.setValue(D.data[0].overallcomments);
												this.checkapprovesalary
														.setValue(D.data[0].approvesalary);
												this.checktimesheetjob
														.setValue(D.data[0].timesheetjob);
												this.checkadministration
														.setValue(D.data[0].blockemployees);
												this.eleaveintegration
														.setValue(D.data[0].eleaveintegration);
												if (D.data[0].defaultapps == "Internal") {
													this.radio2.setValue(true)
												} else {
													this.radio3.setValue(true)
												}
												if (D.data[0].payrollbase == "Template") {
													this.payRadio2
															.setValue(true)
												} else {
													this.payRadio3
															.setValue(true)
												}
												this.allModule = D.data[0].modules;
												this.genrateModules(
														D.data[0].modules,
														D.data[0].subscription);
												for ( var C = 0; C < 7; C++) {
													if ((Math.pow(2, C) & this.weekcount) == Math
															.pow(2, C)) {
														this.weekStore.getAt(C).data.isholiday = true
													}
												}
												Wtf.getCmp("tempgrid")
														.getView().refresh();
												this
														.checkWorkingDays(D.data[0].holidaycode)
											}
											WtfGlobal.closeProgressbar()
										}, function() {
										})
					},
					getHolidayCode : function(A) {
						var C = 0;
						for ( var B = 0; B < 7; B++) {
							if (Wtf.getCmp(
									"master_configuration_working_days_" + B)
									.getValue()) {
								C += Math.pow(2, parseInt(B))
							}
						}
						return C
					},
					checkWorkingDays : function(B) {
						for ( var A = 0; A < 7; A++) {
							if (B % 2 == 1) {
								Wtf.getCmp(
										"master_configuration_working_days_"
												+ A).setValue(true)
							}
							B = Math.floor(B / 2)
						}
					},
					saveEmpIDformat : function() {
						if (this.systemPanel.form.isValid()) {
							var code = this.getSub(this.allModule);
							var holidaycode = this.getHolidayCode();
							this.systemPanel.form
									.submit({
										waitMsg : WtfGlobal
												.getLocaleText("hrms.masterconf.Savingcompanypreferences"),
										scope : this,
										params : {
											subcription : code,
											holidaycode : holidaycode,
											weeklyholiday : this.weekcount,
											approvesalary : this.checkapprovesalary
													.getValue()
										},
										success : function(req, res) {
											if (res.response.responseText != undefined) {
												var resObject = eval("("
														+ res.response.responseText
														+ ")");
												Wtf.cmpPref.approvesalary = resObject.approvesalary
											}
											calMsgBoxShow(145, 0);
											var empgrid = Wtf
													.getCmp("empmntgridqualifiedgr");
											var jobgrid = Wtf
													.getCmp("interjobgrid2");
											if (empgrid != null) {
												empgrid.getStore().load()
											}
											if (jobgrid != null) {
												jobgrid.getStore().load()
											}
										},
										failure : function() {
											calMsgBoxShow(27, 0)
										}
									})
						}
					},
					genrateModules : function(B, E) {
						var D = Wtf.getCmp(this.id + "modulefieldset");
						for ( var C = 0; C < B.data.length; C++) {
							D.add(new Wtf.form.Checkbox({
								fieldLabel : B.data[C].moduledispname + " ",
								name : B.data[C].modulename,
								id : B.data[C].moduleid + this.id
							}));
							var A = Wtf.getCmp(B.data[C].moduleid + this.id);
							A.setValue(this.isChecked(E, B.data[C].moduleid));
							if (B.data[C].moduleid == 4) {
								A.on("check", function(F, G) {
									if (G == true) {
										Wtf.getCmp(this.id + "perfappfieldset")
												.setVisible(true)
									} else {
										Wtf.getCmp(this.id + "perfappfieldset")
												.setVisible(false)
									}
								}, this)
							}
							if (B.data[C].moduleid == 1) {
								A.on("check", function(F, G) {
									if (G == true) {
										Wtf.getCmp(this.id + "recmgmtfieldset")
												.setVisible(true)
									} else {
										Wtf.getCmp(this.id + "recmgmtfieldset")
												.setVisible(false)
									}
								}, this)
							}
							if (B.data[C].moduleid == 2) {
								A.on("check", function(F, G) {
									if (G == true) {
										Wtf.getCmp(this.id + "paymgmtfieldset")
												.setVisible(true)
									} else {
										Wtf.getCmp(this.id + "paymgmtfieldset")
												.setVisible(false)
									}
								}, this)
							}
							if (B.data[C].moduleid == 3) {
								A
										.on(
												"check",
												function(F, G) {
													if (G == true) {
														Wtf
																.getCmp(
																		this.id
																				+ "timemgmtfieldset")
																.setVisible(
																		true)
													} else {
														Wtf
																.getCmp(
																		this.id
																				+ "timemgmtfieldset")
																.setVisible(
																		false)
													}
												}, this)
							}
						}
						this.doLayout()
					},
					isChecked : function(A, B) {
						if ((Math.pow(2, parseInt(B)) & A) == Math.pow(2,
								parseInt(B))) {
							return true
						} else {
							return false
						}
					},
					getSub : function(A) {
						var C = 0;
						for ( var B = 0; B < A.data.length; B++) {
							if (Wtf.getCmp(A.data[B].moduleid + this.id)
									.getValue()) {
								C += Math.pow(2, parseInt(A.data[B].moduleid))
							}
						}
						return C
					},
					getCustomFieldCompo : function() {
						this.customFieldCompo = new Wtf.configAnyGrid({
							border : false
						});
						return this.customFieldCompo
					},
					getRecruitmentCompo : function() {
						this.configRecruitment = new Wtf.configRecruitment({
							border : false
						});
						return this.configRecruitment
					},
					createLeaveGrid : function() {
						this.data1 = {
							"data" : [ {
								day : "Sunday",
								isholiday : false
							}, {
								day : "Monday",
								isholiday : false
							}, {
								day : "Tuesday",
								isholiday : false
							}, {
								day : "Wednesday",
								isholiday : false
							}, {
								day : "Thursday",
								isholiday : false
							}, {
								day : "Friday",
								isholiday : false
							}, {
								day : "Saturday",
								isholiday : false
							} ]
						};
						this.weekStore = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data",
								fields : [ {
									name : "day"
								}, {
									name : "isholiday",
									type : "boolean"
								} ]
							})
						});
						var D = [];
						D
								.push({
									header : WtfGlobal
											.getLocaleText("hrms.common.Day"),
									align : "center",
									dataIndex : "day",
									renderer : function(E) {
										return E
									}
								});
						var C = new Wtf.grid.CheckColumn(
								{
									header : WtfGlobal
											.getLocaleText("hrms.masterconf.Markasholiday"),
									dataIndex : "isholiday",
									align : "center",
									scope : this,
									sortable : false
								});
						D.push(C);
						var B = new Wtf.grid.ColumnModel(D);
						var A = new Wtf.grid.EditorGridPanel({
							id : "tempgrid",
							cm : B,
							layout : "fit",
							ds : this.weekStore,
							border : false,
							autoScroll : false,
							clicksToEdit : 1,
							viewConfig : {
								forceFit : true
							}
						});
						A.on("beforeedit", function(E) {
							if (this.archived) {
								E.cancel = true
							}
						}, this);
						this.weekStore.loadData(this.data1);
						A.on("afteredit", function(E) {
							this.updateDay(E.record)
						}, this);
						A
								.on(
										"cellclick",
										function(G, E, F, J) {
											if (J.target.tagName == "IMG") {
												var K = this.weekStore.getAt(E);
												var L = G.getColumnModel()
														.getDataIndex(F);
												var I = J.target.className;
												var H = Wtf.get(J.target.id);
												if (I
														.indexOf("x-grid3-check-col-on") !== -1) {
													H
															.replaceClass(
																	"x-grid3-check-col-on",
																	"x-grid3-check-col");
													K.data[L] = false;
													this.weekcount -= Math.pow(
															2, E)
												} else {
													this.weekcount += Math.pow(
															2, E);
													if (this.weekcount == 127) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText("hrms.masterconf.Alldaysnotholiday") ],
																0);
														this.weekcount -= Math
																.pow(2, E);
														return
													}
													H
															.replaceClass(
																	"x-grid3-check-col",
																	"x-grid3-check-col-on");
													K.data[L] = true
												}
											}
										}, this);
						return A
					},
					createLeavePanel : function() {
						var A = this.createLeaveGrid();
						this.leavePanel = new Wtf.Panel({
							layout : "fit",
							autoHeight : true,
							width : 270,
							items : [ A ]
						});
						Wtf.getCmp(this.id + "holiday").add(this.leavePanel)
					},
					updateDay : function(C) {
						var A = C.get("isholiday");
						var D = C.get("day");
						var B = new Date(new Date().toDateString() + " "
								+ C.data.intime).add(Date.HOUR, 8).format(
								"H:i:s");
						Wtf.Ajax.requestEx({
							url : "admin.jsp",
							params : {
								action : 1,
								mode : 2,
								emode : 3,
								day : D,
								dayLabel : Wtf.Week[D],
								intime : C.data.intime,
								outtime : B,
								isholiday : A ? "on" : "off",
								projid : this.featureid
							},
							method : "POST"
						}, this, function() {
							msgBoxShow(28, 0);
							this.weekStore.load();
							bHasChanged = true;
							if (refreshDash.join().indexOf("all") == -1) {
								refreshDash[refreshDash.length] = "all"
							}
						}, function() {
							msgBoxShow(4, 1)
						})
					}
				});
Wtf.grid.CheckColumn = function(A) {
	Wtf.apply(this, A);
	if (!this.id) {
		this.id = Wtf.id()
	}
	this.renderer = this.renderer.createDelegate(this)
};
Wtf.grid.CheckColumn.prototype = {
	init : function(A) {
		this.grid = A
	},
	renderer : function(B, C, A) {
		C.css += " x-grid3-check-col-td";
		return '<img src="' + Wtf.BLANK_IMAGE_URL
				+ '" class="x-grid3-check-col' + (B ? "-on" : "")
				+ " x-grid3-cc-" + this.id + '">&#160;</img>'
	}
};
Wtf.AddEditMaster = function(A) {
	Wtf.apply(this, A);
	Wtf.AddEditMaster.superclass.constructor.call(this, {
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : function() {
				this.saveProjectDetail()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	})
};
Wtf
		.extend(
				Wtf.AddEditMaster,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.AddEditMaster.superclass.initComponent.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						var C = this.action + " Master Field";
						var A = "";
						var B = "";
						if (this.action == "Edit") {
							A = WtfGlobal
									.getLocaleText("hrms.common.Editthemasterfieldinformation");
							B = "images/master.gif"
						} else {
							A = WtfGlobal
									.getLocaleText("hrms.common.Filluptheinformationtoaddmasterfield");
							B = "images/master.gif"
						}
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 75,
									border : false,
									bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(C, A, B)
								})
					},
					GetAddEditForm : function() {
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									url : "Common/Master/addMasterDataField.common",
									items : [ {
										xtype : "textfield",
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.EmailTemplateCmb.Name"),
										width : 200,
										maxLength : 100,
										name : "name",
										value : (this.action == "Edit") ? this.rec
												.get("name")
												: ""
									} ]
								})
					},
					saveProjectDetail : function() {
						if (this.AddEditForm.form.isValid()) {
							this.AddEditForm.form
									.submit({
										params : {
											flag : 202,
											action : this.action,
											id : (this.action == "Edit") ? this.rec
													.get("id")
													: ""
										},
										success : function() {
											Wtf.MessageBox
													.show({
														title : "",
														msg : (this.action == "Edit") ? WtfGlobal
																.getLocaleText("hrms.common.Masterfieldeditedsuccessfully")
																: WtfGlobal
																		.getLocaleText("hrms.common.Masterfieldaddedsuccessfully"),
														icon : Wtf.MessageBox.INFO,
														buttons : Wtf.MessageBox.OK
													});
											this.close();
											this.store.load({
												params : {
													start : 0,
													limit : 25
												}
											})
										},
										failure : function() {
											Wtf.MessageBox
													.show({
														title : "",
														msg : (this.action == "Edit") ? WtfGlobal
																.getLocaleText("hrms.common.Errorwhileeditingmasterfield")
																: WtfGlobal
																		.getLocaleText("hrms.common.Errorwhileaddingmasterfield"),
														icon : Wtf.MessageBox.ERROR,
														buttons : Wtf.MessageBox.OK
													})
										},
										scope : this
									})
						}
					}
				});
Wtf.AddEditMasterData = function(A) {
	Wtf.apply(this, A);
	this.save = true;
	Wtf.AddEditMasterData.superclass.constructor.call(this, {
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			id : "btnsave",
			handler : function() {
				this.saveProjectDetail()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	})
};
Wtf
		.extend(
				Wtf.AddEditMasterData,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.AddEditMasterData.superclass.initComponent
								.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetMasterDataArray : function() {
						var A = [
								WtfGlobal
										.getLocaleText("hrms.common.designation"),
								WtfGlobal
										.getLocaleText("hrms.performance.context"),
								WtfGlobal
										.getLocaleText("hrms.performance.priority"),
								WtfGlobal
										.getLocaleText("hrms.performance.goal.weightage"),
								WtfGlobal
										.getLocaleText("hrms.common.Completed"),
								WtfGlobal
										.getLocaleText("hrms.common.Attributes"),
								WtfGlobal
										.getLocaleText("hrms.common.department"),
								WtfGlobal.getLocaleText("hrms.common.Subfield"),
								WtfGlobal.getLocaleText("hrms.common.Subfield"),
								WtfGlobal
										.getLocaleText("hrms.recruitment.rank"),
								WtfGlobal.getLocaleText("hrms.common.Subfield"),
								WtfGlobal
										.getLocaleText("hrms.common.Qualifications"),
								WtfGlobal
										.getLocaleText("hrms.common.Performance"),
								WtfGlobal.getLocaleText("hrms.common.category"),
								WtfGlobal
										.getLocaleText("hrms.common.TerminationCause"),
								WtfGlobal
										.getLocaleText("hrms.Masters.Currency"),
								WtfGlobal
										.getLocaleText("hrms.common.CustomFields"),
								WtfGlobal.getLocaleText("hrms.common.Subfield"),
								WtfGlobal
										.getLocaleText("hrms.common.InterviewLocation"),
								"",
								WtfGlobal
										.getLocaleText("hrms.masterconf.component.subtype"),
								WtfGlobal
										.getLocaleText("hrms.masterconf.frequency"),
								WtfGlobal
										.getLocaleText("hrms.masterconf.payment.type") ];
						return A
					},
					GetMasterDataArrayValue : function(A, C) {
						var B = this.GetMasterDataArray();
						if (B[A] != undefined) {
							C = B[A]
						}
						return C
					},
					GetNorthPanel : function() {
						var C = WtfGlobal.getLocaleText("hrms.common.add")
								+ " "
								+ this
										.GetMasterDataArrayValue(
												this.configid - 1,
												WtfGlobal
														.getLocaleText("hrms.common.Subfield"));
						var A = "";
						var B = "";
						if (this.action == "Edit") {
							A = WtfGlobal
									.getLocaleText("hrms.common.Editthesubfieldinformation");
							B = "images/master.gif"
						} else {
							A = WtfGlobal
									.getLocaleText("hrms.common.Filluptheinformationtoaddsubfield");
							B = "images/master.gif"
						}
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 75,
									border : false,
									bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(C, A, B)
								})
					},
					GetAddEditForm : function() {
						var C;
						if (this.configid == 4 || this.configid == 5) {
							C = Wtf.form.NumberField
						} else {
							C = Wtf.ux.TextField
						}
						if (this.configid == 21) {
							var B = [];
							B
									.push([
											WtfGlobal
													.getLocaleText("hrms.common.Earning"),
											"1" ]);
							B
									.push([
											WtfGlobal
													.getLocaleText("hrms.payroll.Deduction"),
											"2" ]);
							B
									.push([
											WtfGlobal
													.getLocaleText("hrms.payroll.Tax"),
											"3" ]);
							B
									.push([
											WtfGlobal
													.getLocaleText("hrms.payroll.additional.remuneration"),
											"4" ]);
							if (!isMalaysianCompany) {
								B
										.push([
												WtfGlobal
														.getLocaleText("hrms.payroll.income.tax.component.type"),
												"5" ])
							}
							B
									.push([
											WtfGlobal
													.getLocaleText("hrms.payroll.EmployerContribution"),
											"0" ]);
							B.push([ "Compute on income tax", "6" ]);
							this.subtype = B;
							this.subtypestore = new Wtf.data.SimpleStore({
								fields : [ {
									name : "type"
								}, {
									name : "code"
								} ],
								data : this.subtype
							});
							this.weightageField = new Wtf.form.ComboBox(
									{
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.payroll.type")
												+ "*",
										store : this.subtypestore,
										displayField : "type",
										typeAhead : true,
										valueField : "code",
										allowBlank : false,
										width : 200,
										labelWidth : 100,
										scope : this,
										hiddenName : "wt",
										name : "wt",
										value : (this.action == "Edit") ? this.rec
												.get("weightage")
												: 1,
										mode : "local",
										triggerAction : "all",
										emptyText : WtfGlobal
												.getLocaleText("hrms.payroll.select.type"),
										selectOnFocus : true
									})
						} else {
							if (this.configid == 25) {
								var A = /^(([0-1][0-9]|[2][0-3]):([0-5][0-9]))|(([2][4]:[0][0]))|(([0-1][0-9]|[2][0-3]):([0-6][0]))$/;
								this.weightageField = new Wtf.ux.TextField(
										{
											regex : A,
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.timesheet.hours")
													+ "*"
													+ WtfGlobal
															.addLabelHelp(WtfGlobal
																	.getLocaleText("hrms.timesheet.enterhours.format")),
											width : 200,
											allowBlank : false,
											name : "wt",
											maxLength : 5,
											value : (this.action == "Edit") ? this.rec
													.get("weightage")
													: "00:00"
										})
							} else {
								this.weightageField = new Wtf.form.NumberField(
										{
											xtype : "numberfield",
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.performance.heirarchy"),
											width : 200,
											allowDecimals : false,
											maxLength : 10,
											minValue : 0,
											id : this.id + "wtfield",
											name : "wt",
											value : (this.action == "Edit") ? this.rec
													.get("weightage")
													: 0
										})
							}
						}
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									url : "Common/Master/addMasterDataField.common",
									items : [
											this.name = new C(
													{
														fieldLabel : this
																.GetMasterDataArrayValue(
																		this.configid - 1,
																		WtfGlobal
																				.getLocaleText("hrms.common.AddSubField.Name"))
																+ "*",
														width : 200,
														allowDecimals : false,
														allowNegative : false,
														maxLength : 100,
														maxValue : 100,
														minValue : 0,
														id : this.id
																+ "namefield",
														name : "name",
														value : (this.action == "Edit") ? this.rec
																.get("name")
																: (this.configid == 4 || this.configid == 5) ? undefined
																		: ""
													}), this.weightageField ]
								})
					},
					saveProjectDetail : function() {
						this.formtext = Wtf.getCmp(this.id + "namefield")
								.getValue();
						var C = 1;
						for ( var A = 0; A < this.store.getCount(); A++) {
							if (this.store.getAt(A).get("name") == this.formtext) {
								if (this.rec) {
									if (this.store.getAt(A).get("id") != this.rec
											.get("id")) {
										C = 0
									}
								} else {
									C = 0
								}
							}
						}
						if (C == 0 || this.formtext === "") {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.error"),
										msg : WtfGlobal
												.getLocaleText("hrms.common.field.blank.data.already.present"),
										icon : Wtf.MessageBox.ERROR,
										buttons : Wtf.MessageBox.OK
									})
						} else {
							if (this.AddEditForm.form.isValid() && this.save) {
								var B = Wtf.get("btnsave");
								B.findParent("table").className = "x-btn-wrap x-btn x-item-disabled";
								this.save = false;
								this.AddEditForm.form
										.submit({
											params : {
												flag : 204,
												configid : this.configid,
												action : this.action,
												id : (this.action == "Edit") ? this.rec
														.get("id")
														: ""
											},
											success : function() {
												msgFlag = 0;
												if (this.action == "Edit") {
													calMsgBoxShow([
															WtfGlobal
																	.getLocaleText("hrms.common.success"),
															WtfGlobal
																	.getLocaleText({
																		key : "hrms.common.mdeditedsuccessfully",
																		params : [ this
																				.GetMasterDataArrayValue(
																						this.configid - 1,
																						"Sub Field") ]
																	}) ])
												} else {
													calMsgBoxShow([
															WtfGlobal
																	.getLocaleText("hrms.common.success"),
															WtfGlobal
																	.getLocaleText({
																		key : "hrms.common.mdaddedsuccessfully",
																		params : [ this
																				.GetMasterDataArrayValue(
																						this.configid - 1,
																						"Sub Field") ]
																	}) ])
												}
												this.close();
												this.store
														.load({
															params : {
																configid : this.configid
															}
														});
												this.loadMasterStores()
											},
											failure : function() {
												Wtf.MessageBox
														.show({
															title : WtfGlobal
																	.getLocaleText("hrms.common.status"),
															msg : (this.action == "Edit") ? WtfGlobal
																	.getLocaleText("hrms.common.ErrorwhileeditingSubfield")
																	: WtfGlobal
																			.getLocaleText("hrms.common.ErrorwhileaddingSubfield"),
															icon : Wtf.MessageBox.ERROR,
															buttons : Wtf.MessageBox.OK
														});
												this.save = true;
												B.findParent("table").className = "x-btn-wrap x-btn"
											},
											scope : this
										})
							}
						}
					},
					loadMasterStores : function() {
						switch (this.configid) {
						case 1:
							Wtf.desigStore.removeListener("load");
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore);
							break;
						case 2:
							Wtf.contextstore.removeListener("load");
							Wtf.contextstore.load();
							Wtf.StoreMgr.add("context", Wtf.contextstore);
							break;
						case 3:
							Wtf.priostore.removeListener("load");
							Wtf.priostore.load();
							Wtf.StoreMgr.add("prio", Wtf.priostore);
							break;
						case 4:
							Wtf.wthstore.removeListener("load");
							Wtf.wthstore.load();
							Wtf.StoreMgr.add("wth", Wtf.wthstore);
							break;
						case 5:
							Wtf.completedStore.removeListener("load");
							Wtf.completedStore.load();
							Wtf.StoreMgr.add("comp", Wtf.completedStore);
							break;
						case 7:
							Wtf.depStore.removeListener("load");
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore);
							break;
						case 10:
							Wtf.rankStore.removeListener("load");
							Wtf.rankStore.load();
							Wtf.StoreMgr.add("rank", Wtf.rankStore);
							break;
						case 12:
							Wtf.quaStore.removeListener("load");
							Wtf.quaStore.load();
							Wtf.StoreMgr.add("qua", Wtf.quaStore);
							break;
						case 14:
							Wtf.catgStore.removeListener("load");
							Wtf.catgStore.load();
							Wtf.StoreMgr.add("catg", Wtf.catgStore);
							break;
						case 15:
							Wtf.terStore.removeListener("load");
							Wtf.terStore.load();
							Wtf.StoreMgr.add("ter", Wtf.terStore);
							break
						}
					}
				});
Wtf.appraisalCycleMasterGrid = function(A) {
	Wtf.appraisalCycleMasterGrid.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.appraisalCycleMasterGrid,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.appraisalCycleMasterGrid.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						Wtf.appraisalCycleMasterGrid.superclass.onRender.call(
								this, A);
						this.record = Wtf.data.Record.create([ {
							name : "cycleid"
						}, {
							name : "cyclename"
						}, {
							name : "startdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "submitstartdate",
							type : "date"
						}, {
							name : "submitenddate",
							type : "date"
						}, {
							name : "canapprove"
						}, {
							name : "status"
						} ]);
						this.ds = new Wtf.data.Store(
								{
									baseParams : {
										flag : 301
									},
									url : "Performance/Appraisalcycle/getAppraisalCycle.pf",
									reader : new Wtf.data.KwlJsonReader1({
										root : "data",
										totalProperty : "count"
									}, this.record)
								});
						calMsgBoxShow(202, 4, true);
						this.ds.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
							var C = Wtf.getCmp("DSBMyWorkspaces");
							if (C) {
								C.doSearch(C.url, "")
							}
							C = Wtf.getCmp("dash_performance");
							if (C) {
								C.doSearch(C.url, "")
							}
						}, this);
						this.ds.on("loadexception", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.appraisalCycle.CycleName"),
											sortable : true,
											dataIndex : "cyclename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											sortable : true,
											renderer : WtfGlobal.dateonlyRenderer,
											align : "left",
											dataIndex : "startdate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											sortable : true,
											renderer : WtfGlobal.dateonlyRenderer,
											dataIndex : "enddate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.submission.start.date"),
											sortable : true,
											renderer : WtfGlobal.dateonlyRenderer,
											dataIndex : "submitstartdate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.submission.end.date"),
											sortable : true,
											renderer : WtfGlobal.dateonlyRenderer,
											dataIndex : "submitenddate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.appraisalCycle.AppraisalCycleStatus"),
											sortable : true,
											renderer : function(C) {
												if (C == "1") {
													return '<FONT COLOR="green">'
															+ WtfGlobal
																	.getLocaleText("hrms.common.Approved")
															+ "</FONT>"
												} else {
													return '<FONT COLOR="red">'
															+ WtfGlobal
																	.getLocaleText("hrms.common.Unapproved")
															+ "</FONT>"
												}
											},
											dataIndex : "status"
										} ]);
						var B = new Array();
						this.refreshBtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.ds.load({
											params : {
												start : 0,
												limit : this.grid.pag.pageSize
											}
										});
										Wtf.getCmp("Quick" + this.grid.id)
												.setValue("")
									}
								});
						this.deleteButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.delete"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.delete.unwanted.appraisal.cycle"),
									handler : this.delete1,
									disabled : true,
									scope : this
								});
						this.addButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.add"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.Add.tooltip"),
									handler : this.add1,
									scope : this
								});
						this.editButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.edit.tooltip"),
									handler : this.edit1,
									disabled : true,
									scope : this
								});
						this.sendmailButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.EmailNotification"),
									iconCls : getButtonIconCls(Wtf.btype.emailbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.EmailNotification.tooltip"),
									handler : this.sendemail,
									disabled : true,
									scope : this
								});
						this.sendpdfmail = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.NotifyReviewers"),
									iconCls : getButtonIconCls(Wtf.btype.emailbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.NotifyReviewers.tooltip"),
									handler : this.sendemailtoReviewer,
									disabled : true,
									scope : this
								});
						this.sendappraisalreport = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.EmailAppraisalCycleReport"),
									iconCls : getButtonIconCls(Wtf.btype.emailbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.EmailAppraisalCycleReport.tooltip"),
									handler : this.sendappraisalReport,
									disabled : true,
									scope : this
								});
						this.approveButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.ApproveAppraisalCycle"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.ApproveAppraisalCycle.tooltip"),
									handler : function() {
										this.approveapp(true)
									},
									disabled : true,
									scope : this
								});
						this.unapproveButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.UnapproveAppraisalCycle"),
									iconCls : getButtonIconCls(Wtf.btype.cancelbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.UnapproveAppraisalCycle.tooltip"),
									handler : function() {
										this.approveapp(false)
									},
									disabled : true,
									scope : this
								});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.setappcycle,
								Wtf.Perm.setappcycle.manage)) {
							B.push("-", this.refreshBtn, "-", this.addButton,
									"-", this.editButton, "-",
									this.deleteButton, "-", this.approveButton,
									"-", this.unapproveButton, "-",
									this.sendmailButton, "-", this.sendpdfmail,
									"-", this.sendappraisalreport);
							this.sm.on("selectionchange", function() {
								WtfGlobal.enableDisableBtnArr(B, this.grid, [
										5, 13 ], [ 7 ]);
								if (this.sm.hasSelection()) {
									var C = this.sm.getSelected();
									if (C.data.status == 1) {
										this.unapproveButton.enable();
										this.sendappraisalreport.enable()
									} else {
										if (C.data.canapprove == 1) {
											this.approveButton.enable()
										}
										this.unapproveButton.disable()
									}
									if (C.data.canapprove == 1) {
										this.sendpdfmail.enable()
									}
								} else {
									this.approveButton.disable();
									this.unapproveButton.disable();
									this.sendpdfmail.disable();
									this.sendappraisalreport.disable()
								}
							}, this)
						}
						this.grid = new Wtf.KwlGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									border : false,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.appraisalCycle.Noappraisalcycleadded"))
									},
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.SearchByCycleName"),
									searchField : "cyclename",
									serverSideSearch : true,
									displayInfo : true,
									tbar : B
								});
						this.add(this.grid)
					},
					add1 : function() {
						this.addappraisalCycle(true)
					},
					edit1 : function() {
						this.addappraisalCycle(false)
					},
					delete1 : function() {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : WtfGlobal
											.getLocaleText("hrms.appraisalCycle.ConfirmDeleteAppraisalCycle"),
									icon : Wtf.MessageBox.WARNING,
									buttons : Wtf.MessageBox.YESNO,
									fn : function(text) {
										if (text == "yes") {
											Wtf.Ajax
													.requestEx(
															{
																url : "Performance/Appraisalcycle/deleteAppraisalCycle.pf",
																params : {
																	flag : 43,
																	action : "delete",
																	id : this.sm
																			.getSelected()
																			.get(
																					"cycleid")
																}
															},
															this,
															function(response) {
																var res = eval("("
																		+ response
																		+ ")");
																if (res.success) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					res.msg ],
																			0);
																	this.ds
																			.load({
																				params : {
																					start : 0,
																					limit : this.grid.pag.pageSize
																				}
																			})
																} else {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					res.msg ],
																			0)
																}
															}, function() {
																calMsgBoxShow(
																		27, 1)
															})
										}
									},
									scope : this
								})
					},
					addappraisalCycle : function(A) {
						this.sDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.start.date")
									+ " *",
							format : "m/d/Y",
							width : 200,
							allowBlank : false
						});
						this.eDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.end.date")
									+ " *",
							format : "m/d/Y",
							width : 200,
							allowBlank : false
						});
						this.cycleName = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Cycle")
									+ " *",
							width : 200,
							maxLength : 50,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.submitSdate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.submission.start.date")
											+ " *",
									format : "m/d/Y",
									width : 200,
									allowBlank : false
								});
						this.submitEdDate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.submission.end.date")
											+ " *",
									format : "m/d/Y",
									width : 200,
									minValue : new Date().clearTime(true),
									allowBlank : false
								});
						this.appcycleForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									labelWidth : 110,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.cycleName, this.sDate,
											this.eDate, this.submitSdate,
											this.submitEdDate ]
								});
						this.appcyclePanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 75,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
													html : (A) ? getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.appraisalCycle.CreateAppraisalcycle"),
															WtfGlobal
																	.getLocaleText("hrms.appraisalCycle.CreateAppraisalcycle.subtitle"),
															"images/add-apprisal-cycle.jpg")
															: getTopHtml(
																	WtfGlobal
																			.getLocaleText("hrms.common.EditAppraisalcycle"),
																	WtfGlobal
																			.getLocaleText("hrms.common.Pleaseenterfollowingdetailstoeditappraisalcycle"),
																	"images/edit-apprisal-cycle.jpg")
												},
												{
													border : false,
													region : "center",
													bodyStyle : "background:#f1f1f1;font-size:10px;",
													layout : "fit",
													items : [ this.appcycleForm ]
												} ]
									} ]
								});
						this.appcycleWindow = new Wtf.Window(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									closable : true,
									width : 400,
									title : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle"),
									height : 330,
									border : false,
									id : this.id + "addeditwindow",
									modal : true,
									scope : this,
									plain : true,
									buttonAlign : "right",
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												handler : function() {
													this.setappraisalCycle(A)
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.appcycleWindow.close()
												}
											} ],
									items : [ this.appcyclePanel ]
								});
						this.appcycleWindow.on("show", function() {
							this.cycleName.focus(true, 100)
						}, this);
						this.appcycleWindow.show();
						this.setDateValues(A)
					},
					setDateValues : function(A) {
						if (!A) {
							this.cycleName.setValue(this.sm.getSelected().get(
									"cyclename"));
							this.sDate.setValue(this.sm.getSelected().get(
									"startdate"));
							this.eDate.setValue(this.sm.getSelected().get(
									"enddate"));
							this.submitSdate.setValue(this.sm.getSelected()
									.get("submitstartdate"));
							this.submitEdDate.setValue(this.sm.getSelected()
									.get("submitenddate"))
						}
					},
					setappraisalCycle : function(flag) {
						if (new Date(this.sDate.getValue()) > new Date(
								this.eDate.getValue())
								|| new Date(this.submitSdate.getValue()) > new Date(
										this.submitEdDate.getValue())) {
							calMsgBoxShow(170, 1);
							if (new Date(this.sDate.getValue()) > new Date(
									this.eDate.getValue())
									&& new Date(this.submitSdate.getValue()) > new Date(
											this.submitEdDate.getValue())) {
								this.eDate.setValue("");
								this.submitEdDate.setValue("")
							} else {
								if (new Date(this.sDate.getValue()) > new Date(
										this.eDate.getValue())) {
									this.eDate.setValue("")
								} else {
									this.submitEdDate.setValue("")
								}
							}
						}
						if (this.sDate != undefined
								&& this.submitSdate != undefined
								&& this.submitSdate.getValue().clearTime() < this.sDate
										.getValue().clearTime()) {
							calMsgBoxShow([
									WtfGlobal
											.getLocaleText("hrms.common.Alert"),
									WtfGlobal
											.getLocaleText("hrms.Messages.calMsgBoxShow230") ]);
							return
						}
						if (this.appcycleForm.getForm().isValid()) {
							calMsgBoxShow(202, 4, true);
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/Appraisalcycle/setAppraisalcycle.pf",
												params : {
													flag : 167,
													editflag : flag ? 0 : 1,
													cyclename : this.cycleName
															.getValue(),
													cycleid : flag ? ""
															: this.sm
																	.getSelected()
																	.get(
																			"cycleid"),
													startdate : this.sDate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.eDate
															.getValue().format(
																	"Y-m-d"),
													submitsdate : this.submitSdate
															.getValue().format(
																	"Y-m-d"),
													submitedate : this.submitEdDate
															.getValue().format(
																	"Y-m-d")
												}
											},
											this,
											function(response) {
												var res = eval("(" + response
														+ ")");
												if (res.success) {
													if (flag == 1) {
														calMsgBoxShow(168, 0)
													} else {
														calMsgBoxShow(172, 0)
													}
													this.ds
															.load({
																params : {
																	start : this.grid.pag.cursor,
																	limit : this.grid.pag.pageSize
																}
															});
													this.appcycleWindow.close();
													var initiateTab = Wtf
															.getCmp("viewapp");
													if (initiateTab != null) {
														initiateTab.appTypeStore
																.load()
													}
												} else {
													if (res.msg) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		res.msg ],
																0)
													} else {
														calMsgBoxShow(190, 2)
													}
												}
											}, function() {
												calMsgBoxShow(65, 1)
											})
						} else {
							return
						}
					},
					approveapp : function(A) {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.appraisalCycle.confirmchangeappraisalcycle"),
										function(B) {
											if (B != "yes") {
												return
											} else {
												calMsgBoxShow(202, 4, true);
												var C = this.sm.getSelected();
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Appraisalcycle/approveAppraisalCycle.pf",
																	params : {
																		flag : 172,
																		status : A,
																		ids : C
																				.get("cycleid")
																	}
																},
																this,
																function() {
																	this.ds
																			.load({
																				params : {
																					start : this.grid.pag.cursor,
																					limit : this.grid.pag.pageSize
																				}
																			});
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					WtfGlobal
																							.getLocaleText("hrms.appraisalCycle.Appraisalcyclesstatuschanged") ],
																			0)
																},
																function() {
																	calMsgBoxShow(
																			65,
																			1)
																})
											}
										}, this)
					},
					sendemail : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.appraisalCycle.sendemailnotificationtoallappraisees"),
										function(btn) {
											if (btn != "yes") {
												return
											} else {
												calMsgBoxShow(202, 4, true);
												var rec = this.sm.getSelected();
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Appraisalcycle/sendappraisalemail.pf",
																	params : {
																		flag : 173,
																		appraisalcycleid : rec
																				.get("cycleid")
																	}
																},
																this,
																function(
																		response) {
																	var res = eval("("
																			+ response
																			+ ")");
																	if (res.message) {
																		calMsgBoxShow(
																				180,
																				0)
																	} else {
																		calMsgBoxShow(
																				181,
																				2)
																	}
																},
																function() {
																	calMsgBoxShow(
																			180,
																			0)
																})
											}
										}, this)
					},
					sendemailtoReviewer : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.appraisalCycle.sendemailnotificationtoreviewer"),
										function(A) {
											if (A != "yes") {
												return
											} else {
												calMsgBoxShow(202, 4, true);
												var B = this.sm.getSelected();
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Appraisalcycle/sendRevieweremailFunction.pf",
																	params : {
																		flag : 62,
																		appraisalcycleid : B
																				.get("cycleid")
																	}
																},
																this,
																function(C) {
																	calMsgBoxShow(
																			182,
																			0)
																},
																function() {
																	calMsgBoxShow(
																			182,
																			0)
																})
											}
										}, this)
					},
					sendappraisalReport : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.appraisalCycle.sendappraisalreportemail"),
										function(A) {
											if (A != "yes") {
												return
											} else {
												calMsgBoxShow(202, 4, true);
												var B = this.sm.getSelected();
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Appraisalcycle/sendappraisalreportEmail.pf",
																	params : {
																		flag : 174,
																		appraisalcycleid : B
																				.get("cycleid")
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			183,
																			0)
																},
																function() {
																	calMsgBoxShow(
																			183,
																			0)
																})
											}
										}, this)
					}
				});
Wtf.configAnyGrid = function(A) {
	Wtf.form.Field.prototype.msgTarget = "qtip", Wtf.apply(this, A);
	this.save = true;
	this.typeStore = new Wtf.data.SimpleStore(
			{
				fields : [ "id", "name" ],
				data : [
						[
								0,
								WtfGlobal
										.getLocaleText("hrms.masterconf.TextField") ],
						[
								1,
								WtfGlobal
										.getLocaleText("hrms.masterconf.NumberField") ],
						[
								2,
								WtfGlobal
										.getLocaleText("hrms.masterconf.CheckBox") ],
						[
								3,
								WtfGlobal
										.getLocaleText("hrms.masterconf.DateField") ],
						[
								4,
								WtfGlobal
										.getLocaleText("hrms.masterconf.Dropdown") ],
						[
								5,
								WtfGlobal
										.getLocaleText("hrms.masterconf.RichTextBox") ],
						[
								6,
								WtfGlobal
										.getLocaleText("hrms.masterconf.TextArea") ],
						[
								7,
								WtfGlobal
										.getLocaleText("hrms.masterconf.MultiSelectCombobox") ] ]
			});
	this.typeStore1 = new Wtf.data.SimpleStore(
			{
				fields : [ "id", "name" ],
				data : [
						[
								"Personal",
								WtfGlobal
										.getLocaleText("hrms.recruitment.PersonalInformation") ],
						[
								"Contact",
								WtfGlobal
										.getLocaleText("hrms.common.ContactandWorkShiftDetails") ],
						[
								"Organizational",
								WtfGlobal
										.getLocaleText("hrms.common.OrganizationalDetails") ] ]
			});
	this.groupingView = new Wtf.grid.GroupingView({
		forceFit : true,
		showGroupName : false,
		hideGroupedColumn : true,
		enableGroupingMenu : false
	});
	this.reader = new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, [ {
		name : "configid"
	}, {
		name : "configtype"
	}, {
		name : "formtype"
	}, {
		name : "fieldname"
	}, {
		name : "allownull"
	}, {
		name : "blockemployees"
	} ]);
	this.ds = new Wtf.data.GroupingStore({
		url : "CustomCol/getConfigType.do",
		reader : this.reader
	});
	this.ds.baseParams = {
		flag : 212
	};
	this.ds.on("load", function(B, D, C) {
	}, this);
	this.sm = new Wtf.grid.CheckboxSelectionModel();
	this.cm = new Wtf.grid.ColumnModel(
			[
					new Wtf.grid.RowNumberer({}),
					this.sm,
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.ConfigType"),
						dataIndex : "configtype",
						width : 150,
						renderer : function(B) {
							if (B == 0) {
								return WtfGlobal
										.getLocaleText("hrms.masterconf.TextField")
							} else {
								if (B == 1) {
									return WtfGlobal
											.getLocaleText("hrms.masterconf.NumberField")
								} else {
									if (B == 2) {
										return WtfGlobal
												.getLocaleText("hrms.masterconf.CheckBox")
									} else {
										if (B == 3) {
											return WtfGlobal
													.getLocaleText("hrms.masterconf.DateField")
										} else {
											if (B == 4) {
												return WtfGlobal
														.getLocaleText("hrms.masterconf.Dropdown")
											} else {
												if (B == 5) {
													return WtfGlobal
															.getLocaleText("hrms.masterconf.RichTextBox")
												} else {
													if (B == 6) {
														return WtfGlobal
																.getLocaleText("hrms.masterconf.TextArea")
													} else {
														if (B == 7) {
															return WtfGlobal
																	.getLocaleText("hrms.masterconf.MultiSelectCombobox")
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.Fieldname"),
						dataIndex : "fieldname",
						width : 150
					},
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.FormType"),
						dataIndex : "formtype",
						width : 150
					} ]);
	this.cm.defaultSortable = true;
	this.cloneRecord = Wtf.data.Record.create([ {
		name : "name",
		type : "string"
	}, {
		name : "displayname",
		type : "string"
	}, {
		name : "configid",
		type : "string"
	} ]);
	this.cloneReader = new Wtf.data.KwlJsonReader1({
		root : "data"
	}, this.cloneRecord);
	this.cloneStore = new Wtf.data.Store({
		proxy : new Wtf.data.HttpProxy({
			url : Wtf.req.base + "hrms.jsp"
		}),
		reader : this.cloneReader
	});
	this.addC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.AddConfig"),
		iconCls : getButtonIconCls(Wtf.btype.addbutton),
		scope : this,
		handler : function() {
			this.addConfig(true)
		},
		scope : this
	});
	this.editC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.EditConfig"),
		iconCls : getButtonIconCls(Wtf.btype.editbutton),
		scope : this,
		disabled : true,
		handler : function() {
			this.addConfig(false)
		},
		scope : this
	});
	this.delC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.DeleteConfig"),
		iconCls : getButtonIconCls(Wtf.btype.deletebutton),
		scope : this,
		disabled : true,
		handler : function() {
			this.delConfig(true)
		},
		scope : this
	});
	this.setM = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.SetMaster"),
		scope : this,
		handler : this.masterwin
	});
	this.cloneBttn = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.CloneMaster"),
		scope : this,
		handler : function() {
			this.addconfig1()
		}
	});
	Wtf.configAnyGrid.superclass.constructor
			.call(
					this,
					{
						layout : "fit",
						items : [ {
							layout : "fit",
							border : false,
							items : [ this.grid = new Wtf.grid.GridPanel(
									{
										border : false,
										region : "center",
										store : this.ds,
										sm : this.sm,
										cm : this.cm,
										viewConfig : {
											autoFill : true,
											forceFit : true
										},
										loadMask : {
											msg : WtfGlobal
													.getLocaleText("hrms.Dashboard.Loading")
										},
										tbar : [
												WtfGlobal
														.getLocaleText("hrms.common.QuickSearch")
														+ ": ",
												this.quickPanelSearch1 = new Wtf.KWLTagSearch(
														{
															width : 200,
															emptyText : WtfGlobal
																	.getLocaleText("hrms.common.SearchbyFieldname"),
															field : "fieldname"
														}) ],
										bbar : [ "-", this.addC, "-",
												this.editC, "-", this.delC ]
									}) ]
						} ]
					});
	this.ds.load();
	this.sm.on("selectionchange", this.disableBttns, this);
	this.ds.on("load", function(B) {
		this.quickPanelSearch1.StorageChanged(B)
	}, this)
};
Wtf
		.extend(
				Wtf.configAnyGrid,
				Wtf.Panel,
				{
					addconfig1 : function() {
						this.win1 = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.masterconf.Clone"),
									layout : "fit",
									iconCls : "winicon",
									modal : true,
									height : 355,
									width : 450,
									scope : this,
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.add"),
												handler : function() {
													Wtf.Ajax
															.requestEx(
																	{
																		method : "POST",
																		url : "CustomCol/addConfigType.do",
																		params : {
																			flag : 214,
																			configid : "clone",
																			formtype : this.qType1
																					.getValue(),
																			fieldname : this.quesField
																					.getValue()
																		}
																	},
																	this,
																	function() {
																		msgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.success"),
																						WtfGlobal
																								.getLocaleText("hrms.masterconf.Configoptionaddedsuccessfully") ],
																				Wtf.MessageBox.INFO);
																		this.win1
																				.close();
																		this.ds
																				.load();
																		this.cloneStore
																				.load({
																					params : {
																						flag : 213
																					}
																				})
																	},
																	function() {
																		msgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.error"),
																						WtfGlobal
																								.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
																				Wtf.MessageBox.ERROR)
																	})
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.win1.close()
												}
											} ],
									items : [ this.pPanel = new Wtf.Panel(
											{
												layout : "fit",
												border : false,
												items : this.inP = new Wtf.Panel(
														{
															layout : "border",
															border : false,
															items : [
																	{
																		region : "north",
																		border : false,
																		height : 90,
																		bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
																		html : getHeader(
																				"images/createuser.gif",
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Config"),
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Selectaconfigtype"))
																	},
																	{
																		region : "center",
																		layout : "fit",
																		bodyStyle : "background:#f1f1f1;",
																		border : false,
																		items : [ this.addForm = new Wtf.form.FormPanel(
																				{
																					url : "jspfiles/admin/feedback.jsp",
																					region : "center",
																					bodyStyle : "padding: 10px;",
																					border : false,
																					labelWidth : 160,
																					height : 100,
																					buttonAlign : "right",
																					items : [
																							this.qType1 = new Wtf.form.ComboBox(
																									{
																										valueField : "id",
																										displayField : "name",
																										store : this.typeStore1,
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Applyto")
																												+ "*",
																										editable : false,
																										allowBlank : false,
																										anchor : "95%",
																										mode : "local",
																										triggerAction : "all",
																										selectOnFocus : true,
																										emptyText : WtfGlobal
																												.getLocaleText("hrms.masterconf.ApplyConfig")
																									}),
																							this.quesField = new Wtf.form.TextField(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Fieldname")
																												+ "*",
																										scope : this,
																										allowBlank : false,
																										name : "question",
																										maxLength : 256
																									}) ]
																				}) ]
																	} ]
														})
											}) ]
								});
						this.win1.show()
					},
					masterwin : function() {
						this.attributeRecord = Wtf.data.Record.create([ {
							name : "displayname",
							type : "string"
						}, {
							name : "configid",
							type : "string"
						} ]);
						this.attributeReader = new Wtf.data.KwlJsonReader1({
							root : "data"
						}, this.attributeRecord);
						this.attributeStore = new Wtf.data.Store({
							proxy : new Wtf.data.HttpProxy({
								url : Wtf.req.base + "hrms.jsp"
							}),
							reader : this.attributeReader
						});
						this.attributeStore.load({
							params : {
								flag : 213
							}
						});
						this.attributeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									store : this.attributeStore,
									mode : "local",
									width : 150,
									listWidth : "240",
									forceSelection : true,
									typeAhead : true,
									displayField : "displayname",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.Attribute"),
									hiddenName : "configid",
									allowBlank : false,
									valueField : "configid",
									emptyText : WtfGlobal
											.getLocaleText("hrms.masterconf.SelectanAttribute")
								});
						this.mastersm = new Wtf.grid.CheckboxSelectionModel();
						this.mastercm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.MasterRecord"),
											dataIndex : "masterdata",
											editor : new Wtf.form.TextField(
													{
														allowBlank : false,
														maxLength : 100,
														items : [ {
															text : WtfGlobal
																	.getLocaleText("hrms.common.delete"),
															tooltip : {
																title : WtfGlobal
																		.getLocaleText("hrms.common.delete"),
																text : WtfGlobal
																		.getLocaleText("hrms.common.Clicktodeleterecord")
															}
														} ]
													})
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "status",
											renderer : function(F, C, A, E, D,
													B) {
												if (F == "1") {
													return WtfGlobal
															.getLocaleText("hrms.common.Active")
												} else {
													return WtfGlobal
															.getLocaleText("hrms.common.Inactive")
												}
											},
											hidden : true
										} ]);
						this.masterReader = new Wtf.data.Record.create([ {
							name : "masterid"
						}, {
							name : "masterdata"
						}, {
							name : "status"
						} ]);
						this.masterds = new Wtf.data.Store({
							url : Wtf.req.base + "hrms.jsp",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.masterReader)
						});
						this.masterWin = new Wtf.Window(
								{
									id : "master" + this.id,
									title : WtfGlobal
											.getLocaleText("hrms.common.MasterRecord"),
									layout : "fit",
									iconCls : "winicon",
									modal : true,
									height : 400,
									width : 600,
									scope : this,
									items : [ this.poppanel = new Wtf.Panel(
											{
												id : "masterpanel" + this.id,
												layout : "fit",
												cls : "backcolor",
												border : false,
												tbar : [
														this.attributeCombo,
														"-",
														WtfGlobal
																.getLocaleText("hrms.common.NewRecord")
																+ ": ",
														this.masterText = new Wtf.form.TextField(
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.common.NewMasterRecord"),
																	anchor : "95%",
																	maxLength : 60,
																	id : this.id
																			+ "masterText"
																}),
														"-",
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.add"),
															tooltip : {
																title : WtfGlobal
																		.getLocaleText("hrms.common.add"),
																text : WtfGlobal
																		.getLocaleText("hrms.common.Clicktoaddnewrecord")
															},
															handler : function() {
																Wtf.Ajax
																		.request({
																			url : Wtf.req.base
																					+ "hrms.jsp",
																			method : "POST",
																			params : {
																				flag : 215,
																				masterid : "",
																				configid : this.attributeCombo
																						.getValue(),
																				masterdata : this.masterText
																						.getValue()
																			},
																			success : function(
																					A,
																					B) {
																				this.masterText
																						.setValue("");
																				this.masterds
																						.reload();
																				this.cloneStore
																						.load({
																							params : {
																								flag : 213
																							}
																						})
																			},
																			scope : this
																		})
															},
															scope : this
														},
														"-",
														this.delmaster = new Wtf.Toolbar.Button(
																{
																	text : WtfGlobal
																			.getLocaleText("hrms.common.delete"),
																	disabled : true,
																	tooltip : {
																		title : WtfGlobal
																				.getLocaleText("hrms.common.delete"),
																		text : WtfGlobal
																				.getLocaleText("hrms.common.Clicktodeleterecord")
																	},
																	handler : function() {
																		this
																				.delConfig(false)
																	},
																	scope : this
																}) ],
												items : [ this.addmaster = new Wtf.Panel(
														{
															id : "addmaster"
																	+ this.id,
															layout : "fit",
															border : false,
															items : [ this.masterGrid = new Wtf.grid.EditorGridPanel(
																	{
																		id : "mastergrid"
																				+ this.id,
																		store : this.masterds,
																		sm : this.mastersm,
																		cm : this.mastercm,
																		border : false,
																		clicksToEdit : 1,
																		viewConfig : {
																			forceFit : true
																		}
																	}) ]
														}) ]
											}) ]
								});
						this.mastersm.on("selectionchange", this.handleBttns,
								this);
						this.masterWin.show();
						this.attributeCombo.on("select", this.masterload, this);
						this.masterGrid.on("afteredit", this.roleAfterEdit,
								this);
						this.masterds.on("loadException", this.masteronload,
								this)
					},
					handleBttns : function(A) {
						this.delmaster.disable();
						if (A.getCount() > 0) {
							this.delmaster.enable()
						} else {
							this.delmaster.disable()
						}
					},
					addConfig : function(A) {
						this.win1 = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.masterconf.Config"),
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									modal : true,
									height : 255,
									width : 450,
									scope : this,
									buttons : [
											{
												text : A ? WtfGlobal
														.getLocaleText("hrms.common.add")
														: WtfGlobal
																.getLocaleText("hrms.common.Update"),
												id : "btnsave",
												handler : function() {
													if (this.qType1.isValid()
															&& this.quesField
																	.isValid()
															&& this.save) {
														var B = Wtf
																.get("btnsave");
														B.findParent("table").className = "x-btn-wrap x-btn x-item-disabled";
														this.save = false;
														Wtf.Ajax
																.requestEx(
																		{
																			method : "POST",
																			url : "CustomCol/addConfigType.do",
																			params : {
																				flag : 214,
																				configid : A ? "config"
																						: this.sm
																								.getSelected()
																								.get(
																										"configid"),
																				formtype : this.qType1
																						.getValue(),
																				fieldname : this.quesField
																						.getValue(),
																				blockemployees : this.blockemployees
																						.getValue()
																			}
																		},
																		this,
																		function(
																				C,
																				D) {
																			if (C.success == "msg") {
																				var F = C.comboTitle;
																				var E = C.msg;
																				msgBoxShow(
																						[
																								F,
																								E ],
																						Wtf.MessageBox.INFO)
																			} else {
																				msgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.success"),
																								(A ? WtfGlobal
																										.getLocaleText("hrms.masterconf.Configoptionaddedsuccessfully")
																										: WtfGlobal
																												.getLocaleText("hrms.masterconf.Configoptioneditedsuccessfully")) ],
																						Wtf.MessageBox.INFO)
																			}
																			this.win1
																					.close();
																			this.save = true;
																			this.ds
																					.load()
																		},
																		function() {
																			msgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.error"),
																							WtfGlobal
																									.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
																					Wtf.MessageBox.ERROR);
																			this.save = true;
																			B
																					.findParent("table").className = "x-btn-wrap x-btn"
																		})
													} else {
														calMsgBoxShow(5, 0)
													}
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.win1.close()
												}
											} ],
									items : [ this.pPanel = new Wtf.Panel(
											{
												layout : "fit",
												border : false,
												items : this.inP = new Wtf.Panel(
														{
															layout : "border",
															border : false,
															items : [
																	{
																		region : "north",
																		border : false,
																		height : 90,
																		bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
																		html : getHeader(
																				A ? "images/add-config.jpg"
																						: "images/edit-config.jpg",
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Config"),
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Selectaconfigtype"))
																	},
																	{
																		region : "center",
																		layout : "fit",
																		bodyStyle : "background:#f1f1f1;",
																		border : false,
																		items : [ this.addForm = new Wtf.form.FormPanel(
																				{
																					url : "jspfiles/admin/feedback.jsp",
																					region : "center",
																					bodyStyle : "padding: 10px;",
																					border : false,
																					labelWidth : 175,
																					height : 100,
																					buttonAlign : "right",
																					items : [
																							this.qType1 = new Wtf.form.ComboBox(
																									{
																										valueField : "id",
																										displayField : "name",
																										store : this.typeStore1,
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Applyto")
																												+ "*",
																										editable : false,
																										value : A ? null
																												: (this.sm
																														.getSelected()
																														.get("formtype")),
																										allowBlank : false,
																										anchor : "95%",
																										mode : "local",
																										triggerAction : "all",
																										selectOnFocus : true,
																										emptyText : WtfGlobal
																												.getLocaleText("hrms.masterconf.ApplyConfig")
																									}),
																							this.quesField = new Wtf.form.TextField(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Fieldname")
																												+ "*",
																										scope : this,
																										anchor : "95%",
																										allowBlank : false,
																										name : "question",
																										value : A ? null
																												: (this.sm
																														.getSelected()
																														.get("fieldname")),
																										maxLength : 256
																									}),
																							this.blockemployees = new Wtf.form.Checkbox(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.admin.block.employees.edit.details")
																												+ "  ",
																										name : "blockemployees"
																									}) ]
																				}) ]
																	} ]
														})
											}) ]
								});
						this.win1.show();
						this.qType1.clearInvalid();
						this.quesField.clearInvalid();
						this.blockemployees
								.setValue(A ? false : ((this.sm.getSelected()
										.get("blockemployees")) == 1 ? true
										: false))
					},
					delConfig : function(A) {
						Wtf.Msg
								.show({
									title : (A == true) ? WtfGlobal
											.getLocaleText("hrms.common.confirm")
											: WtfGlobal
													.getLocaleText("hrms.masterconf.DeleteMaster"),
									msg : WtfGlobal
											.getLocaleText("hrms.common.SelecteddatawillbedeletedDoyouwanttocontinue"),
									buttons : Wtf.Msg.YESNO,
									fn : (A == true) ? this.confirmDelete
											: this.deletemaster,
									scope : this,
									icon : Wtf.MessageBox.QUESTION
								})
					},
					deletemaster : function(obj) {
						if (obj == "yes") {
							var delid = [];
							var tempdel = this.mastersm.getSelections();
							for ( var i = 0; i < this.mastersm.getSelections().length; i++) {
								delid
										.push(this.masterGrid.getSelections()[i].data["masterid"])
							}
							var delidArr = Wtf.encode(delid);
							Wtf.Ajax
									.requestEx(
											{
												url : "CustomCol/deleteConfig.do",
												params : {
													delid : delidArr,
													mode : "master",
													flag : 217
												},
												method : "POST"
											},
											this,
											function(response, options) {
												var responseObj = eval("("
														+ response + ")");
												if (responseObj.success == "msg") {
													var title = responseObj.title;
													var msg = responseObj.msg;
													msgBoxShow([ title, msg ],
															Wtf.MessageBox.INFO)
												} else {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.masterconf.Masterdatadeletedsuccessfully") ],
															Wtf.MessageBox.INFO)
												}
												this.masterds.reload()
											},
											function() {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
														Wtf.MessageBox.ERROR)
											})
						}
					},
					confirmDelete : function(obj) {
						if (obj == "yes") {
							var delid = [];
							for ( var i = 0; i < this.sm.getSelections().length; i++) {
								delid
										.push(this.grid.getSelections()[i].data["configid"])
							}
							var delidArr = Wtf.encode(delid);
							Wtf.Ajax
									.requestEx(
											{
												url : "CustomCol/deleteConfig.do",
												params : {
													delid : delidArr,
													mode : "config",
													flag : 217
												},
												method : "POST"
											},
											this,
											function(response) {
												var respobj = eval("("
														+ response + ")");
												if (respobj.success) {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.masterconf.Configoptiondeletedsuccessfully") ],
															Wtf.MessageBox.INFO);
													this.ds.reload()
												}
											}, function() {
												calMsgBoxShow(27, 1)
											})
						}
					},
					disableBttns : function(A) {
						if (A.getCount() > 1) {
							this.delC.enable();
							this.editC.disable()
						} else {
							if (A.getCount() == 1) {
								this.editC.enable();
								this.delC.enable()
							} else {
								this.delC.disable();
								this.editC.disable()
							}
						}
					},
					roleAfterEdit : function(e) {
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "hrms.jsp",
							method : "POST",
							params : {
								flag : 215,
								masterid : e.record.data.masterid,
								configid : this.attributeCombo.getValue(),
								masterdata : e.value
							}
						}, this, function(response, e) {
							var respobj = eval("(" + response + ")");
							if (respobj.success != null) {
								if (respobj.success == "msg") {
									var title = respobj.title;
									var msg = respobj.msg;
									msgBoxShow([ title, msg ],
											Wtf.MessageBox.INFO);
									this.masterds.reload()
								}
							}
						}, function() {
						})
					},
					masteronload : function() {
						this.masterds.removeAll()
					},
					masterload : function() {
						if (this.attributeCombo.getValue() == "coursetrainmode") {
							this.mastercm.setHidden(3, false)
						} else {
							this.mastercm.setHidden(3, true)
						}
						this.masterds.load({
							params : {
								flag : 216,
								configid : this.attributeCombo.getValue()
							}
						})
					},
					onRender : function(A) {
						Wtf.configAnyGrid.superclass.onRender.call(this, A)
					}
				});
Wtf.competencyEval = function(A) {
	Wtf.competencyEval.superclass.constructor.call(this, A);
	Wtf.form.Field.prototype.msgTarget = "side"
};
Wtf
		.extend(
				Wtf.competencyEval,
				Wtf.Panel,
				{
					layout : "fit",
					initComponent : function(A) {
						var B = this.getSaveButtons();
						this.tbar = B;
						B = this.getSaveButtonsBottom();
						this.bbar = B;
						Wtf.competencyEval.superclass.initComponent.call(this,
								A)
					},
					onRender : function(A) {
						Wtf.competencyEval.superclass.onRender.call(this, A);
						this.totalCompGap = 0;
						this.ctotalComp = 0;
						this.gtotalComp = 0;
						this.manratempty = true;
						this.userrec = new Wtf.data.Record.create([ {
							name : "appraisalid"
						}, {
							name : "username"
						}, {
							name : "managername"
						}, {
							name : "employeecomment"
						}, {
							name : "managercomment"
						}, {
							name : "userid"
						}, {
							name : "designation"
						}, {
							name : "designationid"
						}, {
							name : "salaryrec"
						}, {
							name : "newdesig"
						}, {
							name : "newdept"
						}, {
							name : "salaryinc"
						}, {
							name : "performance"
						}, {
							name : "managercompscore"
						}, {
							name : "employeecompscore"
						}, {
							name : "managergoalscore"
						}, {
							name : "employeegoalscore"
						}, {
							name : "managerid"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "appcycleid"
						}, {
							name : "managerstatus"
						}, {
							name : "isquestionemp"
						}, {
							name : "employeestatus"
						} ]);
						this.empnameStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisallist.pf",
									baseParams : {
										flag : 158,
										employee : this.employee
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.userrec),
									autoLoad : false
								});
						calMsgBoxShow(202, 4, true);
						this.ratingData = [
								[
										"1",
										"1 - "
												+ WtfGlobal
														.getLocaleText("hrms.performance.lowest") ],
								[ "2", 2 ],
								[ "3", 3 ],
								[ "4", 4 ],
								[
										"5",
										"5 - "
												+ WtfGlobal
														.getLocaleText("hrms.performance.highest") ] ];
						this.ratingStore = new Wtf.data.SimpleStore({
							fields : [ "id", "rating" ],
							data : this.ratingData
						});
						this.escore = new Wtf.form.NumberField({
							labelWidth : 110,
							readOnly : true,
							allowNegative : false,
							width : 200
						});
						this.mscore = new Wtf.form.NumberField({
							labelWidth : 110,
							readOnly : true,
							allowNegative : false,
							width : 200
						});
						this.gapscore = new Wtf.form.NumberField({
							labelWidth : 110,
							readOnly : true,
							allowNegative : false,
							width : 200
						});
						this.PersonalattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.performance.qualitative.appraisal"),
									frame : true,
									hidden : true,
									border : false,
									autoHeight : true,
									refid : this.profId,
									formtype : "Personal",
									id : this.id + "Personal",
									fetchmaster : true,
									chk : 1
								});
						this.empcompRate = new Wtf.form.ComboBox({
							store : this.ratingStore,
							displayField : "rating",
							valueField : "id",
							scope : this,
							mode : "local",
							selectOnFocus : true,
							typeAhead : true,
							allowBlank : false,
							triggerAction : "all"
						});
						this.empcompComment = new Wtf.form.TextField();
						if (this.read) {
							this.empcompRate = "";
							this.empcompComment = ""
						}
						this.mancompRate = new Wtf.form.ComboBox({
							store : this.ratingStore,
							displayField : "rating",
							valueField : "id",
							scope : this,
							mode : "local",
							selectOnFocus : true,
							typeAhead : true,
							allowBlank : false,
							triggerAction : "all"
						});
						this.mancompComment = new Wtf.form.TextField();
						if (this.modify) {
							this.mancompComment = "";
							this.mancompRate = ""
						}
						this.competencyArr = [
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.competency"),
									dataIndex : "cmptname",
									width : 150,
									sortable : true,
									renderer : function(B) {
										return WtfGlobal.commentRenderer(B)
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.competency.description"),
									dataIndex : "cmptdesc",
									width : 250,
									sortable : true,
									renderer : function(C) {
										var B = WtfGlobal.replaceAll(C, '"',
												"&#34;");
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
													+ B + '">' + C + "</pre>"
										}
										return '<div style="white-space:pre-wrap;" wtf:qtip="'
												+ B + '">' + C + "</div>"
									}
								} ];
						if (Wtf.cmpPref.weightage) {
							this.competencyArr
									.push({
										header : WtfGlobal
												.getLocaleText("hrms.performance.weightage"),
										dataIndex : "cmptwt",
										align : "right",
										sortable : true,
										renderer : WtfGlobal.numericPrecisionRenderer
									})
						}
						if (!this.employee) {
							this.competencyArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.appraiser.rating"),
												dataIndex : "manrat",
												width : 60,
												sortable : true,
												editor : this.mancompRate,
												renderer : Wtf
														.comboBoxRenderer(this.mancompRate)
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.appraiser.comment"),
												dataIndex : "mancompcomment",
												width : 250,
												sortable : true,
												editor : this.mancompComment,
												renderer : function(C) {
													var B = WtfGlobal
															.replaceAll(C, '"',
																	"&#34;");
													if (Wtf.isIE6 || Wtf.isIE7) {
														return '<pre style="word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;" wtf:qtip="'
																+ B
																+ '">'
																+ C
																+ "</pre>"
													}
													return '<div style="white-space:pre-wrap;" wtf:qtip="'
															+ B
															+ '">'
															+ C
															+ "</div>"
												}
											})
						}
						if (this.employee) {
							this.competencyArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.rating"),
												dataIndex : "emprat",
												width : 60,
												sortable : true,
												editor : this.empcompRate,
												renderer : Wtf
														.comboBoxRenderer(this.empcompRate)
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.comments"),
												dataIndex : "empcompcomment",
												width : 250,
												sortable : true,
												editor : this.empcompComment,
												renderer : function(B) {
													if (Wtf.isIE6 || Wtf.isIE7) {
														return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
																+ B
																+ '">'
																+ B
																+ "</pre>"
													}
													return "<div style='white-space:pre-wrap;' wtf:qtip=\""
															+ B
															+ '">'
															+ B
															+ "</div>"
												}
											})
						}
						this.competencycolCM = new Wtf.grid.ColumnModel(
								this.competencyArr);
						this.compRecord = new Wtf.data.Record.create([ {
							name : "cmptid"
						}, {
							name : "compid"
						}, {
							name : "cmptname"
						}, {
							name : "cmptwt"
						}, {
							name : "cmptdesc"
						}, {
							name : "emprat"
						}, {
							name : "empgap"
						}, {
							name : "manrat"
						}, {
							name : "mangap"
						}, {
							name : "mid"
						}, {
							name : "empcompcomment"
						}, {
							name : "mancompcomment"
						}, {
							name : "cmptnametemp"
						} ]);
						this.comptdataReader = new Wtf.data.KwlJsonReader1({
							root : "data"
						}, this.compRecord);
						this.comptstore = new Wtf.data.Store(
								{
									sortInfo : {
										field : "cmptname",
										direction : "ASC"
									},
									url : "Performance/Appraisal/getappraisalCompetencyFunction.pf",
									reader : this.comptdataReader,
									method : "POST"
								});
						this.comptstore
								.on(
										"load",
										function(C) {
											if (msgFlag == 1) {
												WtfGlobal.closeProgressbar()
											}
											if (this.question
													&& this.isSubmitted
													&& Wtf.cmpPref.competency) {
												this.helpTemplate9
														.overwrite(
																this.helpTextPanel.body,
																{});
												for ( var B = 0; B < this.comptstore.data.length; B++) {
													this.helpTemplate8
															.append(
																	this.helpTextPanel.body,
																	{
																		cmptnametemp : this.comptstore
																				.getAt(B).data.cmptname,
																		index : B + 1
																	})
												}
												this.helpTemplate10
														.append(
																this.helpTextPanel.body,
																{})
											}
										}, this);
						this.comptstore.on("loadexception", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.competencyGrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.comptstore,
									title : WtfGlobal
											.getLocaleText("hrms.performance.competency.evaluation"),
									cm : this.competencycolCM,
									cls : "gridWithUl",
									border : true,
									frame : false,
									hidden : true,
									height : 320,
									layout : "fit",
									autoScroll : true,
									split : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.performance.no.competency.assigned"))
									},
									clicksToEdit : 1,
									bbar : [
											"->",
											WtfGlobal
													.getLocaleText("hrms.performance.average.rating"),
											this.escore ]
								});
						this.sm3 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.empgoalRate = new Wtf.form.ComboBox({
							store : this.ratingStore,
							displayField : "rating",
							valueField : "id",
							scope : this,
							mode : "local",
							selectOnFocus : true,
							typeAhead : true,
							allowBlank : false,
							triggerAction : "all"
						});
						this.empgoalComment = new Wtf.form.TextField();
						if (this.read) {
							this.empgoalRate = "";
							this.empgoalComment = ""
						}
						this.mangoalRate = new Wtf.form.ComboBox({
							store : this.ratingStore,
							displayField : "rating",
							valueField : "id",
							scope : this,
							mode : "local",
							selectOnFocus : true,
							typeAhead : true,
							allowBlank : false,
							triggerAction : "all"
						});
						this.mangoalComment = new Wtf.form.TextField();
						if (this.modify) {
							this.mangoalRate = "";
							this.mangoalComment = ""
						}
						this.goalArr = [
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.goals"),
									dataIndex : "gname",
									sortable : true,
									align : "left",
									renderer : function(B) {
										return '<div wtf:qtip="' + B + '">' + B
												+ "</div>"
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.percent.completed"),
									dataIndex : "gcomplete",
									align : "right"
								} ];
						if (Wtf.cmpPref.weightage) {
							this.goalArr
									.push({
										header : WtfGlobal
												.getLocaleText("hrms.performance.goal.weightage"),
										dataIndex : "gwth",
										align : "right",
										sortable : true,
										hidden : (Wtf.cmpPref.weightage) ? false
												: true,
										renderer : WtfGlobal.numericPrecisionRenderer
									})
						}
						if (!this.employee) {
							this.goalArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.appraiser.rating"),
												dataIndex : "gmanrat",
												sortable : true,
												editor : this.mangoalRate,
												renderer : Wtf
														.comboBoxRenderer(this.mangoalRate)
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.appraiser.comment"),
												dataIndex : "mangoalcomment",
												hidden : (!this.employee) ? false
														: true,
												sortable : true,
												editor : this.mangoalComment,
												renderer : function(B) {
													return WtfGlobal
															.commentRenderer(B)
												}
											})
						}
						if (this.employee) {
							this.goalArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.rating"),
												dataIndex : "gemprat",
												sortable : true,
												editor : this.empgoalRate,
												renderer : Wtf
														.comboBoxRenderer(this.empgoalRate)
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.comments"),
												dataIndex : "empgoalcomment",
												sortable : true,
												editor : this.empgoalComment,
												renderer : function(B) {
													return '<div wtf:qtip="'
															+ B + '">' + B
															+ "</div>"
												}
											});
							this.goalArr
									.push({
										header : WtfGlobal
												.getLocaleText("hrms.common.assigned.by"),
										dataIndex : "assignedby",
										sortable : true
									})
						}
						this.goalcolCM = new Wtf.grid.ColumnModel(this.goalArr);
						this.GoalRecord = new Wtf.data.Record.create([ {
							name : "gid"
						}, {
							name : "goalid"
						}, {
							name : "gname"
						}, {
							name : "gwth"
						}, {
							name : "gemprat"
						}, {
							name : "gmanrat"
						}, {
							name : "empgoalcomment"
						}, {
							name : "mangoalcomment"
						}, {
							name : "assignedby"
						}, {
							name : "goalapprid"
						}, {
							name : "gcomplete"
						} ]);
						this.dataReader = new Wtf.data.KwlJsonReader1({
							root : "data"
						}, this.GoalRecord);
						this.goalstore = new Wtf.data.Store({
							url : Wtf.req.base + "hrms.jsp",
							reader : this.dataReader,
							method : "POST"
						});
						this.goalGrid = new Wtf.grid.EditorGridPanel(
								{
									width : "100%",
									store : this.goalstore,
									title : WtfGlobal
											.getLocaleText("hrms.performance.goal.evaluation"),
									cm : this.goalcolCM,
									sm : this.sm3,
									border : true,
									frame : false,
									layout : "fit",
									hidden : true,
									height : 320,
									autoScroll : true,
									split : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.performance.my.goal.grid.msg"))
									},
									clicksToEdit : 1,
									bbar : [
											"->",
											WtfGlobal
													.getLocaleText("hrms.performance.average.rating"),
											this.mscore ]
								});
						this.apprec = new Wtf.data.Record.create([ {
							name : "appcycleid"
						}, {
							name : "appcycle"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "substart"
						}, {
							name : "currentFlag"
						} ]);
						this.appTypeStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisalcycleform.pf",
									baseParams : {
										flag : 168,
										employee : this.employee
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.apprec),
									autoLoad : false
								});
						this.appTypeStore.load({
							params : {
								grouper : "appraiseothers"
							}
						});
						this.appTypeStore
								.on(
										"load",
										function() {
											var B;
											this.competencyGrid.hide();
											if (this.apptype !== undefined
													&& this.apptype != "") {
												this.appTypeCombo
														.setValue(this.apptype);
												B = this.appTypeStore.find(
														"appcycleid",
														this.apptype)
											} else {
												B = this.appTypeStore.findBy(
														this.findrecord, this)
											}
											if (B != -1) {
												this.appTypeCombo
														.setValue(this.appTypeStore
																.getAt(B)
																.get(
																		"appcycleid"));
												this.startdate
														.setValue(this.appTypeStore
																.getAt(B)
																.get(
																		"startdate"));
												this.enddate
														.setValue(this.appTypeStore
																.getAt(B)
																.get("enddate"));
												this.nochange = B
											}
											if (this.appTypeStore.getCount() == 0) {
														this.appTypeCombo.emptyText = WtfGlobal
																.getLocaleText("hrms.performance.no.appraisal.initiated"),
														this.appTypeCombo
																.reset()
											}
											if (this.onsubmitflag == 1
													|| this.onsubmitflag == 2) {
												this.appTypeCombo
														.setValue(this.appTypeStore
																.getAt(
																		this.appstoreind)
																.get(
																		"appcycleid"));
												this.nochange = this.appstoreind
											}
											this.empnameStore
													.load({
														params : {
															appcylid : this.appTypeCombo
																	.getValue()
														}
													});
											if (this.employee) {
												this.loademployeestores()
											}
											this.printbtn.setDisabled(true);
											this.pdfbtn.setDisabled(true)
										}, this);
						this.appTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "appcycleid",
									displayField : "appcycle",
									store : this.appTypeStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle"),
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle") + " *"),
									width : 200,
									typeAhead : true
								});
						this.appTypeCombo.on("select", function(C, B, D) {
							if (this.nochange == D) {
								return
							}
							this.nochange = D;
							this.nochange2 = null;
							this.empId.setValue("");
							this.startdate.setValue(B.data.startdate);
							this.enddate.setValue(B.data.enddate);
							this.managerName.setValue("");
							this.desig.setValue("");
							this.ecomments.setValue("");
							this.mcomments.setValue("");
							this.gapscore.setValue("");
							this.mscore.setValue(0);
							this.escore.setValue(0);
							this.newDesignation.setValue("");
							this.newDepartment.setValue("");
							this.salaryIncrement.setValue("");
							this.perrat.setValue();
							this.goalstore.removeAll();
							this.comptstore.removeAll();
							this.empnameStore.load({
								params : {
									appcylid : this.appTypeCombo.getValue()
								}
							});
							this.enableDisableSaveButtons(false);
							this.competencyGrid.hide();
							this.PersonalattrPanel.hide();
							this.goalGrid.hide();
							if (this.employee) {
								if (Wtf.cmpPref.goal) {
									this.goalGrid.show()
								}
							}
							if (B.json.substart == 2) {
								this.helpTemplate5
										.overwrite(this.helpTextPanel.body);
								this.goalGrid.hide()
							}
							this.doLayout()
						}, this);
						this.empId = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employee.name"),
									labelWidth : 110,
									mode : "local",
									store : this.empnameStore,
									displayField : "username",
									valueField : "appraisalid",
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									width : 200,
									listeners : {
										scope : this,
										select : function(D, C, B) {
											if (this.nochange2 == B) {
												return
											}
											if (C.data.isquestionemp == "true") {
												this.question = true
											} else {
												this.question = false
											}
											this.nochange2 = B;
											this.employeeSelect(C)
										}
									}
								});
						this.managerName = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.appraiser.name"),
									labelWidth : 110,
									mode : "local",
									store : this.empnameStore,
									displayField : "managername",
									valueField : "appraisalid",
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									width : 200,
									listeners : {
										scope : this,
										select : function(C, B) {
											this.employeeSelect(B)
										}
									}
								});
						this.desig = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.designation"),
							labelWidth : 110,
							disabled : true,
							width : 200
						});
						this.apprMan = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.appraiser.name"),
									labelWidth : 110,
									disabled : true,
									width : 200
								});
						this.startdate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.form"),
							labelSeparator : "",
							format : "m/d/Y",
							width : 100,
							disabled : true
						});
						this.enddate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.to"),
							format : "m/d/Y",
							width : 100,
							labelSeparator : "",
							disabled : true
						});
						this.datePanel = new Wtf.Panel(
								{
									width : 800,
									frame : false,
									border : false,
									layout : "column",
									items : [
											{
												width : 350,
												frame : false,
												border : false,
												labelWidth : 30,
												layout : "column",
												items : [
														{
															frame : false,
															border : false,
															layout : "form",
															items : [ new Wtf.form.LabelField(
																	{
																		value : (WtfGlobal
																				.getLocaleText("hrms.performance.appraisal.cycle.period") + ":"),
																		width : 206,
																		style : "font-size:14px"
																	}) ]
														},
														{
															frame : false,
															border : false,
															layout : "form",
															items : [ this.startdate ]
														} ]
											}, {
												width : 350,
												frame : false,
												border : false,
												layout : "form",
												labelWidth : 15,
												labelSeparator : "",
												items : [ this.enddate ]
											} ]
								});
						this.salaryY = new Wtf.form.Radio(
								{
									inputValue : "yes",
									name : "salary",
									boxLabel : WtfGlobal
											.getLocaleText("hrms.common.yes"),
									checked : false,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.promotion.recommendation"),
									labelSeparator : ""
								});
						this.salaryN = new Wtf.form.Radio({
							inputValue : "no",
							name : "salary",
							checked : true,
							boxLabel : WtfGlobal
									.getLocaleText("hrms.common.no"),
							labelSeparator : ""
						});
						this.salaryPanel = new Wtf.Panel({
							width : 800,
							frame : false,
							border : false,
							layout : "column",
							items : [ {
								width : 300,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.salaryY ]
							}, {
								width : 300,
								frame : false,
								border : false,
								layout : "form",
								labelWidth : 10,
								labelSeparator : " ",
								items : [ this.salaryN ]
							} ]
						});
						this.perrat = new Wtf.form.FnComboBox(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.performance.rating") + "*"),
									name : "prate",
									allowBlank : false,
									store : Wtf.prat,
									displayField : "name",
									valueField : "id",
									selectOnFocus : true,
									width : 200,
									triggerAction : "all",
									editable : false,
									mode : "local",
									addNewFn : this.addPerformanceRating
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(13,
													Wtf.prat, "Add")
										},
										scope : this
									}) ]
								});
						if (!Wtf.StoreMgr.containsKey("prat")) {
							Wtf.prat.on("load", function() {
								if (this.prating != null) {
									this.perrat.setValue(this.prating)
								}
							}, this);
							Wtf.prat.load();
							Wtf.StoreMgr.add("prat", Wtf.prat)
						} else {
							if (this.prating != null) {
								this.perrat.setValue(this.prating)
							}
						}
						this.tempDesigStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, new Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "name"
							} ])),
							autoLoad : false
						});
						this.newDesigStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, new Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "name"
							} ])),
							autoLoad : false
						});
						this.newDesignation = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.designation"),
									store : this.newDesigStore,
									anchor : "50.5%",
									mode : "local",
									hiddenName : "name",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true
								});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore
									.on(
											"load",
											function() {
												this.tempDesigStore
														.loadData(Wtf.desigStore.reader.jsonData);
												WtfGlobal.closeProgressbar()
											}, this);
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.tempDesigStore
									.loadData(Wtf.desigStore.reader.jsonData);
							WtfGlobal.closeProgressbar()
						}
						this.newDepartment = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.department"),
									store : Wtf.depStore,
									mode : "local",
									anchor : "50.5%",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true
								});
						if (!Wtf.StoreMgr.containsKey("dep")) {
							Wtf.depStore.on("load", function() {
								this.newDepartment.setValue(this.newdepartment)
							}, this);
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore)
						} else {
							this.newDepartment.setValue(this.newdepartment)
						}
						this.salaryIncrement = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.salary.increment")
											+ "(%)",
									labelWidth : 110,
									width : 200
								});
						this.salaryDetails = new Wtf.Panel({
							width : 800,
							frame : false,
							border : false,
							layout : "form",
							hidden : true,
							items : [ this.newDepartment, this.newDesignation ]
						});
						if (WtfGlobal
								.CmpEnableDisable(Wtf.subCode, Wtf.payroll)) {
							this.salaryDetails.add(this.salaryIncrement)
						}
						this.itemarray = [];
						if (this.employee) {
							this.itemarray.push(this.appTypeCombo,
									this.datePanel)
						} else {
							this.itemarray.push(this.appTypeCombo, this.empId,
									this.datePanel, this.desig);
							if (Wtf.cmpPref.promotionrec) {
								this.itemarray.push(this.perrat,
										this.salaryPanel, this.salaryDetails)
							}
						}
						this.compEvalForm1 = new Wtf.form.FormPanel({
							frame : false,
							labelWidth : 200,
							autoHeight : true,
							id : "competencyval",
							columnWidth : 0.5,
							cls : "visibleDisabled",
							border : false,
							style : "padding-top:20px",
							defaultType : "textfield",
							items : this.itemarray
						});
						this.commentArr = [];
						this.ecomments = new Wtf.ux.TextArea(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.overall.self.comments") + " *"),
									labelWidth : 110,
									disabled : this.read,
									allowaBlank : false,
									maxLength : 1024,
									width : 230,
									height : 150
								});
						this.mcomments = new Wtf.ux.TextArea(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.overall.appraiser.comments") + " *"),
									labelWidth : 110,
									disabled : this.modify,
									maxLength : 1024,
									allowaBlank : false,
									width : 230,
									height : 150
								});
						if (this.employee) {
							this.commentArr.push(this.ecomments)
						} else {
							this.commentArr.push(this.mcomments)
						}
						this.compEvalForm2 = new Wtf.form.FormPanel({
							frame : false,
							border : false,
							columnWidth : 0.5,
							cls : "visibleDisabled",
							hidden : (Wtf.cmpPref.overallcomments) ? false
									: true,
							autoHeight : true,
							labelWidth : 200,
							style : "padding-top:20px",
							items : this.commentArr
						});
						this.appraisalArr = [];
						this.southht = true;
						if (Wtf.cmpPref.goal && Wtf.cmpPref.competency) {
							this.appraisalArr
									.push(
											{
												layout : "fit",
												border : false,
												frame : false,
												style : "padding:5px;background:rgb(241,241,241);",
												items : this.competencyGrid
											},
											{
												layout : "fit",
												border : false,
												frame : false,
												style : "padding:5px;background:rgb(241,241,241);",
												items : this.PersonalattrPanel
											},
											{
												id : "southgoalpanel" + this.id,
												layout : "fit",
												border : false,
												frame : false,
												style : "padding:5px;background:rgb(241,241,241);",
												items : this.goalGrid
											})
						} else {
							if (Wtf.cmpPref.goal && !Wtf.cmpPref.competency) {
								this.appraisalArr
										.push({
											layout : "fit",
											border : false,
											frame : false,
											style : "padding:5px;background:rgb(241,241,241);",
											items : this.goalGrid
										})
							} else {
								if (!Wtf.cmpPref.goal && Wtf.cmpPref.competency) {
									this.appraisalArr
											.push(
													{
														layout : "fit",
														border : false,
														frame : false,
														style : "padding:5px;background:rgb(241,241,241);",
														items : this.competencyGrid
													},
													{
														layout : "fit",
														border : false,
														frame : false,
														style : "padding:5px;background:rgb(241,241,241);",
														items : this.PersonalattrPanel
													})
								} else {
									this.southht = false;
									this.layout = "fit";
									this.appraisalArr
											.push({
												layout : "fit",
												border : false,
												style : "padding:5px 50px 5px 50px;background:rgb(241,241,241);",
												frame : false
											})
								}
							}
						}
						this.helpTextPanel = new Wtf.Panel({
							columnWidth : 0.99,
							border : false,
							frame : false
						});
						this.helpTemplateKrawler = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.instructions.to.fill.job.card")
										+ ":<br/><ol style='list-style:decimal inside;padding-left:20px;'><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.fill.self.evaluation.card")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.see.list.attributes.need.keep.in.mind.rating.yourself")
										+ ":<ul style='list-style:circle inside;padding-left:20px;'><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.q.quality")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.tu.technical.understanding")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.ti.team.initiatives")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.ac.analytical.capability")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.c.communication")
										+ "</li></ul></li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.each.element.rated.to.constructs.scale.one.five")
										+ ":<ul style='list-style:circle inside;padding-left:20px;'><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.strongly.disagree.1")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.disagree.2")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.undecided.3")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.agree.4")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.strongly.agree.5")
										+ "</li></ul></li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.specific.in.your.comments")
										+ "</li><li>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.results.of.your.evaluation")
										+ "</li></ol></span></b>");
						this.helpTemplate1 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.instructions")
										+ ":<br/>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraisal.instructions.1")
										+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraisal.instructions.2")
										+ "</span></b>");
						this.helpTemplate2 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraisal.already.submitted")
										+ "</span></b>");
						this.helpTemplate3 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.please.select.employee")
										+ "</span></b>");
						this.helpTemplate4 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.no.employee.select")
										+ "</span></b>");
						this.helpTemplate5 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraisal.submission.already.ended")
										+ "</span></b>");
						this.helpTemplate6 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraisal.submission.not.yet.begun")
										+ "</span></b>");
						this.helpTemplate7 = new Wtf.Template(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.select.appraisal.cycle")
										+ "</span></b>");
						this.helpTemplate8 = new Wtf.XTemplate(
								"<b><span style='margin-left:30px;font-size:1.1em;'>{index}. {cmptnametemp}</span></b><br/>");
						this.helpTemplate9 = new Wtf.XTemplate(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.instructions")
										+ ":<br/>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraiser.instructions.1")
										+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraiser.instructions.2")
										+ "<br/></span></b>");
						this.helpTemplate10 = new Wtf.XTemplate(
								"<b><span style='font-size:1.1em;'>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraiser.instructions.3")
										+ "<br/>"
										+ WtfGlobal
												.getLocaleText("hrms.performance.appraiser.instructions.4")
										+ "</span></b>");
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									autoHeight : true,
									bodyStyle : "margin:5px 50px 5px 50px;background:rgb(241,241,241);",
									border : false,
									frame : false,
									layout : "column",
									items : [
											{
												frame : false,
												columnWidth : 0.5,
												autoHeight : true,
												border : false,
												items : [ this.compEvalForm1 ]
											},
											{
												autoHeight : true,
												frame : false,
												columnWidth : 0.5,
												border : false,
												style : "padding:0px;background:rgb(241,241,241);",
												items : [ this.compEvalForm2 ]
											}, this.helpTextPanel ]
								});
						this.compEvalpanel = new Wtf.Panel(
								{
									autoHeight : true,
									border : false,
									bodyStyle : "background:rgb(241,241,241);",
									items : [
											this.northPanel,
											{
												id : "southpanelcont" + this.id,
												border : false,
												frame : false,
												style : "padding:5px 50px 5px 50px;background:rgb(241,241,241);",
												items : this.appraisalArr
											} ]
								});
						this.on("activate", function() {
							if (this.compEvalpanel != null) {
								this.compEvalpanel.doLayout()
							}
						}, this);
						this.empnameStore
								.on(
										"load",
										function(C, B, E) {
											this.perrat.disable();
											this.salaryY.disable();
											this.perrat.clearInvalid();
											if (this.employee) {
												if (C.reader.jsonData.isquestionemp == "true") {
													this.competencyGrid.hide();
													this.question = true;
													var D = Wtf.getCmp(this.id
															+ "Personal");
													this.removeItems(D);
													this.PersonalattrPanel
															.show();
													this.goalGrid.show();
													this
															.getQuestionRequest(
																	C.reader.jsonData.desigid,
																	C.reader.jsonData,
																	false)
												} else {
													this.question = false;
													this.competencyGrid.show();
													this.goalGrid.show()
												}
											}
											if (this.empnameStore.getCount() == 0) {
												this
														.enableDisableSaveButtons(false);
														this.empId.emptyText = WtfGlobal
																.getLocaleText("hrms.performance.no.employee.select"),
														this.empId.reset();
												if (this.nochange == null
														|| this.nochange == undefined) {
													this.helpTemplate7
															.overwrite(this.helpTextPanel.body)
												} else {
													if (this.appTypeStore
															.getAt(
																	this.nochange)
															.get("substart") == 1) {
														this.helpTemplate6
																.overwrite(this.helpTextPanel.body)
													} else {
														if (this.appTypeStore
																.getAt(
																		this.nochange)
																.get("substart") == 2) {
															this.helpTemplate5
																	.overwrite(this.helpTextPanel.body)
														} else {
															this.helpTemplate4
																	.overwrite(this.helpTextPanel.body)
														}
													}
												}
												this.doLayout()
											} else {
														this.empId.emptyText = WtfGlobal
																.getLocaleText("hrms.performance.select.employee.list"),
														this.empId.reset();
												this.helpTemplate3
														.overwrite(this.helpTextPanel.body);
												this.doLayout()
											}
											if ((this.onsubmitflag == 1 || this.onsubmitflag == 2)
													&& this.empnameStore
															.getAt(this.empstoreind) != null) {
												this.empId
														.setValue(this.empnameStore
																.getAt(
																		this.empstoreind)
																.get(
																		"appraisalid"));
												if (this.onsubmitflag == 1) {
													this.changeEmptyText(0)
												} else {
													this.changeEmptyText(1)
												}
												this.nochange2 = this.empstoreind;
												this.onsubmitflag = 0
											}
										}, this);
						if (this.employee) {
							this.competencyGrid.on("afteredit",
									this.afterCompEditFunction, this);
							this.goalGrid.on("afteredit",
									this.afterGoalGridEditFunction, this);
							this.empnameStore.on("load", function() {
								if (this.employee) {
									this.loademployeestores()
								}
							}, this)
						} else {
							this.competencyGrid.on("afteredit",
									this.afterEditFunction, this);
							this.goalGrid.on("afteredit",
									this.afterGoalGridEdit, this);
							this.salaryY.on("check", function() {
								this.salaryN.checked = false;
								this.salaryDetails.show();
								this.doLayout()
							}, this);
							this.salaryN.on("check", function() {
								this.salaryY.checked = false;
								this.salaryDetails.hide();
								this.doLayout()
							}, this)
						}
						this.add(this.compEvalpanel);
						this.escore.setValue(0);
						this.mscore.setValue(0);
						if (this.viewappraisal) {
							this.appTypeCombo.setValue(this.apptype);
							this.empId.setValue(this.ename);
							this.desig.setValue(this.designation);
							this.apprMan.setValue(this.mname);
							this.ecomments.setValue(this.empcom);
							this.mcomments.setValue(this.mancom);
							this.escore.setValue(parseFloat(this.compscore)
									.toFixed(2));
							this.mscore.setValue(parseFloat(this.goalscore)
									.toFixed(2));
							this.gapscore
									.setValue(parseFloat(this.compgapscore)
											.toFixed(2));
							this.startdate.setValue(this.stdate);
							this.enddate.setValue(this.eddate);
							this.empId.disable();
							this.appTypeCombo.disable();
							this.mcomments.readOnly = true;
							this.ecomments.readOnly = true;
							this.setBtnStatus = true;
							this.enableDisableSaveButtons(false);
							this.perrat.disable();
							if (this.salaryrecommend == ("1" || 1)) {
								this.salaryY.checked = true;
								this.salaryN.checked = false;
								this.salaryDetails.show();
								this.salaryIncrement
										.setValue(this.salaryincrement);
								this.doLayout()
							} else {
								this.salaryY.checked = false;
								this.salaryN.checked = true
							}
							this.salaryIncrement.disable();
							this.salaryY.disable();
							this.salaryN.disable();
							this.newDesignation.disable();
							this.newDepartment.disable();
							this.storeLoad(this.aid, this.empid, this.desid)
						}
					},
					submitFunction : function(savedraft) {
						this.perfoFlag = false;
						this.partialFlag = false;
						this.confirmtext = "";
						this.confirmtitle = "";
						this.jsonCompetency = new Array();
						this.jsonQuestion = new Array();
						this.jsonGoal = new Array();
						if (savedraft) {
							this.confirmtext = WtfGlobal
									.getLocaleText("hrms.common.want.to.save.draft");
							this.confirmtitle = WtfGlobal
									.getLocaleText("hrms.common.save.as.draft")
						} else {
							this.confirmtext = WtfGlobal
									.getLocaleText("hrms.common.want.to.submit.draft");
							this.confirmtitle = WtfGlobal
									.getLocaleText("hrms.common.save.data")
						}
						if (this.employee) {
							if (!Wtf.cmpPref.partial) {
								if (this.ecomments.getValue() == ""
										&& !savedraft) {
									this.partialFlag = false
								} else {
									this.partialFlag = true
								}
							} else {
								this.partialFlag = true
							}
							this.perfoFlag = true;
							var appraisalid = "";
							for ( var i = 0; i < this.empnameStore.getCount(); i++) {
								appraisalid += this.empnameStore.getAt(i).get(
										"appraisalid")
										+ ","
							}
							this.appraisalid = appraisalid.substr(0,
									appraisalid.length - 1)
						} else {
							if (Wtf.cmpPref.promotionrec) {
								if (this.perrat.getValue() != "" || savedraft) {
									this.perfoFlag = true
								}
							} else {
								this.perfoFlag = true
							}
							if (!Wtf.cmpPref.partial) {
								if (this.mcomments.getValue() == ""
										&& !savedraft) {
									this.partialFlag = false
								} else {
									this.partialFlag = true
								}
							} else {
								this.partialFlag = true
							}
						}
						if (!this.partialFlag && Wtf.cmpPref.overallcomments) {
							calMsgBoxShow(179, 2);
							return
						}
						if (this.perfoFlag) {
							var rec;
							if (Wtf.cmpPref.competency) {
								if (!this.question) {
									for (i = 0; i < this.competencyGrid.store
											.getCount(); i++) {
										var data1 = {};
										rec = this.competencyGrid.store
												.getAt(i).data;
										data1["competencyid"] = rec.cmptid;
										data1["id"] = rec.compid;
										data1["mid"] = rec.mid;
										if (!this.employee) {
											if (rec.manrat == ""
													&& !Wtf.cmpPref.partial
													&& !savedraft) {
												calMsgBoxShow(178, 2);
												return
											}
											data1["compmanrate"] = rec.manrat;
											data1["compmancomment"] = rec.mancompcomment;
											data1["compmangap"] = 0
										} else {
											if (rec.emprat == ""
													&& !Wtf.cmpPref.partial
													&& !savedraft) {
												calMsgBoxShow(178, 2);
												return
											}
											data1["compemprate"] = rec.emprat;
											data1["compempcomment"] = rec.empcompcomment;
											data1["compempgap"] = 0
										}
										this.jsonCompetency.push(data1)
									}
								} else {
									for ( var i = 0; i < this.finalOutput.count; i++) {
										var ansStr = new Array();
										record = this.finalOutput.data[i];
										for ( var j = 0; j < record.qans; j++) {
											if ((Wtf.getCmp(
													record.qdescription + "ans"
															+ j).getValue()
													.trim()) == ""
													&& !Wtf.cmpPref.partial
													&& !savedraft) {
												calMsgBoxShow(184, 2);
												return
											}
											if (!Wtf.getCmp(
													record.qdescription + "ans"
															+ j).isValid()) {
												calMsgBoxShow(185, 2);
												return
											}
											var obj = {};
											obj["ans" + j] = Wtf.getCmp(
													record.qdescription + "ans"
															+ j).getValue();
											ansStr.push(obj)
										}
										this.jsonQuestion.push({
											quesid : record.qdescription,
											quesans : ansStr
										})
									}
								}
							}
							for (i = 0; i < this.goalGrid.store.getCount(); i++) {
								var data2 = {};
								rec = this.goalGrid.store.getAt(i).data;
								data2["goalid"] = rec.gid;
								data2["id"] = rec.goalid;
								if (!this.employee) {
									if (Wtf.cmpPref.goal) {
										if (rec.gmanrat == ""
												&& !Wtf.cmpPref.partial
												&& !savedraft) {
											calMsgBoxShow(178, 2);
											return
										}
									}
									data2["goalmancomment"] = rec.mangoalcomment;
									data2["goalmanrate"] = rec.gmanrat
								} else {
									if (Wtf.cmpPref.goal) {
										if (rec.gemprat == ""
												&& !Wtf.cmpPref.partial
												&& !savedraft) {
											calMsgBoxShow(178, 2);
											return
										}
									}
									data2["goalempcomment"] = rec.empgoalcomment;
									data2["goalapprid"] = rec.goalapprid;
									data2["goalemprate"] = rec.gemprat
								}
								this.jsonGoal.push(data2)
							}
							if (this.salaryY.getValue()) {
								this.salarychange = true;
								this.newdesig = this.newDesignation.getValue();
								this.newdept = this.newDepartment.getValue();
								this.salinc = this.salaryIncrement.getValue()
							} else {
								this.salarychange = false;
								this.newdesig = "";
								this.newdept = "";
								this.salinc = ""
							}
							Wtf.MessageBox
									.confirm(
											this.confirmtitle,
											this.confirmtext,
											function(btn) {
												if (btn != "yes") {
													return
												} else {
													calMsgBoxShow(200, 4, true);
													Wtf.Ajax
															.requestEx(
																	{
																		url : "Performance/Appraisal/appraisalFunction.pf",
																		params : {
																			flag : 159,
																			jsoncompetency : Wtf
																					.encode(this.jsonCompetency),
																			jsonqustion : Wtf
																					.encode(this.jsonQuestion),
																			jsongoal : Wtf
																					.encode(this.jsonGoal),
																			isquestion : this.question,
																			appraisalid : this.appraisalid,
																			employee : this.employee,
																			submitdate : new Date()
																					.format("Y-m-d"),
																			empcomment : this.ecomments
																					.getValue(),
																			mancomment : this.mcomments
																					.getValue(),
																			competencyscore : this.escore
																					.getValue(),
																			goalscore : this.mscore
																					.getValue(),
																			compgapscore : 0,
																			salarychange : this.salarychange,
																			newdesignation : this.newdesig,
																			newdepartment : this.newdept,
																			salaryincrement : this.salinc,
																			saveasDraft : savedraft,
																			performance : this.perrat
																					.getValue(),
																			appcycle : this.appTypeCombo
																					.getValue()
																		}
																	},
																	this,
																	function(
																			response) {
																		var res = eval("("
																				+ response
																				+ ")");
																		if (res.message) {
																			(savedraft) ? calMsgBoxShow(
																					176,
																					0)
																					: calMsgBoxShow(
																							175,
																							0)
																		} else {
																			calMsgBoxShow(
																					177,
																					2)
																		}
																		this.appstoreind = this.nochange;
																		this.empstoreind = this.nochange2;
																		if (savedraft) {
																			this.onsubmitflag = 1
																		} else {
																			this.onsubmitflag = 2
																		}
																		this.empnameStore
																				.load({
																					params : {
																						appcylid : this.appTypeCombo
																								.getValue()
																					}
																				});
																		var a = Wtf
																				.getCmp("DSBMyWorkspaces");
																		if (a) {
																			a
																					.doSearch(
																							a.url,
																							"")
																		}
																	},
																	function() {
																	})
												}
												this.goalstore.reload()
											}, this)
						} else {
							this.perrat.markInvalid();
							calMsgBoxShow(28, 0)
						}
					},
					getQuestionRequest : function(designationid, rec, isMan) {
						Wtf.Ajax
								.requestEx(
										{
											url : "Performance/Competency/getCompetencyQuestion.pf",
											scope : this,
											params : {
												desig : designationid,
												employee : this.employee,
												submitstatus : (!isMan) ? rec.empsubmitstatus
														: rec.data.managerstatus,
												uid : (!isMan) ? ""
														: rec.data.userid,
												manid : (!isMan) ? ""
														: rec.data.managerid,
												appcycle : (!isMan) ? this.appTypeCombo
														.getValue()
														: rec.data.appcycleid
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											this.data1 = res;
											var noofq = res.count;
											this.finalOutput = res;
											var tempPan = new Wtf.Panel({
												layout : "table",
												autoHeight : true,
												cls : "appraisal-table",
												defaults : {
													bodyStyle : "padding:20px;"
												},
												layoutConfig : {
													columns : 2
												}
											});
											for ( var i = 0; i < noofq; i++) {
												var qcolwid = res.data[i].qtype == "50" ? 1
														: 2;
												tempPan
														.add(this.qmainpanel = new Wtf.Panel(
																{
																	colspan : qcolwid,
																	border : false,
																	id : this.id
																			+ "Personal"
																			+ i,
																	bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
																}));
												this.qmainpanel
														.add(this.quescontainer = new Wtf.Panel(
																{
																	border : false,
																	id : "qcontainer"
																			+ i,
																	style : "margin-right:5px;margin-bottom:5px;padding-right:5px;"
																}));
												this.quescontainer
														.add(new Wtf.Panel(
																{
																	id : "ques"
																			+ i,
																	scope : this,
																	html : "<div style='font-size:1.3em;width:98%'>"
																			+ res.data[i].qdesc
																			+ "</div>"
																}));
												var noofans = res.data[i].qans;
												for ( var j = 0; j < noofans; j++) {
													this.qmainpanel
															.add(new Wtf.form.FormPanel(
																	{
																		items : [ new Wtf.form.TextArea(
																				{
																					id : res.data[i].qdescription
																							+ "ans"
																							+ j,
																					scope : this,
																					maxLength : 10000,
																					hideLabel : noofans > 0 ? false
																							: true,
																					fieldLabel : "<span style='font-size:14px;'>"
																							+ (j + 1)
																							+ "</span>",
																					width : qcolwid == 1 ? "95%"
																							: "97.5%",
																					style : "padding:5px;font-size:14px"
																				}) ]
																	}))
												}
											}
											tempPan.doLayout();
											this.PersonalattrPanel.add(tempPan);
											this.PersonalattrPanel.doLayout();
											this.doLayout()
										}, function() {
										});
						Wtf.Ajax
								.requestEx(
										{
											url : "Performance/Competency/getQuestionAnswerForm.pf",
											scope : this,
											params : {
												appraisalid : this.empId
														.getValue(),
												employee : this.employee,
												appraisalcycid : this.appTypeCombo
														.getValue()
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											this.data2 = res;
											var ansdisable;
											if (this.employee) {
												ansdisable = this.ecomments.disabled
											} else {
												ansdisable = this.mcomments.disabled
											}
											if (Wtf.get(this.id + "Personal") != null) {
												var ansfields = Wtf
														.get(
																this.id
																		+ "Personal")
														.query(
																".x-form-textarea");
												for ( var cnt = 0; cnt < ansfields.length; cnt++) {
													ansfields[cnt].disabled = ansdisable
												}
											}
											for ( var i = 0; i < res.totalCount; i++) {
												for ( var j = 0; j < res.data[i].count; j++) {
													if (Wtf
															.getCmp(res.data[i].question
																	+ "ans" + j) != undefined) {
														Wtf
																.getCmp(
																		res.data[i].question
																				+ "ans"
																				+ j)
																.setValue(
																		res.data[i].answer[j])
													}
												}
											}
										}, function() {
										})
					},
					afterEditFunction : function(C) {
						var D;
						var A = this.comptstore.data.items[C.row].get("cmptwt");
						if (C.field == "manrat") {
							this.comptstore.data.items[C.row].set("manrat",
									C.record.get("manrat"));
							this.manratempty = true;
							if (this.competencyGrid.store.find("manrat", "") >= 0) {
								this.manratempty = true
							}
							for ( var B = 0; B < this.competencyGrid.store
									.getCount(); B++) {
								D = this.competencyGrid.store.getAt(B).data;
								if (D.manrat == NaN) {
									this.manratempty = false
								}
							}
							var E = 0;
							if (this.manratempty) {
								for (B = 0; B < this.competencyGrid.store
										.getCount(); B++) {
									D = this.competencyGrid.store.getAt(B).data;
									E = ((D.cmptwt) * (D.manrat)) + E
								}
								this.ctotalComp = E / 100;
								this.escore
										.setValue(this.ctotalComp.toFixed(2))
							}
						}
					},
					afterGoalGridEdit : function(B) {
						var C;
						this.goalwt = 0;
						for ( var A = 0; A < this.goalstore.getCount(); A++) {
							C = this.goalstore.getAt(A).data;
							this.goalwt = this.goalwt + C.gwth
						}
						if (B.field == "gmanrat") {
							this.goalstore.data.items[B.row].set("gmanrat",
									B.record.get("gmanrat"));
							this.manratempty = true;
							var A;
							var D = 0;
							for (A = 0; A < this.goalstore.getCount(); A++) {
								C = this.goalstore.getAt(A).data;
								if (C.gmanrat == NaN) {
									this.manratempty = false
								}
							}
							if (this.manratempty) {
								for (A = 0; A < this.goalstore.getCount(); A++) {
									C = this.goalGrid.store.getAt(A).data;
									D = (C.gwth * (C.gmanrat)) + D
								}
								this.gtotalComp = D / this.goalwt;
								this.mscore
										.setValue(this.gtotalComp.toFixed(2))
							}
						}
					},
					validEditFunction : function(B) {
						var A = this.comptstore.data.items[B.row].get("cmptwt");
						if (B.field == "emprat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
						if (B.field == "manrat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
					},
					validEditFunction1 : function(B) {
						var A = this.goalstore.data.items[B.row].get("gwth");
						if (B.field == "gemprat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
						if (B.field == "gmanrat" || B.value < 0) {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
					},
					resetForm : function() {
						this.appTypeCombo.setValue("");
						this.empId.setValue("");
						this.desig.setValue("");
						this.ecomments.setValue("");
						this.mcomments.setValue("");
						this.gapscore.setValue("");
						this.mscore.setValue(0);
						this.escore.setValue(0);
						this.startdate.setValue("");
						this.enddate.setValue("");
						this.newDesignation.setValue("");
						this.newDepartment.setValue("");
						this.salaryIncrement.setValue("");
						this.perrat.setValue();
						this.goalstore.removeAll();
						this.comptstore.removeAll()
					},
					afterCompEditFunction : function(C) {
						var D;
						var A = this.comptstore.data.items[C.row].get("cmptwt");
						if (C.field == "emprat") {
							this.comptstore.data.items[C.row].set("emprat'",
									C.record.get("emprat"));
							this.manratempty = true;
							for ( var B = 0; B < this.competencyGrid.store
									.getCount(); B++) {
								D = this.competencyGrid.store.getAt(B).data;
								if (D.emprat == NaN) {
									this.manratempty = false
								}
							}
							var E = 0;
							if (this.manratempty) {
								for (B = 0; B < this.competencyGrid.store
										.getCount(); B++) {
									D = this.competencyGrid.store.getAt(B).data;
									E = ((D.cmptwt) * (D.emprat)) + E
								}
								this.ctotalComp = E / 100;
								this.escore
										.setValue(this.ctotalComp.toFixed(2))
							}
						}
					},
					afterGoalGridEditFunction : function(B) {
						var C;
						this.goalwt = 0;
						for ( var A = 0; A < this.goalstore.getCount(); A++) {
							C = this.goalstore.getAt(A).data;
							this.goalwt = this.goalwt + C.gwth
						}
						if (B.field == "gemprat") {
							this.goalstore.data.items[B.row].set("gemprat",
									B.record.get("gemprat"));
							this.manratempty = true;
							var D = 0;
							for (A = 0; A < this.goalstore.getCount(); A++) {
								C = this.goalstore.getAt(A).data;
								if (C.gemprat == NaN) {
									this.manratempty = false
								}
							}
							if (this.manratempty) {
								for (A = 0; A < this.goalstore.getCount(); A++) {
									C = this.goalGrid.store.getAt(A).data;
									D = ((C.gwth) * (C.gemprat)) + D
								}
								this.gtotalComp = D / this.goalwt;
								this.mscore
										.setValue(this.gtotalComp.toFixed(2))
							}
						}
					},
					validCompEditFunction : function(B) {
						var A = this.comptstore.data.items[B.row].get("cmptwt");
						if (B.field == "emprat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
						if (B.field == "manrat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
					},
					validGoalEditFunction : function(B) {
						var A = this.goalstore.data.items[B.row].get("gwth");
						if (B.field == "gemprat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
						if (B.field == "gmanrat") {
							if (B.value > A || B.value < 0) {
								calMsgBoxShow(40, 1);
								return false
							}
						}
					},
					showFormElement : function(A) {
						A.container.up("div.x-form-item").dom.style.display = "block"
					},
					hideFormElement : function(A) {
						A.container.up("div.x-form-item").dom.style.display = "none"
					},
					removeItems : function(C) {
						if (C.items != undefined) {
							var B = C.items.length;
							for ( var A = 0; A < B; A++) {
								C.remove(C.items.items[0])
							}
						}
					},
					employeeSelect : function(D) {
						if (Wtf.cmpPref.goal) {
							this.goalGrid.show()
						}
						var B = Wtf.getCmp(this.id + "Personal");
						if (Wtf.cmpPref.competency) {
							this.removeItems(B)
						}
						if (this.question) {
							this.competencyGrid.hide();
							if (this.PersonalattrPanel) {
								this.PersonalattrPanel.show()
							}
						} else {
							if (Wtf.cmpPref.competency) {
								this.competencyGrid.show()
							}
							if (this.PersonalattrPanel) {
								this.PersonalattrPanel.hide()
							}
						}
						this.ecomments.setValue("");
						this.mcomments.setValue("");
						this.perrat.setValue("");
						this.appraisaltypeFlag = "false";
						this.appraisalstatusFlag = 0;
						if (this.employee) {
							this.appraisalid = this.managerName.getValue()
						} else {
							if (D.data.managerstatus == 1) {
								this.changeEmptyText(1)
							} else {
								this.changeEmptyText(0)
							}
							this.appraisalid = this.empId.getValue()
						}
						var A = D.data;
						if (A.appraisalid == this.appraisalid) {
							this.desig.setValue(A.designation);
							this.designationid = A.designationid;
							this.tempDesigStore.filterBy(function(E) {
								if (E.data.id == this.designationid) {
									return false
								}
								return true
							}, this);
							var C = this.tempDesigStore.getRange();
							this.newDesigStore.removeAll();
							this.newDesigStore.add(C);
							this.userid = A.userid;
							this.managerid = A.managerid;
							this.appcycleid = A.appcycleid;
							this.startdate.setValue(A.startdate);
							this.enddate.setValue(A.enddate);
							this.apprMan.setValue(A.managername);
							this.ecomments.setValue(A.employeecomment);
							this.mcomments.setValue(A.managercomment);
							if (A.performance != "") {
								this.perrat.setValue(A.performance)
							} else {
								if (Wtf.cmpPref.promotionrec) {
									this.perrat.clearValue()
								}
							}
							if (this.employee) {
								this.escore.setValue(A.employeecompscore);
								this.mscore.setValue(A.employeegoalscore)
							} else {
								this.escore.setValue(A.managercompscore);
								this.mscore.setValue(A.managergoalscore)
							}
							if (A.salaryrec == "1" || A.salaryrec == 1) {
								this.salaryY.setValue(true);
								this.salaryN.setValue(false);
								this.salaryDetails.show();
								this.newDesignation.setValue(A.newdesig);
								this.newDepartment.setValue(A.newdept);
								this.salaryIncrement.setValue(A.salaryinc);
								this.doLayout()
							} else {
								this.salaryY.setValue(false);
								this.salaryN.setValue(true);
								this.newDesignation.setValue("");
								this.newDepartment.setValue("");
								this.salaryIncrement.setValue("")
							}
						}
						if (A.salaryrec == "1" || A.salaryrec == 1) {
							this.salaryY.setValue(true);
							this.salaryN.setValue(false);
							this.salaryDetails.show();
							this.newDesignation.setValue(A.newdesig);
							this.newDepartment.setValue(A.newdept);
							this.salaryIncrement.setValue(A.salaryinc);
							this.doLayout()
						} else {
							this.salaryY.setValue(false);
							this.salaryN.setValue(true);
							this.newDesignation.setValue("");
							this.newDepartment.setValue("");
							this.salaryIncrement.setValue("")
						}
						if (this.isSubmitted) {
							this.salaryY.enable();
							this.salaryN.enable();
							this.newDesignation.enable();
							this.newDepartment.enable();
							this.salaryIncrement.enable()
						} else {
							this.salaryY.disable();
							this.salaryN.disable();
							this.newDesignation.disable();
							this.newDepartment.disable();
							this.salaryIncrement.disable()
						}
						this.storeLoad(this.appraisalid, this.userid,
								this.designationid, this.managerid,
								this.appcycleid);
						if (D.data.isquestionemp == "true") {
							this.question = true;
							this.getQuestionRequest(D.data.designationid, D,
									true)
						} else {
							this.question = false
						}
					},
					storeLoad : function(A, B, E, C, D) {
						this.appraisalids = A;
						if (Wtf.cmpPref.goal) {
							this.goalstore.load({
								params : {
									flag : 161,
									empid : B,
									appraisal : A,
									managerid : C,
									appcycleid : D,
									employee : this.employee
								}
							})
						}
						calMsgBoxShow(202, 4, true);
						this.comptstore.load({
							params : {
								flag : 160,
								desig : E,
								appraisal : A,
								employee : this.employee
							}
						})
					},
					setemployeeDetails : function() {
						var A;
						if (this.empnameStore.getCount() > 0) {
							A = this.empnameStore.getAt(0).data;
							this.appraisalid = A.appraisalid;
							this.empId.setValue(A.appraisalid);
							this.storeLoad(A.appraisalid, A.userid,
									A.designationid, A.appcycleid);
							this.ecomments.setValue(A.employeecomment);
							this.mcomments.setValue(A.managercomment);
							this.apprMan.setValue(A.managername);
							this.desig.setValue(A.designation)
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					},
					addDepartment : function() {
						WtfGlobal.showmasterWindow(7, Wtf.depStore, "Add")
					},
					validateSalary : function() {
						if (this.salaryIncrement.getValue() > 99
								|| this.salaryIncrement.getValue() < -99) {
							this.salaryIncrement.setValue("");
							calMsgBoxShow(164, 2)
						}
					},
					findrecord : function(A) {
						if (A.get("currentFlag") == "1") {
							return true
						} else {
							return false
						}
					},
					loademployeestores : function() {
						if (this.empnameStore.getCount() > 0) {
							this.enableDisableSaveButtons(true);
							this.appraisalids = "";
							this.appraisalid = "";
							this.designationid = "";
							var B = 0;
							var C = 0;
							for ( var A = 0; A < this.empnameStore.getCount(); A++) {
								this.appraisalids += this.empnameStore.getAt(A)
										.get("appraisalid")
										+ ","
							}
							if (this.empnameStore.getAt(0)
									.get("employeestatus") == 1) {
								this.changeEmptyText(1)
							} else {
								this.changeEmptyText(0)
							}
							this.designationid = this.empnameStore.getAt(0)
									.get("designationid");
							this.appraisalid = this.empnameStore.getAt(0).get(
									"appraisalid");
							this.appraisalids = this.appraisalids.substr(0,
									this.appraisalids.length - 1);
							B = this.empnameStore.getAt(0).get("employeedraft");
							C = this.empnameStore.getAt(0).get("managerdraft");
							this.ecomments.setValue(this.empnameStore.getAt(0)
									.get("employeecomment"));
							this.escore.setValue(this.empnameStore.getAt(0)
									.get("employeecompscore"));
							this.mscore.setValue(this.empnameStore.getAt(0)
									.get("employeegoalscore"));
							this.goalstore.load({
								params : {
									flag : 161,
									isemployee : true,
									appraisal : this.appraisalids
								}
							});
							calMsgBoxShow(202, 4, true);
							this.comptstore.load({
								params : {
									flag : 160,
									desig : this.designationid,
									appraisal : this.appraisalid,
									employeedraft : B,
									managerdraft : C,
									employee : this.employee
								}
							})
						} else {
							if (!this.appTypeCombo.value) {
								this.changeEmptyText(3)
							} else {
								if (this.appTypeStore.getAt(this.nochange).get(
										"substart") == 1) {
									this.changeEmptyText(4)
								} else {
									if (this.appTypeStore.getAt(this.nochange)
											.get("substart") == 2) {
										this.changeEmptyText(2)
									}
								}
							}
							this.enableDisableSaveButtons(false)
						}
					},
					changeEmptyText : function(B) {
						var A = 0;
						this.isSubmitted = true;
						if (Wtf.cmpPref.weightage) {
							A = 1
						}
						if (B != 0) {
							this.setBtnStatus = true;
							this.enableDisableSaveButtons(false);
							this.competencyGrid.getColumnModel().setEditable(
									2 + A, false);
							this.competencyGrid.getColumnModel().setEditable(
									3 + A, false);
							this.goalGrid.getColumnModel().setEditable(1 + A,
									false);
							this.goalGrid.getColumnModel().setEditable(2 + A,
									false);
							if (B == 1) {
								this.isSubmitted = false;
								this.perrat.clearInvalid();
								this.helpTemplate2
										.overwrite(this.helpTextPanel.body)
							} else {
								if (B == 2) {
									this.helpTemplate5
											.overwrite(this.helpTextPanel.body)
								} else {
									if (B == 3) {
										this.helpTemplate7
												.overwrite(this.helpTextPanel.body)
									} else {
										if (B == 4) {
											this.helpTemplate6
													.overwrite(this.helpTextPanel.body)
										}
									}
								}
							}
							this.doLayout();
							if (this.employee) {
								this.ecomments.disable()
							} else {
								this.mcomments.disable();
								this.perrat.disable();
								this.salaryY.disable()
							}
							if (this.question && Wtf.cmpPref.competency) {
								var D = Wtf.get(this.id + "Personal").query(
										".x-form-textarea");
								for ( var C = 0; C < D.length; C++) {
									D[C].disabled = true
								}
							}
						} else {
							this.enableDisableSaveButtons(true);
							this.competencyGrid.getColumnModel().setEditable(
									2 + A, true);
							this.competencyGrid.getColumnModel().setEditable(
									3 + A, true);
							this.goalGrid.getColumnModel().setEditable(1 + A,
									true);
							this.goalGrid.getColumnModel().setEditable(2 + A,
									true);
							if (!this.question || !Wtf.cmpPref.competency) {
								if (companyid == "963b6fdc-316a-4a5f-b430-6a05c5b34363") {
									this.helpTemplateKrawler
											.overwrite(this.helpTextPanel.body)
								} else {
									this.helpTemplate1
											.overwrite(this.helpTextPanel.body)
								}
							}
							this.doLayout();
							if (this.employee) {
								this.ecomments.enable()
							} else {
								this.mcomments.enable();
								this.perrat.enable();
								this.salaryY.enable()
							}
						}
					},
					getSaveButtons : function() {
						var A = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.submit"),
									disabled : true,
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.form.submit.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									handler : function() {
										this.submitFunction(false)
									},
									scope : this
								});
						var B = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.save.as.draft"),
									disabled : true,
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.form.save.tooltip"),
									iconCls : "pwndCommon draftbuttonIcon",
									handler : function() {
										this.submitFunction(true)
									},
									scope : this
								});
						this.printbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.print"),
									scope : this,
									iconCls : "pwndPrint printData",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.performance.print.appraisal.form")
									},
									handler : function() {
										this.isPrint = true;
										this.printAndpdf()
									}
								});
						this.pdfbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.export.pdf.format"),
									scope : this,
									iconCls : "pwndExport exportpdf",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.performance.export.appraisal.form")
									},
									handler : function() {
										this.isPrint = false;
										this.printAndpdf()
									}
								});
						var C = new Array();
						C.push(B, "-", A, "-", this.pdfbtn, "-", this.printbtn);
						return C
					},
					getSaveButtonsBottom : function() {
						var A = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.submit"),
									disabled : true,
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.form.submit.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									handler : function() {
										this.submitFunction(false)
									},
									scope : this
								});
						var B = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.save.as.draft"),
									disabled : true,
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.form.save.tooltip"),
									iconCls : "pwndCommon draftbuttonIcon",
									handler : function() {
										this.submitFunction(true)
									},
									scope : this
								});
						var C = new Array();
						C.push(B, "-", A);
						return C
					},
					printAndpdf : function() {
						var A = "Performance/PrintAppraisalReportPDF/appraisalFormExport.pf?promotion="
								+ this.salaryY.getValue()
								+ "&question="
								+ this.question
								+ "&uid="
								+ this.userid
								+ "&appraisalcycid="
								+ this.appTypeCombo.getValue()
								+ "&isPrint="
								+ this.isPrint
								+ "&desigId="
								+ this.designationid
								+ "&appraisalid="
								+ this.appraisalid
								+ "&employee="
								+ this.employee
								+ "&managerid="
								+ this.managerid
								+ "&appraisalids="
								+ this.appraisalids;
						if (this.isPrint) {
							window.open(A, "mywindow",
									"menubar=1,resizable=1,scrollbars=1")
						} else {
							Wtf.get("downloadframe").dom.src = A
						}
					},
					enableDisableSaveButtons : function(A) {
						if (A) {
							this.getTopToolbar().enable();
							this.getBottomToolbar().enable()
						} else {
							this.getTopToolbar().disable();
							this.getBottomToolbar().disable();
							if (this.setBtnStatus) {
								this.printbtn.setDisabled(false);
								this.pdfbtn.setDisabled(false);
								this.setBtnStatus = false
							}
						}
					},
					addPerformanceRating : function() {
						WtfGlobal.showmasterWindow(13, Wtf.prat, "Add")
					},
					replaceAll : function(C, A, B) {
						while (C.search(A) != -1) {
							C = C.replace(A, B)
						}
						return C
					}
				});
Wtf.Appraisalsmanagement = function(A) {
	Wtf.Appraisalsmanagement.superclass.constructor.call(this, A);
	Wtf.form.Field.prototype.msgTarget = "side";
	this.rowExpander = new Wtf.grid.RowExpander(
			{
				tpl : new Wtf.XTemplate(
						'<table cellspacing="5" cellpadding="0">',
						"<tr>",
						"<td width=150>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						'<tr align="center" class="fixed">',
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.performance.appraisal.cycle.name")
								+ "</b></th>",
						"</tr>",
						'<tpl for="cyclename">',
						'<tr align="left" class="fixed">',
						"<td>",
						"{.}",
						"</td>",
						"</tr>",
						"</tpl>",
						"</table>",
						"</td>",
						"<td width=200>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>",
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.common.start.date")
								+ "</b></th>",
						"</tr>",
						'<tpl for="startdate">',
						"<tr>",
						"<td>",
						"{.}",
						"</td>",
						"</tr>",
						"</tpl>",
						"</table>",
						"</td>",
						"<td width=200>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>",
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.common.end.date")
								+ "</b></th>",
						"</tr>",
						'<tpl for="enddate">',
						"<tr>",
						"<td>",
						"{.}",
						"</td>",
						"</tr>",
						"</tpl>",
						"</table>",
						"</td>",
						"<td width=150>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>",
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.performance.appraiser")
								+ "</b></th>",
						"</tr>",
						'<tpl for="manager">',
						"<tr>",
						"<td>",
						"{.}",
						"</td>",
						"</tr>",
						"</tpl>",
						"</table>",
						"</td>",
						"<td width=200>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>",
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.performance.submission.start.date")
								+ "</b></th>",
						"</tr>",
						'<tpl for="sdate">',
						"<tr>",
						"<td>",
						"{.}",
						"</td>",
						"</tr>",
						"</tpl>",
						"</table>",
						"</td>",
						"<td width=200>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>",
						"<th><b>"
								+ WtfGlobal
										.getLocaleText("hrms.performance.submission.end.date")
								+ "</b></th>", "</tr>", '<tpl for="edate">',
						"<tr>", "<td>", "{.}", "</td>", "</tr>", "</tpl>",
						"</table>", "</td>", "<td width=150>",
						'<table width="100%" cellspacing="0" cellpadding="0">',
						"<tr>", "<th><b>"
								+ WtfGlobal.getLocaleText("hrms.common.status")
								+ "</b></th>", "</tr>", '<tpl for="status">',
						"<tr>", "<td>", "{.}", "</td>", "</tr>", "</tpl>",
						"</table>", "</td>", "</tr>", "</table>")
			})
};
Wtf
		.extend(
				Wtf.Appraisalsmanagement,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.Appraisalsmanagement.superclass.initComponent.call(
								this, A)
					},
					onRender : function(A) {
						Wtf.Appraisalsmanagement.superclass.onRender.call(this,
								A);
						this.itemDataRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.itemDataReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.itemDataRec);
						this.apprec = new Wtf.data.Record.create([ {
							name : "appcycleid"
						}, {
							name : "appcycle"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "currentFlag"
						}, {
							name : "submitstartdate"
						}, {
							name : "submitenddate"
						} ]);
						this.appTypeStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisalcycleform.pf",
									baseParams : {
										flag : 168,
										grouper : "initiateapp"
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.apprec),
									autoLoad : false
								});
						this.appTypeStore.on("load", function() {
							var C = this.appTypeStore.findBy(this.findrecord,
									this);
							if (C != -1) {
								this.appTypeCombo.setValue(this.appTypeStore
										.getAt(C).get("appcycleid"));
								this.appstdate.setValue(this.appTypeStore
										.getAt(C).get("startdate"));
								this.appsenddate.setValue(this.appTypeStore
										.getAt(C).get("enddate"));
								this.startdate.setValue(this.appTypeStore
										.getAt(C).get("submitstartdate"));
								this.enddate.setValue(this.appTypeStore
										.getAt(C).get("submitenddate"))
							}
						}, this);
						this.appTypeStore.load();
						this.appTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "appcycleid",
									displayField : "appcycle",
									store : this.appTypeStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle"),
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle") + " *"),
									width : 200,
									typeAhead : true
								});
						this.appTypeCombo.on("select", function(D, C, E) {
							this.appstdate.setValue(C.data.startdate);
							this.appsenddate.setValue(C.data.enddate);
							this.startdate.setValue(C.data.submitstartdate);
							this.enddate.setValue(C.data.submitenddate)
						}, this);
						this.deptrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.deptStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 7,
								flag : 203,
								common : 1
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.deptrec),
							autoLoad : false
						});
						this.deptStore.load();
						this.deptStore.on("load", this.insertrec, this);
						this.deptCmb = new Wtf.form.FnComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.department")
									+ "*",
							store : this.deptStore,
							mode : "local",
							valueField : "id",
							displayField : "name",
							triggerAction : "all",
							typeAhead : true,
							allowBlank : false,
							width : 150,
							addNewFn : this.addDepartment.createDelegate(this),
							plugins : [ new Wtf.common.comboAddNew({
								handler : function() {
									this.depadded = true;
									WtfGlobal.showmasterWindow(7,
											this.deptStore, "Add")
								},
								scope : this
							}) ]
						});
						this.deptCmb
								.on(
										"select",
										function() {
											this.deptval = this.deptCmb
													.getValue();
											this.appraisalAppraisalsmanagementStore
													.load({
														params : {
															start : 0,
															limit : this.appraisalAppraisalsmanagementGrid.pag.pageSize,
															ss : this.appraisalAppraisalsmanagementGrid.quickSearchTF
																	.getValue()
														}
													})
										}, this);
						this.empname = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employee.name"),
									name : "username",
									width : 200,
									readOnly : true
								});
						this.startdate = new Wtf.form.DateField(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.submission.start.date") + " *"),
									name : "startdate",
									format : "m/d/Y",
									width : 150,
									allowBlank : false,
									disabled : true
								});
						this.appstdate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.start.date"),
									format : "m/d/Y",
									width : 150,
									disabled : true
								});
						this.appsenddate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.end.date"),
									format : "m/d/Y",
									width : 150,
									disabled : true
								});
						this.enddate = new Wtf.form.DateField(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.performance.submission.end.date") + " *"),
									name : "enddate",
									format : "m/d/Y",
									width : 150,
									allowBlank : false,
									disabled : true
								});
						this.initiatePanel = new Wtf.Panel({
							frame : false,
							border : false,
							layout : "column",
							items : [ {
								columnWidth : 0.33,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.appTypeCombo ]
							}, {
								columnWidth : 0.33,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.appstdate, this.startdate ]
							}, {
								columnWidth : 0.33,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.appsenddate, this.enddate ]
							} ]
						});
						this.appraisalform = new Wtf.form.FormPanel(
								{
									border : false,
									frame : false,
									id : "appraisalmanagementform",
									bodyStyle : "background-color:#FFFFFF;padding:20px 20px 20px 20px;",
									items : [ this.initiatePanel ]
								});
						this.recipeAppraisalsmanagementRec = new Wtf.data.Record.create(
								[ {
									name : "userid"
								}, {
									name : "appraisalid"
								}, {
									name : "employeeid"
								}, {
									name : "email"
								}, {
									name : "fullname"
								}, {
									name : "joindate",
									type : "date"
								}, {
									name : "designation"
								}, {
									name : "department"
								}, {
									name : "cyclename"
								}, {
									name : "startdate"
								}, {
									name : "enddate"
								}, {
									name : "manager"
								}, {
									name : "sdate"
								}, {
									name : "edate"
								}, {
									name : "status"
								} ]);
						this.appraisalAppraisalsmanagementReader = new Wtf.data.KwlJsonReader1(
								{
									root : "data",
									totalProperty : "count"
								}, this.recipeAppraisalsmanagementRec);
						this.appraisalAppraisalsmanagementStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisal/getappraisalFunction.pf",
									reader : this.appraisalAppraisalsmanagementReader
								});
						this.deptval = "";
						this.appraisalAppraisalsmanagementStore
								.on(
										"beforeload",
										function() {
											this.appraisalAppraisalsmanagementStore.baseParams = {
												flag : 163,
												paging : true,
												dept : this.deptval,
												grouper : "initiateapp",
												firequery : "1"
											}
										}, this);
						calMsgBoxShow(202, 4, true);
						this.appraisalAppraisalsmanagementStore.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.appraisalAppraisalsmanagementStore.on("load",
								function() {
									if (msgFlag == 1) {
										WtfGlobal.closeProgressbar()
									}
								}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.appraisalAppraisalsmanagementColumn = new Wtf.grid.ColumnModel(
								[
										this.rowExpander,
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.edit.initiated.appraisals")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.edit.initiated.appraisals")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.edit.initiated.appraisals")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.edit.initiated.appraisals")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.edit.initiated.appraisals")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										} ]);
						this.initiateButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.initiate"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									disabled : true,
									minWidth : 50,
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.initiate.tooltip"),
									handler : this.initiateapprsal,
									scope : this
								});
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.appraisalAppraisalsmanagementStore
												.load({
													params : {
														start : 0,
														limit : this.appraisalAppraisalsmanagementGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.appraisalAppraisalsmanagementGrid.id)
												.setValue("")
									}
								});
						var B = new Array();
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.initiateappraisal,
								Wtf.Perm.initiateappraisal.manage)) {
							B.push("-");
							B.push(this.refreshBtn);
							B.push("-");
							B.push(this.initiateButton)
						}
						if (userroleid == 1) {
							B
									.push(
											"-",
											(WtfGlobal
													.getLocaleText("hrms.common.select.department") + ":"),
											this.deptCmb)
						}
						this.appraisalAppraisalsmanagementGrid = new Wtf.KwlGridPanel(
								{
									cm : this.appraisalAppraisalsmanagementColumn,
									sm : this.sm,
									border : false,
									frame : false,
									plugins : this.rowExpander,
									id : "appraisalmanagementgrid",
									store : this.appraisalAppraisalsmanagementStore,
									searchField : "fullname",
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									displayInfo : true,
									loadMask : true,
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									viewConfig : {
										forceFit : true,
										emptyText : Wtf.gridEmptytext
									},
									tbar : B
								});
						this.appraisalPanel = new Wtf.Panel(
								{
									layout : "border",
									border : false,
									items : [
											{
												region : "north",
												height : 120,
												cls : "formstyleClass2",
												border : false,
												frame : false,
												layout : "fit",
												id : "npanel" + this.id,
												items : [ this.appraisalform ]
											},
											{
												region : "center",
												border : false,
												frame : false,
												layout : "fit",
												items : [ this.appraisalAppraisalsmanagementGrid ]
											} ]
								});
						this.add(this.appraisalPanel);
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(B,
									this.appraisalAppraisalsmanagementGrid, [],
									[ 3 ])
						}, this);
						this.on("activate", function() {
							Wtf.getCmp("npanel" + this.id).setHeight(120);
							this.appraisalPanel.doLayout()
						}, this)
					},
					findrecord : function(A) {
						if (A.get("currentFlag") == "1") {
							return true
						} else {
							return false
						}
					},
					initiateapprsal : function() {
						if (this.appTypeStore.getTotalCount() < 1) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.performance.please.create.appraisal.cycle") ],
									0);
							return
						}
						this.appform = Wtf.getCmp("appraisalmanagementform");
						if (!this.appraisalform.getForm().isValid()
								|| new Date(this.startdate.getValue()) > new Date(
										this.enddate.getValue())) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.performance.select.appraisal.cycle") ],
									0);
							return
						} else {
							if (Wtf.getCmp("appraisalmanagementgrid")
									.getSelectionModel().getSelections() == 0) {
								calMsgBoxShow(42, 0)
							} else {
								var cnt = Wtf.getCmp("appraisalmanagementgrid")
										.getSelectionModel().getCount();
								var arr = Wtf.getCmp("appraisalmanagementgrid")
										.getSelectionModel().getSelections();
								var errStringStart = WtfGlobal
										.getLocaleText("hrms.performance.employees.not.eligible.appraisal")
										+ ':<br><div style="margin-left:60px"><ul><b>';
								var errStringUsers = "";
								var errStringDesg = "";
								var errStringEnd = "</ul></b></div>";
								for ( var i = 0, j = 1; i < cnt; i++) {
									if (arr[i].get("joindate") == ""
											|| arr[i].get("joindate")
													.clearTime() > this.appstdate
													.getValue()) {
										errStringUsers += "<li>" + j + ". "
												+ arr[i].get("fullname")
												+ "</li>";
										j += 1
									}
									if (arr[i].get("designation") == "") {
										errStringDesg = WtfGlobal
												.getLocaleText("hrms.performance.set.designation.employee")
									}
								}
								Wtf.MessageBox
										.show({
											title : WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											msg : WtfGlobal
													.getLocaleText("hrms.performance.initiate.appraisal.cycle.employee"),
											buttons : Wtf.MessageBox.YESNO,
											width : 475,
											icon : Wtf.MessageBox.QUESTION,
											scope : this,
											fn : function(button) {
												if (button == "yes") {
													if (errStringDesg != "") {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		errStringDesg ],
																2)
													} else {
														if (errStringUsers == "") {
															this.empids = [];
															this.appids = [];
															this.appraisalflag = true;
															for ( var i = 0; i < cnt; i++) {
																this.empids
																		.push(arr[i]
																				.get("userid"));
																if (arr[i]
																		.get("status") == "initiated") {
																	this.appids
																			.push(arr[i]
																					.get("appraisalid"))
																} else {
																	if (arr[i]
																			.get("status") == "submitted") {
																		this.appids
																				.push("")
																	} else {
																		if (arr[i]
																				.get("status") == "pending"
																				&& arr[i]
																						.get("cyclename")[0] == this.appTypeCombo
																						.getRawValue()) {
																			this.appraisalflag = false;
																			break
																		} else {
																			this.appids
																					.push("")
																		}
																	}
																}
															}
															if (this.appraisalflag) {
																calMsgBoxShow(
																		200, 4,
																		true);
																Wtf.Ajax
																		.requestEx(
																				{
																					url : "Performance/Appraisal/AppraisalAssign.pf",
																					params : {
																						flag : 18,
																						empids : this.empids,
																						appraisalids : this.appids,
																						apptype : this.appTypeCombo
																								.getValue(),
																						startdate : this.startdate
																								.getValue()
																								.format(
																										"Y-m-d"),
																						enddate : this.enddate
																								.getValue()
																								.format(
																										"Y-m-d"),
																						status : "initiated"
																					}
																				},
																				this,
																				function(
																						response) {
																					var res = eval("("
																							+ response
																							+ ")");
																					calMsgBoxShow(
																							[
																									WtfGlobal
																											.getLocaleText("hrms.common.success"),
																									res.message ],
																							0);
																					this.deptval = this.deptCmb
																							.getValue();
																					Wtf
																							.getCmp("appraisalmanagementgrid").store
																							.load({
																								params : {
																									start : 0,
																									limit : this.appraisalAppraisalsmanagementGrid.pag.pageSize,
																									ss : this.appraisalAppraisalsmanagementGrid.quickSearchTF
																											.getValue()
																								}
																							});
																					Wtf
																							.getCmp(
																									"appraisalmanagementgrid")
																							.getSelectionModel()
																							.clearSelections();
																					var a = Wtf
																							.getCmp("DSBMyWorkspaces");
																					if (a) {
																						a
																								.doSearch(
																										a.url,
																										"")
																					}
																					a = Wtf
																							.getCmp("dash_performance");
																					if (a) {
																						a
																								.doSearch(
																										a.url,
																										"")
																					}
																				},
																				function() {
																					calMsgBoxShow(
																							27,
																							1)
																				})
															} else {
																calMsgBoxShow(
																		171, 1);
																Wtf
																		.getCmp(
																				"appraisalmanagementgrid")
																		.getSelectionModel()
																		.clearSelections()
															}
														} else {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			errStringStart
																					+ errStringUsers
																					+ errStringEnd ],
																	2, false,
																	600)
														}
													}
												} else {
													Wtf
															.getCmp(
																	"appraisalmanagementgrid")
															.getSelectionModel()
															.clearSelections()
												}
											}
										})
							}
						}
					},
					cancelappraisal : function() {
						Wtf.getCmp("appraisalmanagementgrid")
								.getSelectionModel().clearSelections()
					},
					addDepartment : function() {
						WtfGlobal.showmasterWindow(7, this.deptStore, "Add")
					},
					insertrec : function() {
						if (this.deptStore.getCount() > 0) {
							var A = new this.deptrec({
								id : "0",
								name : "All"
							});
							var B = this.deptStore.getCount();
							this.deptStore.insert(B, A);
							this.deptCmb.setValue(this.deptStore.getAt(B).get(
									"id"));
							this.deptval = this.deptCmb.getValue();
							if (this.depadded) {
								this.appraisalAppraisalsmanagementStore
										.load({
											params : {
												start : 0,
												limit : 15,
												ss : this.appraisalAppraisalsmanagementGrid.quickSearchTF
														.getValue()
											}
										})
							}
						}
					}
				});
Wtf.assignCompetency = function(A) {
	Wtf.assignCompetency.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.assignCompetency,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.assignCompetency.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						Wtf.assignCompetency.superclass.onRender.call(this, A);
						this.record = Wtf.data.Record.create([ {
							"name" : "mcompid"
						}, {
							"name" : "cmptid"
						}, {
							"name" : "desname"
						}, {
							"name" : "cmptname"
						}, {
							"name" : "cmptdesc"
						}, {
							"name" : "cmptwt"
						}, {
							"name" : "designid"
						} ]);
						this.ds = new Wtf.data.GroupingStore({
							baseParams : {
								flag : 105
							},
							url : "Performance/Competency/getCompAndDesig.pf",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.record),
							sortInfo : {
								field : "desname",
								direction : "ASC"
							},
							groupField : "desname"
						});
						calMsgBoxShow(202, 4, true);
						this.ds.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										{
											dataIndex : "cmptid",
											hidden : true,
											hideable : false
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "desname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.all.competencies"),
											dataIndex : "cmptname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "cmptdesc",
											sortable : true,
											renderer : function(D) {
												if (Wtf.isIE6 || Wtf.isIE7) {
													return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
															+ D
															+ '">'
															+ D
															+ "</pre>"
												}
												return "<span style='white-space:pre-wrap;'>"
														+ D + "</span>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.weightage"),
											dataIndex : "cmptwt",
											sortable : true,
											renderer : WtfGlobal.numericRenderer
										} ]);
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.ds
												.load({
													params : {
														start : 0,
														limit : this.assigncompetencyGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.assigncompetencyGrid.id)
												.setValue("")
									}
								});
						this.competencyButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.assign.competency"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.assign.competency.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 115,
									id : "asscomp",
									handler : this.add1,
									scope : this
								});
						this.delcompetencyButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.delete.competency"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 115,
									id : "delcomp",
									handler : this.del1,
									scope : this
								});
						var C = new Array();
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.competencymanagement,
								Wtf.Perm.competencymanagement.assign)) {
							C.push("-");
							C.push(this.refreshBtn);
							C.push("-");
							C.push(this.competencyButton)
						}
						this.assigncompetencyGrid = new Wtf.KwlGridPanel(
								{
									id : "CompetencyManagementgrid",
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									cls : "gridWithUl",
									border : false,
									view : new Wtf.grid.GroupingView(
											{
												forceFit : true,
												showGroupName : false,
												enableGroupingMenu : false,
												hideGroupedColumn : true,
												emptyText : WtfGlobal
														.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:assigncompetency(\""
																+ this.id
																+ "\")'>"
																+ WtfGlobal
																		.getLocaleText("hrms.performance.started.assigning.competency.msg")
																+ "</a>")
											}),
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.performance.competency.grid.msg"),
									displayInfo : true,
									loadMask : true,
									serverSideSearch : true,
									searchField : "desname",
									animCollapse : false,
									tbar : C
								});
						var B = new Array();
						B.push("asscomp");
						this.add(this.assigncompetencyGrid)
					},
					add1 : function() {
						var B = "";
						var A = "";
						if (this.sm.hasSelection()) {
							B = this.sm.getSelected().get("desname");
							A = this.sm.getSelected().get("designid")
						}
						this.windowpos = new Wtf.competencyWindow1(
								{
									width : 700,
									modal : true,
									height : 600,
									title : WtfGlobal
											.getLocaleText("hrms.performance.assign.competency"),
									resizable : false,
									layout : "fit",
									desname : B,
									desigid : A
								});
						this.windowpos
								.on(
										"savedata",
										function() {
											this.ds
													.load({
														params : {
															start : this.assigncompetencyGrid.pag.cursor,
															limit : this.assigncompetencyGrid.pag.pageSize,
															ss : Wtf
																	.getCmp(
																			"Quick"
																					+ this.assigncompetencyGrid.id)
																	.getValue()
														}
													})
										}, this);
						this.windowpos.show()
					},
					del1 : function() {
						if (this.assigncompetencyGrid.getSelectionModel()
								.getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("competency"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												this.statrec = this.assigncompetencyGrid
														.getSelectionModel()
														.getSelections();
												this.apparr = [];
												for ( var A = 0; A < this.statrec.length; A++) {
													this.apparr
															.push(this.statrec[A]
																	.get("mcompid"))
												}
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "hrms.jsp",
																	params : {
																		flag : 117,
																		appid : this.apparr
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			62,
																			0);
																	this.ds
																			.load({
																				params : {
																					start : 0,
																					limit : this.assigncompetencyGrid.pag.pageSize,
																					ss : Wtf
																							.getCmp(
																									"Quick"
																											+ this.assigncompetencyGrid.id)
																							.getValue()
																				}
																			})
																},
																function() {
																	calMsgBoxShow(
																			27,
																			0)
																})
											}
										}
									})
						}
					}
				});
function assigncompetency(A) {
	Wtf.getCmp(A).add1()
}
Wtf.competencyWindow1 = function(A) {
	Wtf.apply(this, A);
	Wtf.competencyWindow1.superclass.constructor
			.call(
					this,
					{
						buttonAlign : "right",
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Next"),
									id : "bttnnext",
									scope : this,
									disabled : true,
									handler : function() {
										Wtf.desigStore.removeListener("load",
												this.setcomboVal, this);
										this.ids1 = [];
										this.wth = [];
										for ( var C = 0; C < this.selectedds
												.getCount(); C++) {
											this.ids1.push(this.selectedds
													.getAt(C).get("cmptid"));
											var B = this.selectedds.getAt(C)
													.get("cmptwt");
											if (B == 0) {
												calMsgBoxShow(88, 2);
												return
											}
											this.wth.push(B)
										}
										var D = 0;
										for ( var C = 0; C < this.wth.length; C++) {
											D += this.wth[C]
										}
										if (D != 100 && D != 0) {
											calMsgBoxShow(146, 0);
											return false
										}
										this.desid = this.groupForm.findById(
												"desigCmb").getValue();
										Wtf.desigStore.clearFilter();
										this.winpos = new Wtf.competencyNextWindow1(
												{
													width : 700,
													modal : true,
													ids1 : this.ids1,
													wth : this.wth,
													desid : this.desid,
													height : 600,
													id : "questioncomp",
													title : WtfGlobal
															.getLocaleText("hrms.performance.AssignQuestions"),
													resizable : false,
													layout : "fit",
													desigid : this.desigCmb
															.getValue()
												});
										this.close();
										this.winpos.show()
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									id : "bttntext",
									scope : this,
									disabled : true,
									handler : function() {
										this.createMemberList()
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									scope : this,
									handler : function() {
										this.close()
									}
								} ]
					});
	this.addEvents({
		"savedata" : true
	})
};
Wtf
		.extend(
				Wtf.competencyWindow1,
				Wtf.Window,
				{
					group_id : "",
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(B) {
						Wtf.competencyWindow1.superclass.onRender.call(this, B);
						this.desigCmb = new Wtf.form.FnComboBox(
								{
									store : Wtf.desigStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.designation")
											+ "*",
									mode : "local",
									id : "desigCmb",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									allowBlank : false,
									typeAhead : true,
									width : 200,
									addNewFn : this.addDesignation
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(1,
													Wtf.desigStore, "Add")
										},
										scope : this
									}) ],
									listeners : {
										scope : this,
										select : function(H, F, G) {
											this.availableds.load({
												params : {
													flag : 115,
													desig : this.desigCmb
															.getValue()
												}
											});
											this.availablegrid.doLayout();
											this.selectedds.load({
												params : {
													flag : 116,
													desig : this.desigCmb
															.getValue()
												}
											});
											this.selectedgrid.doLayout()
										}
									}
								});
						this.availableRec = new Wtf.data.Record.create([ {
							name : "cmptid"
						}, {
							name : "cmptname"
						}, {
							name : "cmptwt"
						} ]);
						this.availableds = new Wtf.data.Store(
								{
									url : "Performance/Competency/getCompetencyAvailable.pf",
									reader : new Wtf.data.KwlJsonReader1({
										root : "data",
										totalProperty : "count"
									}, this.availableRec),
									fields : [ "cmptid", "cmptname", "cmptwt" ]
								});
						this.availablesm = new Wtf.grid.CheckboxSelectionModel();
						this.ratingRadio = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.Quantitative"),
									id : "Quantitative" + this.id,
									bodyStyle : "float:left",
									checked : true,
									name : "emptemp"
								});
						this.quesRadio = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.Qualitative"),
									id : "Qualitative" + this.id,
									bodyStyle : "float:left",
									name : "emptemp"
								});
						this.availablecm = new Wtf.grid.ColumnModel(
								[
										this.availablesm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.competency"),
											dataIndex : "cmptname",
											autoWidth : true,
											sortable : true,
											groupable : true
										} ]);
						this.quickSearchEmp = new Wtf.wtfQuickSearch(
								{
									width : 150,
									field : "cmptname",
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.manage.competency.grid.search.msg")
								});
						this.emptempfield = new Wtf.Panel({
							frame : false,
							border : false,
							width : 350,
							layout : "column",
							id : "mypanel",
							bodyStyle : "margin-top:10px;",
							items : [ {
								frame : false,
								columnWidth : 0.5,
								border : false,
								layout : "form",
								items : [ this.ratingRadio ]
							}, {
								frame : false,
								border : false,
								columnWidth : 0.5,
								layout : "form",
								items : [ this.quesRadio ]
							} ]
						});
						this.ratingRadio.on("check", function(G, F) {
							if (F) {
								Wtf.getCmp("bttnnext").disable();
								Wtf.getCmp("bttntext").enable()
							}
						}, this);
						this.quesRadio.on("check", function(G, F) {
							if (F) {
								Wtf.getCmp("bttnnext").enable();
								Wtf.getCmp("bttntext").disable()
							}
						}, this);
						this.ratingRadio.on("check", function(G, F) {
							if (this.ratingRadio.rendered
									&& this.quesRadio.rendered) {
								this.ratingRadio.onClick();
								this.quesRadio.onClick()
							}
						}, this);
						this.quesRadio.on("check", function(G, F) {
							if (this.ratingRadio.rendered
									&& this.quesRadio.rendered) {
								this.ratingRadio.onClick();
								this.quesRadio.onClick()
							}
						}, this);
						this.availablegrid = new Wtf.grid.EditorGridPanel(
								{
									height : 100,
									store : this.availableds,
									cm : this.availablecm,
									border : false,
									id : this.id + "availablegrid",
									sm : this.availablesm,
									autoScroll : true,
									viewConfig : {
										forceFit : true,
										autoFill : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.performance.NoCompetencytoassign"))
									},
									tbar : [ this.quickSearchEmp ]
								});
						this.availableds.on("load", this.empSearch, this);
						this.selectedRec = new Wtf.data.Record.create([ {
							name : "cmptid"
						}, {
							name : "cmptname"
						}, {
							name : "cmptwt"
						} ]);
						this.selectedds = new Wtf.data.Store(
								{
									url : "Performance/Competency/getCompetencyAssigned.pf",
									reader : new Wtf.data.KwlJsonReader1({
										root : "data",
										totalProperty : "count"
									}, this.selectedRec),
									autoLoad : false
								});
						this.selectedsm = new Wtf.grid.CheckboxSelectionModel();
						this.selectedcm = new Wtf.grid.ColumnModel(
								[
										this.selectedsm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.competency"),
											dataIndex : "cmptname",
											autoWidth : true,
											sortable : true,
											summaryRenderer : WtfGlobal.total,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.weightage"),
											dataIndex : "cmptwt",
											autoWidth : true,
											summaryType : "sum",
											renderer : WtfGlobal.numericRenderer,
											editor : new Wtf.form.NumberField(
													{
														allowBlank : false,
														allowDecimals : false,
														allowNegative : false,
														maxValue : 100,
														minValue : 1,
														validator : WtfGlobal.noBlankCheck
													}),
											sortable : true
										} ]);
						this.quickSearchAssgEmp = new Wtf.wtfQuickSearch(
								{
									width : 150,
									field : "cmptname",
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.manage.competency.grid.search.msg")
								});
						this.selectedgrid = new Wtf.grid.EditorGridPanel({
							height : 100,
							store : this.selectedds,
							cm : this.selectedcm,
							sm : this.selectedsm,
							autoScroll : true,
							border : false,
							plugins : new Wtf.ux.grid.GridSummary(),
							clicksToEdit : 1,
							viewConfig : {
								forceFit : true
							},
							tbar : [ this.quickSearchAssgEmp ]
						});
						this.selectedds.on("load", this.empAssgSearch, this);
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.on("load", this.setcomboVal, this),
									Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.setcomboVal()
						}
						this.movetoright = document.createElement("img");
						this.movetoright.src = "images/arrowright.gif";
						this.movetoright.style.width = "24px";
						this.movetoright.style.height = "24px";
						this.movetoright.style.margin = "5px 0px 5px 0px";
						this.movetoright.onclick = this.movetorightclicked
								.createDelegate(this, []);
						this.movetoleft = document.createElement("img");
						this.movetoleft.src = "images/arrowleft.gif";
						this.movetoleft.style.width = "24px";
						this.movetoleft.style.height = "24px";
						this.movetoleft.style.margin = "5px 0px 5px 0px";
						this.movetoleft.onclick = this.movetoleftclicked
								.createDelegate(this, []);
						this.centerdiv = document.createElement("div");
						this.centerdiv.appendChild(this.movetoright);
						this.centerdiv.appendChild(this.movetoleft);
						this.centerdiv.style.padding = "135px 10px 135px 10px";
						var E = "1";
						var D = "";
						var C = "";
						if (this.text1 == "edit") {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Update");
							var A = 9;
							E = this.group_id;
							D = WtfGlobal
									.getLocaleText("hrms.performance.group.updated.successfully");
							C = WtfGlobal
									.getLocaleText("hrms.performance.edit.group");
							this.imgsrc = "edit-group.gif"
						} else {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Create");
							var A = 6;
							E = this.group_id;
							D = WtfGlobal
									.getLocaleText("hrms.performance.group.added.successfully");
							C = WtfGlobal
									.getLocaleText("hrms.performance.create.new.group");
							this.imgsrc = "add-group.gif"
						}
						this.assignTeamPanel = new Wtf.Panel(
								{
									layout : "border",
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												cls : "panelstyleClass1",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.performance.competency.management"),
														WtfGlobal
																.getLocaleText("hrms.performance.Selectdesignationforassigningcompetencies"),
														"images/compentencymanagement.jpg")
											},
											{
												region : "center",
												border : false,
												bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 20px 20px 20px;",
												layout : "fit",
												items : [ {
													border : false,
													bodyStyle : "background:transparent;",
													layout : "border",
													items : [
															{
																region : "north",
																border : false,
																height : 70,
																layout : "border",
																bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 20px 20px 20px;",
																items : [ {
																	region : "center",
																	border : false,
																	layout : "fit",
																	width : 400,
																	items : [ this.groupForm = new Wtf.form.FormPanel(
																			{
																				labelWidth : 80,
																				bodyStyle : "mar",
																				bodyStyle : "padding-left:160px;",
																				border : false,
																				items : [
																						this.desigCmb,
																						this.emptempfield,
																						{
																							xtype : "hidden",
																							id : "h1",
																							name : "user_ids"
																						} ]
																			}) ]
																} ]
															},
															{
																region : "west",
																border : false,
																width : 300,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.performance.competencies"),
																	border : false,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.availablegrid
																} ]
															},
															{
																region : "center",
																border : false,
																contentEl : this.centerdiv
															},
															{
																region : "east",
																border : false,
																width : 300,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.performance.AssignedCompetencies"),
																	border : false,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.selectedgrid
																} ]
															} ]
												} ]
											} ]
								});
						this.add(this.assignTeamPanel)
					},
					setcomboVal : function() {
						if (Wtf.desigStore.getCount() != 0) {
							if (this.desname != "") {
								this.desigCmb.setValue(this.desigid)
							} else {
								var A = Wtf.desigStore.getAt(
										Wtf.desigStore.getCount() - 1)
										.get("id");
								this.desigCmb.setValue(A);
								this.desigid = A
							}
							this.availableds.load({
								params : {
									flag : 115,
									grouper : "assigncomp",
									desig : this.desigCmb.getValue()
								}
							});
							this.availablegrid.doLayout();
							this.selectedds.load({
								params : {
									flag : 116,
									grouper : "assigncomp",
									firequery : "1",
									desig : this.desigid
								}
							});
							this.selectedds
									.on("load", this.empAssgSearch, this);
							this.selectedgrid.doLayout()
						} else {
							this.desigCmb
									.setValue(WtfGlobal
											.getLocaleText("hrms.performance.Nodesignationavailable"))
						}
					},
					createMemberList : function() {
						this.ids1 = [];
						this.wth = [];
						var C = 0;
						for ( var B = 0; B < this.selectedds.getCount(); B++) {
							this.ids1.push(this.selectedds.getAt(B).get(
									"cmptid"));
							var A = this.selectedds.getAt(B).get("cmptwt");
							if (A != parseInt(A)) {
								calMsgBoxShow(233, 2);
								return
							}
							if (A == 0) {
								calMsgBoxShow(88, 2);
								return
							}
							this.wth.push(A);
							C = C + parseFloat(A)
						}
						if (C == 100) {
							if (this.desigCmb.getValue() != "") {
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : "Performance/Competency/assignCompetency.pf",
													params : {
														flag : 104,
														item_ids : this.ids1,
														wth : this.wth,
														desid : this.groupForm
																.findById(
																		"desigCmb")
																.getValue()
													}
												}, this, function(D) {
													this.fireEvent("savedata",
															this);
													calMsgBoxShow(36, 0);
													this.close()
												}, function(D) {
													calMsgBoxShow(27, 1);
													this.close()
												})
							} else {
								calMsgBoxShow(37, 0)
							}
						} else {
							calMsgBoxShow(146, 0)
						}
					},
					empSearch : function(A, C, B) {
						this.quickSearchEmp.StorageChanged(A)
					},
					empAssgSearch : function(A, C, B) {
						this.quickSearchAssgEmp.StorageChanged(A);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					movetorightclicked : function() {
						var A = this.availablesm.getSelections();
						if (A.length > 0) {
							this.selectedds.add(A)
						}
						for ( var B = 0; B < A.length; B++) {
							this.availableds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					movetoleftclicked : function() {
						var A = this.selectedsm.getSelections();
						if (A.length > 0) {
							this.availableds.add(A)
						}
						for ( var B = 0; B < A.length; B++) {
							this.selectedds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					}
				});
function adddesgcomp(A) {
	var B = Wtf.getCmp(A);
	var C = Wtf.getCmp("desigCmb").getValue();
	var D = new Wtf.managecompetencyWindow({
		width : 390,
		modal : true,
		height : 265,
		title : WtfGlobal.getLocaleText("hrms.performance.competency"),
		resizable : false,
		layout : "fit",
		wintitle : WtfGlobal.getLocaleText("hrms.performance.add.competency"),
		editflag : false,
		datastore : B.getStore(),
		cleargrid : B,
		desig : C,
		action : "add"
	});
	D.show()
}
Wtf.competencyNextWindow1 = function(A) {
	Wtf.apply(this, A);
	Wtf.competencyNextWindow1.superclass.constructor
			.call(
					this,
					{
						buttonAlign : "right",
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.back"),
									id : this.id + "bttnback",
									scope : this,
									handler : function() {
										Wtf.desigStore.removeListener("load",
												this.setcomboVal1, this);
										Wtf.desigStore.removeListener("load",
												this.setAllValue, this);
										this.windowpos = new Wtf.competencyWindow1(
												{
													width : 700,
													modal : true,
													height : 600,
													title : WtfGlobal
															.getLocaleText("hrms.performance.assign.competency"),
													resizable : false,
													layout : "fit",
													desname : "designame",
													desigid : this.desigid
												});
										this.windowpos.show();
										this.close()
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									id : this.id + "bttntext",
									scope : this,
									handler : function() {
										this.saveQuestionCompetency()
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									scope : this,
									handler : function() {
										this.close()
									}
								} ]
					});
	this.addEvents({
		"savedata" : true
	})
};
Wtf
		.extend(
				Wtf.competencyNextWindow1,
				Wtf.Window,
				{
					group_id : "",
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(B) {
						Wtf.competencyNextWindow1.superclass.onRender.call(
								this, B);
						this.desigCmb = new Wtf.form.FnComboBox({
							store : Wtf.desigStore,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.designation")
									+ "*",
							mode : "local",
							id : this.id + "desigNewCmb",
							valueField : "id",
							displayField : "name",
							disabled : true,
							triggerAction : "all",
							allowBlank : false,
							typeAhead : true,
							value : this.desigid,
							width : 200
						});
						this.on("close", function() {
							Wtf.desigStore.remove(this.def)
						}, this);
						Wtf.desigStore.on("load", this.setAllValue, this);
						this.addbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.AddQuestion"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.AddQuestion.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									minWidth : 70,
									scope : this,
									handler : this.insertgoal
								});
						this.deletebutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.DeleteQuestions"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.DeleteQuestions.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 70,
									scope : this,
									disabled : true,
									handler : this.deletequestions
								});
						var E = new Array();
						E.push(this.addbutton);
						E.push(this.deletebutton);
						this.ratingRadio = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.Quantitative"),
									id : "Quantitative" + this.id,
									bodyStyle : "float:left",
									disabled : true,
									name : "emptemp"
								});
						this.quesRadio = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.Qualitative"),
									id : "Qualitative" + this.id,
									bodyStyle : "float:left",
									checked : true,
									disabled : true,
									name : "emptemp"
								});
						this.emptempfield = new Wtf.Panel({
							frame : false,
							border : false,
							layout : "column",
							width : 350,
							id : this.id + "mypanel",
							bodyStyle : "margin-top:10px;",
							items : [ {
								frame : false,
								columnWidth : 0.5,
								border : false,
								layout : "form",
								items : [ this.ratingRadio ]
							}, {
								frame : false,
								border : false,
								columnWidth : 0.5,
								layout : "form",
								items : [ this.quesRadio ]
							} ]
						});
						this.widthstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "value" ],
									data : [
											[
													"50",
													WtfGlobal
															.getLocaleText("hrms.performance.Half") ],
											[
													"100",
													WtfGlobal
															.getLocaleText("hrms.performance.Full") ] ]
								});
						this.widthCombo = new Wtf.form.ComboBox({
							store : this.widthstore,
							displayField : "value",
							valueField : "id",
							value : "50",
							forceSelection : true,
							selectOnFocus : true,
							triggerAction : "all",
							mode : "local",
							width : 200
						});
						this.text1 = new Wtf.form.TextField({
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							maxLength : 1000
						});
						Wtf.desigRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.def = new Wtf.desigRec({
							id : "0",
							name : "All"
						});
						Wtf.desigStore.add(this.def);
						this.wthcombo = new Wtf.form.FnComboBox({
							store : Wtf.desigStore,
							displayField : "name",
							scope : this,
							selectOnFocus : true,
							width : 200,
							allowBlank : false,
							typeAhead : true,
							valueField : "id",
							mode : "local",
							hiddenName : "id",
							height : 200,
							triggerAction : "all",
							addNewFn : this.addDesignation.createDelegate(this)
						});
						this.isVisible = new Wtf.grid.CheckColumn({
							header : WtfGlobal
									.getLocaleText("hrms.common.Visible"),
							dataIndex : "isVisible",
							width : 45
						});
						this.selectedquestion = new Wtf.grid.CheckboxSelectionModel();
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										this.selectedquestion,
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.question"),
											sortable : true,
											editor : this.text1,
											dataIndex : "qdesc",
											hideable : false,
											renderer : function(G) {
												return WtfGlobal
														.commentRenderer(G)
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.NoofAnswers"),
											sortable : true,
											editor : new Wtf.form.NumberField({
												allowBlank : false,
												allowNegative : false,
												allowDecimals : false,
												validationDelay : 0,
												maxValue : 5
											}),
											dataIndex : "qans",
											hideable : false
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.OrderofAppearance"),
											sortable : true,
											editor : new Wtf.form.NumberField({
												allowBlank : false,
												allowNegative : false,
												allowDecimals : false,
												validationDelay : 0,
												maxValue : 100,
												minValue : 1
											}),
											dataIndex : "qorder",
											hideable : false
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Width"),
											sortable : true,
											editor : this.widthCombo,
											dataIndex : "qtype",
											hideable : false,
											renderer : Wtf.ux
													.comboBoxRenderer(this.widthCombo)
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.AppraiserDesignation"),
											sortable : true,
											editor : this.wthcombo,
											dataIndex : "qdes",
											renderer : Wtf.ux
													.comboBoxRenderer(this.wthcombo)
										}, this.isVisible ]);
						this.goalRecord = Wtf.data.Record.create([ {
							name : "qdescription"
						}, {
							name : "qdesc"
						}, {
							name : "qans"
						}, {
							name : "qdes"
						}, {
							name : "qtype"
						}, {
							name : "qorder"
						}, {
							name : "isVisible"
						} ]);
						this.goalReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.goalRecord);
						this.goalstore = new Wtf.data.Store(
								{
									url : "Performance/Competency/getCompetencyQuestion.pf",
									reader : this.goalReader,
									baseParams : {
										flag : 29
									}
								});
						this.quesgrid = new Wtf.grid.EditorGridPanel({
							store : this.goalstore,
							sm : this.selectedquestion,
							height : 100,
							autoScroll : true,
							border : false,
							nopaging : true,
							id : "quesGrid" + this.id,
							scope : this,
							plugins : [ this.isVisible ],
							clicksToEdit : 1,
							serverSideSearch : false,
							displayInfo : true,
							viewConfig : {
								forceFit : true,
								emptyText : Wtf.gridEmptytext
							},
							tbar : E,
							cm : this.cm1
						});
						this.selectedquestion.on("selectionchange", function() {
							if (this.selectedquestion.getCount() > 0) {
								this.deletebutton.setDisabled(false)
							} else {
								this.deletebutton.setDisabled(true)
							}
						}, this);
						this.quesgrid.on("validateedit", function(G) {
							if (G.field == "qdesc") {
								if (G.value.length > 1000) {
									return false
								}
							}
						}, this);
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.on("load", this.setcomboVal1, this),
									Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.setcomboVal1()
						}
						this.movetoright = document.createElement("img");
						this.movetoright.src = "images/arrowright.gif";
						this.movetoright.style.width = "24px";
						this.movetoright.style.height = "24px";
						this.movetoright.style.margin = "5px 0px 5px 0px";
						this.movetoright.onclick = this.movetorightclicked
								.createDelegate(this, []);
						this.movetoleft = document.createElement("img");
						this.movetoleft.src = "images/arrowleft.gif";
						this.movetoleft.style.width = "24px";
						this.movetoleft.style.height = "24px";
						this.movetoleft.style.margin = "5px 0px 5px 0px";
						this.movetoleft.onclick = this.movetoleftclicked
								.createDelegate(this, []);
						this.centerdiv = document.createElement("div");
						this.centerdiv.appendChild(this.movetoright);
						this.centerdiv.appendChild(this.movetoleft);
						this.centerdiv.style.padding = "135px 10px 135px 10px";
						var F = "1";
						var D = "";
						var C = "";
						if (this.text1 == "edit") {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Update");
							var A = 9;
							F = this.group_id;
							D = WtfGlobal
									.getLocaleText("hrms.performance.group.updated.successfully");
							C = WtfGlobal
									.getLocaleText("hrms.performance.edit.group");
							this.imgsrc = "edit-group.gif"
						} else {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Create");
							var A = 6;
							F = this.group_id;
							D = WtfGlobal
									.getLocaleText("hrms.performance.group.added.successfully");
							C = WtfGlobal
									.getLocaleText("hrms.performance.create.new.group");
							this.imgsrc = "add-group.gif"
						}
						this.assignTeamPanel = new Wtf.Panel(
								{
									layout : "border",
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												cls : "panelstyleClass1",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.performance.competency.management"),
														WtfGlobal
																.getLocaleText("hrms.performance.Addquestionsforselecteddesignation"),
														"images/compentencymanagement.jpg")
											},
											{
												region : "center",
												border : false,
												bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 20px 20px 20px;",
												layout : "fit",
												items : [ {
													border : false,
													bodyStyle : "background:transparent;",
													layout : "border",
													items : [
															{
																region : "north",
																border : false,
																height : 70,
																layout : "border",
																bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 20px 20px 20px;",
																items : [ {
																	region : "center",
																	border : false,
																	layout : "fit",
																	width : 400,
																	items : [ this.groupForm = new Wtf.form.FormPanel(
																			{
																				labelWidth : 80,
																				bodyStyle : "padding-left:160px;",
																				border : false,
																				items : [
																						this.desigCmb,
																						this.emptempfield,
																						{
																							xtype : "hidden",
																							id : "h1",
																							name : "user_ids"
																						} ]
																			}) ]
																} ]
															},
															{
																region : "center",
																border : false,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.performance.Questions"),
																	border : false,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.quesgrid
																} ]
															} ]
												} ]
											} ]
								});
						this.goalstore.load({
							params : {
								desig : this.desigid
							}
						});
						this.add(this.assignTeamPanel)
					},
					insertgoal : function() {
						this.p = new this.goalRecord({
							qdescription : "",
							qdesc : "",
							qans : "",
							qdes : "",
							qtype : "100",
							qorder : "",
							isVisible : ""
						});
						this.quesgrid.stopEditing();
						this.c = this.goalstore.getCount();
						this.goalstore.insert(this.c, this.p)
					},
					deletequestions : function() {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : deleteMsgBox("question"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(button) {
										if (button == "yes") {
											this.delkey = this.selectedquestion
													.getSelections();
											this.ids = [];
											this.selectedquestion
													.clearSelections();
											var store = this.quesgrid
													.getStore();
											if (this.delkey.length > 0) {
												for ( var i = 0; i < this.delkey.length; i++) {
													var rec = this.goalstore
															.indexOf(this.delkey[i]);
													WtfGlobal.highLightRow(
															this.quesgrid,
															"FF0000", 5, rec);
													if (this.delkey[i]
															.get("qdescription")) {
														this.ids
																.push(this.delkey[i]
																		.get("qdescription"))
													} else {
														store
																.remove(this.delkey[i])
													}
												}
												if (this.ids.length > 0) {
													calMsgBoxShow(201, 4, true);
													Wtf.Ajax
															.requestEx(
																	{
																		url : "Performance/Competency/deleteCompetencyQuestion.pf",
																		params : {
																			flag : 45,
																			ids : this.ids,
																			desigid : this.desigid
																		}
																	},
																	this,
																	function(
																			response) {
																		var myObject = eval("("
																				+ response
																				+ ")");
																		if (myObject.success == true) {
																			calMsgBoxShow(
																					189,
																					0)
																		} else {
																			calMsgBoxShow(
																					228,
																					2)
																		}
																		this.goalstore
																				.load({
																					params : {
																						desig : this.desigid
																					}
																				})
																	},
																	function(
																			response) {
																		calMsgBoxShow(
																				228,
																				1)
																	})
												}
											} else {
												calMsgBoxShow(227, 0)
											}
										}
									}
								})
					},
					setcomboVal1 : function() {
						if (Wtf.desigStore.getCount() != 0) {
							if (this.desname != "") {
								this.desigCmb.setValue(this.desigid)
							} else {
								var A = Wtf.desigStore.getAt(
										Wtf.desigStore.getCount() - 1)
										.get("id");
								this.desigCmb.setValue(A);
								this.desigid = A
							}
						} else {
							this.desigCmb
									.setValue(WtfGlobal
											.getLocaleText("hrms.performance.Nodesignationavailable"))
						}
					},
					setAllValue : function() {
						if (Wtf.desigStore.indexOf(this.def) == -1) {
							Wtf.desigStore.add(this.def)
						}
					},
					saveQuestionCompetency : function() {
						var G = new Array();
						var J;
						var K = "";
						var H = 1;
						var L = [ "qdescription", "qans", "qdes" ];
						var A = [ "Question", "No.of Ans", "Designation" ];
						var B = this.goalstore.data;
						if (B.length == 0) {
							this.close()
						} else {
							if (H == 1) {
								for ( var I = 0; I < B.length; I++) {
									J = B.items[I].data;
									if (J.qdesc == "") {
										calMsgBoxShow(186, 2);
										return
									}
									if (J.qorder == "") {
										calMsgBoxShow(188, 2);
										return
									}
									if (J.qans == "") {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.warning"),
														WtfGlobal
																.getLocaleText("hrms.performance.Noofanswerscannotbeempty") ],
												2);
										return
									}
									for ( var F = 0; F < B.length; F++) {
										var E = B.items[F].data;
										if (E.qorder == J.qorder && I != F) {
											calMsgBoxShow(187, 2);
											return
										}
									}
									for ( var D = 0; D < this.goalstore
											.getCount(); D++) {
										var C = this.goalstore.getAt(D);
										if (C.get("qorder") == J.qorder
												&& C.get("qdescription") != J.qdescription) {
											calMsgBoxShow(187, 2);
											return
										}
									}
									G.push({
										qdescription : J.qdesc,
										qid : J.qdescription,
										qans : J.qans,
										qorder : J.qorder,
										qtype : J.qtype,
										qdes : J.qdes,
										isVisible : J.isVisible
									})
								}
								calMsgBoxShow(200, 4, true);
								Wtf.desigStore.clearFilter();
										Wtf.Ajax
												.requestEx(
														{
															url : "Performance/Competency/insertQuestion.pf",
															params : {
																jsondata : Wtf
																		.encode(G),
																desigid : this.desigid
															}
														},
														this,
														function(M) {
															this.close();
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.success"),
																			WtfGlobal
																					.getLocaleText("hrms.performance.Questionaddedsuccessfully") ],
																	0)
														}, function(M) {
															calMsgBoxShow(229,
																	1)
														}),
										Wtf.Ajax
												.requestEx(
														{
															url : "Performance/Competency/assignCompetency.pf",
															params : {
																flag : 104,
																item_ids : this.ids1,
																wth : this.wth,
																desid : this.desid
															}
														},
														this,
														function(M) {
															this.fireEvent(
																	"savedata",
																	this);
															this.close()
														},
														function(M) {
															calMsgBoxShow(27, 1);
															this.close()
														})
							}
						}
					},
					empSearch : function(A, C, B) {
						this.quickSearchEmp.StorageChanged(A)
					},
					empAssgSearch : function(A, C, B) {
						this.quickSearchAssgEmp.StorageChanged(A);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					movetorightclicked : function() {
						var A = this.availablesm.getSelections();
						if (A.length > 0) {
							this.selectedds.add(A)
						}
						for ( var B = 0; B < A.length; B++) {
							this.availableds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					movetoleftclicked : function() {
						var A = this.selectedsm.getSelections();
						if (A.length > 0) {
							this.availableds.add(A)
						}
						for ( var B = 0; B < A.length; B++) {
							this.selectedds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							Wtf.getCmp("bttntext").enable()
						} else {
							Wtf.getCmp("bttntext").disable()
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					}
				});
Wtf.grid.CheckColumn = function(A) {
	Wtf.apply(this, A);
	if (!this.id) {
		this.id = Wtf.id()
	}
	this.renderer = this.renderer.createDelegate(this)
};
Wtf.grid.CheckColumn.prototype = {
	init : function(A) {
		this.grid = A;
		this.grid.on("render", function() {
			var B = this.grid.getView();
			B.mainBody.on("mousedown", this.onMouseDown, this)
		}, this)
	},
	onMouseDown : function(D, C) {
		if (C.className && C.className.indexOf("x-grid3-cc-" + this.id) != -1) {
			D.stopEvent();
			var B = this.grid.getView().findRowIndex(C);
			var A = this.grid.store.getAt(B);
			A.set(this.dataIndex, !A.data[this.dataIndex])
		}
	},
	renderer : function(B, C, A) {
		C.css += " x-grid3-check-col-td";
		return '<div class="x-grid3-check-col' + (B ? "-on" : "")
				+ " x-grid3-cc-" + this.id + '">&#160;</div>'
	}
};
Wtf.manageCompetency = function(A) {
	Wtf.manageCompetency.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.manageCompetency,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.manageCompetency.superclass.initComponent
								.call(this)
					},
					onRender : function(B) {
						Wtf.manageCompetency.superclass.onRender.call(this, B);
						this.record = Wtf.data.Record.create([ {
							"name" : "cmptid"
						}, {
							"name" : "cmptname"
						}, {
							"name" : "cmptdesc"
						}, {
							"name" : "cmptwt"
						} ]);
						this.ds = new Wtf.data.Store({
							baseParams : {
								flag : 101
							},
							url : "Performance/Competency/getCompetency.pf",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.record)
						});
						calMsgBoxShow(202, 4, true);
						this.ds.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											dataIndex : "cmptid",
											hidden : true,
											hideable : false
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.competency"),
											dataIndex : "cmptname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "cmptdesc",
											sortable : true,
											renderer : function(C) {
												if (Wtf.isIE6 || Wtf.isIE7) {
													return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
															+ C
															+ '">'
															+ C
															+ "</pre>"
												}
												return "<span style='white-space:pre-wrap;'>"
														+ C + "</span>"
											}
										} ]);
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.ds
												.load({
													params : {
														start : 0,
														limit : this.competencyGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.competencyGrid.id)
												.setValue("")
									}
								});
						this.deleteButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.delete"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.competency.delete.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 53,
									disabled : true,
									hidden : true,
									scope : this,
									handler : this.deletecomptency
								});
						this.addButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.add"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.competency.add.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									minWidth : 42,
									handler : this.add1,
									hidden : true,
									scope : this
								});
						this.editButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.competency.edit.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									minWidth : 42,
									disabled : true,
									hidden : true,
									handler : this.edit1,
									scope : this
								});
						this.searchText = new Wtf.form.TextField({
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.search"),
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.search"),
							handler : this.search1,
							scope : this
						});
						var A = new Array();
						A.push("-");
						A.push(this.refreshBtn);
						A.push("-");
						A.push(this.addButton);
						A.push("-");
						A.push(this.editButton);
						A.push("-");
						A.push(this.deleteButton);
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.competencymaster,
								Wtf.Perm.competencymaster.add)) {
							this.addButton.show()
						}
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.competencymaster,
								Wtf.Perm.competencymaster.edit)) {
							this.editButton.show()
						}
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.competencymaster,
								Wtf.Perm.competencymaster.deletecomp)) {
							this.deleteButton.show()
						}
						this.competencyGrid = new Wtf.KwlGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									cls : "gridWithUl",
									border : false,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addcompetency(\""
														+ this.id
														+ "\")'>"
														+ WtfGlobal
																.getLocaleText("hrms.performance.manage.competency.grid.msg")
														+ "</a>")
									},
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.performance.manage.competency.grid.search.msg"),
									loadMask : true,
									serverSideSearch : true,
									displayInfo : true,
									searchField : "cmptname",
									listeners : {
										scope : this,
										rowclick : function(D, E, C) {
											this.rowindex = E
										}
									},
									tbar : A
								});
						this.add(this.competencyGrid);
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(A,
									this.competencyGrid, [ 5 ], [ 7 ])
						}, this)
					},
					add1 : function() {
						var A = new Wtf.managecompetencyWindow(
								{
									width : 390,
									modal : true,
									height : 265,
									title : WtfGlobal
											.getLocaleText("hrms.performance.competency"),
									resizable : false,
									layout : "fit",
									wintitle : WtfGlobal
											.getLocaleText("hrms.performance.add.competency"),
									editflag : false,
									datastore : this.ds,
									cleargrid : this.competencyGrid,
									action : "add"
								});
						A.on("show", function() {
							A.competency.focus(true, 100)
						}, this);
						A.show()
					},
					edit1 : function() {
						if (this.competencyGrid.getSelectionModel().getCount() == 0
								|| this.competencyGrid.getSelectionModel()
										.getCount() > 1) {
							calMsgBoxShow(131, 0)
						} else {
							this.editcomp = new Wtf.managecompetencyWindow(
									{
										width : 390,
										modal : true,
										height : 265,
										title : WtfGlobal
												.getLocaleText("hrms.performance.competency"),
										resizable : false,
										layout : "fit",
										wintitle : WtfGlobal
												.getLocaleText("hrms.performance.edit.competency"),
										editflag : true,
										compid : this.competencyGrid
												.getSelectionModel()
												.getSelected().get("cmptid"),
										compname : this.competencyGrid
												.getSelectionModel()
												.getSelected().get("cmptname"),
										compdesc : this.competencyGrid
												.getSelectionModel()
												.getSelected().get("cmptdesc"),
										compwt : this.competencyGrid
												.getSelectionModel()
												.getSelected().get("cmptwt"),
										datastore : this.ds,
										cleargrid : this.competencyGrid,
										action : "edit"
									});
							this.editcomp.on("show", function() {
								this.editcomp.competency.focus(true, 100)
							}, this);
							this.editcomp.show()
						}
					},
					deletecomptency : function() {
						this.delkey = this.sm.getSelections();
						this.ids = [];
						this.competencyGrid.getSelectionModel()
								.clearSelections();
						for ( var i = 0; i < this.delkey.length; i++) {
							this.ids.push(this.delkey[i].get("cmptid"));
							var rec = this.ds.indexOf(this.delkey[i]);
							WtfGlobal.highLightRow(this.competencyGrid,
									"FF0000", 5, rec)
						}
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : deleteMsgBox("competency"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(button) {
										if (button == "yes") {
											calMsgBoxShow(201, 4, true);
											Wtf.Ajax
													.requestEx(
															{
																baseParams : {
																	flag : 106
																},
																url : "Performance/Competency/deleteCompetency.pf",
																scope : this,
																params : {
																	cmptid : this.ids
																}
															},
															this,
															function(response) {
																var params = {
																	start : 0,
																	limit : this.competencyGrid.pag.pageSize
																};
																var res = eval("("
																		+ response
																		+ ")");
																if (res.success) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					res.message ],
																			0)
																} else {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					res.message ],
																			2)
																}
																WtfGlobal
																		.delaytasks(
																				this.ds,
																				params)
															}, function() {
																calMsgBoxShow(
																		27, 1)
															})
										}
									}
								})
					}
				});
function addcompetency(A) {
	Wtf.getCmp(A).add1()
}
Wtf.archivedGoals = function(A) {
	Wtf.archivedGoals.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.archivedGoals,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.archivedGoals.superclass.initComponent
								.call(this, A)
					},
					onRender : function(A) {
						Wtf.archivedGoals.superclass.onRender.call(this, A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.goalRecord = Wtf.data.Record.create([ {
							name : "empname"
						}, {
							name : "manname"
						}, {
							name : "gname"
						}, {
							name : "gid"
						}, {
							name : "gdescription"
						}, {
							name : "gwth"
						}, {
							name : "gcontext"
						}, {
							name : "gpriority"
						}, {
							name : "gstartdate",
							type : "date"
						}, {
							name : "genddate",
							type : "date"
						}, {
							name : "gcomment"
						} ]);
						this.goalReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.goalRecord);
						this.goalstore = new Wtf.data.Store({
							url : "Performance/Goal/archivedgoalsfunction.pf",
							reader : this.goalReader,
							baseParams : {
								flag : 150
							}
						});
						calMsgBoxShow(202, 4, true);
						this.goalstore.load();
						this.goalstore.on("load", function() {
							this.unarchivebutton.setDisabled(true);
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											sortable : true,
											dataIndex : "empname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.manager.name"),
											sortable : true,
											dataIndex : "manname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.name"),
											sortable : true,
											dataIndex : "gname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.description"),
											sortable : true,
											dataIndex : "gdescription"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.weightage"),
											sortable : true,
											dataIndex : "gwth"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.context"),
											sortable : true,
											dataIndex : "gcontext"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.priority"),
											sortable : true,
											dataIndex : "gpriority"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											sortable : true,
											dataIndex : "gstartdate",
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.due.date"),
											sortable : true,
											dataIndex : "genddate",
											renderer : WtfGlobal.onlyDateRenderer
										} ]);
						this.goalgrid = new Wtf.KwlGridPanel(
								{
									store : this.goalstore,
									sm : this.sm,
									autoScroll : true,
									border : false,
									scope : this,
									id : "archivedgoalemp",
									clicksToEdit : 1,
									searchField : "empname",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									serverSideSearch : true,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.performance.no.goal.archived"))
									},
									cm : this.cm1,
									tbar : [
											"-",
											new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.reset"),
														scope : this,
														iconCls : "pwndRefresh",
														handler : function() {
															this.goalstore
																	.load({
																		params : {
																			start : 0,
																			limit : this.goalgrid.pag.pageSize
																		}
																	});
															Wtf
																	.getCmp(
																			"Quick"
																					+ this.goalgrid.id)
																	.setValue(
																			"")
														}
													}),
											"-",
											this.unarchivebutton = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.performance.unarchive.goals"),
														tooltip : WtfGlobal
																.getLocaleText("hrms.performance.remove.goals.from.archive.repository"),
														iconCls : "pwndCommon archivebuttonIcon",
														minWidth : 87,
														scope : this,
														handler : this.unarchivegoal
													}) ]
								});
						this.add(this.goalgrid);
						this.sm.on("selectionchange", function() {
							if (this.sm.getCount() > 0) {
								this.unarchivebutton.setDisabled(false)
							} else {
								this.unarchivebutton.setDisabled(true)
							}
						}, this)
					},
					unarchivegoal : function() {
						if (this.goalgrid.getSelectionModel().getCount() == 0) {
							calMsgBoxShow(42, 1, false, 225)
						} else {
							this.archiverec = this.goalgrid.getSelectionModel()
									.getSelections();
							this.archivearr = [];
							this.archivearr1 = [];
							for ( var A = 0; A < this.archiverec.length; A++) {
								this.archivearr.push(this.archiverec[A]
										.get("gid"));
								this.archivearr1.push(this.archiverec[A]
										.get("gname"))
							}
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax.requestEx({
								url : "Performance/Goal/insertGoal.pf",
								params : {
									flag : 205,
									archiveid : this.archivearr,
									archive : "false",
									gname : this.archivearr1
								}
							}, this, function() {
								this.goalstore.load();
								var B = Wtf.getCmp("archivedgoalemp");
								if (B != null) {
									B.getStore().load()
								}
								msgFlag = 0;
								calMsgBoxShow(205, 0)
							}, function() {
								calMsgBoxShow(27, 1)
							})
						}
					}
				});
Wtf.allemployeegoals = function(A) {
	Wtf.allemployeegoals.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.allemployeegoals,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.allemployeegoals.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						Wtf.allemployeegoals.superclass.onRender.call(this, A);
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "fname"
						}, {
							name : "lname"
						}, {
							name : "emailid"
						}, {
							name : "designation"
						}, {
							name : "contactno"
						}, {
							name : "fullname"
						} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						this.ds = new Wtf.data.Store({
							url : "Common/getEmpForManagerFunction.common",
							baseParams : {
								flag : 141,
								paging : true
							},
							reader : this.reader
						});
						calMsgBoxShow(202, 4, true);
						this.ds.load();
						this.ds.on("load", function() {
							WtfGlobal.closeProgressbar()
						}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.employee.assign.goal")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.employee.designation"),
											dataIndex : "designation",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.employee.assign.goal")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.employee.email"),
											dataIndex : "emailid",
											sortable : true,
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.employee.contact"),
											dataIndex : "contactno",
											sortable : true,
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ WtfGlobal
																.getLocaleText("hrms.performance.employee.assign.goal")
														+ '" wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										} ]);
						this.assignbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.assign.goals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.assign.goals.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 82,
									disabled : true,
									handler : this.add1,
									scope : this
								});
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.ds.load({
											params : {
												start : 0,
												limit : this.grid.pag.pageSize
											}
										});
										Wtf.getCmp("Quick" + this.grid.id)
												.setValue("")
									}
								});
						this.viewbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.view.goals"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 75,
									disabled : true,
									handler : this.viewgoals,
									scope : this
								});
						var B = new Array();
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.assigngoals,
								Wtf.Perm.assigngoals.assign)) {
							B.push("-");
							B.push(this.refreshBtn);
							B.push("-");
							B.push(this.assignbutton)
						}
						this.grid = new Wtf.KwlGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									border : false,
									layout : "fit",
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									},
									stripeRows : true,
									loadMask : true,
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "fullname",
									serverSideSearch : true,
									tbar : B
								});
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(B, this.grid, [],
									[ 3 ])
						}, this);
						this.add(this.grid)
					},
					add1 : function() {
						this.arr = this.sm.getSelections();
						var C = this.arr[0].get("fullname");
						var B = this.arr[0].get("userid");
						var A = Wtf.getCmp("goalmanagementtabpanel");
						var D = Wtf.getCmp(B + "perticularemployeesforgoal");
						if (D == null) {
							D = new Wtf.perticularemployeegoals(
									{
										id : B + "perticularemployeesforgoal",
										title : WtfGlobal
												.getLocaleText("hrms.performance.assign.goals.to")
												+ " " + C,
										iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
										layout : "fit",
										border : false,
										closable : true,
										assign : true,
										empid : B
									});
							A.add(D)
						}
						A.setActiveTab(D);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					viewgoals : function() {
						this.arr = this.sm.getSelections();
						var C = this.arr[0].get("fullname");
						var B = this.arr[0].get("userid");
						var A = Wtf.getCmp("goalmanagementtabpanel");
						var D = Wtf.getCmp(B + "viewemployeesgoals");
						if (D == null) {
							D = new Wtf.perticularemployeegoals(
									{
										id : B + "viewemployeesgoals",
										title : C
												+ WtfGlobal
														.getLocaleText("hrms.performance.s.goals"),
										iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
										layout : "fit",
										border : false,
										assign : false,
										closable : true,
										empid : B
									});
							A.add(D)
						}
						A.setActiveTab(D);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					}
				});
Wtf.finalScore = function(A) {
	Wtf.finalScore.superclass.constructor.call(this, A);
	Wtf.form.Field.prototype.msgTarget = "side";
	this.appraisalView = 0
};
Wtf
		.extend(
				Wtf.finalScore,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.finalScore.superclass.initComponent.call(this, A)
					},
					onRender : function(D) {
						Wtf.finalScore.superclass.onRender.call(this, D);
						if (!Wtf.StoreMgr.containsKey("prat")) {
							Wtf.prat.load();
							Wtf.StoreMgr.add("prat", Wtf.prat)
						}
						this.record = Wtf.data.Record.create([ {
							name : "fid"
						}, {
							name : "eid"
						}, {
							name : "ename"
						}, {
							name : "desig"
						}, {
							name : "desigid"
						}, {
							name : "date",
							type : "date"
						}, {
							name : "man"
						}, {
							name : "apptype"
						}, {
							name : "cscore"
						}, {
							name : "gscore"
						}, {
							name : "tscore"
						}, {
							name : "empcom"
						}, {
							name : "performance"
						}, {
							name : "mancom"
						}, {
							name : "prate"
						}, {
							name : "status"
						}, {
							name : "gapscore"
						}, {
							name : "reviewstatus"
						}, {
							name : "reviewcomment"
						}, {
							name : "salary"
						}, {
							name : "prevsalary"
						}, {
							name : "salaryrecommend"
						}, {
							name : "newdesignation"
						}, {
							name : "newdesignationname"
						}, {
							name : "newdepartment"
						}, {
							name : "newdepartmentname"
						}, {
							name : "salaryincrement"
						}, {
							name : "performance"
						}, {
							name : "appcyclesdate"
						}, {
							name : "appcycleedate"
						}, {
							name : "appcyclename"
						}, {
							name : "appcycleid"
						} ]);
						var C = new Wtf.grid.GroupSummary();
						this.ds = new Wtf.data.GroupingStore(
								{
									baseParams : {
										flag : 136,
										finalreport : this.myfinalreport,
										userid : this.userid,
										reviewappraisal : this.reviewappraisal
									},
									url : Wtf.req.base + "hrms.jsp",
									reader : new Wtf.data.KwlJsonReader1({
										root : "data",
										totalProperty : "count"
									}, this.record),
									sortInfo : {
										field : "apptype",
										direction : "ASC"
									},
									groupField : (this.myfinalreport == "1") ? "apptype"
											: "ename"
								});
						calMsgBoxShow(202, 4, true);
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.ds.on("beforeload", function() {
							this.ds.baseParams = {
								flag : 136,
								finalreport : this.myfinalreport,
								userid : this.userid,
								reviewappraisal : this.reviewappraisal,
								appraisalcycid : this.appTypeCombo.getValue(),
								view : this.appraisalView
							}
						}, this);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.apprec = new Wtf.data.Record.create([ {
							name : "appcycleid"
						}, {
							name : "appcycle"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "currentFlag"
						} ]);
						this.appTypeStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisalcycleform.pf",
									baseParams : {
										flag : 168
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.apprec),
									autoLoad : false
								});
						this.appTypeStore.load();
						this.appTypeStore
								.on(
										"load",
										function() {
											if (this.appTypeStore.getCount() > 0) {
												var F = this.appTypeStore
														.findBy(
																this.findrecord,
																this);
												if (F != -1) {
													this.appTypeCombo
															.setValue(this.appTypeStore
																	.getAt(F)
																	.get(
																			"appcycleid"))
												}
												this.ds.baseParams = {
													flag : 136,
													finalreport : this.myfinalreport,
													userid : this.userid,
													reviewappraisal : this.reviewappraisal,
													appraisalcycid : this.appTypeCombo
															.getValue()
												};
												this.ds
														.load({
															params : {
																start : 0,
																limit : this.finalGrid.pag.pageSize
															}
														})
											}
										}, this);
						this.appTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "appcycleid",
									displayField : "appcycle",
									store : this.appTypeStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle")
											+ "*",
									width : 150,
									typeAhead : true
								});
						this.appTypeCombo.on("select", function() {
							this.ds.baseParams = {
								flag : 136,
								finalreport : this.myfinalreport,
								userid : this.userid,
								reviewappraisal : this.reviewappraisal,
								appraisalcycid : this.appTypeCombo.getValue()
							};
							this.ds.load({
								params : {
									start : 0,
									limit : this.finalGrid.pag.pageSize
								}
							})
						}, this);
						this.arr = [];
						this.arr.push(this.sm);
						this.arr
								.push(
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											hidden : (this.myfinalreport != "1") ? false
													: true,
											dataIndex : "ename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.OldDesignation"),
											dataIndex : "desig",
											hideable : false,
											summaryRenderer : function(F, H, G) {
												return "Total"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.new.designation"),
											dataIndex : "newdesignationname"
										},
										{
											header : '<div align="right">Previous Salary('
													+ WtfGlobal
															.getCurrencySymbol()
													+ ")</div>",
											dataIndex : "prevsalary",
											renderer : function(F) {
												return ('<div align="right">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		F)
																		.toFixed(
																				2)) + "</div>")
											}
										},
										{
											header : '<div align="right">Current Salary('
													+ WtfGlobal
															.getCurrencySymbol()
													+ ")</div>",
											dataIndex : "salary",
											renderer : function(F) {
												return ('<div align="right">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		F)
																		.toFixed(
																				2)) + "</div>")
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.appraisal.date"),
											dataIndex : "date",
											hidden : true,
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.approving.appraiser"),
											hidden : true,
											dataIndex : "man"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.appraisal.cycle"),
											dataIndex : "apptype"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.competency.score"),
											dataIndex : "cscore",
											summaryType : "average",
											align : "right",
											scope : this,
											renderer : WtfGlobal.numericPrecisionRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.score"),
											dataIndex : "gscore",
											align : "right",
											summaryType : "average",
											scope : this,
											renderer : WtfGlobal.numericPrecisionRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.total.score"),
											dataIndex : "tscore",
											summaryType : "average",
											align : "right",
											scope : this,
											hidden : true,
											renderer : WtfGlobal.numericPrecisionRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.performance.rating"),
											hidden : true,
											dataIndex : "performance",
											scope : this
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.salary.increment")
													+ "(%)",
											dataIndex : "salaryincrement",
											align : "right",
											scope : this
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Comment"),
											dataIndex : "reviewcomment"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.review.status"),
											id : "reviewStat",
											hidden : true,
											dataIndex : "reviewstatus",
											renderer : function(F) {
												if (F == "0") {
													return '<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending")
															+ "</FONT>"
												} else {
													if (F == "1") {
														return '<FONT COLOR="red">'
																+ WtfGlobal
																		.getLocaleText("hrms.common.Unapproved")
																+ "</FONT>"
													} else {
														if (F == "2") {
															return '<FONT COLOR="green">'
																	+ WtfGlobal
																			.getLocaleText("hrms.common.Approved")
																	+ "</FONT>"
														}
													}
												}
											}
										});
						this.cm = new Wtf.grid.ColumnModel(this.arr);
						this.viewAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.view.appraisal"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.select.employee.appraisal.details"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 95,
									disabled : true,
									hidden : true,
									handler : this.viewappraisal,
									scope : this
								});
						this.viewSumApp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.summary.appraisal.report"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.click.view.summary.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 95,
									id : "viewSum" + this.id,
									disabled : true,
									handler : function() {
										this.viewSumappraisal("viewDet"
												+ this.id, "viewSum" + this.id,
												0)
									},
									scope : this
								});
						this.viewDetApp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.detail.appraisal.report"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.view.appraisal.detail"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 95,
									id : "viewDet" + this.id,
									handler : function() {
										this.viewSumappraisal("viewSum"
												+ this.id, "viewDet" + this.id,
												1)
									},
									scope : this
								});
						this.subButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.save.details.employee.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									minWidth : 47,
									id : "sub",
									disabled : true,
									scope : this,
									handler : this.performance
								});
						this.submitAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.generate.report"),
									iconCls : getButtonIconCls(Wtf.btype.reportbutton),
									minWidth : 60,
									handler : this.filterFunction,
									scope : this
								});
						this.approveAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.overall.approve.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 90,
									disabled : true,
									hidden : true,
									scope : this,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.performance.want.to.approve.appraisal")
															+ "<br><br><b>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.data.cannot.changed.later.msg")
															+ "</b></br></br>",
													buttons : Wtf.MessageBox.YESNO,
													icon : Wtf.MessageBox.QUESTION,
													scope : this,
													fn : function(F) {
														if (F == "yes") {
															this
																	.reviewAppraisal(
																			true,
																			330,
																			400)
														}
													}
												})
									}
								});
						this.unapproveAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisal.unapprove.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.cancelbutton),
									minWidth : 90,
									disabled : true,
									scope : this,
									hidden : true,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.appraisal.want.unapprove.appraisal")
															+ "<br><br><b>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.data.cannot.changed.later.msg")
															+ "</b></br></br>",
													buttons : Wtf.MessageBox.YESNO,
													icon : Wtf.MessageBox.QUESTION,
													scope : this,
													fn : function(F) {
														if (F == "yes") {
															this
																	.reviewAppraisal(
																			false,
																			250,
																			400)
														}
													}
												})
									}
								});
						this.addComment = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.AddComment"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									disabled : true,
									minWidth : 60,
									hidden : true,
									handler : this.addcomments,
									scope : this
								});
						this.startDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.start.date"),
							width : 125,
							name : "startdate",
							value : new Date(),
							allowBlank : false,
							readOnly : true,
							format : "m/d/Y"
						});
						this.endDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.end.date"),
							width : 125,
							name : "startdate",
							value : new Date(),
							allowBlank : false,
							readOnly : true,
							format : "m/d/Y"
						});
						var E = Wtf.KwlGridPanel;
						var A = new Array();
						if (this.reviewer) {
							A.push("-");
							A.push(this.viewAppraisal);
							A.push(this.approveAppraisal);
							A.push(this.unapproveAppraisal);
							A.push(this.addComment)
						} else {
							if (this.myfinalreport == 0) {
								if (!WtfGlobal.EnableDisable(
										Wtf.UPerm.finalscore,
										Wtf.Perm.finalscore.manage)) {
									A.push("-");
									A.push(this.viewAppraisal);
									E = Wtf.KwlEditorGridPanel
								}
							}
						}
						A.push(this.viewSumApp);
						A.push("-");
						A.push(this.viewDetApp);
						if (this.myfinalreport != 1) {
							A.push("->");
							A
									.push(WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle")
											+ ":");
							A.push(this.appTypeCombo)
						}
						var B = "";
						this.finalGrid = new E(
								{
									cm : this.cm,
									store : this.ds,
									border : false,
									sm : this.sm,
									height : 600,
									loadMask : true,
									plugins : C,
									view : new Wtf.grid.GroupingView(
											{
												forceFit : true,
												showGroupName : false,
												enableGroupingMenu : false,
												enableNoGroups : false,
												hideGroupedColumn : true,
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.performance.no.appraisal.done.till")),
												groupTextTpl : ((this.myfinalreport != 1 && this.reviewer == true) ? "{text} (Select all Appraisal records to Approve)"
														: "{text}")
											}),
									searchLabel : WtfGlobal
											.getLocaleText("hrms.common.QuickSearch"),
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									displayInfo : true,
									searchField : "ename",
									clicksToEdit : 1,
									tbar : A
								});
						this.finalGrid
								.on("afteredit", this.fillGridValue, this);
						this.finalGrid.on("beforeedit", this.checkEditable,
								this);
						this.finalInfopanel = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ {
								region : "center",
								border : false,
								frame : false,
								layout : "fit",
								items : [ this.finalGrid ]
							} ]
						});
						this.add(this.finalInfopanel);
						if (this.myfinalreport == 1) {
						}
						if (this.reviewer) {
							this.sm
									.on(
											"selectionchange",
											function() {
												WtfGlobal.enableDisableBtnArr(
														A, this.finalGrid,
														[ 1 ], [ 3, 4 ]);
												if (this.sm.hasSelection()) {
													this.statusrec = this.sm
															.getSelections();
													this.checkRec = this.statusrec[0]
															.get("eid");
													this.disableFlag = false;
													for ( var F = 0; F < this.statusrec.length; F++) {
														if (this.checkRec != this.statusrec[F]
																.get("eid")) {
															this.disableFlag = true
														}
													}
													var G = this.finalGrid.store
															.queryBy(
																	function(H) {
																		if (H
																				.get("eid") == this.checkRec) {
																			return true
																		} else {
																			return false
																		}
																	}, this);
													if (G.length != this.statusrec.length) {
														this.disableFlag = true
													}
													if (this.disableFlag) {
														this.approveAppraisal
																.disable()
													} else {
														this.approveAppraisal
																.enable()
													}
												} else {
													this.approveAppraisal
															.disable()
												}
											}, this)
						} else {
							if (this.myfinalreport == 0) {
								this.sm.on("selectionchange", function() {
									if (this.sm.hasSelection()) {
									} else {
									}
									WtfGlobal.enableDisableBtnArr(A,
											this.finalGrid, [ 1 ], [])
								}, this)
							}
						}
					},
					rateRenderer : function(B) {
						if (B != "none") {
							var A = Wtf.prat.getAt(Wtf.prat.find("id", B)).get(
									"name");
							return A
						} else {
							return ""
						}
					},
					fillGridValue : function(A) {
						for (i = 0; i < Wtf.prat.getCount(); i++) {
							if (Wtf.prat.getAt(i).get("prat") == A.value) {
								this.ds.getAt(A.row).set("prate", A.value)
							}
						}
					},
					viewappraisal : function() {
						if (this.finalGrid.getSelectionModel().getCount() == 0
								|| this.finalGrid.getSelectionModel()
										.getCount() > 1) {
							calMsgBoxShow(42, 2)
						} else {
							var B = this.finalGrid.getSelectionModel()
									.getSelected().data;
							var A = Wtf.getCmp("goalmanagementtabpanel");
							var C = Wtf.getCmp(B.eid + "viewappraisal");
							if (C == null) {
								C = new Wtf.competencyEval(
										{
											id : B.eid + "viewappraisal",
											title : WtfGlobal
													.getLocaleText({
														key : "hrms.performance.s.appraisal.form",
														params : [ B.ename ]
													}),
											iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
											autoScroll : true,
											border : false,
											closable : true,
											viewappraisal : true,
											employee : false,
											read : true,
											modify : true,
											desid : B.desigid,
											aid : B.fid,
											empid : B.eid,
											ename : B.ename,
											designation : B.desig,
											mname : B.man,
											date : B.date,
											empcom : B.empcom,
											mancom : B.mancom,
											compscore : B.cscore,
											goalscore : B.gscore,
											compgapscore : B.gapscore,
											salaryrecommend : B.salaryrecommend,
											salaryincrement : B.salaryincrement,
											newdesignation : B.newdesignation,
											newdepartment : B.newdepartment,
											prating : B.prate,
											apptype : B.apptype,
											stdate : B.appcyclesdate,
											eddate : B.appcycleedate
										});
								A.add(C)
							}
							A.setActiveTab(C);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					checkEditable : function(A) {
						if (A.record.get("status") == "submitted") {
							A.cancel = true
						} else {
							A.cancel = false
						}
					},
					performance : function() {
						if (this.finalGrid.getSelectionModel().getSelections() == 0) {
							calMsgBoxShow(42, 2)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.performance.want.provide.performance.rating")
												+ "<br><br><b>"
												+ WtfGlobal
														.getLocaleText("hrms.common.data.cannot.changed.later.msg")
												+ "</b></br></br>",
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												var B = this.sm.getCount();
												var F = this.sm.getSelections();
												this.status = true;
												for ( var A = 0; A < B; A++) {
													if (F[A].get("prate") == "none"
															|| F[A]
																	.get("status") == "submitted") {
														this.status = false
													}
												}
												if (this.status) {
													var D = [];
													var E = [];
													for (A = 0; A < B; A++) {
														D.push(F[A]
																.get("prate"));
														E.push(F[A].get("fid"))
													}
													calMsgBoxShow(200, 4, true);
													Wtf.Ajax
															.requestEx(
																	{
																		url : Wtf.req.base
																				+ "hrms.jsp?flag=159",
																		params : {
																			item_fid : E,
																			item_prate : D,
																			rateperformance : "performance"
																		}
																	},
																	this,
																	function() {
																		calMsgBoxShow(
																				29,
																				0);
																		this.finalGrid
																				.getSelectionModel()
																				.clearSelections();
																		this.ds
																				.load()
																	},
																	function() {
																		calMsgBoxShow(
																				27,
																				2);
																		this.finalGrid
																				.getSelectionModel()
																				.clearSelections()
																	})
												} else {
													calMsgBoxShow(43, 2)
												}
											}
										}
									})
						}
					},
					addPerformance : function() {
						this.finalGrid.stopEditing();
						WtfGlobal.showmasterWindow(13, Wtf.prat, "Add")
					},
					filterFunction : function() {
						if (this.startDate.getValue() !== ""
								&& this.endDate.getValue() != "") {
							if (this.startDate.getValue() > this.endDate
									.getValue()) {
								calMsgBoxShow(14, 0)
							} else {
								this.finalGrid.getStore().baseParams = {
									flag : 136,
									finalreport : this.myfinalreport,
									userid : this.userid,
									startdate : this.startDate.getValue()
											.format("Y-m-d"),
									enddate : this.endDate.getValue().format(
											"Y-m-d")
								};
								this.finalGrid
										.getStore()
										.load(
												{
													params : {
														start : 0,
														limit : this.finalGrid.pag.pageSize,
														appraisalcycid : this.appTypeCombo
																.getValue()
													}
												})
							}
						} else {
							calMsgBoxShow(152, 2)
						}
					},
					reviewAppraisal : function(E, A, D) {
						var C = this.sm.getCount();
						var F = this.sm.getSelections();
						this.appids = [];
						this.empids = [];
						this.appcycleids = [];
						for ( var B = 0; B < C; B++) {
							this.appids.push(F[B].get("fid"));
							this.empids.push(F[B].get("eid"));
							this.appcycleids.push(F[B].get("appcycleid"))
						}
						this.salaryWin = new Wtf.approvalWindow(
								{
									modal : true,
									title : WtfGlobal
											.getLocaleText("hrms.AuditGroup.Appraisal"),
									closable : true,
									resizable : false,
									layout : "fit",
									width : D,
									height : A,
									finalGrid : this.finalGrid,
									reviewstatus : E,
									appids : this.appids,
									empids : this.empids,
									appcycleids : this.appcycleids,
									ds : this.ds
								});
						this.salaryWin.show()
					},
					addcomments : function() {
						var B = this.sm.getCount();
						var C = this.sm.getSelections();
						this.appids = [];
						for ( var A = 0; A < B; A++) {
							this.appids.push(C[A].get("fid"))
						}
						this.addcom = new Wtf.goalComment(
								{
									width : 390,
									modal : true,
									height : 250,
									title : WtfGlobal
											.getLocaleText("hrms.performance.review.comments"),
									resizable : false,
									layout : "fit",
									note : WtfGlobal
											.getLocaleText("hrms.common.Fillupthefollowingform"),
									read : false,
									blank : false,
									viewflag : true,
									applybutton : true,
									commentarr : this.appids,
									commentflag : false,
									ds : this.ds,
									cleargrid : this.finalGrid
								});
						this.addcom.show()
					},
					reviewFunction : function(E, D, A, G) {
						var C = this.sm.getCount();
						var F = this.sm.getSelections();
						this.appids = [];
						this.empids = [];
						this.appcycleids = [];
						for ( var B = 0; B < C; B++) {
							this.appids.push(F[B].get("fid"));
							this.empids.push(F[B].get("eid"));
							this.appcycleids.push(F[B].get("appcycleid"))
						}
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "hrms.jsp?flag=165",
							params : {
								appraisalids : this.appids,
								employeeids : this.empids,
								reviewstatus : E,
								addComment : false,
								salaryincrement : D,
								appcycleid : this.appcycleids,
								department : A,
								designation : G
							}
						}, this, function() {
							calMsgBoxShow(29, 0);
							this.finalGrid.getSelectionModel()
									.clearSelections();
							this.ds.load()
						}, function() {
							calMsgBoxShow(27, 2);
							this.finalGrid.getSelectionModel()
									.clearSelections()
						})
					},
					findrecord : function(A) {
						if (A.get("currentFlag") == "1") {
							return true
						} else {
							return false
						}
					},
					viewSumappraisal : function(C, B, A) {
						Wtf.getCmp(C).enable();
						Wtf.getCmp(B).disable();
						this.appraisalView = A;
						if (A == 1) {
							this.viewAppraisal.show();
							this.approveAppraisal.show();
							this.unapproveAppraisal.show();
							this.addComment.show();
							this.cm.setHidden(3, true);
							this.cm.setHidden(4, true);
							this.cm.setHidden(6, false);
							this.cm.setHidden(7, false);
							this.cm.setHidden(12, false);
							this.cm.setHidden(13, true);
							if (this.myfinalreport != "1") {
								this.cm.setHidden(15, false)
							}
						} else {
							this.viewAppraisal.hide();
							this.approveAppraisal.hide();
							this.unapproveAppraisal.hide();
							this.addComment.hide();
							this.cm.setHidden(3, false);
							this.cm.setHidden(4, false);
							this.cm.setHidden(6, true);
							this.cm.setHidden(7, true);
							this.cm.setHidden(12, true);
							this.cm.setHidden(13, false);
							this.cm.setHidden(15, true)
						}
						this.ds.load({
							params : {
								start : 0,
								limit : this.finalGrid.pag.pageSize,
								view : this.appraisalView
							}
						})
					}
				});
Wtf.finalReport = function(A) {
	Wtf.finalReport.superclass.constructor.call(this, A);
	this.myfinalReport = this.myfinalReport ? true : false;
	this.reviewappraisal = this.reviewappraisal ? true : false
};
Wtf
		.extend(
				Wtf.finalReport,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.finalReport.superclass.initComponent.call(this, A)
					},
					onRender : function(A) {
						Wtf.finalReport.superclass.onRender.call(this, A);
						this.callGrid();
						this.add(this.finalGrid)
					},
					callGrid : function() {
						this.quickPanelSearch = new Wtf.KWLTagSearch(
								{
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.search.manager.name"),
									width : 200,
									field : "manager"
								});
						this.apprec = new Wtf.data.Record.create([ {
							name : "appcycleid"
						}, {
							name : "appcycle"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "currentFlag"
						}, {
							name : "status"
						} ]);
						var employee = false;
						if (this.myfinalReport) {
							employee = true
						}
						this.appTypeStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisalcycleform.pf",
									baseParams : {
										flag : 168,
										employee : employee,
										myreport : true
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.apprec)
								});
						this.appTypeStore.load();
						this.appTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "appcycleid",
									displayField : "appcycle",
									store : this.appTypeStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle"),
									width : 150,
									typeAhead : true
								});
						this.empRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.empStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisal/getUserForReviewerperAppCyc.pf",
									baseParams : {
										flag : 406,
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.empRec)
								});
						this.empCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "id",
									displayField : "name",
									store : this.empStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.please.select.employee"),
									width : 150,
									typeAhead : true
								});
						this.viewAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.view.appraisal"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.select.employee.appraisal.details"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 95,
									disabled : true,
									hidden : this.myfinalReport ? true : false,
									handler : this.viewappraisal,
									scope : this
								});
						this.approveAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.overall.approve.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 90,
									disabled : true,
									hidden : this.reviewappraisal ? false
											: true,
									scope : this,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.performance.want.to.approve.appraisal")
															+ "<br><br><b>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.data.cannot.changed.later.msg")
															+ "</b></br></br>",
													buttons : Wtf.MessageBox.YESNO,
													icon : Wtf.MessageBox.QUESTION,
													scope : this,
													fn : function(button) {
														if (button == "yes") {
															this
																	.reviewAppraisal(
																			true,
																			360,
																			400)
														}
													}
												})
									}
								});
						this.unapproveAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.appraisal.unapprove.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.cancelbutton),
									minWidth : 90,
									disabled : true,
									scope : this,
									hidden : this.reviewappraisal ? false
											: true,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.appraisal.want.unapprove.appraisal")
															+ "<br><br><b>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.data.cannot.changed.later.msg")
															+ "</b></br></br>",
													buttons : Wtf.MessageBox.YESNO,
													icon : Wtf.MessageBox.QUESTION,
													scope : this,
													fn : function(button) {
														if (button == "yes") {
															this
																	.reviewAppraisal(
																			false,
																			250,
																			400)
														}
													}
												})
									}
								});
						this.totalinitiated = new Wtf.form.NumberField({
							readOnly : true,
							disabled : true,
							value : 0,
							width : 50
						});
						this.totalsubmitted = new Wtf.form.NumberField({
							readOnly : true,
							disabled : true,
							value : 0,
							width : 50
						});
						var _tb = [];
						_tb
								.push(WtfGlobal
										.getLocaleText("hrms.performance.appraisal.cycle")
										+ ":");
						_tb.push(this.appTypeCombo);
						if (!this.myfinalReport) {
							_tb
									.push(WtfGlobal
											.getLocaleText("hrms.performance.select.employee")
											+ ":");
							_tb.push(this.empCmb)
						}
						if (this.reviewappraisal) {
							_tb.push("-")
						}
						_tb.push(this.approveAppraisal);
						if (!Wtf.cmpPref.annmng) {
							if (this.reviewappraisal) {
								_tb.push("-")
							}
							_tb.push(this.unapproveAppraisal)
						}
						_tb.push("->");
						_tb
								.push(WtfGlobal
										.getLocaleText("hrms.performance.total.no.appraisals")
										+ ":");
						_tb.push(this.totalinitiated);
						_tb
								.push(WtfGlobal
										.getLocaleText("hrms.performance.no.of.appraisals.submitted")
										+ ":");
						_tb.push(this.totalsubmitted);
						this.ds = new Wtf.data.Store(
								{
									url : "Performance/NonAnonymousAppraisal/getfinalReportNonAnonymous.pf",
									baseParams : {
										flag : 405,
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader({
										totalProperty : "totalCount",
										root : "data"
									})
								});
						var summary = new Wtf.ux.grid.GridSummary();
						this.sm = new Wtf.grid.CheckboxSelectionModel({});
						this.finalGrid = new Wtf.grid.GridPanel({
							scope : this,
							store : this.ds,
							sm : this.sm,
							loadMask : true,
							view : new Wtf.ux.KWLGridView({
								forceFit : true
							}),
							enableColumnHide : false,
							columns : [],
							border : false,
							tbar : _tb
						});
						this.sm
								.on(
										"selectionchange",
										function() {
											if (this.myfinalReport) {
												WtfGlobal.enableDisableBtnArr(
														_tb, this.finalGrid,
														[], [])
											} else {
												if (!Wtf.cmpPref.annmng) {
													WtfGlobal
															.enableDisableBtnArr(
																	_tb,
																	this.finalGrid,
																	[], [ 7 ])
												}
											}
											if (this.sm.hasSelection()) {
												if (!Wtf.cmpPref.annmng) {
													this.statusrec = this.sm
															.getSelections();
													this.checkRec = "0";
													this.disableFlag = false;
													for ( var i = 0; i < this.statusrec.length; i++) {
														if (this.checkRec != this.statusrec[i]
																.get("reviewStat")) {
															this.disableFlag = true
														}
													}
													var recArr = this.finalGrid.store
															.queryBy(
																	function(
																			record) {
																		if (record
																				.get("reviewStat") == this.checkRec) {
																			return true
																		} else {
																			return false
																		}
																	}, this);
													if (recArr.length != this.statusrec.length) {
														this.disableFlag = true
													}
													if (this.disableFlag) {
														this.unapproveAppraisal
																.disable();
														this.approveAppraisal
																.disable()
													} else {
														this.unapproveAppraisal
																.enable();
														this.approveAppraisal
																.enable()
													}
												}
											}
										}, this);
						this.ds
								.on(
										"load",
										function() {
											var columns = [];
											columns.push(this.sm);
											if (this.ds.reader.jsonData.columns.length < 1) {
												this.finalGrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.performance.appraisal.not.approved"))
											} else {
												if (this.ds.reader.jsonData.totalappraisal != "0"
														&& this.ds.reader.jsonData.appraisalsubmitted != 0) {
													this.finalGrid.getView().emptyText = WtfGlobal
															.emptyGridRenderer(WtfGlobal
																	.getLocaleText("hrms.performance.selected.appraisal.approved"))
												} else {
													if (this.ds.reader.jsonData.totalappraisal != "0"
															&& this.ds.reader.jsonData.appraisalsubmitted == 0) {
														this.finalGrid
																.getView().emptyText = WtfGlobal
																.emptyGridRenderer(WtfGlobal
																		.getLocaleText("hrms.performance.none.appraisers.submitted.appraisal.yet"))
													} else {
														this.finalGrid
																.getView().emptyText = WtfGlobal
																.emptyGridRenderer(WtfGlobal
																		.getLocaleText("hrms.common.no.record.display"))
													}
												}
											}
											this.totalinitiated
													.setValue(this.ds.reader.jsonData.totalappraisal);
											this.totalsubmitted
													.setValue(this.ds.reader.jsonData.appraisalsubmitted);
											Wtf
													.each(
															this.ds.reader.jsonData.columns,
															function(column) {
																if (column.renderer) {
																	if (!Wtf.isIE) {
																		column.renderer = eval("("
																				+ column.renderer
																				+ ")")
																	} else {
																		column.renderer = function(
																				val,
																				meta,
																				record) {
																			var Str = "<span class='valueSpan'><b>"
																					+ val
																					+ "</b></span>";
																			if (record.data[""
																					+ column.dataIndex
																					+ "comment"] != undefined) {
																				Str += "<span class='commentSpan' wtf:qtip='"
																						+ record.data[""
																								+ column.dataIndex
																								+ "comment"]
																						+ "'> "
																						+ Wtf.util.Format
																								.ellipsis(
																										record.data[""
																												+ column.dataIndex
																												+ "comment"],
																										15)
																						+ "</span>"
																			}
																			return Str
																		}
																	}
																}
																if (column.summaryRenderer) {
																	column.summaryRenderer = eval("("
																			+ column.summaryRenderer
																			+ ")")
																}
																columns
																		.push(column)
															});
											this.finalGrid.getColumnModel()
													.setConfig(columns);
											this.storeloaded(this.ds);
											this.finalGrid.getView().refresh()
										}, this);
						this.appTypeStore
								.on(
										"load",
										function() {
											if (this.appTypeStore.getCount() > 0) {
												var row = this.appTypeStore
														.findBy(
																this.findrecord,
																this);
												if (row != -1) {
													this.appTypeCombo
															.setValue(this.appTypeStore
																	.getAt(row)
																	.get(
																			"appcycleid"))
												}
												if (!this.myfinalReport) {
													this.empStore.baseParams = {
														flag : 406,
														reviewer : false,
														appcylid : this.appTypeCombo
																.getValue()
													};
													this.empStore.load()
												} else {
													var recno;
													if (this.apptype !== undefined
															&& this.apptype != "") {
														this.appTypeCombo
																.setValue(this.apptype);
														recno = this.appTypeStore
																.find(
																		"appcycleid",
																		this.apptype)
													} else {
														recno = this.appTypeStore
																.find(
																		"appcycleid",
																		this.appTypeCombo
																				.getValue())
													}
													if (recno != -1) {
														var rec = this.appTypeStore
																.getAt(recno);
														if (rec.data.status == 1) {
															this.ds.baseParams = {
																flag : 405,
																appraisalcycid : this.appTypeCombo
																		.getValue(),
																reviewappraisal : this.reviewappraisal
															};
															this.ds.load()
														} else {
															this.finalGrid
																	.getView().emptyText = WtfGlobal
																	.emptyGridRenderer(WtfGlobal
																			.getLocaleText("hrms.performance.appraisal.cycle.not.approved"));
															this.ds.removeAll();
															this.finalGrid
																	.getView()
																	.refresh()
														}
													}
												}
											} else {
												this.appTypeCombo.emptyText = WtfGlobal
														.getLocaleText("hrms.performance.no.appraisal.initiated");
												this.appTypeCombo.reset()
											}
										}, this);
						this.empStore
								.on(
										"load",
										function() {
											if (this.empStore.getCount() > 0) {
												this.empCmb
														.setValue(this.empStore
																.getAt(0).get(
																		"id"));
												this.ds.baseParams = {
													flag : 405,
													userid : this.myfinalReport ? ""
															: this.empCmb
																	.getValue(),
													appraisalcycid : this.appTypeCombo
															.getValue(),
													reviewappraisal : this.reviewappraisal
												};
												this.ds.load()
											} else {
												this.empCmb.emptyText = WtfGlobal
														.getLocaleText("hrms.performance.no.employee.current.appraisal");
												this.empCmb.reset()
											}
										}, this);
						this.appTypeCombo
								.on(
										"select",
										function(a, b, c) {
											if (!this.myfinalReport) {
												this.empCmb.clearValue();
												this.empStore.baseParams = {
													flag : 406,
													reviewer : false,
													appcylid : this.appTypeCombo
															.getValue()
												};
												this.empStore.load()
											} else {
												if (b.data.status == 1) {
													this.ds.baseParams = {
														flag : 405,
														appraisalcycid : this.appTypeCombo
																.getValue(),
														reviewappraisal : this.reviewappraisal
													};
													this.ds.load()
												} else {
													this.finalGrid.getView().emptyText = WtfGlobal
															.emptyGridRenderer(WtfGlobal
																	.getLocaleText("hrms.performance.appraisal.cycle.not.approved"));
													this.ds.removeAll();
													this.finalGrid.getView()
															.refresh()
												}
											}
										}, this);
						this.empCmb.on("select", function(c, r, i) {
							this.ds.baseParams = {
								flag : 405,
								userid : this.empCmb.getValue(),
								appraisalcycid : this.appTypeCombo.getValue(),
								reviewappraisal : this.reviewappraisal
							};
							this.ds.load()
						}, this)
					},
					findrecord : function(A) {
						if (A.get("currentFlag") == "1") {
							return true
						} else {
							return false
						}
					},
					viewappraisal : function() {
						if (this.finalGrid.getSelectionModel().getCount() == 0
								|| this.finalGrid.getSelectionModel()
										.getCount() > 1) {
							calMsgBoxShow(42, 2)
						} else {
							var B = this.finalGrid.getSelectionModel()
									.getSelected().data;
							var A = Wtf.getCmp("goalmanagementtabpanel");
							var C = Wtf.getCmp(B.eid + "viewappraisal");
							if (C == null) {
								C = new Wtf.competencyEval(
										{
											id : B.eid + "viewappraisal",
											title : WtfGlobal
													.getLocaleText({
														key : "hrms.performance.s.appraisal.form",
														params : [ B.ename ]
													}),
											iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
											autoScroll : true,
											border : false,
											closable : true,
											viewappraisal : true,
											employee : false,
											read : true,
											modify : true,
											desid : B.desigid,
											aid : B.fid,
											empid : B.eid,
											ename : B.ename,
											designation : B.desig,
											mname : B.appraiser,
											date : B.date,
											empcom : B.empcom,
											mancom : B.mcomment,
											compscore : B.cscore,
											goalscore : B.goalscore,
											compgapscore : B.gapscore,
											salaryrecommend : B.salaryrecommend,
											salaryincrement : B.salaryinc,
											newdesignation : B.newdesignation,
											newdepartment : B.newdepartment,
											prating : B.prate,
											apptype : B.apptype,
											stdate : B.appcyclesdate,
											eddate : B.appcycleedate
										});
								A.add(C)
							}
							A.setActiveTab(C);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					storeloaded : function(A) {
						this.quickPanelSearch.StorageChanged(A)
					},
					reviewAppraisal : function(reviewstatus, winheight,
							winwidth) {
						this.appids = [];
						var desig, dept;
						if (!reviewstatus) {
							var rec = this.sm.getSelections();
							for ( var i = 0; i < this.sm.getCount(); i++) {
								if (rec[i].get("fid") != "") {
									this.appids.push(rec[i].get("fid"))
								}
							}
						} else {
							for ( var i = 0; i < this.ds.getCount(); i++) {
								if (this.ds.getAt(i).get("desig") != "") {
									desig = this.ds.getAt(i).get("desig");
									dept = this.ds.getAt(i).get("department");
									break
								}
							}
						}
						if (Wtf.cmpPref.approveappraisal) {
							this.salaryWin = new Wtf.approvalWindow(
									{
										modal : true,
										title : WtfGlobal
												.getLocaleText("hrms.AuditGroup.Appraisal"),
										closable : true,
										resizable : false,
										layout : "fit",
										flag : 170,
										width : winwidth,
										height : winheight,
										finalGrid : this.finalGrid,
										reviewstatus : reviewstatus,
										appids : this.appids,
										employeeid : this.empCmb.getValue(),
										appcycleid : this.appTypeCombo
												.getValue(),
										ds : this.ds,
										desig : desig,
										dept : dept
									});
							this.salaryWin.show()
						} else {
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/NonAnonymousAppraisal/reviewNonAnonymousAppraisal.pf",
												params : {
													employeeid : this.empCmb
															.getValue(),
													appraisalcycleid : this.appTypeCombo
															.getValue(),
													reviewstatus : reviewstatus,
													appraisalids : this.appids
												}
											},
											this,
											function(res) {
												var resp = eval("(" + res + ")");
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																"" + resp.msg
																		+ "" ],
														0);
												this.finalGrid
														.getSelectionModel()
														.clearSelections();
												this.ds.load()
											}, function() {
												calMsgBoxShow(27, 2);
												this.finalGrid
														.getSelectionModel()
														.clearSelections()
											})
						}
					}
				});
Wtf.perticularemployeegoals = function(A) {
	Wtf.perticularemployeegoals.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.perticularemployeegoals,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.perticularemployeegoals.superclass.initComponent
								.call(this, A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.goalRecord = Wtf.data.Record.create([ {
							name : "gname"
						}, {
							name : "gid"
						}, {
							name : "gdescription"
						}, {
							name : "gwth"
						}, {
							name : "gcontext"
						}, {
							name : "gpriority"
						}, {
							name : "gstartdate",
							type : "date"
						}, {
							name : "genddate",
							type : "date"
						}, {
							name : "gcomment"
						}, {
							name : "internal"
						}, {
							name : "percentcomp"
						} ]);
						this.goalReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.goalRecord);
						this.contextcombo = new Wtf.form.FnComboBox({
							store : Wtf.contextstore,
							displayField : "name",
							valueField : "name",
							scope : this,
							mode : "local",
							selectOnFocus : true,
							typeAhead : true,
							allowBlank : false,
							width : 200,
							height : 200,
							triggerAction : "all",
							addNewFn : this.addContext.createDelegate(this)
						});
						if (!Wtf.StoreMgr.containsKey("context")) {
							Wtf.contextstore.load();
							Wtf.StoreMgr.add("context", Wtf.contextstore)
						}
						this.prioritycombo = new Wtf.form.FnComboBox({
							store : Wtf.priostore,
							displayField : "name",
							scope : this,
							selectOnFocus : true,
							valueField : "name",
							mode : "local",
							allowBlank : false,
							width : 200,
							typeAhead : true,
							height : 200,
							triggerAction : "all",
							addNewFn : this.addPriority.createDelegate(this)
						});
						if (!Wtf.StoreMgr.containsKey("prio")) {
							Wtf.priostore.load();
							Wtf.StoreMgr.add("prio", Wtf.priostore)
						}
						this.wthcombo = new Wtf.form.FnComboBox({
							store : Wtf.wthstore,
							displayField : "name",
							scope : this,
							selectOnFocus : true,
							width : 200,
							allowBlank : false,
							typeAhead : true,
							valueField : "name",
							mode : "local",
							height : 200,
							triggerAction : "all",
							addNewFn : this.addWeightage.createDelegate(this)
						});
						if (!Wtf.StoreMgr.containsKey("wth")) {
							Wtf.wthstore.load();
							Wtf.StoreMgr.add("wth", Wtf.wthstore)
						}
						this.goalstore = new Wtf.data.Store({
							url : "Performance/Goal/Employeesgoalfinal.pf",
							pruneModifiedRecords : true,
							reader : this.goalReader,
							baseParams : {
								flag : 29,
								empid : this.empid
							}
						});
						this.percentcombo = new Wtf.form.FnComboBox({
							store : Wtf.completedStore,
							displayField : "name",
							scope : this,
							selectOnFocus : true,
							width : 200,
							allowBlank : false,
							typeAhead : true,
							valueField : "name",
							mode : "local",
							height : 200,
							triggerAction : "all",
							addNewFn : this.addCompleted.createDelegate(this)
						});
						if (!Wtf.StoreMgr.containsKey("comp")) {
							Wtf.completedStore.load();
							Wtf.StoreMgr.add("comp", Wtf.completedStore)
						}
						calMsgBoxShow(202, 4, true);
						this.goalstore.load();
						this.goalstore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.text1 = new Wtf.ux.TextField({
							name : "goalname",
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							maxLength : 255
						});
						this.text2 = new Wtf.ux.TextField({
							name : "goaldescription",
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							maxLength : 255
						});
						this.text3 = new Wtf.ux.TextField({
							name : "goalcomment",
							maxLength : 255
						});
						this.fromdate = new Wtf.form.DateField({
							name : "from",
							width : 200,
							allowBlank : false,
							format : "Y-m-d"
						});
						this.todate = new Wtf.form.DateField({
							name : "to",
							width : 200,
							allowBlank : false,
							format : "Y-m-d"
						});
						this.addbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.AddGoals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.AddGoals.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									minWidth : 70,
									scope : this,
									handler : this.insertgoal
								});
						this.delbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.DeleteGoals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.DeleteGoals.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 82,
									scope : this,
									disabled : true,
									handler : this.deletegoal
								});
						this.archivebutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.ArchiveGoals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.ArchiveGoals.tooltip"),
									iconCls : "pwndCommon archivebuttonIcon",
									minWidth : 87,
									disabled : true,
									scope : this,
									handler : this.archivegoal
								});
						this.savedata = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.SaveGoals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.SaveGoals.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									minWidth : 75,
									scope : this,
									disabled : true,
									handler : this.saveData
								});
						var B = new Array();
						if (this.assign) {
							if (!WtfGlobal.EnableDisable(Wtf.UPerm.assigngoals,
									Wtf.Perm.assigngoals.manage)) {
								B.push("-");
								B.push(this.addbutton);
								B.push("-");
								B.push(this.savedata);
								B.push("-");
								B.push(this.delbutton);
								B.push("-");
								B.push(this.archivebutton)
							}
						} else {
							if (!WtfGlobal.EnableDisable(Wtf.UPerm.assigngoals,
									Wtf.Perm.assigngoals.manage)) {
								B.push("-");
								B.push(this.archivebutton)
							}
						}
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.name"),
											sortable : true,
											dataIndex : "gname",
											editor : this.text1,
											renderer : function(C) {
												return '<div wtf:qtip="' + C
														+ '">' + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.description"),
											sortable : true,
											editor : this.text2,
											dataIndex : "gdescription"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.weightage"),
											sortable : true,
											editor : this.wthcombo,
											dataIndex : "gwth"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.context"),
											sortable : true,
											editor : this.contextcombo,
											dataIndex : "gcontext"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.priority"),
											sortable : true,
											dataIndex : "gpriority",
											editor : this.prioritycombo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											sortable : true,
											dataIndex : "gstartdate",
											editor : this.fromdate,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.due.date"),
											sortable : true,
											dataIndex : "genddate",
											editor : this.todate,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.percent.completed"),
											sortable : true,
											editor : this.percentcombo,
											dataIndex : "percentcomp",
											align : "right"
										} ]);
						this.goalgrid = new Wtf.KwlPagingEditorGrid(
								{
									store : this.goalstore,
									sm : this.sm,
									autoScroll : true,
									border : false,
									id : "goalGrid" + this.id,
									autoDestroy : true,
									scope : this,
									loadMask : true,
									clicksToEdit : 1,
									searchField : "gname",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.performance.my.goal.grid.search.msg"),
									searchLabel : " ",
									searchLabelSeparator : " ",
									serverSideSearch : true,
									displayInfo : true,
									viewConfig : {
										forceFit : true,
										emptyText : Wtf.gridEmptytext
									},
									tbar : B,
									cm : this.cm1
								});
						this.goalgrid.on("cellclick", function(E, G, D, F) {
							var C = E.getStore().getAt(G);
							if (!C.get("internal") && (D < 3 || D > 5)) {
								return false
							}
							return true
						}, this);
						this.getDetailPanel();
						this.goalpan = new Wtf.Panel(
								{
									layout : "border",
									region : "center",
									border : false,
									id : this.id + "goalpan",
									items : [
											{
												region : "center",
												layout : "fit",
												border : false,
												items : [ this.goalgrid ]
											},
											{
												region : "south",
												height : 230,
												title : WtfGlobal
														.getLocaleText("hrms.performance.comments"),
												border : false,
												id : this.id + "southpanel",
												collapsible : true,
												split : true,
												layout : "fit",
												items : [ this.detailPanel ]
											} ]
								});
						this.sm
								.on(
										"rowdeselect",
										function() {
											if (this.sm.getCount() == 0) {
												var C = new Wtf.Template(
														"<div class='commentTemplate'>",
														"<div id='{msgDiv}' class='commentTemplate1'>"
																+ WtfGlobal
																		.getLocaleText("hrms.common.Pleaseselectarecordtoseedetails")
																+ "</div></div>");
												C
														.overwrite(
																Wtf
																		.getCmp(this.id
																				+ "dloadpanelcenter").body,
																"")
											}
										}, this);
						this.add(this.goalpan);
						this.goalpan.doLayout();
						this.goalgrid.on("validateedit", this.validate, this);
						if (this.assign) {
							this.sm.on("selectionchange", function() {
								WtfGlobal.enableDisableBtnArr(B, this.goalgrid,
										[], [ 5, 7 ]);
								var D = this.sm.getSelections();
								if (D.length != 0) {
									for ( var C = 0; C < D.length; C++) {
										if (!D[C].get("internal")) {
											this.delbutton.setDisabled(true);
											break
										}
									}
								}
								this.decideAction()
							}, this)
						} else {
							this.sm.on("selectionchange", function() {
								WtfGlobal.enableDisableBtnArr(B, this.goalgrid,
										[], [ 1 ]);
								this.decideAction()
							}, this)
						}
						this.goalgrid
								.on(
										"rowclick",
										function(C, F, E) {
											if (E.target.className == "pwndCommon addComment"
													|| E.target.className == "pwndHRMS viewComment") {
												return
											}
											var D = E.getXY()
										}, this);
						this.goalgrid.on("click", this.docuploadhandler, this);
						this.goalstore.on("load", function() {
							if (this.goalstore.getCount() == 0) {
								this.insertgoal()
							}
							this.savedata.disable()
						}, this);
						this.goalstore.on("update", function() {
							this.savedata.enable()
						}, this);
						Wtf
								.getCmp(this.id + "southpanel")
								.on(
										"collapse",
										function() {
											var C = document
													.createElement("div");
											C.innerHTML = WtfGlobal
													.getLocaleText("hrms.performance.goal.comments");
											C.id = "southdash";
											C.className = "collapsed-header-title";
											Wtf.getCmp(this.id + "southpanel").container.dom.lastChild
													.appendChild(C)
										}, this)
					},
					onRender : function(A) {
						Wtf.perticularemployeegoals.superclass.onRender.call(
								this, A)
					},
					validate : function(A) {
						if (A.column == 7) {
							if (A.record.get("gstartdate") > A.value) {
								return false
							}
						}
						if (A.column == 6) {
							if (A.record.get("genddate") != "") {
								if (A.record.get("genddate") < A.value) {
									return false
								}
							}
						}
					},
					docuploadhandler : function(C, B) {
						if (C.target.className == "pwndCommon addComment") {
							if (this.goalgrid.getSelectionModel().getCount() == 0) {
								calMsgBoxShow(131, 0)
							} else {
								this.goalrec = this.goalgrid
										.getSelectionModel().getSelections();
								this.goalarr = [];
								for ( var A = 0; A < this.goalrec.length; A++) {
									this.goalarr.push(this.goalrec[A]
											.get("gid"))
								}
								this.addcom = new Wtf.goalComment(
										{
											width : 390,
											modal : true,
											height : 250,
											title : WtfGlobal
													.getLocaleText("hrms.performance.goal.comments"),
											resizable : false,
											layout : "fit",
											note : WtfGlobal
													.getLocaleText("hrms.common.Fillupthefollowingform"),
											read : false,
											blank : false,
											viewflag : false,
											applybutton : true,
											commentflag : true,
											goalarr : this.goalarr,
											ds : this.goalstore,
											cleargrid : this.goalgrid
										});
								this.addcom.show()
							}
						} else {
							if (C.target.className == "pwndHRMS viewComment") {
								if (this.goalgrid.getSelectionModel()
										.getCount() == 0
										|| this.goalgrid.getSelectionModel()
												.getCount() > 1) {
									calMsgBoxShow(131, 0)
								} else {
									this.viewcom = new Wtf.goalComment(
											{
												width : 390,
												modal : true,
												height : 250,
												title : WtfGlobal
														.getLocaleText("hrms.performance.goal.comments"),
												resizable : false,
												layout : "fit",
												note : WtfGlobal
														.getLocaleText("hrms.performance.Employeecommentis"),
												read : true,
												blank : true,
												viewflag : true,
												comnt : this.goalgrid
														.getSelectionModel()
														.getSelected().get(
																"gcomment"),
												applybutton : false
											});
									this.viewcom.show()
								}
							}
						}
					},
					insertgoal : function() {
						this.p = new this.goalRecord({
							gname : "",
							gdescription : "",
							gwth : "",
							gcontext : "",
							gpriority : "",
							gstartdate : "",
							genddate : "",
							gcomment : "",
							internal : true,
							percentcomp : 0
						});
						this.goalgrid.stopEditing();
						this.c = this.goalstore.getCount();
						this.goalstore.insert(this.c, this.p)
					},
					checkRecord : function(B) {
						var A = "";
						var C = 0;
						A += B.gname == "" ? WtfGlobal
								.getLocaleText("hrms.performance.goal.name")
								+ ", " : "";
						if (B.internal) {
							A += B.gdescription == "" ? WtfGlobal
									.getLocaleText("hrms.performance.goal.description")
									+ ", "
									: ""
						}
						A += B.gwth == "" ? WtfGlobal
								.getLocaleText("hrms.performance.weightage")
								+ ", " : "";
						A += B.gcontext == "" ? WtfGlobal
								.getLocaleText("hrms.performance.context")
								+ ", " : "";
						A += B.gpriority == "" ? WtfGlobal
								.getLocaleText("hrms.performance.priority")
								+ ", " : "";
						A += B.gstartdate == "" ? WtfGlobal
								.getLocaleText("hrms.common.start.date")
								+ ", " : "";
						A += B.genddate == "" ? WtfGlobal
								.getLocaleText("hrms.common.due.date")
								+ ", " : "";
						A = A.substring(0, Math.max(0, A.length - 2));
						if (A.length > 0) {
							C = 0;
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.performance.Followingfieldsareblank")
													+ ":<br>" + A ], 0, null,
									370)
						} else {
							C = 1
						}
						return C
					},
					checkColumnRecord : function(B, C) {
						var E = [ "gname", "gdescription", "gwth", "gcontext",
								"gpriority", "gstartdate", "genddate" ];
						var A = "";
						if (B.get(E[C] == "")) {
							A += E[C]
						}
						var D = 0;
						if (A.length > 0) {
							D = 0
						} else {
							D = 1
						}
						return D
					},
					saveData : function() {
						var D = "";
						var G;
						var I = "";
						var E = 0;
						var J = [ "gname", "gdescription", "gwth", "gcontext",
								"gpriority", "gstartdate", "genddate" ];
						var A = [
								WtfGlobal
										.getLocaleText("hrms.performance.goal.name"),
								WtfGlobal
										.getLocaleText("hrms.performance.goal.description"),
								WtfGlobal
										.getLocaleText("hrms.performance.weightage"),
								WtfGlobal
										.getLocaleText("hrms.performance.context"),
								WtfGlobal
										.getLocaleText("hrms.performance.priority"),
								WtfGlobal
										.getLocaleText("hrms.common.start.date"),
								WtfGlobal.getLocaleText("hrms.common.due.date") ];
						var B = this.goalstore.getModifiedRecords();
						if (B.length == 0) {
						} else {
							for ( var C = 0; C < 7; C++) {
								for ( var F = 0; F < B.length; F++) {
									G = B[F];
									if (G.get(J[C]) == "") {
										I += A[C] + ", ";
										break
									}
								}
							}
							I = I.substring(0, Math.max(0, I.length - 2));
							if (I.length > 0) {
								calMsgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.warning"),
												WtfGlobal
														.getLocaleText("hrms.performance.Followingfieldsareblank")
														+ ":<br>" + I ], 0,
										null, 370)
							} else {
								E = 1
							}
							if (E == 1) {
								var H = [];
								for ( var F = 0; F < B.length; F++) {
									G = B[F].data;
									H.push({
										gname : G.gname,
										gid : G.gid,
										gdescription : G.gdescription,
										gwth : G.gwth,
										gcontext : G.gcontext,
										gpriority : G.gpriority,
										gcomplete : G.percentcomp,
										gstartdate : G.gstartdate
												.format("Y-m-d"),
										genddate : G.genddate.format("Y-m-d"),
										gcomment : G.gcomment
									})
								}
								this.savedata.disable();
								this.addbutton.disable();
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax.requestEx({
									url : "Performance/Goal/insertGoal.pf",
									params : {
										flag : 205,
										jsondata : Wtf.encode(H),
										empid : this.empid
									}
								}, this, function(L) {
									this.goalstore.commitChanges();
									this.goalstore.reload();
									this.savedata.enable();
									this.addbutton.enable();
									calMsgBoxShow(100, 0, false, 250);
									var K = Wtf.getCmp("DSBMyWorkspaces");
									if (K) {
										K.doSearch(K.url, "")
									}
								}, function(K) {
									calMsgBoxShow(101, 1);
									this.savedata.enable();
									this.addbutton.enable()
								})
							}
						}
					},
					deletegoal : function() {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : deleteMsgBox("goal"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(C) {
										if (C == "yes") {
											this.delkey = this.sm
													.getSelections();
											this.ids = [];
											this.sm.clearSelections();
											var A = this.goalgrid.getStore();
											if (this.goalstore
													.getModifiedRecords().length == this.delkey.length) {
												this.savedata.disable()
											}
											for ( var B = 0; B < this.delkey.length; B++) {
												var D = this.goalstore
														.indexOf(this.delkey[B]);
												WtfGlobal.highLightRow(
														this.goalgrid,
														"FF0000", 5, D);
												if (this.delkey[B].get("gid")) {
													this.ids
															.push(this.delkey[B]
																	.get("gid"))
												} else {
													this.goalstore
															.remove(this.delkey[B])
												}
											}
											if (this.ids.length > 0) {
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Goal/assignedgoalsdelete.pf",
																	params : {
																		flag : 45,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			44,
																			0);
																	WtfGlobal
																			.delaytasks(this.goalstore)
																},
																function() {
																	calMsgBoxShow(
																			45,
																			1)
																})
											}
										}
									}
								})
					},
					archivegoal : function() {
						if (this.goalgrid.getSelectionModel().getCount() == 0) {
							calMsgBoxShow(42, 1)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.performance.Areyousurewantarchiveselectedgoal"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												this.archiverec = this.goalgrid
														.getSelectionModel()
														.getSelections();
												this.archivearr = [];
												this.archivearr1 = [];
												for ( var A = 0; A < this.archiverec.length; A++) {
													this.archivearr
															.push(this.archiverec[A]
																	.get("gid"));
													this.archivearr1
															.push(this.archiverec[A]
																	.get("gname"))
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Performance/Goal/insertGoal.pf",
																	params : {
																		flag : 205,
																		archiveid : this.archivearr,
																		archive : "true",
																		gname : this.archivearr1
																	}
																},
																this,
																function() {
																	this.goalstore
																			.load();
																	var C = Wtf
																			.getCmp("archivedgoalemp");
																	if (C != null) {
																		C
																				.getStore()
																				.load()
																	}
																	msgFlag = 0;
																	calMsgBoxShow(
																			102,
																			0)
																},
																function() {
																	calMsgBoxShow(
																			27,
																			1)
																})
											}
										}
									})
						}
					},
					viewComment : function() {
						if (this.goalgrid.getSelectionModel().getCount() == 0
								|| this.goalgrid.getSelectionModel().getCount() > 1) {
							calMsgBoxShow(131, 0)
						} else {
							this.viewcom = new Wtf.goalComment(
									{
										width : 390,
										modal : true,
										height : 250,
										title : WtfGlobal
												.getLocaleText("hrms.performance.goal.comments"),
										resizable : false,
										layout : "fit",
										note : WtfGlobal
												.getLocaleText("hrms.performance.Employeecommentis"),
										read : true,
										blank : true,
										viewflag : true,
										comnt : this.goalgrid
												.getSelectionModel()
												.getSelected().get("gcomment"),
										applybutton : false
									});
							this.viewcom.show()
						}
					},
					addComment : function() {
						if (this.goalgrid.getSelectionModel().getCount() == 0) {
							calMsgBoxShow(131, 0)
						} else {
							this.goalrec = this.goalgrid.getSelectionModel()
									.getSelections();
							this.goalarr = [];
							for ( var A = 0; A < this.goalrec.length; A++) {
								this.goalarr.push(this.goalrec[A].get("gid"))
							}
							this.addcom = new Wtf.goalComment(
									{
										width : 390,
										modal : true,
										height : 250,
										title : WtfGlobal
												.getLocaleText("hrms.performance.goal.comments"),
										resizable : false,
										layout : "fit",
										note : WtfGlobal
												.getLocaleText("hrms.common.Fillupthefollowingform"),
										read : false,
										blank : false,
										viewflag : false,
										applybutton : true,
										goalarr : this.goalarr,
										ds : this.goalstore,
										commentflag : true,
										cleargrid : this.goalgrid
									});
							this.addcom.show()
						}
					},
					getDetailPanel : function() {
						this.detailPanel = new Wtf.DetailPanel({
							grid : this.goalgrid,
							Store : this.goalstore,
							modulename : "Goals",
							height : 200,
							mapid : 0,
							id2 : this.id
						})
					},
					decideAction : function() {
						var B = this.sm.getSelections();
						var A = "";
						if (B.length > 0) {
							A = B[0].data["gid"];
							if (A !== undefined && A != "") {
								getDocsAndCommentList(this.goalgrid, A, 1,
										this.id)
							} else {
								this.archivebutton.setDisabled(true)
							}
						}
					},
					addWeightage : function() {
						this.goalgrid.stopEditing();
						WtfGlobal.showmasterWindow(4, Wtf.wthstore, "Add")
					},
					addContext : function() {
						this.goalgrid.stopEditing();
						WtfGlobal.showmasterWindow(2, Wtf.contextstore, "Add")
					},
					addPriority : function() {
						this.goalgrid.stopEditing();
						WtfGlobal.showmasterWindow(3, Wtf.priostore, "Add")
					},
					addCompleted : function() {
						this.goalgrid.stopEditing();
						WtfGlobal
								.showmasterWindow(5, Wtf.completedStore, "Add")
					}
				});
Wtf.myGoals = function(A) {
	Wtf.myGoals.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.myGoals,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.myGoals.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.myGoals.superclass.onRender.call(this, A);
						this.record = Wtf.data.Record.create([ {
							name : "gname"
						}, {
							name : "gid"
						}, {
							name : "gdescription"
						}, {
							name : "gassignedby"
						}, {
							name : "gwth"
						}, {
							name : "gcontext"
						}, {
							name : "gpriority"
						}, {
							name : "gstartdate",
							type : "date"
						}, {
							name : "genddate",
							type : "date"
						}, {
							name : "percentcomp"
						} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						this.ds = new Wtf.data.Store({
							url : "Performance/Goal/Employeesgoalfinal.pf",
							baseParams : {
								flag : 29
							},
							reader : this.reader
						});
						calMsgBoxShow(202, 4, true);
						this.ds.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.sm = new Wtf.grid.RowSelectionModel({
							singleSelect : false
						});
						this.sm.on("selectionchange", function() {
							this.decideAction()
						}, this);
						this.percentcombo = new Wtf.form.ComboBox({
							store : Wtf.completedStore,
							displayField : "name",
							scope : this,
							selectOnFocus : true,
							width : 200,
							allowBlank : false,
							typeAhead : true,
							valueField : "name",
							mode : "local",
							height : 200,
							triggerAction : "all"
						});
						if (!Wtf.StoreMgr.containsKey("comp")) {
							Wtf.completedStore.load();
							Wtf.StoreMgr.add("comp", Wtf.completedStore)
						}
						this.savedata = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.save.goals"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.save.goals.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									minWidth : 75,
									disabled : true,
									scope : this,
									handler : this.saveData
								});
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.ds
												.load({
													params : {
														start : 0,
														limit : this.myGoalsgrid.pag.pageSize
													}
												});
										Wtf.getCmp(
												"Quick" + this.myGoalsgrid.id)
												.setValue("")
									}
								});
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.name"),
											sortable : true,
											dataIndex : "gname",
											renderer : function(C) {
												return '<div wtf:qtip="' + C
														+ '">' + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.goal.description"),
											sortable : true,
											dataIndex : "gdescription"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.weightage"),
											sortable : true,
											dataIndex : "gwth"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.context"),
											sortable : true,
											dataIndex : "gcontext"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.priority"),
											sortable : true,
											dataIndex : "gpriority"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											align : "center",
											sortable : true,
											dataIndex : "gstartdate",
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.due.date"),
											align : "center",
											sortable : true,
											dataIndex : "genddate",
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.assigned.by"),
											sortable : true,
											dataIndex : "gassignedby"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.percent.completed"),
											editor : this.percentcombo,
											sortable : true,
											dataIndex : "percentcomp",
											align : "right"
										} ]);
						var B = new Array();
						B.push("-");
						B.push(this.refreshBtn);
						B.push("-");
						B.push(this.savedata);
						this.myGoalsgrid = new Wtf.KwlEditorGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									border : false,
									autoScroll : true,
									scope : this,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.performance.my.goal.grid.msg"))
									},
									clicksToEdit : 1,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.performance.my.goal.grid.search.msg"),
									searchField : "gname",
									serverSideSearch : true,
									displayInfo : true,
									tbar : B
								});
						this.getDetailPanel();
						this.goalpan = new Wtf.Panel(
								{
									layout : "border",
									region : "center",
									border : false,
									id : this.id + "goalpan",
									items : [
											{
												region : "center",
												layout : "fit",
												border : false,
												items : [ this.myGoalsgrid ]
											},
											{
												region : "south",
												height : 230,
												title : WtfGlobal
														.getLocaleText("hrms.performance.comments"),
												border : false,
												collapsible : true,
												id : "southpanel1",
												split : true,
												layout : "fit",
												items : [ this.detailPanel ]
											} ]
								});
						this.add(this.goalpan);
						this.goalpan.doLayout();
						this.percentcombo.on("select", function() {
							this.savedata.enable()
						}, this);
						Wtf
								.getCmp("southpanel1")
								.on(
										"collapse",
										function() {
											var C = document
													.createElement("div");
													C.innerHTML = WtfGlobal
															.getLocaleText("hrms.performance.goal.comments"),
													C.id = "southdash";
											C.className = "collapsed-header-title";
											Wtf.getCmp("southpanel1").container.dom.lastChild
													.appendChild(C)
										}, this)
					},
					decideAction : function() {
						var B = this.sm.getSelections();
						var A = "";
						if (B.length > 0) {
							A = B[0].data["gid"];
							if (A !== undefined && A != "") {
								getDocsAndCommentList(this.myGoalsgrid, A, 1,
										this.id)
							}
						}
					},
					getDetailPanel : function() {
						this.detailPanel = new Wtf.DetailPanel({
							grid : this.myGoalsgrid,
							Store : this.ds,
							modulename : "Goals",
							height : 200,
							employee : true,
							mapid : 0,
							id2 : this.id
						})
					},
					saveData : function() {
						var F = "";
						var A;
						var D = 0;
						var B = this.ds.getModifiedRecords();
						for ( var C = 0; C < B.length; C++) {
							A = B[C].data;
							F += "{'gid':'" + A.gid + "',";
							F += "'gcomplete':'" + A.percentcomp + "'},"
						}
						var E = F.substr(0, F.length - 1);
						calMsgBoxShow(200, 4, true);
						Wtf.Ajax.requestEx({
							url : "Performance/Goal/changeMyGoalPercent.pf",
							params : {
								jsondata : E,
								empid : this.empid
							}
						}, this, function(G) {
							this.ds.commitChanges();
							this.ds.reload();
							calMsgBoxShow(89, 0)
						}, function(G) {
							calMsgBoxShow(101, 1)
						})
					},
					add1 : function() {
					}
				});
Wtf.managecompetencyWindow = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.savecompetency,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.managecompetencyWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.managecompetencyWindow,
				Wtf.Window,
				{
					initComponent : function(A) {
						Wtf.managecompetencyWindow.superclass.initComponent
								.call(this, A)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.managecompetencyWindow.superclass.onRender.call(
								this, A);
						this.competency = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.competency")
											+ "*",
									width : 200,
									allowBlank : false,
									validator : WtfGlobal.noBlankCheck,
									maxLength : 50
								});
						this.description = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.description"),
									width : 200,
									height : 50
								});
						this.weightage = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.weightage")
											+ "*",
									width : 200,
									allowBlank : false,
									maxLength : 3
								});
						this.managecompetencyForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									lableWidth : 70,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.competency, this.description ]
								});
						this.managecompetencyPanel = new Wtf.Panel(
								{
									frame : true,
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															this.wintitle,
															WtfGlobal
																	.getLocaleText("hrms.common.Fillupthefollowingform"),
															"images/compentencyadd.jpg")
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.managecompetencyForm ]
												} ]
									} ]
								});
						this.add(this.managecompetencyPanel);
						if (this.editflag) {
							this.competency.setValue(this.compname);
							this.description.setValue(this.compdesc);
							this.weightage.setValue(this.compwt)
						} else {
							this.compid = "null"
						}
					},
					savecompetency : function() {
						if (this.managecompetencyForm.getForm().isValid()) {
							if (this.action == "edit") {
								var rec = this.cleargrid.getSelectionModel()
										.getSelected();
								var row = this.datastore.indexOf(rec);
								this.cleargrid.getSelectionModel()
										.clearSelections();
								WtfGlobal.highLightRow(this.cleargrid,
										"33CC33", 5, row)
							}
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/Competency/addCompetency.pf",
												scope : this,
												params : {
													cmptid : this.compid,
													cmptname : this.competency
															.getValue(),
													cmptdesc : this.description
															.getValue()
												}
											},
											this,
											function(response) {
												var params = "";
												var res = eval("(" + response
														+ ")");
												if (this.action == "edit") {
													params = {
														start : 0,
														limit : this.cleargrid.pag.pageSize,
														ss : Wtf
																.getCmp(
																		"Quick"
																				+ this.cleargrid.id)
																.getValue()
													};
													WtfGlobal.delaytasks(
															this.datastore,
															params)
												} else {
													params = {
														start : 0,
														limit : this.cleargrid.pag.pageSize,
														ss : Wtf
																.getCmp(
																		"Quick"
																				+ this.cleargrid.id)
																.getValue()
													};
													this.datastore.load({
														params : params
													})
												}
												this.cleargrid
														.getSelectionModel()
														.clearSelections();
												if (this.desig) {
													this.cleargrid
															.getStore()
															.load(
																	{
																		params : {
																			flag : 115,
																			desig : this.desig
																		}
																	})
												}
												this.close();
												if (this.action == "add") {
													if (res.message) {
														calMsgBoxShow(47, 0)
													} else {
														calMsgBoxShow(160, 2)
													}
												} else {
													if (res.message) {
														calMsgBoxShow(48, 0)
													} else {
														calMsgBoxShow(160, 2)
													}
												}
											}, function() {
												calMsgBoxShow(27, 1)
											})
						} else {
							calMsgBoxShow(28, 0)
						}
					}
				});
Wtf.goalComment = function(A) {
	if (A.applybutton) {
		Wtf.apply(this, {
			buttonAlign : "right",
			buttons : [ {
				text : WtfGlobal.getLocaleText("hrms.performance.AddComment"),
				disabled : this.isDisable,
				handler : this.savecomment,
				scope : this
			}, {
				text : WtfGlobal.getLocaleText("hrms.common.cancel"),
				handler : function() {
					this.close()
				},
				scope : this
			} ]
		}, A)
	} else {
		Wtf.apply(this, {
			buttonAlign : "right",
			buttons : [ {
				text : WtfGlobal.getLocaleText("hrms.common.Ok"),
				handler : function() {
					this.close()
				},
				scope : this
			} ]
		}, A)
	}
	Wtf.goalComment.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.goalComment,
				Wtf.Window,
				{
					initComponent : function(A) {
						Wtf.goalComment.superclass.initComponent.call(this, A)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.goalComment.superclass.onRender.call(this, A);
						this.comment = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.performance.comments")
									+ " *",
							width : 200,
							height : 60,
							allowBlank : this.blank,
							readOnly : this.read
						});
						this.commentForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									lableWidth : 70,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.comment ]
								});
						this.commentPanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.performance.comments"),
															this.note,
															"images/comment.gif")
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.commentForm ]
												} ]
									} ]
								});
						this.add(this.commentPanel);
						if (this.viewflag) {
							this.comment.setValue(this.comnt)
						}
					},
					savecomment : function() {
						if (!this.viewflag) {
							if (!this.comment.isValid()) {
								return
							}
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/Goal/addCommentsfunction.pf",
												params : {
													flag : 151,
													goalid : this.goalarr,
													comment : this.comment
															.getValue()
												}
											}, this, function() {
												this.close();
												this.ds.load();
												this.cleargrid
														.getSelectionModel()
														.clearSelections();
												calMsgBoxShow(130, 0);
												getDocsAndCommentList(
														this.cleargrid,
														this.goalarr, 1,
														this.idX)
											}, function() {
												calMsgBoxShow(27, 1)
											})
						} else {
							Wtf.Ajax.requestEx({
								url : Wtf.req.base + "hrms.jsp?flag=165",
								params : {
									appraisalids : this.commentarr,
									reviewercomment : this.comment.getValue(),
									addComment : true
								}
							}, this, function() {
								this.close();
								this.ds.load();
								this.cleargrid.getSelectionModel()
										.clearSelections();
								calMsgBoxShow(130, 0)
							}, function() {
								calMsgBoxShow(27, 1)
							})
						}
					}
				});
createNewChart = function(G, B, C, H, F, J, E, I, A) {
	var D = new SWFObject(G, B, C, H, F, J);
	D.addVariable("settings_file", encodeURIComponent(E));
	D.addVariable("data_file", encodeURIComponent(I));
	D.addVariable("preloader_color", "#000000");
	D.addParam("wmode", "transparent");
	D.write(A)
};
if (typeof deconcept == "undefined") {
	var deconcept = new Object()
}
if (typeof deconcept.util == "undefined") {
	deconcept.util = new Object()
}
if (typeof deconcept.SWFObjectUtil == "undefined") {
	deconcept.SWFObjectUtil = new Object()
}
deconcept.SWFObject = function(K, B, L, D, H, I, F, E, C, J) {
	if (!document.getElementById) {
		return
	}
	this.DETECT_KEY = J ? J : "detectflash";
	this.skipDetect = deconcept.util.getRequestParameter(this.DETECT_KEY);
	this.params = new Object();
	this.variables = new Object();
	this.attributes = new Array();
	if (K) {
		this.setAttribute("swf", K)
	}
	if (B) {
		this.setAttribute("id", B)
	}
	if (L) {
		this.setAttribute("width", L)
	}
	if (D) {
		this.setAttribute("height", D)
	}
	if (H) {
		this.setAttribute("version", new deconcept.PlayerVersion(H.toString()
				.split(".")))
	}
	this.installedVer = deconcept.SWFObjectUtil.getPlayerVersion();
	if (!window.opera && document.all && this.installedVer.major > 7) {
		deconcept.SWFObject.doPrepUnload = true
	}
	if (I) {
		this.addParam("bgcolor", I)
	}
	var A = F ? F : "high";
	this.addParam("quality", A);
	this.setAttribute("useExpressInstall", false);
	this.setAttribute("doExpressInstall", false);
	var G = (E) ? E : window.location;
	this.setAttribute("xiRedirectUrl", G);
	this.setAttribute("redirectUrl", "");
	if (C) {
		this.setAttribute("redirectUrl", C)
	}
};
deconcept.SWFObject.prototype = {
	useExpressInstall : function(A) {
		this.xiSWFPath = !A ? "expressinstall.swf" : A;
		this.setAttribute("useExpressInstall", true)
	},
	setAttribute : function(A, B) {
		this.attributes[A] = B
	},
	getAttribute : function(A) {
		return this.attributes[A]
	},
	addParam : function(B, A) {
		this.params[B] = A
	},
	getParams : function() {
		return this.params
	},
	addVariable : function(B, A) {
		this.variables[B] = A
	},
	getVariable : function(A) {
		return this.variables[A]
	},
	getVariables : function() {
		return this.variables
	},
	getVariablePairs : function() {
		var C = new Array();
		var B;
		var A = this.getVariables();
		for (B in A) {
			C[C.length] = B + "=" + A[B]
		}
		return C
	},
	getSWFHTML : function() {
		var B = "";
		if (navigator.plugins && navigator.mimeTypes
				&& navigator.mimeTypes.length) {
			if (this.getAttribute("doExpressInstall")) {
				this.addVariable("MMplayerType", "PlugIn");
				this.setAttribute("swf", this.xiSWFPath)
			}
			B = '<embed type="application/x-shockwave-flash" src="'
					+ this.getAttribute("swf") + '" width="'
					+ this.getAttribute("width") + '" height="'
					+ this.getAttribute("height") + '" style="'
					+ this.getAttribute("style") + '"';
			B += ' id="' + this.getAttribute("id") + '" name="'
					+ this.getAttribute("id") + '" ';
			var F = this.getParams();
			for ( var E in F) {
				B += [ E ] + '="' + F[E] + '" '
			}
			var D = this.getVariablePairs().join("&");
			if (D.length > 0) {
				B += 'flashvars="' + D + '"'
			}
			B += "/>"
		} else {
			if (this.getAttribute("doExpressInstall")) {
				this.addVariable("MMplayerType", "ActiveX");
				this.setAttribute("swf", this.xiSWFPath)
			}
			B = '<object id="'
					+ this.getAttribute("id")
					+ '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="'
					+ this.getAttribute("width") + '" height="'
					+ this.getAttribute("height") + '" style="'
					+ this.getAttribute("style") + '">';
			B += '<param name="movie" value="' + this.getAttribute("swf")
					+ '" />';
			var C = this.getParams();
			for ( var E in C) {
				B += '<param name="' + E + '" value="' + C[E] + '" />'
			}
			var A = this.getVariablePairs().join("&");
			if (A.length > 0) {
				B += '<param name="flashvars" value="' + A + '" />'
			}
			B += "</object>"
		}
		return B
	},
	write : function(B) {
		if (this.getAttribute("useExpressInstall")) {
			var A = new deconcept.PlayerVersion([ 6, 0, 65 ]);
			if (this.installedVer.versionIsValid(A)
					&& !this.installedVer.versionIsValid(this
							.getAttribute("version"))) {
				this.setAttribute("doExpressInstall", true);
				this.addVariable("MMredirectURL", escape(this
						.getAttribute("xiRedirectUrl")));
				document.title = document.title.slice(0, 47)
						+ " - Flash Player Installation";
				this.addVariable("MMdoctitle", document.title)
			}
		}
		if (this.skipDetect
				|| this.getAttribute("doExpressInstall")
				|| this.installedVer.versionIsValid(this
						.getAttribute("version"))) {
			var C = (typeof B == "string") ? document.getElementById(B) : B;
			C.innerHTML = this.getSWFHTML();
			if (!(navigator.plugins && navigator.mimeTypes.length)) {
				window[this.getAttribute("id")] = document.getElementById(this
						.getAttribute("id"))
			}
			return true
		} else {
			if (this.getAttribute("redirectUrl") != "") {
				document.location.replace(this.getAttribute("redirectUrl"))
			}
		}
		return false
	}
};
deconcept.SWFObjectUtil.getPlayerVersion = function() {
	var E = new deconcept.PlayerVersion([ 0, 0, 0 ]);
	if (navigator.plugins && navigator.mimeTypes.length) {
		var A = navigator.plugins["Shockwave Flash"];
		if (A && A.description) {
			E = new deconcept.PlayerVersion(A.description.replace(
					/([a-zA-Z]|\s)+/, "").replace(/(\s+r|\s+b[0-9]+)/, ".")
					.split("."))
		}
	} else {
		if (navigator.userAgent
				&& navigator.userAgent.indexOf("Windows CE") >= 0) {
			var B = 1;
			var C = 3;
			while (B) {
				try {
					C++;
					B = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + C);
					E = new deconcept.PlayerVersion([ C, 0, 0 ])
				} catch (D) {
					B = null
				}
			}
		} else {
			try {
				var B = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")
			} catch (D) {
				try {
					var B = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
					E = new deconcept.PlayerVersion([ 6, 0, 21 ]);
					B.AllowScriptAccess = "always"
				} catch (D) {
					if (E.major == 6) {
						return E
					}
				}
				try {
					B = new ActiveXObject("ShockwaveFlash.ShockwaveFlash")
				} catch (D) {
				}
			}
			if (B != null) {
				E = new deconcept.PlayerVersion(B.GetVariable("$version")
						.split(" ")[1].split(","))
			}
		}
	}
	return E
};
deconcept.PlayerVersion = function(A) {
	this.major = A[0] != null ? parseInt(A[0]) : 0;
	this.minor = A[1] != null ? parseInt(A[1]) : 0;
	this.rev = A[2] != null ? parseInt(A[2]) : 0
};
deconcept.PlayerVersion.prototype.versionIsValid = function(A) {
	if (this.major < A.major) {
		return false
	}
	if (this.major > A.major) {
		return true
	}
	if (this.minor < A.minor) {
		return false
	}
	if (this.minor > A.minor) {
		return true
	}
	if (this.rev < A.rev) {
		return false
	}
	return true
};
deconcept.util = {
	getRequestParameter : function(C) {
		var D = document.location.search || document.location.hash;
		if (C == null) {
			return D
		}
		if (D) {
			var B = D.substring(1).split("&");
			for ( var A = 0; A < B.length; A++) {
				if (B[A].substring(0, B[A].indexOf("=")) == C) {
					return B[A].substring((B[A].indexOf("=") + 1))
				}
			}
		}
		return ""
	}
};
deconcept.SWFObjectUtil.cleanupSWFs = function() {
	var B = document.getElementsByTagName("OBJECT");
	for ( var C = B.length - 1; C >= 0; C--) {
		B[C].style.display = "none";
		for ( var A in B[C]) {
			if (typeof B[C][A] == "function") {
				B[C][A] = function() {
				}
			}
		}
	}
};
if (deconcept.SWFObject.doPrepUnload) {
	if (!deconcept.unloadSet) {
		deconcept.SWFObjectUtil.prepUnload = function() {
			__flash_unloadHandler = function() {
			};
			__flash_savedUnloadHandler = function() {
			};
			window.attachEvent("onunload", deconcept.SWFObjectUtil.cleanupSWFs)
		};
		window
				.attachEvent("onbeforeunload",
						deconcept.SWFObjectUtil.prepUnload);
		deconcept.unloadSet = true
	}
}
if (!document.getElementById && document.all) {
	document.getElementById = function(A) {
		return document.all[A]
	}
}
var getQueryParamValue = deconcept.util.getRequestParameter;
var FlashObject = deconcept.SWFObject;
var SWFObject = deconcept.SWFObject;
Wtf.approvalWindow = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.submit"),
			handler : this.sendapproveSaveRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.approvalWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.approvalWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.approvalWindow.superclass.initComponent.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.approvalWindow.superclass.onRender.call(this, A);
						this.salaryInc = new Wtf.form.NumberField({
							fieldLabel : "Salary Increment",
							width : 200,
							maxLength : 2
						});
						this.deptrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.deptStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 7,
								flag : 203
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.deptrec),
							autoLoad : false
						});
						this.deptStore.load();
						this.positionrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.positionStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.positionrec),
							autoLoad : false
						});
						this.tempDesigStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, new Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "name"
							} ])),
							autoLoad : false
						});
						this.oldDesig = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.OldDesignation"),
									labelWidth : 110,
									disabled : true,
									width : 200
								});
						this.oldDepart = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.OldDepartment"),
									labelWidth : 110,
									disabled : true,
									width : 200
								});
						this.oldDesig.setValue(this.desig);
						this.oldDepart.setValue(this.dept);
						this.newDesignation = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.designation"),
									store : this.positionStore,
									mode : "local",
									hiddenName : "name",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true,
									width : 200
								});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore
									.on(
											"load",
											function() {
												this.tempDesigStore
														.loadData(Wtf.desigStore.reader.jsonData);
												this.tempDesigStore
														.filterBy(
																function(D) {
																	if (D.data.name == this.desig) {
																		return false
																	}
																	return true
																}, this);
												var C = this.tempDesigStore
														.getRange();
												this.positionStore.removeAll();
												this.positionStore.add(C);
												WtfGlobal.closeProgressbar()
											}, this);
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.tempDesigStore
									.loadData(Wtf.desigStore.reader.jsonData);
							this.tempDesigStore.filterBy(function(C) {
								if (C.data.name == this.desig) {
									return false
								}
								return true
							}, this);
							var B = this.tempDesigStore.getRange();
							this.positionStore.removeAll();
							this.positionStore.add(B);
							WtfGlobal.closeProgressbar()
						}
						this.newDepartment = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.department"),
									store : this.deptStore,
									mode : "local",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true,
									width : 200
								});
						this.comments = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.performance.comments")
									+ "*",
							width : 200,
							height : 55,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.winArr = [];
						if (this.reviewstatus) {
							if (WtfGlobal.CmpEnableDisable(Wtf.subCode,
									Wtf.payroll)) {
								this.winArr.push(this.salaryInc)
							}
							this.winArr.push(this.oldDesig, this.oldDepart,
									this.newDesignation, this.newDepartment,
									this.comments)
						} else {
							this.winArr.push(this.comments)
						}
						this.salaryForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									labelWidth : 100,
									layoutConfig : {
										deferredRender : false
									},
									items : this.winArr
								});
						this.salaryPanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 75,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.performance.appraisals"),
															WtfGlobal
																	.getLocaleText("hrms.appraisal.enter.details"))
												},
												{
													border : false,
													region : "center",
													bodyStyle : "background:#f1f1f1;font-size:10px;",
													layout : "fit",
													items : [ this.salaryForm ]
												} ]
									} ]
								});
						this.add(this.salaryPanel)
					},
					sendapproveSaveRequest : function() {
						if (!this.salaryForm.getForm().isValid()) {
							return
						} else {
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/NonAnonymousAppraisal/reviewNonAnonymousAppraisal.pf",
												params : {
													appraisalids : this.appids,
													reviewstatus : this.reviewstatus,
													reviewercomment : this.comments
															.getValue(),
													salaryincrement : this.salaryInc
															.getValue(),
													department : this.newDepartment
															.getValue(),
													designation : this.newDesignation
															.getValue(),
													employeeid : this.employeeid,
													appraisalcycleid : this.appcycleid
												}
											},
											this,
											function(res) {
												var resp = eval("(" + res + ")");
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																"" + resp.msg
																		+ "" ],
														0);
												this.close();
												this.finalGrid
														.getSelectionModel()
														.clearSelections();
												this.ds.load()
											}, function() {
												calMsgBoxShow(27, 2);
												this.finalGrid
														.getSelectionModel()
														.clearSelections()
											})
						}
					}
				});
Wtf.appraisalAppWindow = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.submit"),
			handler : this.sendapproveSaveRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.appraisalAppWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.appraisalAppWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.appraisalAppWindow.superclass.initComponent
								.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.appraisalAppWindow.superclass.onRender
								.call(this, A);
						this.salaryInc = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.salary.increment")
											+ "(%)",
									width : 200,
									maxLength : 3
								});
						this.deptrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.deptStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 7,
								flag : 203
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.deptrec),
							autoLoad : false
						});
						this.deptStore.load();
						this.positionrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.positionStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.positionrec),
							autoLoad : false
						});
						this.tempDesigStore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, new Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "name"
							} ])),
							autoLoad : false
						});
						this.oldDesig = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.OldDesignation"),
									labelWidth : 110,
									disabled : true,
									width : 200
								});
						this.oldDepart = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.OldDepartment"),
									labelWidth : 110,
									disabled : true,
									width : 200
								});
						this.oldDesig.setValue(this.desig);
						this.oldDepart.setValue(this.dept);
						this.newDesignation = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.designation"),
									store : this.positionStore,
									mode : "local",
									hiddenName : "name",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true,
									width : 200
								});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore
									.on(
											"load",
											function() {
												this.tempDesigStore
														.loadData(Wtf.desigStore.reader.jsonData);
												this.tempDesigStore
														.filterBy(
																function(D) {
																	if (D.data.name == this.desig) {
																		return false
																	}
																	return true
																}, this);
												var C = this.tempDesigStore
														.getRange();
												this.positionStore.removeAll();
												this.positionStore.add(C);
												WtfGlobal.closeProgressbar()
											}, this);
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.tempDesigStore
									.loadData(Wtf.desigStore.reader.jsonData);
							this.tempDesigStore.filterBy(function(C) {
								if (C.data.name == this.desig) {
									return false
								}
								return true
							}, this);
							var B = this.tempDesigStore.getRange();
							this.positionStore.removeAll();
							this.positionStore.add(B);
							WtfGlobal.closeProgressbar()
						}
						this.newDepartment = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.new.department"),
									store : this.deptStore,
									mode : "local",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									typeAhead : true,
									width : 200
								});
						this.comments = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.performance.comments")
									+ "*",
							width : 200,
							height : 55,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.winArr = [];
						if (this.reviewstatus) {
							if (WtfGlobal.CmpEnableDisable(Wtf.subCode,
									Wtf.payroll)) {
								this.winArr.push(this.salaryInc)
							}
							this.winArr.push(this.oldDesig, this.oldDepart,
									this.newDesignation, this.newDepartment,
									this.comments)
						} else {
							this.winArr.push(this.comments)
						}
						this.salaryForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									labelWidth : 120,
									layoutConfig : {
										deferredRender : false
									},
									items : this.winArr
								});
						this.salaryPanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 75,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.performance.appraisals"),
															WtfGlobal
																	.getLocaleText("hrms.appraisal.enter.details"))
												},
												{
													border : false,
													region : "center",
													bodyStyle : "background:#f1f1f1;font-size:10px;",
													layout : "fit",
													items : [ this.salaryForm ]
												} ]
									} ]
								});
						this.add(this.salaryPanel)
					},
					sendapproveSaveRequest : function() {
						if (!this.salaryForm.getForm().isValid()) {
							return
						} else {
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/AnonymousAppraisal/reviewanonymousAppraisalReport.pf",
												params : {
													reviewstatus : this.reviewstatus,
													reviewercomment : this.comments
															.getValue(),
													salaryincrement : this.salaryInc
															.getValue(),
													department : this.newDepartment
															.getValue(),
													designation : this.newDesignation
															.getValue(),
													employeeid : this.employeeid,
													appraisalcycleid : this.appcycleid
												}
											},
											this,
											function(res) {
												var resp = eval("(" + res + ")");
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																"" + resp.msg
																		+ "" ],
														0);
												this.close();
												this.ds.load()
											}, function() {
												calMsgBoxShow(27, 2)
											})
						}
					}
				});
Wtf.timesheetemp = function(A) {
	Wtf.timesheetemp.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.timesheetemp,
				Wtf.Panel,
				{
					autoScroll : false,
					initComponent : function(A) {
						Wtf.timesheetemp.superclass.initComponent.call(this, A)
					},
					onRender : function(E) {
						Wtf.timesheetemp.superclass.onRender.call(this, E);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						Wtf.ux.grid.GridSummary.Calculations.totalTime = function(
								R, N, P, M, K) {
							var J = [];
							var O = [];
							O = M[P];
							if (O != 0) {
								O = O.split(":")
							}
							J = R.split(":");
							var Q = Wtf.getValidNumberOrDefault(O[0], 0)
									+ Wtf.getValidNumberOrDefault(J[0], 0);
							var L = Wtf.getValidNumberOrDefault(O[1], 0)
									+ Wtf.getValidNumberOrDefault(J[1], 0);
							if (L >= 60) {
								Q++;
								L -= 60
							}
							Q = Q < 10 ? "0" + Q : Q;
							L = L < 10 ? "0" + L : L;
							return Q + ":" + L
						};
						this.summary = new Wtf.ux.grid.GridSummary();
						this.jobRecord = Wtf.data.Record.create([ {
							name : "jobtype"
						}, {
							name : "col1"
						}, {
							name : "col2"
						}, {
							name : "col3"
						}, {
							name : "col4"
						}, {
							name : "col5"
						}, {
							name : "col6"
						}, {
							name : "col7"
						}, {
							name : "colid1"
						}, {
							name : "colid2"
						}, {
							name : "colid3"
						}, {
							name : "colid4"
						}, {
							name : "colid5"
						}, {
							name : "colid6"
						}, {
							name : "colid7"
						}, {
							name : "total"
						}, {
							name : "isSubmitted"
						} ]);
						this.jobReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.jobRecord);
						this.jobstore = new Wtf.data.Store({
							url : "Timesheet/EmployeesTimesheet.ts",
							reader : this.jobReader,
							pruneModifiedRecords : true,
							baseParams : {
								flag : 26
							}
						});
						this.selectdate = new Wtf.form.DateField({
							name : "selctdate",
							format : "Y-m-d",
							allowBlank : false
						});
						var D = this.createTextField();
						var C = this.createTextField();
						var B = this.createTextField();
						var A = this.createTextField();
						var I = this.createTextField();
						var H = this.createTextField();
						var G = this.createTextField();
						this.fromdate = new Wtf.form.DateField({
							name : "from",
							width : 150,
							format : "Y-m-d",
							maxValue : new Date(),
							disabled : (this.viewtimesheet) ? true : false
						});
						this.todate = new Wtf.form.TextField({
							name : "to",
							width : 150,
							readOnly : true,
							disabled : true
						});
						this.addbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.add"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.add.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									minWidth : 50,
									scope : this,
									handler : this.insertjob
								});
						this.setbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.set.duration"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.set.duration.tooltip"),
									iconCls : "pwndCommon setbuttonIcon",
									minWidth : 50,
									scope : this,
									handler : this.setduration
								});
						var F = Wtf.cmpPref.timesheetjob;
						if (!F) {
							checkForJobTypeStoreLoad();
							this.jobtext = new Wtf.form.ComboBox({
								store : Wtf.jobtypeStore,
								displayField : "name",
								valueField : "id",
								scope : this,
								mode : "local",
								selectOnFocus : true,
								typeAhead : false,
								allowBlank : false,
								editable : false,
								triggerAction : "all",
								forceSelection : true
							})
						} else {
							this.jobtext = new Wtf.ux.TextField({
								name : "jobtypetextbox",
								width : 200,
								allowBlank : false,
								validator : WtfGlobal.noBlankCheck,
								maxLength : 100
							})
						}
						this.deletejobs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.delete"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.delete.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 50,
									disabled : true,
									scope : this,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : deleteMsgBox("job"),
													icon : Wtf.MessageBox.QUESTION,
													buttons : Wtf.MessageBox.YESNO,
													scope : this,
													fn : function(J) {
														if (J == "yes") {
															this.deletejob()
														}
													}
												})
									}
								});
						this.savejobs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.save.as.draft"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.save.as.draft.tooltip"),
									iconCls : "pwndCommon draftbuttonIcon",
									minWidth : 100,
									scope : this,
									handler : function() {
										this.gridcalculation(false)
									}
								});
						this.submitjobs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.submit.timesheet"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.submit.timesheet.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									minWidth : 100,
									scope : this,
									handler : function() {
										Wtf.MessageBox
												.confirm(
														WtfGlobal
																.getLocaleText("hrms.timesheet.save.data"),
														WtfGlobal
																.getLocaleText("hrms.timesheet.submit"),
														function(J) {
															if (J == "yes") {
																this
																		.gridcalculation(true)
															}
														}, this)
									}
								});
						this.fromdate.on("render", function() {
							if (this.viewstdate) {
								this.fromdate.setValue(this.viewstdate)
							} else {
								this.fromdate.setValue(new Date()
										.format("Y-m-d"));
								this.fromdate.enable()
							}
							this.changegridheader()
						}, this);
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.job"),
											width : 200,
											sortable : true,
											dataIndex : "jobtype",
											summaryRenderer : WtfGlobal.totalSummaryRenderer,
											renderer : (!F) ? Wtf
													.comboBoxRenderer(this.jobtext)
													: "",
											editor : (!this.viewtimesheet) ? this.jobtext
													: "",
											align : "center"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.monday"),
											width : 200,
											sortable : true,
											align : "center",
											editor : (!this.viewtimesheet) ? C
													: "",
											summaryType : "totalTime",
											dataIndex : "col2",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.tuesday"),
											width : 200,
											sortable : true,
											summaryType : "totalTime",
											editor : (!this.viewtimesheet) ? B
													: "",
											dataIndex : "col3",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.wednesday"),
											width : 200,
											sortable : true,
											dataIndex : "col4",
											summaryType : "totalTime",
											editor : (!this.viewtimesheet) ? A
													: "",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.thursday"),
											width : 200,
											sortable : true,
											summaryType : "totalTime",
											dataIndex : "col5",
											editor : (!this.viewtimesheet) ? I
													: "",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.friday"),
											width : 200,
											sortable : true,
											summaryType : "totalTime",
											dataIndex : "col6",
											editor : (!this.viewtimesheet) ? H
													: "",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.saturday"),
											width : 200,
											sortable : true,
											summaryType : "totalTime",
											dataIndex : "col7",
											editor : (!this.viewtimesheet) ? G
													: "",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.sunday"),
											width : 200,
											sortable : true,
											editor : (!this.viewtimesheet) ? D
													: "",
											align : "center",
											summaryType : "totalTime",
											dataIndex : "col1",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.total"),
											width : 200,
											sortable : true,
											dataIndex : "total",
											summaryType : "totalTime",
											align : "center",
											renderer : this.totaltime
										} ]);
						this.jobgrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.jobstore,
									border : false,
									id : "timesheetGrid" + this.id,
									plugins : [ this.summary ],
									disabled : true,
									scope : this,
									stripeRows : true,
									loadMask : true,
									clicksToEdit : 1,
									viewConfig : {
										forceFit : true
									},
									tbar : (this.viewtimesheet) ? [
											(WtfGlobal
													.getLocaleText("hrms.timesheet.fromdate") + ":"),
											this.fromdate,
											"-",
											(WtfGlobal
													.getLocaleText("hrms.timesheet.todate") + ":"),
											this.todate ]
											: [
													(WtfGlobal
															.getLocaleText("hrms.timesheet.fromdate") + ":"),
													this.fromdate,
													"-",
													(WtfGlobal
															.getLocaleText("hrms.timesheet.todate") + ":"),
													this.todate,
													this.setbutton, "-",
													this.addbutton, "-",
													this.savejobs, "-",
													this.submitjobs, "-",
													this.deletejobs ],
									cm : this.cm1,
									sm : this.sm
								});
						if (!F) {
							this.jobgrid.on("afteredit",
									this.defaultValueAssignFunction, this)
						}
						this.add(this.jobgrid);
						this.on("activate", function(K, J) {
							this.doLayout()
						});
						this.jobgrid.on("validateedit", this.validEditFunction,
								this);
						this.sm.on("selectionchange", function() {
							if (this.sm.hasSelection() && !this.isSubmitted) {
								this.savejobs.enable();
								this.submitjobs.enable();
								this.deletejobs.enable()
							}
							if (this.sm.getCount() == 0 || this.isSubmitted) {
								this.deletejobs.disable()
							}
						}, this);
						this.jobstore.on("load",
								function(K, J, M) {
									this.isSubmitted = false;
									if (J.length > 0) {
										if (J[0].data.isSubmitted) {
											this.isSubmitted = true;
											this.addbutton.disable();
											this.savejobs.disable();
											this.submitjobs.disable();
											for ( var L = 0; L < this.cm1
													.getColumnCount(); L++) {
												this.cm1.setEditable(L, false)
											}
										} else {
											this.addbutton.enable();
											this.savejobs.enable();
											this.submitjobs.enable();
											for ( var L = 0; L < this.cm1
													.getColumnCount(); L++) {
												this.cm1.setEditable(L, true)
											}
										}
									} else {
										this.addbutton.enable();
										this.savejobs.disable();
										this.submitjobs.disable();
										for ( var L = 0; L < this.cm1
												.getColumnCount(); L++) {
											this.cm1.setEditable(L, true)
										}
									}
									this.deletejobs.disable()
								}, this)
					},
					defaultValueAssignFunction : function(I) {
						if (I.field == "jobtype") {
							var J = Wtf.jobtypeStore.find("id", I.record
									.get("jobtype")) != undefined ? Wtf.jobtypeStore
									.getAt(Wtf.jobtypeStore.find("id", I.record
											.get("jobtype"))).data.weightage
									: "";
							if (J != undefined || J != "") {
								var A = [];
								A = J.split(":");
								var C = [ 0, 0, 0, 0, 0, 0, 0 ];
								var F = [ 0, 0, 0, 0, 0, 0, 0 ];
								if (A[0] > 24 || A[1] >= 61) {
									calMsgBoxShow(144, 0);
									return false
								}
								for ( var E = 0; E < this.jobstore.getCount(); E++) {
									if (E != I.row) {
										A = this.jobstore.getAt(E).get("col1")
												.split(":");
										C[0] = C[0] + parseFloat(A[0]);
										F[0] = F[0] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col2")
												.split(":");
										C[1] = C[1] + parseFloat(A[0]);
										F[1] = F[1] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col3")
												.split(":");
										C[2] = C[2] + parseFloat(A[0]);
										F[2] = F[2] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col4")
												.split(":");
										C[3] = C[3] + parseFloat(A[0]);
										F[3] = F[3] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col5")
												.split(":");
										C[4] = C[4] + parseFloat(A[0]);
										F[4] = F[4] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col6")
												.split(":");
										C[5] = C[5] + parseFloat(A[0]);
										F[5] = F[5] + parseFloat(A[1]);
										A = this.jobstore.getAt(E).get("col7")
												.split(":");
										C[6] = C[6] + parseFloat(A[0]);
										F[6] = F[6] + parseFloat(A[1])
									}
								}
								A = J.split(":");
								for ( var D = 0; D <= C.length; D++) {
									var G = J;
									var B = C[D] + parseFloat(A[0]);
									var H = F[D] + parseFloat(A[1]);
									if (H > 60) {
										B = (B + 1) + parseFloat((H - 60) / 60)
									}
									if (parseFloat(A[1]) == 60) {
										A[0] = parseFloat(A[0]) + 1;
										if (A[0] < 10) {
											G = "0" + A[0] + ":00"
										} else {
											G = A[0] + ":00"
										}
									}
									if (((B * 60) + H) > 1440) {
										G = "00:00"
									}
									this.jobstore.data.items[I.row].set("col"
											+ (D + 1), G)
								}
							}
						}
					},
					insertjob : function() {
						this.p = new this.jobRecord({
							jobtype : "",
							col1 : "00:00",
							col2 : "00:00",
							col3 : "00:00",
							col4 : "00:00",
							col5 : "00:00",
							col6 : "00:00",
							col7 : "00:00",
							total : "00:00"
						});
						this.jobgrid.stopEditing();
						this.c = this.jobstore.getCount();
						this.jobstore.insert(this.c, this.p)
					},
					validEditFunction : function(E) {
						var D = [];
						D = E.value.split(":");
						var C = 0;
						var A = 0;
						if (E.column == 2 || E.column == 3 || E.column == 4
								|| E.column == 5 || E.column == 6
								|| E.column == 7 || E.column == 8) {
							if (D[0] > 24 || D[1] >= 61) {
								calMsgBoxShow(144, 0);
								return false
							}
						}
						if (E.column == 1) {
							if (this.jobstore.find("jobtype", new RegExp("^"
									+ E.value.trim() + "$")) != -1) {
								calMsgBoxShow(224, 0);
								return false
							}
						}
						for ( var B = 0; B < this.jobstore.getCount(); B++) {
							if (B != E.row) {
								if (E.column == 2) {
									D = this.jobstore.getAt(B).get("col1")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 3) {
									D = this.jobstore.getAt(B).get("col2")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 4) {
									D = this.jobstore.getAt(B).get("col3")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 5) {
									D = this.jobstore.getAt(B).get("col4")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 6) {
									D = this.jobstore.getAt(B).get("col5")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 7) {
									D = this.jobstore.getAt(B).get("col6")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
								if (E.column == 8) {
									D = this.jobstore.getAt(B).get("col7")
											.split(":");
									C = C + parseFloat(D[0]);
									A = A + parseFloat(D[1])
								}
							}
						}
						D = (E.value).split(":");
						C = C + parseFloat(D[0]);
						A = A + parseFloat(D[1]);
						if (A > 60) {
							C = (C + 1) + parseFloat((A - 60) / 60)
						}
						if (parseFloat(D[1]) == 60) {
							D[0] = parseFloat(D[0]) + 1;
							if (D[0] < 10) {
								E.value = "0" + D[0] + ":00"
							} else {
								E.value = D[0] + ":00"
							}
						}
						if (((C * 60) + A) > 1440) {
							calMsgBoxShow(80, 0);
							return false
						}
						return true
					},
					changegridheader : function() {
						this.jobgrid.enable();
						this.day = this.fromdate.getValue().format("D");
						var A = (this.day == WtfGlobal.getLocaleText(
								"hrms.Sunday").substring(0, 3) ? 0
								: (this.day == WtfGlobal.getLocaleText(
										"hrms.Monday").substring(0, 3) ? 1
										: (this.day == WtfGlobal.getLocaleText(
												"hrms.Tuesday").substring(0, 3) ? 2
												: (this.day == WtfGlobal
														.getLocaleText(
																"hrms.Wednesday")
														.substring(0, 3) ? 3
														: (this.day == WtfGlobal
																.getLocaleText(
																		"hrms.Thursday")
																.substring(0, 3) ? 4
																: (this.day == WtfGlobal
																		.getLocaleText(
																				"hrms.Friday")
																		.substring(
																				0,
																				3) ? 5
																		: (this.day == WtfGlobal
																				.getLocaleText(
																						"hrms.Saturday")
																				.substring(
																						0,
																						3) ? 6
																				: 7)))))));
						var C = new Date();
						var D = new Date();
						D = this.fromdate.getValue();
						C = this.fromdate.getValue();
						if (A == 7) {
							switch (this.day) {
							case "Sun":
								C.setDate(C.getDate());
								D.setDate(D.getDate() + 6);
								break;
							case "Mon":
								C.setDate(C.getDate() - 1);
								D.setDate(D.getDate() + 5);
								break;
							case "Tue":
								C.setDate(C.getDate() - 2);
								D.setDate(D.getDate() + 4);
								break;
							case "Wed":
								C.setDate(C.getDate() - 3);
								D.setDate(D.getDate() + 3);
								break;
							case "Thu":
								C.setDate(C.getDate() - 4);
								D.setDate(D.getDate() + 2);
								break;
							case "Fri":
								C.setDate(C.getDate() - 5);
								D.setDate(D.getDate() + 1);
								break;
							case "Sat":
								C.setDate(C.getDate() - 6);
								D.setDate(D.getDate());
								break
							}
						} else {
							C.setDate(C.getDate() - A);
							D.setDate(D.getDate() + (6 - A))
						}
						this.fromdate.setValue(C.format("Y-m-d"));
						this.todate.setValue(D.format("Y-m-d"));
						this.dateArray = new Array();
						this.dateArray.push(C.format("Y-m-d"));
						this.cm1.setColumnHeader(2, C.format("D d M Y"));
						for (i = 2; i < 8; i++) {
							C.setDate(C.getDate() + 1);
							this.dateArray.push(C.format("Y-m-d"));
							this.cm1
									.setColumnHeader(i + 1, C.format("D d M Y"))
						}
						var B = this.fromdate.getRawValue();
						calMsgBoxShow(202, 4, true);
						this.jobstore.load({
							params : {
								empid : this.empid,
								startdate : B,
								enddate : this.todate.getValue()
							}
						});
						this.jobstore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this)
					},
					gridcalculation : function(isSubmittedFlag) {
						var jsondata = "";
						for ( var i = 0; i < this.jobstore.getCount(); i++) {
							jsondata += "{'jobtype':'"
									+ WtfGlobal
											.onlySinglequoateRenderer(this.jobstore
													.getAt(i).get("jobtype"))
									+ "',";
							jsondata += "'col1':'"
									+ (this.jobstore.getAt(i).get("col1") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col1")) + "',";
							jsondata += "'colid1':'"
									+ this.jobstore.getAt(i).get("colid1")
									+ "',";
							jsondata += "'col2':'"
									+ (this.jobstore.getAt(i).get("col2") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col2")) + "',";
							jsondata += "'colid2':'"
									+ this.jobstore.getAt(i).get("colid2")
									+ "',";
							jsondata += "'col3':'"
									+ (this.jobstore.getAt(i).get("col3") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col3")) + "',";
							jsondata += "'colid3':'"
									+ this.jobstore.getAt(i).get("colid3")
									+ "',";
							jsondata += "'col4':'"
									+ (this.jobstore.getAt(i).get("col4") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col4")) + "',";
							jsondata += "'colid4':'"
									+ this.jobstore.getAt(i).get("colid4")
									+ "',";
							jsondata += "'col5':'"
									+ (this.jobstore.getAt(i).get("col5") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col5")) + "',";
							jsondata += "'colid5':'"
									+ this.jobstore.getAt(i).get("colid5")
									+ "',";
							jsondata += "'col6':'"
									+ (this.jobstore.getAt(i).get("col6") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col6")) + "',";
							jsondata += "'colid6':'"
									+ this.jobstore.getAt(i).get("colid6")
									+ "',";
							jsondata += "'col7':'"
									+ (this.jobstore.getAt(i).get("col7") == "" ? "00:00"
											: this.jobstore.getAt(i)
													.get("col7")) + "',";
							jsondata += "'colid7':'"
									+ this.jobstore.getAt(i).get("colid7")
									+ "'},"
						}
						var trmLen = jsondata.length - 1;
						var finalStr = jsondata.substr(0, trmLen);
						var modifiedwork = this.jobstore.getModifiedRecords();
						this.vflag = 0;
						for (i = 0; i < this.jobstore.getCount(); i++) {
							if (this.jobstore.getAt(i).get("jobtype") == "") {
								this.vflag = 0;
								calMsgBoxShow(81, 0);
								break
							} else {
								this.vflag = 1
							}
						}
						var param = {};
						if (this.empid) {
							param = {
								flag : 25,
								colHeader : this.dateArray,
								jsondata : finalStr,
								empid : this.empid,
								isSubmitted : isSubmittedFlag
							}
						} else {
							param = {
								flag : 25,
								colHeader : this.dateArray,
								jsondata : finalStr,
								isSubmitted : isSubmittedFlag
							}
						}
						if (this.vflag == 1) {
							Wtf.Ajax.requestEx({
								url : "Timesheet/insertTimeSheet.ts",
								params : param
							}, this, function(response) {
								var res = eval("(" + response + ")");
								calMsgBoxShow([ res[0].titleMsg, res[1].msg ],
										0);
								var stdate = this.fromdate.getRawValue();
								this.jobstore.load({
									params : {
										empid : this.empid,
										startdate : stdate,
										enddate : this.todate.getValue()
									}
								})
							}, function(response) {
								calMsgBoxShow(82, 1)
							})
						}
					},
					setduration : function() {
						this.changegridheader()
					},
					deletejob : function(btn) {
						var rs = this.jobgrid.getSelectionModel()
								.getSelections();
						var ids = [];
						this.sm.clearSelections();
						var store = this.jobgrid.getStore();
						var k = 0;
						for ( var i = 0; i < rs.length; i++) {
							var rec = store.indexOf(rs[i]);
							WtfGlobal.highLightRow(this.jobgrid, "FF0000", 5,
									rec);
							if (rs[i].get("colid1")) {
								for ( var j = 0; j < 7; j++) {
									ids[k] = rs[i].get("colid" + (j + 1));
									k++
								}
							} else {
								store.remove(rs[i])
							}
						}
						if (ids.length > 0) {
							calMsgBoxShow(201, 4, true);
							Wtf.Ajax
									.requestEx(
											{
												url : "Timesheet/deletetimesheetjobs.ts",
												params : {
													flag : 47,
													ids : ids
												}
											},
											this,
											function(response) {
												var res = eval("(" + response
														+ ")");
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																res.msg ], 0);
												var stdate = this.fromdate
														.getRawValue();
												var params = {
													empid : this.empid,
													startdate : stdate,
													enddate : this.todate
															.getValue()
												};
												WtfGlobal.delaytasks(
														this.jobstore, params)
											}, function(response) {
												calMsgBoxShow(49, 1)
											})
						}
					},
					totaltime : function(G, F, E) {
						var D = "00:00";
						var A = [];
						var H = 0;
						var B = 0;
						for ( var C = 1; C <= 7; C++) {
							var I = E.data["col" + C + ""];
							if (typeof I == "string" && I.indexOf(":") >= 0) {
								D = I
							}
							A = D.split(":");
							H += Wtf.getValidNumberOrDefault(A[0], 0);
							B += Wtf.getValidNumberOrDefault(A[1], 0);
							if (B >= 60) {
								H++;
								B -= 60
							}
						}
						H = H < 10 ? "0" + H : H;
						B = B < 10 ? "0" + B : B;
						return H + ":" + B + " "
								+ WtfGlobal.getLocaleText("hrms.timesheet.hrs")
					},
					createTextField : function() {
						var A = /^(([0-1][0-9]|[2][0-3]):([0-5][0-9]))|(([2][4]:[0][0]))|(([0-1][0-9]|[2][0-3]):([0-6][0]))$/;
						return new Wtf.form.TextField({
							regex : A,
							allowBlank : "false",
							maxLength : 5
						})
					}
				});
Wtf.StartTimer = function(A) {
	Wtf.apply(this, A);
	Wtf.StartTimer.superclass.constructor.call(this, {
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.start"),
			disabled : this.res.started,
			handler : function() {
				this.startFunction()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.stop"),
			disabled : !this.res.started,
			handler : function() {
				this.stopFunction()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.reset"),
			disabled : !this.res.started,
			handler : function() {
				this.resetFunction()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.Close"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	})
};
Wtf
		.extend(
				Wtf.StartTimer,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.StartTimer.superclass.initComponent.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						var A = "";
						if (this.action == "Edit") {
							windetail = WtfGlobal
									.getLocaleText("hrms.common.Editthemasterfieldinformation");
							A = "images/master.gif"
						} else {
							windetail = WtfGlobal
									.getLocaleText("hrms.common.Filluptheinformationtoaddmasterfield");
							A = "images/master.gif"
						}
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 70,
									border : false,
									bodyStyle : "background-color:white;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(
											WtfGlobal
													.getLocaleText("hrms.timesheet.job.timer"),
											WtfGlobal
													.getLocaleText("hrms.timesheet.job.timer.detail"),
											A)
								})
					},
					GetAddEditForm : function() {
						this.timeExceeds = false;
						this.jobitem = null;
						if (this.isFreeText) {
							this.jobitem = new Wtf.ux.TextField(
									{
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.timesheet.job.name"),
										width : 200,
										maxLength : 100,
										name : "id",
										anchor : "70%",
										allowBlank : false
									})
						} else {
							this.jobitem = new Wtf.form.ComboBox(
									{
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.recruitment.select.job"),
										store : Wtf.jobtypeStore,
										displayField : "name",
										hiddenName : "id",
										valueField : "id",
										name : "id",
										scope : this,
										mode : "local",
										anchor : "70%",
										selectOnFocus : true,
										typeAhead : false,
										allowBlank : false,
										editable : false,
										triggerAction : "all",
										forceSelection : true
									})
						}
						this.time = new Wtf.form.TextField(
								{
									regex : /^(([0-1][0-9]|[2][0-3]):([0-5][0-9]))|(([2][4]:[0][0]))|(([0-1][0-9]|[2][0-3]):([0-6][0]))$/,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.timesheet.hours")
											+ "*"
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.timesheet.enterhours.format")),
									width : 200,
									allowBlank : false,
									name : "time",
									maxLength : 5,
									value : "00:00",
									disabled : true,
									anchor : "70%"
								});
						if (this.res.jobname != undefined) {
							this.jobitem.setValue(this.res.jobname);
							this.jobitem.setDisabled(true)
						}
						Wtf.jobtypeStore.on("load", function(B, A, C) {
							this.jobitem.setValue(this.res.jobname)
						}, this);
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									url : "Timesheet/setTimer.ts",
									items : [ this.jobitem, this.time ]
								})
					},
					getBlankJson : function() {
						var A = "";
						A += "{'jobtype':' ',";
						A += "'col1':'00:00',";
						A += "'colid1':'" + undefined + "',";
						A += "'col2':'00:00',";
						A += "'colid2':'" + undefined + "',";
						A += "'col3':'00:00',";
						A += "'colid3':'" + undefined + "',";
						A += "'col4':'00:00',";
						A += "'colid4':'" + undefined + "',";
						A += "'col5':'00:00',";
						A += "'colid5':'" + undefined + "',";
						A += "'col6':'00:00',";
						A += "'colid6':'" + undefined + "',";
						A += "'col7':'00:00',";
						A += "'colid7':'" + undefined + "'},";
						return A
					},
					startFunction : function() {
						if (this.AddEditForm.form.isValid()) {
							this.AddEditForm.form
									.submit({
										params : {
											flag : 202
										},
										success : function() {
											reloadAlerts();
											Wtf.MessageBox
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.success"),
														msg : WtfGlobal
																.getLocaleText("hrms.timesheet.timer.started.successfully"),
														icon : Wtf.MessageBox.INFO,
														buttons : Wtf.MessageBox.OK
													});
											this.close()
										},
										failure : function() {
											Wtf.MessageBox
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.error"),
														msg : WtfGlobal
																.getLocaleText("hrms.timesheet.error.starting.timer"),
														icon : Wtf.MessageBox.ERROR,
														buttons : Wtf.MessageBox.OK
													});
											this.close()
										},
										scope : this
									})
						}
					},
					stopFunction : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.save.data"),
										WtfGlobal
												.getLocaleText("hrms.timesheet.want.stop.timer"),
										function(btn) {
											if (btn == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : "Timesheet/stopTimer.ts",
																	params : {
																		colHeader : this.colHeader,
																		jsondata : this
																				.getBlankJson(),
																		isSubmitted : false,
																		startdate : this.startdate,
																		enddate : this.enddate,
																		time : this.time
																				.getValue(),
																		timeExceeds : this.timeExceeds
																	}
																},
																this,
																function(
																		response) {
																	reloadAlerts();
																	var res = eval("("
																			+ response
																			+ ")");
																	if (res.success) {
																		Wtf.MessageBox
																				.show({
																					title : WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					msg : WtfGlobal
																							.getLocaleText("hrms.timesheet.timer.stopped.successfully"),
																					icon : Wtf.MessageBox.INFO,
																					buttons : Wtf.MessageBox.OK
																				});
																		this
																				.close()
																	} else {
																		this.time
																				.setDisabled(false);
																		this.timeExceeds = true;
																		Wtf.MessageBox
																				.show({
																					title : WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					msg : WtfGlobal
																							.getLocaleText("hrms.timesheet.total.working.hours.day.exceed.24hrs")
																							+ "<br>"
																							+ WtfGlobal
																									.getLocaleText("hrms.timesheet.enter.working.hours.manually"),
																					icon : Wtf.MessageBox.WARNING,
																					buttons : Wtf.MessageBox.OK
																				})
																	}
																},
																function(
																		response) {
																	Wtf.MessageBox
																			.show({
																				title : WtfGlobal
																						.getLocaleText("hrms.common.error"),
																				msg : WtfGlobal
																						.getLocaleText("hrms.timesheet.error.stopping.timer"),
																				icon : Wtf.MessageBox.ERROR,
																				buttons : Wtf.MessageBox.OK
																			})
																})
											}
										}, this)
					},
					resetFunction : function() {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.save.data"),
										WtfGlobal
												.getLocaleText("hrms.timesheet.want.cancel.timer"),
										function(A) {
											if (A == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : "Timesheet/cancelTimer.ts",
																	params : {
																		colHeader : this.colHeader,
																		jsondata : this
																				.getBlankJson(),
																		isSubmitted : false,
																		startdate : this.startdate,
																		enddate : this.enddate
																	}
																},
																this,
																function(B) {
																	Wtf.MessageBox
																			.show({
																				title : WtfGlobal
																						.getLocaleText("hrms.common.success"),
																				msg : WtfGlobal
																						.getLocaleText("hrms.timesheet.timer.cancelled.successfully"),
																				icon : Wtf.MessageBox.INFO,
																				buttons : Wtf.MessageBox.OK
																			});
																	this
																			.close()
																},
																function(B) {
																	Wtf.MessageBox
																			.show({
																				title : WtfGlobal
																						.getLocaleText("hrms.common.error"),
																				msg : WtfGlobal
																						.getLocaleText("hrms.timesheet.error.cancelling.timer"),
																				icon : Wtf.MessageBox.ERROR,
																				buttons : Wtf.MessageBox.OK
																			})
																})
											}
										}, this)
					}
				});
Wtf.viewtimesheet = function(A) {
	Wtf.viewtimesheet.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.viewtimesheet,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.viewtimesheet.superclass.initComponent
								.call(this, A)
					},
					onRender : function(A) {
						Wtf.viewtimesheet.superclass.onRender.call(this, A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.viewtimerecord = Wtf.data.Record.create([ {
							name : "empid"
						}, {
							name : "empname"
						}, {
							name : "startdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "hours"
						}, {
							name : "work"
						}, {
							name : "status"
						}, {
							name : "approvedby"
						} ]);
						this.timereader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.viewtimerecord);
						this.timestore = new Wtf.data.Store({
							url : "Timesheet/AllTimesheets.ts",
							reader : this.timereader,
							baseParams : {
								flag : 27
							}
						});
						this.fromdate = new Wtf.form.DateField({
							name : "from",
							width : 150,
							format : "Y-m-d"
						});
						this.todate = new Wtf.form.TextField({
							name : "to",
							width : 150,
							readOnly : true,
							disabled : true
						});
						this.setbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.set.duration"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.view.set.duration.tooltip"),
									iconCls : "pwndCommon setbuttonIcon",
									minWidth : 50,
									scope : this,
									handler : this.setduration
								});
						this.approvebutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.approve.timesheet"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.approve.timesheet.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 114,
									scope : this,
									disabled : true,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.timesheet.approve.timesheet.confirm.msg"),
													icon : Wtf.MessageBox.QUESTION,
													buttons : Wtf.MessageBox.YESNO,
													scope : this,
													fn : function(C) {
														if (C == "yes") {
															this
																	.approvefunc("approve")
														}
													}
												})
									}
								});
						this.rejectbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.reject.timesheet"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.change.status.timesheet.rejecting"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 114,
									scope : this,
									disabled : true,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.timesheet.reject.timesheet.confirm.msg"),
													icon : Wtf.MessageBox.QUESTION,
													buttons : Wtf.MessageBox.YESNO,
													scope : this,
													fn : function(C) {
														if (C == "yes") {
															this
																	.approvefunc("reject")
														}
													}
												})
									}
								});
						this.viewbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.view.timesheet"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.view.timesheet.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 96,
									id : "viewButton",
									scope : this,
									handler : function() {
										this.cmpst = this.fromdate.getValue()
												.format("Y-m-d");
										this.cmpend = this.todate.getValue();
										this.arr = this.sm.getSelections();
										var E = this.arr[0].get("empname");
										var D = this.arr[0].get("empid");
										if (this.arr.length == 1) {
											var C = Wtf
													.getCmp("timesheetmanage");
											var F = Wtf.getCmp("timesheetemp"
													+ D);
											if (F == null) {
												F = new Wtf.timesheetemp(
														{
															id : "timesheetemp"
																	+ D,
															title : WtfGlobal
																	.getLocaleText({
																		key : "hrms.timesheet.EmployeesTimesheet",
																		params : [ E ]
																	}),
															layout : "fit",
															viewtimesheet : true,
															border : false,
															closable : true,
															empid : this.arr[0]
																	.get("empid"),
															viewstdate : this.cmpst,
															viewenddate : this.cmpend,
															iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
														});
												C.add(F)
											}
											C.setActiveTab(F);
											C.doLayout()
										} else {
											calMsgBoxShow(72, 0)
										}
									}
								});
						this.reportbutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.timesheet.generate.report"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.timesheet.generate.report.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.reportbutton),
									minWidth : 114,
									scope : this,
									disabled : true,
									handler : this.generateReport
								});
						var B = new Array();
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.timestore
												.load({
													params : {
														start : 0,
														limit : this.viewtimeGrid.pag.pageSize
													}
												});
										Wtf.getCmp(
												"Quick" + this.viewtimeGrid.id)
												.setValue("")
									}
								});
						B.push("-");
						B.push(this.refreshBtn);
						B.push("-");
						B.push(WtfGlobal
								.getLocaleText("hrms.timesheet.fromdate")
								+ ":");
						B.push(this.fromdate);
						B.push("-");
						B.push(WtfGlobal.getLocaleText("hrms.timesheet.todate")
								+ ":");
						B.push(this.todate);
						B.push(this.setbutton);
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.viewtimesheet,
								Wtf.Perm.viewtimesheet.viewtimesheet)) {
							B.push("-");
							B.push(this.viewbutton)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.viewtimesheet,
								Wtf.Perm.viewtimesheet.approve)) {
							B.push("-");
							B.push(this.approvebutton);
							B.push("-");
							B.push(this.rejectbutton);
							B.push("-");
							B.push(this.reportbutton)
						}
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											width : 200,
											align : "center",
											sortable : true,
											dataIndex : "empname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											width : 200,
											sortable : true,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											dataIndex : "startdate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											width : 200,
											sortable : true,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											dataIndex : "enddate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.official.work.hours"),
											width : 200,
											align : "center",
											sortable : true,
											dataIndex : "hours"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.employee.work.hours"),
											width : 200,
											align : "center",
											sortable : true,
											dataIndex : "work"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											width : 200,
											sortable : true,
											align : "center",
											dataIndex : "status",
											renderer : function(D, C, E) {
												if (E.get("status") == 0) {
													return WtfGlobal
															.getLocaleText("hrms.common.status.notapproved")
												} else {
													if (E.get("status") == 1) {
														return "<span style='color:green !important;'>"
																+ WtfGlobal
																		.getLocaleText("hrms.common.status.approved")
																+ "</span>"
													} else {
														if (E.get("status") == 2) {
															return "<span style='color:red !important;'>"
																	+ WtfGlobal
																			.getLocaleText("hrms.common.status.rejected")
																	+ "</span>"
														} else {
															return ""
														}
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.manager.name"),
											width : 200,
											align : "center",
											sortable : true,
											dataIndex : "approvedby"
										} ]);
						this.viewtimeGrid = new Wtf.KwlGridPanel(
								{
									store : this.timestore,
									autoScroll : true,
									border : false,
									scope : this,
									stripeRows : true,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.timesheet.grid.msg"))
									},
									searchField : "empname",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									displayInfo : true,
									cm : this.cm1,
									sm : this.sm,
									tbar : B
								});
						enableDisableButton("viewButton", this.timestore,
								this.sm);
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(B, this.viewtimeGrid,
									[ 10, 14, 16 ], [ 12 ])
						}, this);
						this.add(this.viewtimeGrid);
						this.fromdate.on("render", function() {
							if (this.startdate) {
								this.fromdate.setValue(new Date(this.startdate)
										.format("Y-m-d"))
							} else {
								this.fromdate.setValue(new Date()
										.format("Y-m-d"))
							}
							this.weekhandler()
						}, this)
					},
					weekhandler : function() {
						this.day = this.fromdate.getValue().format("D");
						var C = new Date();
						var D = new Date();
						D = this.fromdate.getValue();
						C = this.fromdate.getValue();
						switch (this.day) {
						case "Sun":
							C.setDate(C.getDate());
							D.setDate(D.getDate() + 6);
							break;
						case "Mon":
							C.setDate(C.getDate() - 1);
							D.setDate(D.getDate() + 5);
							break;
						case "Tue":
							C.setDate(C.getDate() - 2);
							D.setDate(D.getDate() + 4);
							break;
						case "Wed":
							C.setDate(C.getDate() - 3);
							D.setDate(D.getDate() + 3);
							break;
						case "Thu":
							C.setDate(C.getDate() - 4);
							D.setDate(D.getDate() + 2);
							break;
						case "Fri":
							C.setDate(C.getDate() - 5);
							D.setDate(D.getDate() + 1);
							break;
						case "Sat":
							C.setDate(C.getDate() - 6);
							D.setDate(D.getDate());
							break
						}
						this.fromdate.setValue(C.format("Y-m-d"));
						this.todate.setValue(D.format("Y-m-d"));
						this.appdate1 = C;
						this.appdate2 = D;
						var B = this.fromdate.getRawValue();
						var A = this.todate.getValue();
						this.timestore.baseParams = {
							flag : 27,
							startdate : B,
							enddate : A
						};
						calMsgBoxShow(202, 4, true);
						this.timestore.load({
							params : {
								start : 0,
								limit : this.viewtimeGrid.pag.pageSize
							}
						});
						this.timestore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this)
					},
					approvefunc : function(C) {
						var B = this.fromdate.getRawValue();
						this.emparr = this.sm.getSelections();
						this.empids = [];
						for ( var A = 0; A < this.emparr.length; A++) {
							if (this.emparr[A].get("status") == 0) {
								this.empids.push(this.emparr[A].get("empid"))
							} else {
								calMsgBoxShow(209, 2);
								return
							}
						}
						calMsgBoxShow(200, 4, true);
						Wtf.Ajax
								.requestEx(
										{
											url : "Timesheet/AlltimesheetsApproval.ts",
											params : {
												flag : 28,
												startdate : B,
												enddate : this.todate
														.getValue(),
												empids : this.empids,
												action : C
											}
										},
										this,
										function() {
											if (C == "approve") {
												calMsgBoxShow(83, 0)
											} else {
												calMsgBoxShow(230, 0)
											}
											var D = this.fromdate.getRawValue();
											this.timestore
													.load({
														params : {
															flag : 27,
															start : 0,
															limit : this.viewtimeGrid.pag.pageSize,
															startdate : WtfGlobal
																	.convertToGenericDate(this.appdate1),
															enddate : WtfGlobal
																	.convertToGenericDate(this.appdate2)
														}
													})
										}, function() {
											calMsgBoxShow(84, 1)
										})
					},
					setduration : function() {
						this.weekhandler()
					},
					generateReport : function() {
						var B = this.sm.getSelections();
						var D = B[0].get("empid");
						var E = B[0].get("empname");
						var C = this.fromdate.getValue().format("Y-m-d");
						var A = Wtf.getCmp("timesheetmanage");
						var F = Wtf.getCmp("timesheetReport" + D);
						if (F == null) {
							F = new Wtf.TimesheetReport({
								id : "timesheetReport" + D,
								title : WtfGlobal.getLocaleText({
									key : "hrms.timesheet.EmployeesTimesheet",
									params : [ E ]
								}),
								iconCls : getTabIconCls(Wtf.etype.crm),
								autoScroll : true,
								layout : "fit",
								border : false,
								empid : D,
								empname : E,
								closable : true,
								viewstdate : C
							});
							A.add(F)
						}
						A.setActiveTab(F);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					}
				});
Wtf.AccGridComp = function(A) {
	Wtf.apply(this, A);
	Wtf.AccGridComp.superclass.constructor.call(this, {
		clicksToEdit : 1,
		border : false,
		viewConfig : {
			forceFit : true,
			autoFill : true
		}
	});
	this.addEvents({
		"onAccGridEdit" : true,
		"onChkboxClick" : true,
		"onAccCelldblclick" : true,
		"onimgdivclick" : true
	});
	this.on("afteredit", this.AfterGridEdit, this);
	this.on("cellclick", this.OnCellClick, this);
	this.on("celldblclick", this.OnCellDblClick, this);
	this.getSelectionModel().on("getGridColNo", this.ReturnColumnNo, this)
};
Wtf.extend(Wtf.AccGridComp, Wtf.grid.EditorGridPanel, {
	arow : 0,
	acol : 0,
	AfterGridEdit : function(A) {
		this.fireEvent("onAccGridEdit", A.row, A.originalValue, A.value,
				A.field, A.record)
	},
	OnCellClick : function(B, A, D, C) {
		this.arow = A;
		this.acol = D;
		if (D == 0) {
			this.fireEvent("onChkboxClick", A)
		}
		if (C.target.className == "minus" || C.target.className == "plus") {
			this.fireEvent("onimgdivclick", A, C.target)
		}
	},
	OnCellDblClick : function(B, A, D, C) {
		this.fireEvent("onAccCelldblclick", A)
	},
	ReturnColumnNo : function() {
		this.getSelectionModel().gridCol = this.acol
	}
});
Wtf.ux.comboBoxRenderer = function(A) {
	return function(C) {
		var B = A.store.find(A.valueField, C);
		if (B == -1) {
			return ""
		}
		var D = A.store.getAt(B);
		return D.get(A.displayField)
	}
};
Wtf.AttendanceInfopanel = function(A) {
	Wtf.apply(this, A);
	Wtf.AttendanceInfopanel.superclass.constructor.call(this, {
		border : false
	})
};
Wtf
		.extend(
				Wtf.AttendanceInfopanel,
				Wtf.Panel,
				{
					initComponent : function() {
						var A = this.act;
						this.presentCmbStore = new Wtf.data.SimpleStore({
							fields : [ "statusid", "status" ],
							data : [ [ 1, "Present" ], [ 2, "Absent" ] ]
						});
						this.typesRecord = Wtf.data.Record.create([ {
							name : "type_id"
						}, {
							name : "type"
						} ]);
						this.typeCmbStore = new Wtf.data.SimpleStore({
							fields : [ "typeid", "type" ],
							data : [ [ 0, "Part Time" ], [ 3, "Full Time" ],
									[ 2, "Executive" ], [ 1, "Contract" ] ]
						});
						this.presentCmb = new Wtf.form.ComboBox({
							mode : "local",
							editable : false,
							store : this.presentCmbStore,
							displayField : "status",
							valueField : "statusid",
							allowBlank : false,
							typeAhead : true,
							triggerAction : "all"
						});
						this.Center = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "empcodeid"
						}, {
							name : "name"
						}, {
							name : "company"
						}, {
							name : "phone"
						}, {
							name : "email"
						}, {
							name : "docid"
						}, {
							name : "type"
						}, {
							name : "docname"
						}, {
							name : "storename"
						}, {
							name : "rateperhour"
						}, {
							name : "overrateperhour"
						}, {
							name : "holirateperhour"
						}, {
							name : "isabsent"
						}, {
							name : "designation"
						}, {
							name : "statusid"
						}, {
							name : "phone"
						}, {
							name : "nohr"
						} ]);
						if (this.act == 0 || this.act == 1 || this.act == 2) {
							this.dsCenter = new Wtf.data.Store({
								baseParams : {
									flag : 300,
									companyid : companyid,
									type : "c",
									text : ""
								},
								groupField : "storename",
								sortInfo : {
									field : "storename",
									direction : "ASC"
								},
								url : Wtf.req.base + "hrms.jsp",
								reader : new Wtf.data.KwlJsonReader1({
									root : "data",
									totalProperty : "TotalCount",
									remoteGroup : true,
									remoteSort : true
								}, this.Center)
							})
						}
						this.page = new Wtf.PagingToolbar({
							id : "paging" + this.id,
							pageSize : 15,
							store : this.dsCenter,
							displayInfo : true,
							plugins : new Wtf.common.pPageSize()
						});
						this.gridsm = new Wtf.grid.CheckboxSelectionModel();
						this.cmCenter = new Wtf.grid.ColumnModel(
								[
										this.gridsm,
										{
											dataIndex : "id",
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "empcodeid",
											sortable : true,
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "name",
											scope : this,
											sortable : true,
											renderer : function(F, E, B, G, D,
													C) {
												if (A == 0) {
													return "<a href = '#' class='viewclass' style = 'color : #175C9E;'> "
															+ F + " </a>"
												} else {
													return F
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.store"),
											dataIndex : "storename",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.profile.MobileNo"),
											dataIndex : "phone",
											hidden : this.act == 0 ? false
													: true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.type"),
											dataIndex : "type",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.no.hours"),
											dataIndex : "nohr",
											sortable : true,
											editor : new Wtf.form.NumberField(),
											hidden : this.act == 1
													|| this.act == 2 ? false
													: true
										},
										{
											header : "Rate/Hour",
											dataIndex : "rateperhour",
											editor : new Wtf.form.NumberField(),
											sortable : true
										},
										{
											header : "Overtime Rate/Hour",
											dataIndex : "overrateperhour",
											editor : new Wtf.form.NumberField(),
											sortable : true
										},
										{
											header : "DaysPay",
											renderer : this.calculatedayspay,
											hidden : this.act == 1
													|| this.act == 2 ? false
													: true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.attendance"),
											dataIndex : "statusid",
											hidden : this.act == 1 ? false
													: true,
											editor : this.presentCmb,
											renderer : Wtf.ux
													.comboBoxRenderer(this.presentCmb),
											scope : this
										} ]);
						this.grid = new Wtf.AccGridComp(
								{
									id : "accGrid" + this.id,
									border : false,
									selModel : this.gridsm,
									ds : this.dsCenter,
									cm : this.cmCenter,
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									}
								});
						this.addEvents({
							"opennewform" : true,
							"deleteform" : true
						})
					},
					onRender : function(A) {
						Wtf.AttendanceInfopanel.superclass.onRender.call(this,
								A);
						this.updateBut = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.Update"),
							iconCls : getButtonIconCls(Wtf.btype.submitbutton)
						});
						this.err1 = new Array();
						this.err1.push(this.page);
						if (this.act == 1 || this.act == 2) {
							this.err1.push(this.updateBut);
							this.updateBut
									.on("click", this.updateHandler, this)
						}
						var B = new Array();
						B.push(WtfGlobal
								.getLocaleText("hrms.common.QuickSearch")
								+ " : ");
						B
								.push(this.quickSearchTF = new Wtf.wtfQuickSearch(
										{
											width : 200,
											field : "name",
											emptyText : WtfGlobal
													.getLocaleText("hrms.common.grid.search.msg")
										}));
						this.leavesRecord = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "store_id"
						}, {
							name : "store_name"
						}, {
							name : "loc"
						}, {
							name : "phno"
						}, {
							name : "ManagerId"
						} ]);
						this.from_type = new Wtf.data.Store({
							autoLoad : false,
							url : Wtf.req.base
									+ "inventory/inventory.jsp?flag=49",
							reader : new Wtf.data.KwlJsonReader({
								totalProperty : "count",
								root : "data"
							}, this.typesRecord)
						});
						this.typename = new Wtf.form.ComboBox({
							hiddenName : "fromType",
							store : this.from_type,
							readOnly : true,
							editable : false,
							displayField : "type",
							valueField : "type",
							mode : "local",
							width : 200,
							triggerAction : "all",
							emptyText : WtfGlobal
									.getLocaleText("hrms.payroll.select.type"),
							id : "tr_fromType_id" + this.act
						});
						this.from_Store = new Wtf.data.Store({
							autoLoad : true,
							baseParams : {
								type : 3,
								configid : 7
							},
							url : "Common/getMasterDataField.common?flag=203",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.leavesRecord)
						});
						this.from_Store.on("load", function() {
							if (this.act == 0 || this.act == 1) {
								this.storename.setValue("Store10");
								this.dsCenter.load({
									params : {
										filtertype : "store",
										filterval : "Store10",
										start : 0,
										limit : 15
									}
								})
							}
						}, this);
						this.typeCmb = new Wtf.form.ComboBox({
							mode : "local",
							editable : false,
							store : this.typeCmbStore,
							displayField : "type",
							valueField : "typeid",
							emptyText : WtfGlobal
									.getLocaleText("hrms.payroll.select.type"),
							allowBlank : false,
							typeAhead : true,
							triggerAction : "all"
						});
						this.from_Store11 = new Wtf.data.Store({
							autoLoad : true,
							baseParams : {
								type : 1,
								configid : 7
							},
							url : "Common/getMasterDataField.common?flag=203",
							reader : new Wtf.data.KwlJsonReader1({
								totalProperty : "count",
								root : "data"
							}, this.leavesRecord)
						});
						this.from_Store11.load();
						this.storename = new Wtf.form.ComboBox({
							hiddenName : "fromStore",
							store : this.from_Store,
							readOnly : true,
							editable : false,
							displayField : "name",
							valueField : "id",
							mode : "local",
							width : 200,
							triggerAction : "all",
							emptyText : WtfGlobal
									.getLocaleText("hrms.payroll.select.type"),
							id : "tr_fromStore_id" + this.act
						});
						this.storename1 = new Wtf.form.ComboBox({
							hiddenName : "fromStore11",
							store : this.from_Store11,
							readOnly : true,
							editable : false,
							displayField : "name",
							valueField : "id",
							mode : "local",
							width : 200,
							triggerAction : "all",
							emptyText : WtfGlobal
									.getLocaleText("hrms.payroll.select.type"),
							id : "tr_fromStore_id11"
						});
						this.grid
								.on(
										"rowclick",
										function(D, C, F) {
											if (F.getTarget().className == "viewclass") {
												var E = Wtf.getCmp("as");
												var G = this.gridsm
														.getSelected();
												this.empid = G.data["id"];
												if (!Wtf.getCmp(this.empid
														+ this.id)) {
													this.EmpDetails = new Wtf.EmployeeDetailPanel(
															{
																id : this.empid
																		+ this.id,
																title : WtfGlobal
																		.getLocaleText({
																			key : "hrms.timesheet.s.details",
																			params : [ G.data["name"] ]
																		}),
																closable : true,
																border : false,
																layout : "fit",
																empid : this.empid
															});
													E.add(Wtf.getCmp(this.empid
															+ this.id))
												}
												E.setActiveTab(Wtf
														.getCmp(this.empid
																+ this.id));
												E.doLayout()
											}
										}, this);
						if (this.act == 1 || this.act == 0) {
							B.push("Type : ");
							B.push(this.typename);
							B.push("-");
							B.push(this.newBtn = new Wtf.Button({
								anchor : "90%",
								text : "ALL DATA",
								id : "newType",
								handler : function() {
									this.storename.setValue("");
									this.typename.setValue("");
									this.dsCenter.load({
										params : {
											start : 0,
											limit : 15
										}
									})
								},
								scope : this
							}))
						}
						B.push("-");
						B.push("Date : ");
						this.tempDate = new Wtf.form.DateField({
							value : new Date(),
							readOnly : true,
							format : "Y-m-d",
							width : 200
						});
						B.push("-");
						B.push(this.tempDate);
						this.tmsheetBtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Featurelist.viewtimesheet"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 96,
									scope : this,
									handler : this.openTimesheet
								});
						B.push("-");
						B.push(this.tmsheetBtn);
						this.storename.on("select", this.filterGrid, this);
						this.typename.on("select", this.filterGridtype, this);
						this.tempDate.on("change", function(E, D, C) {
						}, this);
						this.innerpanel = new Wtf.Panel({
							id : "Innpan" + this.id,
							border : false,
							layout : "fit",
							tbar : B,
							bbar : this.err1,
							items : this.grid
						});
						this.add(this.innerpanel);
						this.dsCenter.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.dsCenter.on("load", function() {
							this.quickSearchTF.StorageChanged(this.dsCenter)
						}, this)
					},
					openTimesheet : function() {
						var B = this.grid.getSelectionModel().getSelections();
						if (B.length != 1) {
							calMsgBoxShow(72, 0);
							return
						}
						var A = Wtf.getCmp("timesheetmanage");
						var C = Wtf.getCmp("viewtimesheet");
						if (C == null) {
							C = new Wtf.viewtimesheet(
									{
										id : "viewtimesheet",
										title : WtfGlobal
												.getLocaleText("hrms.timesheet.view.timesheets"),
										layout : "fit",
										border : false,
										iconCls : getTabIconCls(Wtf.etype.hrmsviewtimesheet)
									});
							A.add(C)
						}
						A.setActiveTab(C);
						A.doLayout();
						C.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					calculatedayspay : function(B, A, E, D, C) {
						if (E.get("statusid") == 2) {
							return "0"
						}
						return E.get("rateperhour") * E.get("nohr")
					},
					takemyChange : function(B, A, E, D, C) {
						if (B == "Software Engineer") {
							return "Full Time"
						} else {
							if (B == "Trainee Engineer") {
								return "Part time"
							} else {
								return "Executive"
							}
						}
					},
					updateHandler : function() {
						if (this.act == 2) {
							var B = 0;
							if (this.gridsm.getSelections().length == 0) {
								calMsgBoxShow(42, 0)
							} else {
								var A = new Array();
								for (B = 0; B < this.gridsm.getSelections().length; B++) {
									A.push(this.gridsm.getSelections()[B]
											.get("id"))
								}
							}
						}
						if (this.act == 1) {
							calMsgBoxShow(79, 0)
						}
					},
					filterGrid : function() {
						this.dsCenter.load({
							params : {
								filtertype : "store",
								filterval : this.storename.getValue(),
								start : 0,
								limit : 15
							}
						});
						this.typename.setValue("")
					},
					filterGridtype : function() {
						this.dsCenter.load({
							params : {
								filtertype : "type",
								filterval : this.typename.getValue(),
								start : 0,
								limit : 15
							}
						});
						this.storename.setValue("")
					}
				});
Wtf.InternalJob = function(A) {
	Wtf.apply(this, A);
	Wtf.InternalJob.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.InternalJob,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.InternalJob.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.InternalJob.superclass.onRender.call(this, A);
						this.jobForm();
						this.add(this.jbGrid);
						this.on("activate", function() {
							this.doLayout()
						})
					},
					jobForm : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.interjobRecord = Wtf.data.Record.create([ {
							name : "applicationid"
						}, {
							name : "posid"
						}, {
							name : "posname"
						}, {
							name : "details"
						}, {
							name : "department"
						}, {
							name : "manager"
						}, {
							name : "startdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "jobtype"
						}, {
							name : "status"
						}, {
							name : "jobid"
						}, {
							name : "selectionstatus"
						} ]);
						this.interreader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.interjobRecord);
						this.internaljobGDS = new Wtf.data.Store({
							url : "Rec/Job/getInternalJobs.rec",
							reader : this.interreader,
							baseParams : {
								flag : 7,
								jobtype : "internal",
								employee : true,
								jobstatus : 0
							}
						});
						calMsgBoxShow(202, 4, true);
						this.internaljobGDS.load();
						this.internaljobGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.id"),
											dataIndex : "jobid",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "posname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.PositionDetails"),
											dataIndex : "details",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.approving.manager"),
											dataIndex : "manager",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "startdate",
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "selectionstatus",
											sortable : true,
											renderer : function(A) {
												if (A == "Pending") {
													return '<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending")
															+ "</FONT>"
												} else {
													if (A == "Shortlisted") {
														return '<FONT COLOR="green">'
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.shortlisted")
																+ "</FONT>"
													} else {
														if (A == "In Process") {
															return '<FONT COLOR="red">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.in.process")
																	+ "</FONT>"
														} else {
															if (A == "On Hold") {
																return '<FONT COLOR="DarkGoldenRod">'
																		+ WtfGlobal
																				.getLocaleText("hrms.recruitment.on.hold")
																		+ "</FONT>"
															} else {
																if (A == "Rejected") {
																	return '<FONT COLOR="Indigo">'
																			+ WtfGlobal
																					.getLocaleText("hrms.recruitment.rejected")
																			+ "</FONT>"
																} else {
																	if (A == "Selected") {
																		return '<FONT COLOR="Fuchsia">'
																				+ WtfGlobal
																						.getLocaleText("hrms.recruitment.Selected")
																				+ "</FONT>"
																	} else {
																		return '<FONT COLOR="Brown">'
																				+ A
																				+ "</FONT>"
																	}
																}
															}
														}
													}
												}
											}
										} ]);
						this.viewjobPos = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.ViewJobProfile"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.ViewJobProfile.tooltip"),
									minWidth : 105,
									disabled : true,
									handler : this.viewjobpos,
									scope : this
								});
						this.viewProfile = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.view.edit.profile"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.edit.profile.tooltip"),
									minWidth : 105,
									disabled : true,
									handler : this.viewProfile,
									scope : this
								});
						this.applyjobButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.ApplyForJob"),
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 90,
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.recruitment.JobPosition"),
										text : WtfGlobal
												.getLocaleText("hrms.recruitment.ApplyForJob.tooltip")
									},
									scope : this,
									disabled : true,
									handler : function() {
										this.rec = this.sm2.getSelections();
										if (this.rec.length > 0) {
											this.applyforjob()
										} else {
											Wtf.MessageBox
													.show({
														msg : WtfGlobal
																.getLocaleText("hrms.recruitment.Pleaseselectajobposition"),
														buttons : Wtf.MessageBox.OK
													})
										}
									}
								});
						this.canceljobButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.CancelJob"),
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 90,
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.recruitment.JobPosition"),
										text : WtfGlobal
												.getLocaleText("hrms.recruitment.CancelJob.tooltip")
									},
									scope : this,
									handler : function() {
										this.rec = this.sm2.getSelections();
										if (this.rec.length > 0) {
											this.canceljob()
										} else {
											Wtf.MessageBox
													.show({
														msg : WtfGlobal
																.getLocaleText("hrms.recruitment.Pleaseselectajobposition"),
														buttons : Wtf.MessageBox.OK
													})
										}
									}
								});
						this.toolbarItems = new Array();
						if (!WtfGlobal.EnableDisable(
								Wtf.UPerm.internaljobboard,
								Wtf.Perm.internaljobboard.apply)) {
							this.toolbarItems.push("-");
							this.toolbarItems.push(this.viewjobPos);
							this.toolbarItems.push("-");
							this.toolbarItems.push(this.applyjobButton);
							this.toolbarItems.push("-");
							this.toolbarItems.push(this.canceljobButton);
							this.toolbarItems.push("-");
							this.toolbarItems.push(this.viewProfile)
						}
						this.jbGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : "interjobgrid",
									store : this.internaljobGDS,
									cm : this.cm,
									sm : this.sm2,
									enableColumnHide : false,
									trackMouseOver : true,
									loadMask : true,
									stripeRows : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.SearchbyJobId"),
									searchField : "jobid",
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									},
									displayInfo : true,
									tbar : this.toolbarItems
								});
						this.sm2
								.on(
										"selectionchange",
										function() {
											this.applyjobButton.disable();
											this.canceljobButton.disable();
											this.viewjobPos.disable();
											this.viewProfile.disable();
											if (this.sm2.getCount() == 1) {
												this.viewjobPos.enable()
											}
											if (this.sm2.getCount() > 0) {
												var A = "";
												this.canceljobButton.enable();
												this.applyjobButton.enable();
												this.viewProfile.enable();
												for ( var B = 0; B < this.sm2.selections.length; B++) {
													if (this.sm2.selections.items[B].data.selectionstatus != "Pending") {
														this.canceljobButton
																.disable()
													}
													if (A != this.sm2.selections.items[B].data.status) {
														this.applyjobButton
																.disable();
														A = this.sm2.selections.items[B].data.status;
														break
													}
													A = this.sm2.selections.items[B].data.status
												}
											}
										}, this)
					},
					applyforjob : function() {
						this.delkey = this.sm2.getSelections();
						this.jobids = [];
						this.applyflag = true;
						for ( var A = 0; A < this.delkey.length; A++) {
							if (this.delkey[A].get("status") == "1") {
								this.applyflag = false
							}
						}
						if (this.applyflag) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.AreyousureApplyselectedjobposition"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												this.poskey = this.sm2
														.getSelections();
												this.ids = [];
												for ( var B = 0; B < this.poskey.length; B++) {
													this.ids
															.push(this.poskey[B]
																	.get("posid"))
												}
												this.currentdate = new Date()
														.format("m/d/Y");
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/applyforjobexternal.rec",
																	params : {
																		flag : 37,
																		posid : this.ids,
																		applydt : this.currentdate,
																		employeetype : 1
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			125,
																			0);
																	this.sm2
																			.clearSelections();
																	this.internaljobGDS
																			.load()
																},
																function() {
																	calMsgBoxShow(
																			126,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(129, 0);
							this.jbGrid.getSelectionModel().clearSelections()
						}
					},
					canceljob : function() {
						this.delkey = this.sm2.getSelections();
						this.jobids = [];
						this.applyflag = false;
						for ( var A = 0; A < this.delkey.length; A++) {
							if (this.delkey[A].get("selectionstatus") == "Pending") {
								this.applyflag = true
							}
						}
						if (this.applyflag) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.Areyousurecancelselectedjobposition"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												this.poskey = this.sm2
														.getSelections();
												this.ids = [];
												for ( var B = 0; B < this.poskey.length; B++) {
													this.ids
															.push(this.poskey[B]
																	.get("applicationid"))
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/canceljobexternal.rec",
																	params : {
																		flag : 37,
																		applicationid : this.ids,
																		employeetype : 1
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			212,
																			0);
																	this.sm2
																			.clearSelections();
																	this.internaljobGDS
																			.load()
																},
																function() {
																	calMsgBoxShow(
																			126,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(129, 0);
							this.jbGrid.getSelectionModel().clearSelections()
						}
					},
					viewjobpos : function() {
						if (this.sm2.getCount() == 0 || this.sm2.getCount() > 1) {
							calMsgBoxShow(42, 0)
						} else {
							var C = this.jbGrid.getSelectionModel()
									.getSelected().get("posid");
							var A = Wtf.getCmp("recruitmentmanage");
							var B = Wtf.getCmp(this.id + C + "Profile");
							if (B == null) {
								B = new Wtf.jobProfile({
									id : this.id + C + "Profile",
									title : WtfGlobal.getLocaleText({
										key : "hrms.common.empsProfile",
										params : [ this.jbGrid
												.getSelectionModel()
												.getSelected().get("posname") ]
									}),
									layout : "fit",
									border : false,
									autoScroll : true,
									closable : true,
									store : this.jobmasterGDS,
									viewOnlyType : true,
									positionid : this.sm2.getSelected().get(
											"posid"),
									iconCls : "pwndHRMS jobprofiletabIcon"
								});
								A.add(B)
							}
							A.setActiveTab(B);
							A.doLayout();
							Wtf.getCmp("as").doLayout();
							B.on("editjobprofile", function() {
								this.jobmasterGDS.load({
									params : {
										start : this.jbGrid.pag.cursor,
										limit : this.jbGrid.pag.pageSize
									}
								})
							}, this)
						}
					},
					viewProfile : function() {
						var A = Wtf.getCmp("recruitmentmanage");
						var C = Wtf.getCmp(this.id + "emprecprofile");
						if (C == null) {
							var B = true;
							if (userroleid == 1) {
								B = false
							}
							C = new Wtf.myProfileWindow(
									{
										title : "<div wtf:qtip="
												+ WtfGlobal
														.getLocaleText("hrms.administration.my.profile.tooltip")
												+ ">"
												+ WtfGlobal
														.getLocaleText("hrms.administration.my.profile")
												+ "</div>",
										id : this.id + "emprecprofile",
										editperm : B,
										manager : false,
										closable : true,
										lid : loginid,
										layout : "fit",
										iconCls : "pwnd myProfileIcon"
									});
							A.add(C)
						}
						A.setActiveTab(C);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					}
				});
Wtf.recruitAgencies = function(A) {
	Wtf.apply(this, A);
	Wtf.recruitAgencies.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.recruitAgencies,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.recruitAgencies.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.recruitAgencies.superclass.onRender.call(this, A);
						this.agencyReportGrid();
						this.add(this.agencyGrid)
					},
					agencyReportGrid : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.agencyRecord = Wtf.data.Record.create([ {
							name : "agid"
						}, {
							name : "agname"
						}, {
							name : "url"
						}, {
							name : "cost"
						}, {
							name : "manager"
						}, {
							name : "managerid"
						}, {
							name : "contactperson"
						}, {
							name : "address"
						}, {
							name : "phoneno"
						} ]);
						this.agencyGDS = new Wtf.data.Store({
							baseParams : {
								flag : 122
							},
							url : "Rec/Agency/showAgency.rec",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.agencyRecord)
						});
						calMsgBoxShow(202, 4, true);
						this.agencyGDS.load();
						this.agencyGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.agency.id"),
											dataIndex : "agid",
											hidden : true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.agency.name"),
											dataIndex : "agname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.website"),
											dataIndex : "url",
											sortable : true,
											renderer : function(B) {
												return "<div class='mailTo'><a href="
														+ B
														+ " target=_blank>"
														+ B + "</a></div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.recruitment.cost"),
											dataIndex : "cost",
											sortable : true,
											renderer : function(B) {
												if (B != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			B)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.approving.manager"),
											dataIndex : "manager",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.person"),
											dataIndex : "contactperson",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.address"),
											dataIndex : "address",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.phone.no"),
											dataIndex : "phoneno",
											sortable : true
										} ]);
						var A = new Array();
						A
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.agencyGDS
																.load({
																	params : {
																		start : 0,
																		limit : this.agencyGrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.agencyGrid.id)
																.setValue("")
													}
												}));
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.agencies,
								Wtf.Perm.agencies.create)) {
							A
									.push(
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.recruitment.add.agency"),
												tooltip : WtfGlobal
														.getLocaleText("hrms.recruitment.add.agency.tooltip"),
												iconCls : getButtonIconCls(Wtf.btype.addbutton),
												scope : this,
												handler : function() {
													this.addAgencies()
												}
											})
						}
						this.delagency = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.agencies"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.agencies.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									scope : this,
									disabled : true,
									handler : function() {
										this.delAgencies()
									}
								});
						this.editagency = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.agency"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.agency.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									scope : this,
									disabled : true,
									handler : function() {
										this.editAgencies()
									}
								});
						this.assignjob = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.assign.jobs"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.assign.jobs.tooltip"),
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									scope : this,
									handler : function() {
										if (this.sm2.getCount() == 0
												|| this.sm2.getCount() > 1) {
											calMsgBoxShow(42, 2)
										} else {
											this.assignJobs()
										}
									}
								});
						this.viewjobs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.view.jobs"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.jobs.tooltip"),
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									scope : this,
									handler : function() {
										if (this.sm2.getCount() == 0
												|| this.sm2.getCount() > 1) {
											calMsgBoxShow(42, 2)
										} else {
											this.viewJobs()
										}
									}
								});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.agencies,
								Wtf.Perm.agencies.deleteagn)) {
							A.push("-", this.editagency)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.agencies,
								Wtf.Perm.agencies.deleteagn)) {
							A.push("-", this.delagency)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.agencies,
								Wtf.Perm.agencies.assignjobs)) {
							A.push("-", this.assignjob)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.agencies,
								Wtf.Perm.agencies.create)) {
							A.push("-", this.viewjobs)
						}
						this.agencyGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									store : this.agencyGDS,
									cm : this.cm,
									sm : this.sm2,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addagency(\""
														+ this.id
														+ "\")'>"
														+ WtfGlobal
																.getLocaleText("hrms.recruitment.add.agency.grid.msg")
														+ "</a>")
									},
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.search.by.agency.name"),
									searchField : "agname",
									enableColumnHide : false,
									trackMouseOver : true,
									serverSideSearch : true,
									stripeRows : true,
									listeners : {
										scope : this,
										rowclick : function(D, C, B) {
											this.rowindex = C
										}
									},
									tbar : A
								});
						this.sm2.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(A, this.agencyGrid, [
									5, 9, 11 ], [ 7 ])
						}, this)
					},
					addAgencies : function() {
						this.addagency = new Wtf.agencyWindow(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									modal : true,
									closable : true,
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.recruitment.agency"),
									isEdit : false,
									wintitle : WtfGlobal
											.getLocaleText("hrms.recruitment.add.agency"),
									resizable : false,
									layout : "fit",
									ds : this.agencyGDS
								});
						this.addagency.on("show", function() {
							this.addagency.agname.focus(true, 100)
						}, this);
						this.addagency.show()
					},
					editAgencies : function() {
						var A = this.agencyGrid.getSelectionModel()
								.getSelected();
						this.addagency = new Wtf.agencyWindow(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									modal : true,
									closable : true,
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.agency"),
									isEdit : true,
									wintitle : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.agency"),
									resizable : false,
									layout : "fit",
									record : A,
									ds : this.agencyGDS
								});
						this.addagency.on("show", function() {
							this.addagency.agname.focus(true, 100)
						}, this);
						this.addagency.show()
					},
					delAgencies : function() {
						if (this.sm2.getCount() == 0) {
							calMsgBoxShow(42, 2)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("agency"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												this.statrec = this.agencyGrid
														.getSelectionModel()
														.getSelections();
												this.apparr = [];
												this.sm2.clearSelections();
												for ( var A = 0; A < this.statrec.length; A++) {
													this.apparr
															.push(this.statrec[A]
																	.get("agid"));
													var C = this.agencyGDS
															.indexOf(this.statrec[A]);
													WtfGlobal.highLightRow(
															this.agencyGrid,
															"FF0000", 5, C)
												}
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Agency/deleteAgency.rec",
																	scope : this,
																	params : {
																		agencyid : this.apparr
																	}
																},
																this,
																function(D) {
																	var E = {
																		start : 0,
																		limit : this.agencyGrid.pag.pageSize
																	};
																	calMsgBoxShow(
																			69,
																			0);
																	WtfGlobal
																			.delaytasks(
																					this.agencyGDS,
																					E)
																},
																function() {
																	calMsgBoxShow(
																			27,
																			1)
																})
											}
										}
									})
						}
					},
					assignJobs : function() {
						var B = Wtf.getCmp("agencyTab");
						var A = this.agencyGrid.getSelectionModel()
								.getSelected().get("agid");
						var C = Wtf.getCmp(A + "Jobs");
						if (C == null) {
							C = new Wtf.jobmaster2(
									{
										id : A + "Jobs",
										title : WtfGlobal
												.getLocaleText("hrms.recruitment.assign.jobs.to")
												+ " "
												+ this.agencyGrid
														.getSelectionModel()
														.getSelected().get(
																"agname"),
										layout : "fit",
										closable : true,
										jobbuttons : false,
										agency : false,
										disableBut : false,
										iconCls : getTabIconCls(Wtf.etype.hrmsexternaljob),
										agencybuttons : true,
										agencyid : A
									});
							B.add(C)
						}
						B.setActiveTab(C);
						B.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					viewJobs : function() {
						var C = this.agencyGrid.getSelectionModel()
								.getSelected().get("agname");
						var A = Wtf.getCmp("agencyTab");
						var B = Wtf.getCmp(C + "jobs");
						if (B == null) {
							B = new Wtf.jobmaster2(
									{
										title : this.agencyGrid
												.getSelectionModel()
												.getSelected().get("agname")
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.s.jobs"),
										id : this.agencyGrid
												.getSelectionModel()
												.getSelected().get("agid")
												+ "viewjobs",
										border : false,
										layout : "fit",
										closable : true,
										disableBut : true,
										jobbuttons : false,
										agency : true,
										agencyid : this.agencyGrid
												.getSelectionModel()
												.getSelected().get("agid"),
										agencybuttons : false,
										iconCls : getTabIconCls(Wtf.etype.hrmsexternaljob)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.doLayout()
					}
				});
function addagency(A) {
	Wtf.getCmp(A).addAgencies()
}
Wtf.rejectedApps = function(A) {
	Wtf.apply(this, A);
	Wtf.rejectedApps.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.rejectedApps,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.rejectedApps.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.rejectedApps.superclass.onRender.call(this, A);
						this.rejectedGrid();
						this.getAdvanceSearchComponent();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ this.rejectGrid ]
							} ]
						});
						this.add(this.pan);
						this.exportinfo();
						this.type = 0;
						this.status = ""
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					rejectedGrid : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.applicantstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "applicant",
											"applicanthidden" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Internal"),
													"Internal" ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.External"),
													"External" ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.Both"),
													"All" ] ]
								});
						this.applicantcmb = new Wtf.form.ComboBox(
								{
									store : this.applicantstore,
									displayField : "applicant",
									valueField : "applicanthidden",
									anchor : "100%",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.status"),
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									value : Wtf.cmpPref.defaultapps,
									mode : "local",
									width : 100
								});
						this.record = Wtf.data.Record
								.create([
										{
											name : "id"
										},
										{
											name : "posid"
										},
										{
											name : "apcntid"
										},
										{
											name : "jobid"
										},
										{
											name : "cname"
										},
										{
											name : "email"
										},
										{
											name : "jname"
										},
										{
											name : "applydt",
											type : "date"
										},
										{
											name : "status"
										},
										{
											name : "addr"
										},
										{
											name : "contact"
										},
										{
											name : "callback"
										},
										{
											name : "file"
										},
										{
											name : "recruiter"
										},
										{
											name : "rank"
										},
										{
											name : "interviewdt",
											type : "date"
										},
										{
											name : "callback"
										},
										{
											name : "interviewplace"
										},
										{
											name : "interviewcomment"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											mapping : "jobpositionid"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.department"),
											mapping : "department"
										}, {
											name : "vacancy"
										}, {
											name : "filled"
										}, {
											name : "docid"
										}, {
											name : "employeetype"
										} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						var A = Wtf.cmpPref.defaultapps == "Internal" ? "1"
								: "0";
						this.rejectGDS = new Wtf.ux.MultiGroupingStore(
								{
									url : "Rec/Job/getJobApplications.rec",
									baseParams : {
										flag : 38,
										gridst : 2,
										employeetype : A
									},
									reader : this.reader,
									sortInfo : {
										field : "department",
										direction : "ASC"
									},
									groupField : [
											WtfGlobal
													.getLocaleText("hrms.common.department"),
											WtfGlobal
													.getLocaleText("hrms.common.jobid") ]
								});
						calMsgBoxShow(202, 4, true);
						this.rejectGDS.load();
						this.rejectGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.department"),
											exportDataIndex : "Department"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.candidate.name"),
											dataIndex : "cname",
											exportDataIndex : "cname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											exportDataIndex : "email",
											sortable : true,
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.address"),
											dataIndex : "addr",
											exportDataIndex : "addr",
											sortable : true,
											renderer : function(C) {
												return unescape(C)
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.no"),
											dataIndex : "contact",
											exportDataIndex : "contact",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.rejected.for"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											exportDataIndex : "JobId",
											sortable : true,
											renderer : WtfGlobal.linkRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applied.date"),
											dataIndex : "applydt",
											exportDataIndex : "applydt",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.request.call.back"),
											dataIndex : "callback",
											exportDataIndex : "callback",
											renderer : function(C) {
												if (C == "No") {
													return WtfGlobal
															.getLocaleText("hrms.recruitment.callback.No")
												} else {
													return WtfGlobal
															.getLocaleText("hrms.recruitment.callback.Yes")
												}
											},
											align : "center",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.resume"),
											dataIndex : "id",
											exportDataIndex : "id",
											renderer : function(D, C, H, G, F,
													E) {
												if (H.data.employeetype == 0
														&& H.data.docid.length > 0) {
													return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
															+ H.data.docid
															+ "&mailattch=true&dtype=attachment&applicant=applicant\")'><div class='pwndHRMS resumeIcon' style='cursor:pointer' title='"
															+ WtfGlobal
																	.getLocaleText("hrms.common.Clicktodownloaddocument")
															+ "' ></div></a></div>"
												}
											}
										} ]);
						this.appdocs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.documents"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.rejected.documents.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.docbutton),
									id : this.id + "documentsrej",
									minWidth : 80,
									disabled : true,
									scope : this,
									handler : this.uploaddocuments
								});
						this.advanceSearchBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.advanced.search"),
									id : "advanced3",
									scope : this,
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.advanced.search.tooltip"),
									handler : this.configurAdvancedSearch,
									iconCls : "pwnd searchtabpane"
								});
						this.exportApplications = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.ExportApplications"),
									iconCls : "pwndExport export",
									minWidth : 81,
									scope : this,
									id : this.id + "exportApplications",
									handler : this.exportApplications,
									disabled : Wtf.cmpPref.defaultapps == "External" ? false
											: true
								});
						this.searchparams = [
								{
									name : "department",
									dbname : "position.departmentid.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.department"),
									xtype : "combo",
									cname : "department"
								},
								{
									name : "cname",
									dbname : "1",
									header : WtfGlobal
											.getLocaleText("hrms.common.candidate.name"),
									xtype : "textfield"
								},
								{
									name : "email",
									dbname : "2",
									header : WtfGlobal
											.getLocaleText("hrms.common.email.id"),
									xtype : "textfield"
								},
								{
									name : "addr",
									dbname : "4",
									header : WtfGlobal
											.getLocaleText("hrms.common.address"),
									xtype : "textfield"
								},
								{
									name : "contact",
									dbname : "3",
									header : WtfGlobal
											.getLocaleText("hrms.common.contact.no"),
									xtype : "textfield"
								},
								{
									name : "applydt",
									dbname : "applydate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.applied.date"),
									xtype : "datefield"
								},
								{
									name : "jobid",
									dbname : "position.jobid",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.job.applied.for"),
									xtype : "textfield"
								} ];
						this.ExportInfoBtn = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								rowPdf : true,
								xls : true
							},
							userinfo : true,
							get : 3,
							url : "Rec/Job/getJobApplicationsExport.rec",
							filename : this.title
						});
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.rejectGDS
												.load({
													params : {
														start : 0,
														limit : this.rejectGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.rejectGrid.id)
												.setValue("")
									}
								});
						this.deleteapp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.application"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.rejected.delete.application.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 109,
									disabled : true,
									scope : this,
									handler : this.deleteapps
								});
						this.viewprofile = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.view.profile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.rejected.view.profile.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 81,
									disabled : true,
									id : this.id + "viewprofilerejected",
									scope : this,
									handler : this.viewprofile
								});
						this.editprospect = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit.prospect"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.prospect.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									minWidth : 85,
									disabled : true,
									scope : this,
									handler : this.editprospect
								});
						var B = [];
						B.push("-", this.refreshBtn);
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.rejectedapps,
								Wtf.Perm.rejectedapps.manage)) {
							B.push("-", this.deleteapp, "-", this.viewprofile,
									"-", this.editprospect, "-", this.appdocs,
									"-", this.ExportInfoBtn, "-",
									this.advanceSearchBtn)
						}
						B
								.push(
										"->",
										"-",
										(WtfGlobal
												.getLocaleText("hrms.recruitment.applicant.type") + ":"));
						B.push(this.applicantcmb);
						this.rejectGrid = new Wtf.KwlEditorGridPanel(
								{
									border : false,
									id : this.id + "rejectedgr",
									store : this.rejectGDS,
									cm : this.cm,
									sm : this.sm2,
									displayInfo : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									loadMask : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.allapplication.grid.search.msg"),
									searchField : "cname",
									serverSideSearch : true,
									tbar : B,
									bbar : [ this.exportApplications ],
									view : new Wtf.ux.MultiGroupingView(
											{
												forceFit : true,
												showGroupName : false,
												enableGroupingMenu : false,
												hideGroupedColumn : true,
												groupTextTpl : "{text}",
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.recruitment.no.rejected")
																+ " "
																+ this.applicantcmb
																		.getValue()
																+ " "
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.application.till.now"))
											})
								});
						this.applicantcmb
								.on(
										"select",
										function(D, C, F) {
											var E;
											if (C.data.applicanthidden == "Internal") {
												E = 1;
												this.exportApplications
														.setDisabled(true)
											} else {
												if (C.data.applicanthidden == "Both") {
													E = 2;
													this.exportApplications
															.setDisabled(true)
												} else {
													E = 0;
													this.exportApplications
															.setDisabled(false)
												}
											}
											this.type = E;
											this.rejectGDS.baseParams = {
												employeetype : E,
												flag : 38,
												gridst : 2
											};
											this.rejectGDS
													.load({
														params : {
															start : 0,
															limit : this.rejectGrid.pag.pageSize,
															ss : Wtf
																	.getCmp(
																			"Quick"
																					+ this.rejectGrid.id)
																	.getValue()
														}
													});
											this.rejectGrid.getView().emptyText = WtfGlobal
													.emptyGridRenderer(WtfGlobal
															.getLocaleText("hrms.recruitment.no.rejected")
															+ " "
															+ this.applicantcmb
																	.getValue()
															+ " "
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.application.till.now"));
											this.rejectGrid.getView().refresh()
										}, this);
						this.sm2
								.on(
										"selectionchange",
										function() {
											WtfGlobal.enableDisableBtnArr(B,
													this.rejectGrid, [ 5, 9 ],
													[ 3 ]);
											if (this.sm2.hasSelection()) {
												this.statusrec = this.sm2
														.getSelections();
												this.checkRec = this.statusrec[0]
														.get("jobid");
												this.disableFlag = false;
												for ( var C = 0; C < this.statusrec.length; C++) {
													if (this.checkRec != this.statusrec[C]
															.get("jobid")) {
														this.disableFlag = true
													}
												}
												if (this.disableFlag) {
													this.editprospect.disable()
												} else {
													this.editprospect.enable()
												}
											} else {
												this.deleteapp.disable();
												this.viewprofile.disable();
												this.editprospect.disable()
											}
										}, this)
					},
					DownloadLink : function(B, A, G, F, D, C) {
						var E = "";
						if (G.data["file"]) {
							E = '<img src="./images/document12.gif "  id=\''
									+ G.data["id"] + "'/>"
						} else {
							E = ""
						}
						return E
					},
					deleteapps : function() {
						if (this.sm2.hasSelection()) {
							this.delkey = this.sm2.getSelections();
							this.ids = [];
							for ( var A = 0; A < this.delkey.length; A++) {
								this.ids.push(this.delkey[A].get("id"))
							}
							Wtf.MessageBox
									.show({
										icon : Wtf.MessageBox.QUESTION,
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("application"),
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "hrms.jsp",
																	params : {
																		flag : 42,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			64,
																			0);
																	this.rejectGDS
																			.load({
																				params : {
																					start : 0,
																					limit : this.rejectGrid.pag.pageSize,
																					ss : Wtf
																							.getCmp(
																									"Quick"
																											+ this.rejectGrid.id)
																							.getValue()
																				}
																			})
																},
																function() {
																	calMsgBoxShow(
																			54,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					viewprofile : function() {
						var A, B;
						this.arr = this.sm2.getSelections();
						this.profid = this.arr[0].get("apcntid");
						var D = this.arr[0].get("apcntid");
						if (this.arr[0].get("employeetype") == 0) {
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (Wtf.getCmp(D + "Application") == null) {
								B = new Wtf.createapplicantForm(
										{
											autoScroll : true,
											profId : D,
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											id : D + "Application",
											closable : true,
											hidesubmit : true,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						} else {
							var C = false;
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (B == null) {
								B = new Wtf.myProfileWindow(
										{
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											closable : true,
											id : D + "Application",
											layout : "fit",
											editperm : C,
											lid : D,
											manager : true,
											report : false,
											border : false,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.setVisible(true);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					savedata : function() {
						var jsondata = "";
						var record;
						for ( var i = 0; i < this.rejectGDS.getCount(); i++) {
							record = this.rejectGDS.getAt(i).data;
							jsondata += "{'status':'" + record.status + "',";
							jsondata += "'id':'" + record.id + "',";
							jsondata += "'recruiter':'" + record.recruiter
									+ "',";
							jsondata += "'interviewdt':'" + record.interviewdt
									+ "',";
							jsondata += "'rank':'" + record.rank + "',";
							jsondata += "'callback':'" + record.callback + "',";
							jsondata += "'apcntid':'" + record.apcntid + "'},"
						}
						var trmLen = jsondata.length - 1;
						var finalStr = jsondata.substr(0, trmLen);
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "hrms.jsp",
							params : {
								flag : 40,
								jsondata : finalStr
							}
						}, this, function(response) {
							var res = eval("(" + response + ")");
							calMsgBoxShow(60, 0);
							this.rejectGDS.load({
								params : {
									start : 0,
									limit : this.rejectGrid.pag.pageSize,
									ss : Wtf.getCmp(
											"Quick" + this.rejectGrid.id)
											.getValue()
								}
							});
							var allgrid = Wtf.getCmp("allapplsallappsviewgr");
							if (allgrid != null) {
								allgrid.getStore().load()
							}
							var qualgrid = Wtf.getCmp("qualifiedqualifiedgr");
							if (qualgrid != null) {
								qualgrid.getStore().load()
							}
						}, function(response) {
							calMsgBoxShow(65, 1)
						})
					},
					editprospect : function() {
						var A = this.applicantcmb.getValue();
						if (A == "Internal") {
							A = 1
						} else {
							A = 0
						}
						if (this.sm2.hasSelection()) {
							this.editprospect = new Wtf.editprospect(
									{
										modal : true,
										title : WtfGlobal
												.getLocaleText("hrms.common.edit.prospect"),
										iconCls : getButtonIconCls(Wtf.btype.winicon),
										autoDestroy : true,
										employeetype : A,
										rejected : true,
										resizable : false,
										layout : "fit",
										appid : this.id,
										editval : "Rejected"
									});
							this.editprospect.show();
							this.editprospect.on("editpload", this.gridloads,
									this)
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					uploaddocuments : function() {
						var D = this.applicantcmb.getValue();
						if (D == "Internal") {
							D = "employee"
						} else {
							D = "applicant"
						}
						var F = this.sm2.getSelections();
						var C = (F[0].get("cname"));
						var E = F[0].get("apcntid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp("appfilepanel" + E);
						if (B == null) {
							B = new Wtf.document_panel(
									{
										layout : "fit",
										border : false,
										title : C
												+ WtfGlobal
														.getLocaleText("hrms.common.s.documents"),
										lid : E,
										id : "appfilepanel" + E,
										manager : true,
										closable : true,
										app : D,
										iconCls : getTabIconCls(Wtf.etype.hrmsdocuments)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					gridloads : function(A) {
						if (A == "Selected") {
							var C = Wtf.getCmp("qualifiedqualifiedgr");
							if (C != null) {
								C.getStore().load()
							}
						}
						if (A != "Rejected" && A != "Selected") {
							var B = Wtf.getCmp("allapplsallappsviewgr");
							if (B != null) {
								B.getStore().load()
							}
						}
					},
					exportinfo : function() {
						var B, A = 1;
						var C = this.rejectGrid.getColumnModel();
						this.pdfStore = new Wtf.data.Store({});
						for (B = 0; B < C.getColumnCount(); B++) {
							if (C.isHidden(B) != undefined
									|| C.getColumnHeader(B) == ""
									|| C.getDataIndex(B) == "") {
								continue
							} else {
								var D = C.config[B].align;
								var E;
								if (D == undefined) {
									D = "center"
								}
								if (C.config[B].title == undefined) {
									E = C.config[B].exportDataIndex
								} else {
									E = C.config[B].title
								}
								this.newPdfRec = new Wtf.data.Record({
									header : E,
									title : C.config[B].header,
									width : C.config[B].pdfwidth,
									align : D,
									index : A
								});
								this.pdfStore.insert(this.pdfStore.getCount(),
										this.newPdfRec);
								A++
							}
						}
						this.grid = this.rejectGrid
					},
					exportApplications : function() {
						var A = "Rec/Job/exportAllApplications.rec?"
								+ Wtf.urlEncode(Wtf.urlDecode("employeetype="
										+ this.type + "&status=" + this.status
										+ "&visible=" + true
										+ "&filetype=csv&name=" + this.title
										+ "&applicationflag=" + 2
										+ "&searchJson=" + this.searchJson));
						Wtf.get("downloadframe").dom.src = A
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								})
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 4
							}
						});
						this.advanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.rejectGDS.baseParams = {
							mode : 114,
							employeetype : this.type,
							flag : 38,
							gridst : 2
						};
						this.rejectGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.advanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.rejectGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							flag : 38,
							gridst : 2
						};
						this.rejectGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.rejectGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							flag : 38,
							gridst : 2
						};
						this.rejectGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 4
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					}
				});
Wtf.jobmaster2 = function(A) {
	Wtf.apply(this, A);
	Wtf.jobmaster2.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.jobmaster2,
				Wtf.Panel,
				{
					id : "AddJobsRecruitmentJobmaster2",
					initComponent : function() {
						Wtf.jobmaster2.superclass.initComponent.call(this)
					},
					onRender : function(B) {
						Wtf.jobmaster2.superclass.onRender.call(this, B);
						this.vacancy = 0;
						this.jobForm();
						this.getAdvanceSearchComponent();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						var A = new Wtf.Panel({
							border : false,
							layout : "border",
							items : (!this.jobbuttons) ? [ this.jbGrid ] : [
									this.jbInfoPanel, this.jbGrid ]
						});
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ A ]
							} ]
						});
						this.add(this.pan)
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					jobForm : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.interjobRecord = Wtf.data.Record.create([ {
							name : "posid"
						}, {
							name : "posname"
						}, {
							name : "posmasterid"
						}, {
							name : "details"
						}, {
							name : "department"
						}, {
							name : "manager"
						}, {
							name : "startdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "jobtype"
						}, {
							name : "jobid"
						}, {
							name : "positionstatus"
						}, {
							name : "nopos"
						}, {
							name : "posfilled"
						}, {
							name : "url"
						} ]);
						this.interreader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.interjobRecord);
						var B = "";
						if (this.agency) {
							this.jobmasterGDS = new Wtf.data.Store({
								url : "Rec/Agency/viewagencyJobs.rec",
								reader : this.interreader,
								baseParams : {
									flag : 148,
									agencyid : this.agencyid
								}
							});
							B = WtfGlobal
									.emptyGridRenderer(WtfGlobal
											.getLocaleText("hrms.recruitment.no.job.assigned"))
						} else {
							this.jobmasterGDS = new Wtf.data.Store({
								url : "Rec/Job/getInternalJobs.rec",
								reader : this.interreader,
								baseParams : {
									flag : 7,
									jobtype : this.agencyid ? "All"
											: Wtf.cmpPref.defaultapps,
									jobstatus : 4
								}
							});
							B = WtfGlobal
									.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addjobs(\""
											+ this.id
											+ "\")'>Get started by adding a job now...</a>")
						}
						calMsgBoxShow(202, 4, true);
						this.jobmasterGDS.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.jobmasterGDS.on("load", function(E, D, F) {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.jobmasterGDS
								.on(
										"beforeload",
										function(D, E) {
											if (E != undefined
													&& E.params != undefined
													&& E.params.ss != undefined) {
												this.jbGrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.common.NoRecordsarefound"))
											} else {
												this.jbGrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(B)
											}
										}, this);
						this.jobmasterGDS.on("loadexception", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.id"),
											dataIndex : "jobid",
											pdfwidth : 60,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department",
											pdfwidth : 60,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "posname",
											pdfwidth : 60,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.details"),
											dataIndex : "details",
											pdfwidth : 60,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.approving.manager"),
											dataIndex : "manager",
											pdfwidth : 60,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "startdate",
											pdfwidth : 100,
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											renderer : WtfGlobal.onlyDateRenderer,
											pdfwidth : 100,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "positionstatus",
											sortable : true,
											pdfwidth : 60,
											renderer : function(D) {
												if (D == "0") {
													return '<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.open")
															+ "</FONT>"
												} else {
													if (D == "2") {
														return '<FONT COLOR="red">'
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.expired")
																+ "</FONT>"
													} else {
														if (D == "3") {
															return '<FONT COLOR="green">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.filled")
																	+ "</FONT>"
														}
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.no.of.vacancies"),
											dataIndex : "nopos",
											align : "right",
											pdfwidth : 60,
											sortable : true,
											renderer : WtfGlobal.numericRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.positions.filled"),
											dataIndex : "posfilled",
											align : "right",
											pdfwidth : 60,
											sortable : true,
											renderer : WtfGlobal.numericRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.page.link"),
											dataIndex : "url",
											id : "pagelink",
											hidden : (this.jobbuttons) ? false
													: true,
											sortable : true,
											renderer : function(G, H, D, I, F,
													E) {
												if (D.data.jobtype != "Internal") {
													return "<div class='mailTo'><a href="
															+ G
															+ " target=_blank Wtf:qtip='"
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.ApplyOnline")
															+ "'>"
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.ApplyOnline")
															+ "</a></div>"
												} else {
													return ""
												}
											}
										} ]);
						this.addjobPos = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.add.job"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.add.job.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									handler : this.addjobpos,
									scope : this
								});
						this.deljobPos = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.job"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.job.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									disabled : true,
									handler : this.deletejobpositons,
									scope : this
								});
						this.advanceSearchBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.advanced.search"),
									id : "advanced3",
									scope : this,
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.advanced.search.tooltip"),
									handler : this.configurAdvancedSearch,
									iconCls : "pwnd searchtabpane"
								});
						this.editjobPos = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.view.edit.job.profile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.edit.job.profile.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									minWidth : 105,
									disabled : true,
									handler : this.editjobpos,
									scope : this
								});
						this.assignAgency = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.assign.to.agency"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									handler : this.assignagency,
									disabled : true,
									scope : this
								});
						this.unassign = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.unassign.to.agency"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									handler : this.unassignagency,
									disabled : true,
									scope : this
								});
						var C = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								pdf : true,
								rowPdf : true
							},
							get : 2,
							url : "Rec/Job/jobsExport.rec",
							filename : this.title
						});
						this.viewvacancies = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.view.vacancies"),
									handler : this.viewVacancies,
									iconCls : getTabIconCls(Wtf.etype.hrmsqualification),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.vacancies.tooltip"),
									disabled : false,
									scope : this
								});
						this.clearFilterBut = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.clear.filter"),
									handler : this.clearFilter,
									iconCls : "pwndExport addfilter",
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.job.clear.filter.tooltip"),
									scope : this
								});
						this.searchparams = [
								{
									name : "jobid",
									dbname : "jobid",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.job.id"),
									xtype : "textfield"
								},
								{
									name : "department",
									dbname : "departmentid.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.department"),
									xtype : "combo",
									cname : "department"
								},
								{
									name : "posname",
									dbname : "position.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.designation"),
									xtype : "combo",
									cname : "designation"
								},
								{
									name : "details",
									dbname : "details",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.job.details"),
									xtype : "textfield"
								},
								{
									name : "manager",
									dbname : "manager.userID",
									header : WtfGlobal
											.getLocaleText("hrms.common.approving.manager"),
									xtype : "combo",
									cname : "manager"
								},
								{
									name : "startdate",
									dbname : "startdate",
									header : WtfGlobal
											.getLocaleText("hrms.common.start.date"),
									xtype : "datefield"
								},
								{
									name : "enddate",
									dbname : "enddate",
									header : WtfGlobal
											.getLocaleText("hrms.common.end.date"),
									xtype : "datefield"
								},
								{
									name : "nopos",
									dbname : "noofpos",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.no.of.vacancies"),
									xtype : "numberfield"
								},
								{
									name : "posfilled",
									dbname : "positionsfilled",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.positions.filled"),
									xtype : "numberfield"
								} ];
						this.jobtypedata = [
								[
										"1",
										"Both",
										WtfGlobal
												.getLocaleText("hrms.common.Both") ],
								[
										"2",
										"External",
										WtfGlobal
												.getLocaleText("hrms.common.External") ],
								[
										"3",
										"Internal",
										WtfGlobal
												.getLocaleText("hrms.common.Internal") ],
								[
										"4",
										"All",
										WtfGlobal
												.getLocaleText("hrms.common.All") ] ];
						this.jobtypeStore = new Wtf.data.SimpleStore({
							fields : [ "id", "jobtype", "jobtypedisplay" ],
							data : this.jobtypedata
						});
						this.jobstatusdata = [
								[
										"0",
										WtfGlobal
												.getLocaleText("hrms.recruitment.open") ],
								[
										"2",
										WtfGlobal
												.getLocaleText("hrms.recruitment.expired") ],
								[
										"3",
										WtfGlobal
												.getLocaleText("hrms.recruitment.filled") ],
								[
										"4",
										WtfGlobal
												.getLocaleText("hrms.common.All") ] ];
						this.jobstatusStore = new Wtf.data.SimpleStore({
							fields : [ "id", "jobstatus" ],
							data : this.jobstatusdata
						});
						this.jobType = new Wtf.form.ComboBox(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.recruitment.job.type") + "*"),
									store : this.jobtypeStore,
									mode : "local",
									hiddenName : "jobtype",
									valueField : "jobtype",
									displayField : "jobtypedisplay",
									forceSelection : true,
									triggerAction : "all",
									typeAhead : true,
									loadMask : true,
									value : Wtf.cmpPref.defaultapps,
									allowBlank : false,
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.select.jobtype"),
									width : 120
								});
						this.jobStatus = new Wtf.form.ComboBox(
								{
									fieldLabel : (WtfGlobal
											.getLocaleText("hrms.recruitment.job.status") + "*"),
									store : this.jobstatusStore,
									mode : "local",
									hiddenName : "id",
									valueField : "id",
									displayField : "jobstatus",
									forceSelection : true,
									triggerAction : "all",
									typeAhead : true,
									loadMask : true,
									value : "4",
									allowBlank : false,
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.select.jobstatus"),
									width : 120
								});
						var A = new Array();
						if (this.jobbuttons) {
							if (!WtfGlobal.EnableDisable(
									Wtf.UPerm.externaljobs,
									Wtf.Perm.externaljobs.create)) {
								A.push("-");
								A.push(this.addjobPos)
							}
							if (!WtfGlobal.EnableDisable(
									Wtf.UPerm.externaljobs,
									Wtf.Perm.externaljobs.edit)) {
								A.push("-");
								A.push(this.editjobPos)
							}
							if (!WtfGlobal.EnableDisable(
									Wtf.UPerm.externaljobs,
									Wtf.Perm.externaljobs.deleteext)) {
								A.push("-");
								A.push(this.deljobPos)
							}
							A.push("-");
							A.push(this.advanceSearchBtn);
							A.push("->");
							A.push("-");
							A.push(C);
							A.push("-");
							A.push(this.clearFilterBut);
							if (!WtfGlobal.EnableDisable(
									Wtf.UPerm.externaljobs,
									Wtf.Perm.externaljobs.create)) {
								A
										.push(
												"->",
												"-",
												(WtfGlobal
														.getLocaleText("hrms.recruitment.job.status") + ":"));
								A.push(this.jobStatus);
								A
										.push(
												"->",
												"-",
												(WtfGlobal
														.getLocaleText("hrms.recruitment.job.type.label") + ":"));
								A.push(this.jobType);
								A.push("-")
							}
							A.push(this.viewvacancies)
						}
						if (this.agencybuttons) {
							A.push("-");
							A.push(this.assignAgency);
							A
									.push(
											"->",
											"-",
											(WtfGlobal
													.getLocaleText("hrms.recruitment.job.status") + ":"));
							A.push(this.jobStatus)
						}
						if (!this.agencybuttons && !this.jobbuttons) {
							A.push("-");
							A.push(this.unassign)
						}
						this.jbInfoPanel = new Wtf.Panel(
								{
									html : "<div style='padding:5px;'><div style='height:14px;width:14px;background-color:#F5A9A9;float:left'></div>&nbsp; : "
											+ WtfGlobal
													.getLocaleText("hrms.recruitment.jobs.having.today.enddate"),
									region : "north",
									border : false
								});
						if (!this.jobbuttons) {
							if (this.agency) {
								A.push("->")
							} else {
								A.push("-")
							}
							A
									.push({
										xtype : "panel",
										border : false,
										width : 200,
										html : "<div style='height:14px;width:14px;background-color:#F5A9A9;float:left'></div>&nbsp; : "
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.jobs.having.today.enddate")
									})
						}
						this.jbGrid = new Wtf.KwlGridPanel(
								{
									region : "center",
									border : false,
									store : this.jobmasterGDS,
									cm : this.cm,
									sm : this.sm2,
									enableColumnHide : false,
									trackMouseOver : true,
									loadMask : true,
									stripeRows : true,
									displayInfo : true,
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.job.grid.search.msg"),
									searchField : "jobid",
									viewConfig : {
										forceFit : true,
										getRowClass : function(D) {
											if (D.data.enddate.format("Y-m-d") == new Date()
													.format("Y-m-d")) {
												return "red-row"
											}
										},
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg"))
									},
									tbar : A
								});
						this.jbGrid.on("render", function() {
							if (Wtf.cmpPref.defaultapps == "Internal") {
								this.cm.setHidden(this.cm
										.getIndexById("pagelink"), true)
							}
						}, this);
						this.grid = this.jbGrid;
						this.sm2.on("selectionchange", function() {
							if (this.jobbuttons) {
								WtfGlobal.enableDisableBtnArr(A, this.jbGrid,
										[ 3 ], [ 5 ])
							} else {
								if (this.agencybuttons) {
									WtfGlobal.enableDisableBtnArr(A,
											this.jbGrid, [], [ 1 ])
								} else {
									if (!this.agencybuttons) {
										WtfGlobal.enableDisableBtnArr(A,
												this.jbGrid, [], [ 1 ])
									}
								}
							}
						}, this);
						this.jobType.on("select", function(E, D, G) {
							if (D.get("jobtype") == "Internal") {
								var F = this.cm.getIndexById("pagelink");
								this.cm.setHidden(F, true)
							} else {
								var F = this.cm.getIndexById("pagelink");
								this.cm.setHidden(F, false)
							}
							if (this.vacancy == 1) {
								this.jbGrid.getStore().baseParams = {
									jobtype : D.data.jobtype,
									jobstatus : this.jobStatus.getValue(),
									flag : 7,
									vacancy : "vacancy"
								}
							} else {
								this.jbGrid.getStore().baseParams = {
									jobtype : D.data.jobtype,
									jobstatus : this.jobStatus.getValue(),
									flag : 7
								}
							}
							this.jbGrid.getStore().load(
									{
										params : {
											start : 0,
											limit : this.jbGrid.pag.pageSize,
											ss : Wtf.getCmp(
													"Quick" + this.jbGrid.id)
													.getValue()
										}
									})
						}, this);
						this.jobStatus.on("select", function(E, D, F) {
							if (this.agencybuttons) {
								this.jbGrid.getStore().baseParams = {
									jobtype : "All",
									jobstatus : D.data.id,
									flag : 7
								}
							} else {
								if (this.vacancy == 1) {
									this.jbGrid.getStore().baseParams = {
										jobtype : this.jobType.getValue(),
										jobstatus : D.data.id,
										flag : 7,
										vacancy : "vacancy"
									}
								} else {
									this.jbGrid.getStore().baseParams = {
										jobtype : this.jobType.getValue(),
										jobstatus : D.data.id,
										flag : 7
									}
								}
							}
							this.jbGrid.getStore().load(
									{
										params : {
											start : 0,
											limit : this.jbGrid.pag.pageSize,
											ss : Wtf.getCmp(
													"Quick" + this.jbGrid.id)
													.getValue()
										}
									})
						}, this)
					},
					clearFilter : function() {
						this.jbGrid.getStore().baseParams = {
							jobtype : Wtf.cmpPref.defaultapps,
							jobstatus : 4
						};
						this.jbGrid.getStore().load({
							params : {
								start : 0,
								limit : this.jbGrid.getBottomToolbar().pageSize
							}
						});
						if (Wtf.cmpPref.defaultapps == "Internal") {
							this.cm.setHidden(this.cm.getIndexById("pagelink"),
									true)
						} else {
							this.cm.setHidden(this.cm.getIndexById("pagelink"),
									false)
						}
						this.jobType.setValue(Wtf.cmpPref.defaultapps);
						this.jobStatus.setValue("4");
						if (this.vacancy == 1) {
							this.vacancy = 0;
							this.viewvacancies
									.setText(WtfGlobal
											.getLocaleText("hrms.recruitment.view.vacancies"))
						}
					},
					deletejobpositons : function() {
						if (this.jbGrid.getSelectionModel().getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("job position"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(button) {
											if (button == "yes") {
												this.delrec = this.jbGrid
														.getSelectionModel()
														.getSelections();
												this.delarr = [];
												this.sm2.clearSelections();
												for ( var i = 0; i < this.delrec.length; i++) {
													this.delarr
															.push(this.delrec[i]
																	.get("posid"));
													var rec = this.jobmasterGDS
															.indexOf(this.delrec[i]);
													WtfGlobal.highLightRow(
															this.jbGrid,
															"FF0000", 5, rec)
												}
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/DeleteInternalJobs.rec",
																	params : {
																		flag : 9,
																		delid : this.delarr
																	}
																},
																this,
																function(
																		response) {
																	var res = eval("("
																			+ response
																			+ ")");
																	msgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					""
																							+ res.message
																							+ "" ],
																			1);
																	msgFlag = 0;
																	var params = {
																		start : 0,
																		limit : this.jbGrid.pag.pageSize
																	};
																	WtfGlobal
																			.delaytasks(
																					this.jobmasterGDS,
																					params)
																},
																function() {
																	calMsgBoxShow(
																			27,
																			1)
																})
											}
										}
									})
						}
					},
					addjobpos : function() {
						var A = new Wtf.AddJobs({
							id : "AddJobsRecruitment",
							modal : true,
							title : WtfGlobal
									.getLocaleText("hrms.recruitment.add.job"),
							closable : true,
							resizable : false,
							layout : "fit",
							typejob : "External",
							action : "add",
							grids : this.jbGrid,
							ds : this.jobmasterGDS
						});
						A.on("show", function() {
							A.nopos.focus(true, 100)
						}, this);
						A.show()
					},
					editjobpos : function() {
						if (this.sm2.getCount() == 0 || this.sm2.getCount() > 1) {
							calMsgBoxShow(42, 0)
						} else {
							var C = this.jbGrid.getSelectionModel()
									.getSelected().get("posmasterid");
							var A = Wtf.getCmp("externalTab");
							var B = Wtf.getCmp(C + "Profile");
							if (B == null) {
								B = new Wtf.jobProfile(
										{
											id : C + "Profile",
											title : this.jbGrid
													.getSelectionModel()
													.getSelected().get(
															"posname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											layout : "fit",
											border : false,
											autoScroll : true,
											closable : true,
											store : this.jobmasterGDS,
											viewOnlyType : false,
											positionid : this.sm2.getSelected()
													.get("posid"),
											iconCls : "pwndHRMS jobprofiletabIcon"
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.doLayout();
							Wtf.getCmp("as").doLayout();
							B.on("editjobprofile", function() {
								this.jobmasterGDS.load({
									params : {
										start : this.jbGrid.pag.cursor,
										limit : this.jbGrid.pag.pageSize
									}
								})
							}, this)
						}
					},
					jobtypeSelection : function(A) {
						this.jbGrid.getStore().baseParams = {
							jobtype : A,
							flag : 7
						};
						this.jbGrid.getStore().load(
								{
									params : {
										start : 0,
										limit : this.jbGrid.pag.pageSize,
										ss : Wtf.getCmp(
												"Quick" + this.jbGrid.id)
												.getValue()
									}
								})
					},
					assignagency : function() {
						if (this.sm2.getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.assign.job.agency.msg"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(button) {
											if (button == "yes") {
												this.posid = this.sm2
														.getSelections();
												this.posids = [];
												for ( var i = 0; i < this.posid.length; i++) {
													if (this.posid[i]
															.get("positionstatus") == 0) {
														this.posids
																.push(this.posid[i]
																		.get("posid"))
													} else {
														calMsgBoxShow(208, 2,
																false, 250);
														return
													}
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Agency/addApplyAgency.rec",
																	params : {
																		flag : 128,
																		jobids : this.posids,
																		ageid : this.agencyid
																	}
																},
																this,
																function(
																		response) {
																	var res = eval("("
																			+ response
																			+ ")");
																	calMsgBoxShow(
																			[
																					""
																							+ res.heading
																							+ "",
																					""
																							+ res.message
																							+ "" ],
																			0);
																	if (res.heading == "Success") {
																		this.jobmasterGDS
																				.load({
																					params : {
																						start : 0,
																						limit : this.jbGrid.pag.pageSize,
																						ss : Wtf
																								.getCmp(
																										"Quick"
																												+ this.jbGrid.id)
																								.getValue()
																					}
																				})
																	}
																},
																function() {
																	calMsgBoxShow(
																			55,
																			2)
																})
											}
										}
									})
						}
					},
					unassignagency : function() {
						if (this.sm2.getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.unassign.job.agency.msg"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												this.posid = this.sm2
														.getSelections();
												this.posids = [];
												for ( var A = 0; A < this.posid.length; A++) {
													this.posids
															.push(this.posid[A]
																	.get("posid"))
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Agency/deleteApplyAgency.rec",
																	params : {
																		flag : 128,
																		jobids : this.posids,
																		ageid : this.agencyid
																	}
																},
																this,
																function(C) {
																	calMsgBoxShow(
																			221,
																			0);
																	this.jobmasterGDS
																			.load({
																				params : {
																					start : 0,
																					limit : this.jbGrid.pag.pageSize,
																					ss : Wtf
																							.getCmp(
																									"Quick"
																											+ this.jbGrid.id)
																							.getValue()
																				}
																			})
																},
																function() {
																	calMsgBoxShow(
																			55,
																			2)
																})
											}
										}
									})
						}
					},
					viewVacancies : function() {
						if (this.vacancy == 0) {
							this.jobmasterGDS.baseParams = {
								flag : 7,
								jobtype : this.jobType.getValue(),
								jobstatus : this.jobStatus.getValue(),
								vacancy : "vacancy"
							};
							this.vacancy = 1;
							this.viewvacancies.setText(WtfGlobal
									.getLocaleText("hrms.recruitment.ViewAll"))
						} else {
							this.jobmasterGDS.baseParams = {
								flag : 7,
								jobtype : this.jobType.getValue(),
								jobstatus : this.jobStatus.getValue()
							};
							this.vacancy = 0;
							this.viewvacancies
									.setText(WtfGlobal
											.getLocaleText("hrms.recruitment.view.vacancies"))
						}
						this.jobmasterGDS.load({
							params : {
								start : 0,
								limit : this.jbGrid.pag.pageSize,
								ss : Wtf.getCmp("Quick" + this.jbGrid.id)
										.getValue()
							}
						})
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								});
						this.objsearchComponent.searchid = this.searchid
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 2
							}
						});
						this.advanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.jobmasterGDS.baseParams = {
							mode : 114,
							flag : 7,
							jobtype : this.jobType.getValue(),
							jobstatus : this.jobStatus.getValue()
						};
						this.jobmasterGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.advanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.jobmasterGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							flag : 7,
							jobtype : this.jobType.getValue(),
							jobstatus : this.jobStatus.getValue()
						};
						this.jobmasterGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.jobmasterGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							flag : 7,
							jobtype : this.jobType.getValue(),
							jobstatus : this.jobStatus.getValue()
						};
						this.jobmasterGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 2
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					}
				});
function addjobs(A) {
	var B = Wtf.getCmp(A);
	B.addjobpos()
}
Wtf.editprospect = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		height : 375,
		width : 410,
		buttons : [ {
			anchor : "90%",
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.sendSaveRequest,
			scope : this,
			disabled : true
		}, {
			anchor : "90%",
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.editprospect.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.editprospect,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.editprospect.superclass.initComponent.call(this)
					},
					loadAllStores : function() {
					},
					onRender : function(A) {
						Wtf.editprospect.superclass.onRender.call(this, A);
						this.addEvents({
							"editpload" : true
						});
						this.joiningdate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.DateofJoining"),
									name : "joiningdate",
									width : 200,
									disabled : true,
									allowBlank : true,
									format : "m/d/Y"
								});
						this.statusComboData();
						this.statuscombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.AssignStatus")
											+ "*",
									store : this.combostore,
									allowBlank : false,
									typeAhead : true,
									name : "status",
									displayField : "name",
									valueField : "id",
									value : this.editval,
									mode : "local",
									width : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function() {
											this.statusChange(this.statuscombo
													.getValue())
										}
									}
								});
						if (!Wtf.StoreMgr.containsKey("status")) {
							Wtf.statusStore.load();
							Wtf.StoreMgr.add("status", Wtf.statusStore)
						}
						if (this.editval == "Selected") {
							this.joiningdate.value = new Date()
						}
						this.callbackcombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.RequestCallback"),
									width : 200,
									store : Wtf.callbackStore,
									typeAhead : true,
									hiddenName : "callback",
									valueField : "id",
									displayField : "name",
									mode : "local",
									triggerAction : "all"
								});
						this.setCallback();
						this.rankcombo = new Wtf.form.FnComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.rank"),
							width : 200,
							store : Wtf.rankStore,
							typeAhead : true,
							hiddenName : "rank",
							valueField : "id",
							displayField : "name",
							mode : "local",
							triggerAction : "all",
							addNewFn : this.addRank.createDelegate(this),
							plugins : [ new Wtf.common.comboAddNew({
								handler : function() {
									WtfGlobal.showmasterWindow(10,
											Wtf.rankStore, "Add")
								},
								scope : this
							}) ]
						});
						if (!Wtf.StoreMgr.containsKey("rank")) {
							Wtf.rankStore.on("load", function() {
								this.setRank();
								this.buttons[0].enable()
							}, this);
							Wtf.rankStore.load();
							Wtf.StoreMgr.add("rank", Wtf.rankStore)
						} else {
							this.setRank();
							this.buttons[0].enable()
						}
						this.comment = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Comment"),
							name : "statuscomment",
							width : 200,
							maxLength : 255,
							height : 50
						});
						this.check = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.SendMail"),
							name : "mail",
							checked : false,
							disabled : true
						});
						this.headingType = WtfGlobal
								.getLocaleText("hrms.common.edit.prospect");
						this.newExpense = new Wtf.Panel(
								{
									frame : true,
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : this.isview ? getTopHtml(
															this.headingType,
															"")
															: getTopHtml(
																	this.headingType,
																	WtfGlobal
																			.getLocaleText("hrms.common.FillupthefollowingDetails"))
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.editprospectform = new Wtf.form.FormPanel(
															{
																waitMsgTarget : true,
																border : false,
																bodyStyle : "font-size:10px;padding:10px 10px;margin-top:5%;",
																autoScroll : false,
																labelWidth : 120,
																layoutConfig : {
																	deferredRender : false
																},
																items : [
																		this.statuscombo,
																		this.rankcombo,
																		this.callbackcombo,
																		this.joiningdate,
																		this.comment ]
															}) ]
												} ]
									} ]
								});
						this.add(this.newExpense);
						this.statuscombo.on("select", function(C, B, D) {
							if (D == 2 || D == 1) {
								this.check.enable();
								this.check.setValue(true)
							} else {
								this.check.setValue(false);
								this.check.disable()
							}
						}, this)
					},
					statusComboData : function() {
						var D = new Array();
						for ( var B = 0; B < Wtf.statusStore.getTotalCount(); B++) {
							var C = new Array();
							C.push(Wtf.statusStore.data.items[B].data.name);
							var A = WtfGlobal.replaceAll(
									Wtf.statusStore.data.items[B].data.name,
									" ", "");
							C.push(WtfGlobal
									.getLocaleText("hrms.recruitment.status."
											+ A));
							D.push(C)
						}
						var E = D;
						this.combostore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "id"
							}, {
								name : "name"
							} ]
						});
						this.combostore.loadData(E)
					},
					sendSaveRequest : function() {
						var D = "";
						if (this.rejected) {
							D = Wtf.getCmp(this.appid + "rejectedgr");
							this.arr = D.getSelectionModel().getSelections();
							this.gridst = D.getStore();
							this.selectedflag = true
						} else {
							if (this.selected) {
								D = Wtf.getCmp(this.appid + "qualifiedgr");
								this.arr = D.getSelectionModel()
										.getSelections();
								this.gridst = D.getStore();
								this.selectedflag = false
							} else {
								D = Wtf.getCmp(this.appid + "allappsviewgr");
								this.arr = D.getSelectionModel()
										.getSelections();
								this.gridst = D.getStore();
								this.selectedflag = true
							}
						}
						this.ids = [];
						D.getSelectionModel().clearSelections();
						for (C = 0; C < this.arr.length; C++) {
							var G = this.gridst.indexOf(this.arr[C]);
							WtfGlobal.highLightRow(D, "33CC33", 5, G);
							this.ids.push(this.arr[C].get("id"))
						}
						if (!this.editprospectform.form.isValid()) {
							return
						} else {
							this.flag = true;
							this.ids = [];
							this.cnames = [];
							this.positionids = [];
							this.applicantids = [];
							if (this.statuscombo.getValue() == "Selected") {
								this.ids1 = {};
								for ( var C = 0; C < this.arr.length; C++) {
									var E = this.arr[C].data;
									var A = E.JobId;
									if (!this.ids1[A]) {
										this.ids1[A] = 1
									} else {
										this.ids1[A] += 1
									}
								}
								for (C = 0; C < this.arr.length; C++) {
									E = this.arr[C].data;
									A = E.JobId;
									if ((parseInt(E.vacancy) - parseInt(E.filled)) < this.ids1[A]) {
										this.flag = false;
										break
									}
								}
							}
							if (this.flag) {
								for (C = 0; C < this.arr.length; C++) {
									this.ids.push(this.arr[C].get("id"));
									this.cnames.push(this.arr[C].get("cname"));
									this.positionids.push(this.arr[C]
											.get("posid"));
									this.applicantids.push(this.arr[C]
											.get("apcntid"))
								}
								var F = {
									flag : 44,
									selected : this.statuscombo.getValue(),
									ids : this.ids,
									cnames : this.cnames,
									positionids : this.positionids,
									applicantids : this.applicantids,
									employeetype : this.employeetype,
									changeselected : this.selectedflag
								};
								var B = this.statuscombo.getValue();
								calMsgBoxShow(200, 4, true);
								this.editprospectform.form
										.submit({
											url : "Rec/Job/editProspect.rec",
											params : F,
											scope : this,
											success : function(H, J) {
												var I = {
													start : 0,
													limit : D.pag.pageSize
												};
												this.gridst.load({
													params : I
												});
												this.fireEvent("editpload", B);
												this.close();
												if (J.result.msg == "") {
													calMsgBoxShow(56, 0)
												} else {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.warning"),
																	WtfGlobal
																			.getLocaleText({
																				key : "hrms.recruitment.Joiningdatemustbegreaterthanapplieddateforaction",
																				params : [ J.result.msg ]
																			}) ],
															2)
												}
											},
											failure : function() {
												this.close();
												calMsgBoxShow(57, 1)
											}
										})
							} else {
								calMsgBoxShow(150, 0);
								this.close();
								D.getSelectionModel().clearSelections()
							}
						}
					},
					statusChange : function(A) {
						if (A == "Selected") {
							this.joiningdate.setValue(new Date());
							this.joiningdate.enable();
							this.callbackcombo.disable()
						} else {
							this.joiningdate.setValue("");
							this.joiningdate.disable();
							this.callbackcombo.enable()
						}
					},
					setRank : function() {
						if (Wtf.rankStore.getCount() > 1) {
							this.rankcombo.setValue(Wtf.rankStore.getAt(
									Wtf.rankStore.getCount() - 1).get("id"))
						} else {
							this.rankcombo.setValue("")
						}
					},
					setCallback : function() {
						if (Wtf.callbackStore.getCount() > 0) {
							this.callbackcombo.setValue(Wtf.callbackStore
									.getAt(0).get("id"))
						}
					},
					addRank : function() {
						WtfGlobal.showmasterWindow(10, Wtf.rankStore, "Add")
					}
				});
Wtf.allApps = function(A) {
	Wtf.apply(this, A);
	Wtf.allApps.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.allApps,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.allApps.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.allApps.superclass.onRender.call(this, A);
						if (!Wtf.StoreMgr.containsKey("status")) {
							Wtf.statusStore.load();
							Wtf.StoreMgr.add("status", Wtf.statusStore)
						}
						if (!Wtf.StoreMgr.containsKey("callback")) {
							Wtf.callbackStore.load();
							Wtf.StoreMgr.add("callback", Wtf.callbackStore)
						}
						this.allapplsGrid();
						this.getAdvanceSearchComponent();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ this.applGrid ]
							} ]
						});
						this.add(this.pan);
						this.exportinfo();
						this.type = 0;
						this.status = "";
						this.statusid = -1
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					allapplsGrid : function() {
						this.statusstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "status", "statushidden" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.recruitment.pending"),
													"Pending" ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.recruitment.shortlisted"),
													"Shortlisted" ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.recruitment.in.process"),
													"In Process" ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.recruitment.on.hold"),
													"On Hold" ],
											[
													"5",
													WtfGlobal
															.getLocaleText("hrms.common.All"),
													"All" ] ]
								});
						this.applicantstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "applicant",
											"applicanthidden" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Internal"),
													"Internal" ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.External"),
													"External" ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.All"),
													"All" ] ]
								});
						this.applicantcmb = new Wtf.form.ComboBox(
								{
									store : this.applicantstore,
									displayField : "applicant",
									valueField : "applicanthidden",
									anchor : "100%",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.status"),
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									value : Wtf.cmpPref.defaultapps,
									mode : "local",
									width : 80
								});
						this.applicantcmb.on("render", function() {
							if (this.isInternal) {
								this.applicantcmb.setValue("Internal");
								this.allAppsGDS.baseParams = {
									employeetype : 1,
									status : A,
									statusid : this.statusid,
									flag : 38,
									gridst : 0
								}, this.allAppsGDS.load({
									params : {
										start : 0,
										limit : this.applGrid.pag.pageSize,
										ss : Wtf.getCmp(
												"Quick" + this.applGrid.id)
												.getValue()
									}
								})
							}
						}, this);
						this.statuscmb = new Wtf.form.ComboBox(
								{
									store : this.statusstore,
									displayField : "status",
									valueField : "statushidden",
									anchor : "100%",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.status"),
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									value : "All",
									mode : "local",
									width : 80
								});
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record
								.create([
										{
											name : "id"
										},
										{
											name : "posid"
										},
										{
											name : "apcntid"
										},
										{
											name : "jobid"
										},
										{
											name : "cname"
										},
										{
											name : "email"
										},
										{
											name : "jname"
										},
										{
											name : "applydt",
											type : "date"
										},
										{
											name : "status"
										},
										{
											name : "addr"
										},
										{
											name : "contact"
										},
										{
											name : "callback"
										},
										{
											name : "file"
										},
										{
											name : "recruiter"
										},
										{
											name : "rank"
										},
										{
											name : "interviewdt",
											type : "date"
										},
										{
											name : "callback"
										},
										{
											name : "interviewplace"
										},
										{
											name : "interviewcomment"
										},
										{
											name : "file"
										},
										{
											name : "rejectedbefore"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											mapping : "jobpositionid"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.department"),
											mapping : "department"
										}, {
											name : "vacancy"
										}, {
											name : "filled"
										}, {
											name : "docid"
										}, {
											name : "employeetype"
										} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						var A = "";
						var E = -1;
						var B = Wtf.cmpPref.defaultapps == "Internal" ? "1"
								: "0";
						this.allAppsGDS = new Wtf.ux.MultiGroupingStore(
								{
									url : "Rec/Job/getJobApplications.rec",
									baseParams : {
										flag : 38,
										gridst : 0,
										status : A,
										statusid : E,
										employeetype : B
									},
									reader : this.reader,
									sortInfo : {
										field : WtfGlobal
												.getLocaleText("hrms.common.department"),
										direction : "ASC"
									},
									groupField : [
											WtfGlobal
													.getLocaleText("hrms.common.department"),
											WtfGlobal
													.getLocaleText("hrms.common.jobid") ]
								});
						calMsgBoxShow(202, 4, true);
						this.allAppsGDS.load();
						this.allAppsGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.interviewdate = new Wtf.form.DateField({
							name : "interviewdt",
							width : 200,
							allowBlank : false,
							format : "m/d/Y"
						});
						this.addprospect = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.add.prospect"),
									iconCls : "iconaddClass",
									minWidth : 90,
									scope : this,
									handler : this.prospect
								});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.department"),
											pdfwidth : 80,
											exportDataIndex : "Department"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.candidate.name"),
											dataIndex : "cname",
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "cname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											sortable : true,
											renderer : WtfGlobal.renderEmailTo,
											pdfwidth : 80,
											exportDataIndex : "email"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.no"),
											dataIndex : "contact",
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "contact"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.applied.for"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "JobId"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applied.date"),
											dataIndex : "applydt",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "applydt"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "status",
											align : "center",
											sortable : true,
											exportDataIndex : "status",
											renderer : function(F) {
												if (F == "Pending") {
													return ('<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending") + "</FONT>")
												} else {
													if (F == "Shortlisted") {
														return ('<FONT COLOR="green">'
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.shortlisted") + "</FONT>")
													} else {
														if (F == "In Process") {
															return ('<FONT COLOR="red">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.in.process") + "</FONT>")
														} else {
															return ('<FONT COLOR="DarkGoldenRod">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.on.hold") + "</FONT>")
														}
													}
												}
											},
											pdfwidth : 80
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.assigned.interviewer"),
											dataIndex : "recruiter",
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "recruiter"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.interview.date"),
											dataIndex : "interviewdt",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "interviewdt"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.rank"),
											dataIndex : "rank",
											sortable : true,
											pdfwidth : 80,
											exportDataIndex : "rank"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.request.call.back"),
											dataIndex : "callback",
											exportDataIndex : "callback",
											renderer : function(F) {
												if (F == "No") {
													return WtfGlobal
															.getLocaleText("hrms.recruitment.callback.No")
												} else {
													return WtfGlobal
															.getLocaleText("hrms.recruitment.callback.Yes")
												}
											},
											align : "center",
											sortable : true,
											pdfwidth : 80
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.rejected.before"),
											dataIndex : "rejectedbefore",
											align : "center",
											exportDataIndex : "rejectedbefore",
											sortable : true,
											renderer : function(F) {
												if (F == 0) {
													return ('<FONT COLOR="green">'
															+ WtfGlobal
																	.getLocaleText("hrms.common.no") + "</FONT>")
												} else {
													return ('<FONT COLOR="red">'
															+ WtfGlobal
																	.getLocaleText("hrms.common.yes") + "</FONT>")
												}
											},
											pdfwidth : 80
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.resume"),
											dataIndex : "id",
											exportDataIndex : "id",
											renderer : function(G, F, K, J, I,
													H) {
												if (K.data.employeetype == 0
														&& K.data.docid.length > 0) {
													return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
															+ K.data.docid
															+ "&mailattch=true&dtype=attachment&applicant=applicant\")'><div class='pwndHRMS resumeIcon' style='cursor:pointer' title='"
															+ WtfGlobal
																	.getLocaleText("hrms.common.Clicktodownloaddocument")
															+ "' ></div></a></div>"
												}
											},
											pdfwidth : 80
										} ]);
						var C = new Array();
						C
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.allAppsGDS
																.load({
																	params : {
																		start : 0,
																		limit : this.applGrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.applGrid.id)
																.setValue("")
													}
												}));
						this.scheduleinterview = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.schedule.interview"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.schedule.interview.tooltip"),
									iconCls : "pwndCommon calendarbuttonIcon",
									minWidth : 114,
									disabled : true,
									scope : this,
									handler : function() {
										var F = this.applicantcmb.getValue();
										if (F == "Internal") {
											F = 1
										} else {
											if (F == "All") {
												F = 2
											} else {
												F = 0
											}
										}
										this.type = F;
										this.rec = this.sm2.getSelections();
										if (this.rec.length > 0) {
											this.interviewsch = new Wtf.interview(
													{
														modal : true,
														title : WtfGlobal
																.getLocaleText("hrms.recruitment.schedule.interview"),
														resizable : false,
														layout : "fit",
														reason : "forallapps",
														appid : this.id,
														apcntid : this.sm2
																.getSelected()
																.get("apcntid"),
														employeetype : F,
														appgrid : this.applGrid
													}).show()
										} else {
											Wtf.MessageBox
													.show({
														msg : WtfGlobal
																.getLocaleText("hrms.recruitment.please.select.application"),
														buttons : Wtf.MessageBox.OK
													})
										}
									}
								});
						this.deleteapp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.application"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.application.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 109,
									disabled : true,
									scope : this,
									handler : this.deleteapps
								});
						this.viewprofile = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.view.profile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.profile.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									minWidth : 81,
									disabled : true,
									scope : this,
									id : this.id + "viewprofile",
									handler : this.viewprofile
								});
						this.editprospect = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit.prospect"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.prospect.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									minWidth : 85,
									disabled : true,
									scope : this,
									handler : this.editprospectfun
								});
						this.advanceSearchBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.advanced.search"),
									id : "advanced3",
									scope : this,
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.advanced.search.tooltip"),
									handler : this.configurAdvancedSearch,
									iconCls : "pwnd searchtabpane"
								});
						this.searchparams = [
								{
									name : "department",
									dbname : "position.departmentid.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.department"),
									xtype : "combo",
									cname : "department"
								},
								{
									name : "cname",
									dbname : "1",
									header : WtfGlobal
											.getLocaleText("hrms.common.candidate.name"),
									xtype : "textfield"
								},
								{
									name : "email",
									dbname : "2",
									header : WtfGlobal
											.getLocaleText("hrms.common.email.id"),
									xtype : "textfield"
								},
								{
									name : "contact",
									dbname : "3",
									header : WtfGlobal
											.getLocaleText("hrms.common.contact.no"),
									xtype : "textfield"
								},
								{
									name : "applydt",
									dbname : "applydate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.applied.date"),
									xtype : "datefield"
								},
								{
									name : "recruiter",
									dbname : "recruiter",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.assigned.interviewer"),
									xtype : "combo",
									cname : "recruiter"
								},
								{
									name : "interviewdt",
									dbname : "interviewdate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.interview.date"),
									xtype : "datefield"
								}, {
									name : "jobid",
									dbname : "position.jobid",
									header : "Job Id Applied For",
									xtype : "textfield"
								} ];
						this.ExportInfoBtn = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								rowPdf : true
							},
							userinfo : true,
							get : 3,
							params : {
								isExport : true
							},
							url : "Rec/Job/getJobApplicationsExport.rec",
							filename : this.title
						});
						this.appdocs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.documents"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.documents.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.docbutton),
									id : this.id + "documentsall",
									minWidth : 80,
									disabled : true,
									scope : this,
									handler : this.uploaddocuments
								});
						this.infoSender = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.send.letter"),
									iconCls : getButtonIconCls(Wtf.btype.emailbutton),
									minWidth : 81,
									disabled : true,
									scope : this,
									id : this.id + "infoSender",
									handler : this.infoSenderFun
								});
						this.exportApplications = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.ExportApplications"),
									iconCls : "pwndExport export",
									minWidth : 81,
									scope : this,
									id : this.id + "exportApplications",
									handler : this.exportApplications,
									disabled : Wtf.cmpPref.defaultapps == "External" ? false
											: true
								});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.allapps,
								Wtf.Perm.allapps.manage)) {
							C.push("-", this.scheduleinterview, "-",
									this.deleteapp, "-", this.viewprofile, "-",
									this.editprospect, "-", this.ExportInfoBtn,
									"-", this.advanceSearchBtn)
						}
						C
								.push(
										"->",
										(WtfGlobal
												.getLocaleText("hrms.recruitment.applicant.type") + ":"));
						C.push(this.applicantcmb);
						C.push("-");
						C
								.push(
										"->",
										(WtfGlobal
												.getLocaleText("hrms.recruitment.application.status") + ":"));
						C.push(this.statuscmb);
						C.push("-");
						this.applGrid = new Wtf.KwlEditorGridPanel(
								{
									border : false,
									id : this.id + "allappsviewgr",
									store : this.allAppsGDS,
									cm : this.cm,
									sm : this.sm2,
									view : new Wtf.ux.MultiGroupingView(
											{
												hideGroupedColumn : true,
												forceFit : true,
												showGroupName : false,
												enableGroupingMenu : false,
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.recruitment.no.pending")
																+ " "
																+ this.applicantcmb
																		.getValue()
																+ " "
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.application.till.now")),
												groupTextTpl : "{text}"
											}),
									enableColumnHide : false,
									displayInfo : true,
									loadMask : true,
									clicksToEdit : 1,
									trackMouseOver : true,
									bbar : [ this.appdocs, "-",
											this.infoSender, "-",
											this.exportApplications ],
									stripeRows : true,
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.allapplication.grid.search.msg"),
									searchField : "cname",
									tbar : C
								});
						var D = new Array();
						D.push(this.id + "viewprofile");
						D.push(this.id + "documentsall");
						enableDisableButton(D, this.allAppsGDS, this.sm2);
						this.interviewflag = true;
						this.sm2
								.on(
										"selectionchange",
										function(K, F, I) {
											if (this.sm2.hasSelection()) {
												this.editprospect.enable();
												this.deleteapp.enable();
												this.infoSender.enable();
												this.interviewflag = true;
												this.statusrec = this.sm2
														.getSelections();
												this.checkRec = this.statusrec[0]
														.get("jobid");
												this.disableFlag = false;
												for ( var G = 0; G < this.statusrec.length; G++) {
													var J = this.statuscmb.store
															.find(
																	"status",
																	this.statusrec[G]
																			.get("status")), H = 0;
													if (J == 2 || J == 3) {
														H = 1
													}
													if (this.statusrec[G]
															.get("status") == "Shortlisted"
															|| this.statusrec[G]
																	.get("status") == "In Process"
															|| H == 1) {
														this.scheduleinterview
																.enable()
													} else {
														this.interviewflag = false
													}
													if (this.checkRec != this.statusrec[G]
															.get("jobid")) {
														this.disableFlag = true
													}
												}
												if (this.disableFlag) {
													this.editprospect.disable()
												} else {
													this.editprospect.enable()
												}
												if (this.interviewflag) {
													this.scheduleinterview
															.enable()
												} else {
													this.scheduleinterview
															.disable()
												}
												if (this.sm2.getCount() == 1) {
													this.appdocs.enable();
													this.viewprofile.enable()
												} else {
													this.appdocs.disable();
													this.viewprofile.disable()
												}
											} else {
												this.scheduleinterview
														.disable();
												this.deleteapp.disable();
												this.viewprofile.disable();
												this.editprospect.disable();
												this.appdocs.disable();
												this.infoSender.disable()
											}
										}, this);
						this.statuscmb.on("select", function(H, F, K) {
							var I = this.applicantcmb.getValue();
							if (I == "Internal") {
								I = 1
							} else {
								if (I == "All") {
									I = 2
								} else {
									I = 0
								}
							}
							this.type = I;
							var G = F.data.statushidden;
							var J = F.data.id;
							if (G == "All") {
								G = ""
							}
							this.allAppsGDS.baseParams = {
								employeetype : I,
								status : G,
								statusid : J,
								flag : 38,
								gridst : 0
							};
							this.status = G;
							this.statusid = J;
							this.allAppsGDS.load({
								params : {
									start : 0,
									limit : this.applGrid.pag.pageSize,
									ss : Wtf.getCmp("Quick" + this.applGrid.id)
											.getValue()
								}
							})
						}, this);
						this.applicantcmb
								.on(
										"select",
										function(H, F, K) {
											var I;
											var G = this.statuscmb.getValue();
											var J = this.statuscmb.store
													.getAt(this.statuscmb.store
															.find(
																	"status",
																	this.statuscmb
																			.getValue())).data.id;
											if (G == "All") {
												G = ""
											}
											if (J == 5) {
												J = -1
											}
											if (F.data.applicanthidden == "Internal") {
												I = 1;
												this.exportApplications
														.setDisabled(true)
											} else {
												if (F.data.applicanthidden == "All") {
													I = 2;
													this.exportApplications
															.setDisabled(true)
												} else {
													I = 0;
													this.exportApplications
															.setDisabled(false)
												}
											}
											this.type = I;
											this.status = G;
											this.statusid = J;
											this.allAppsGDS.baseParams = {
												employeetype : I,
												status : G,
												statusid : J,
												flag : 38,
												gridst : 0
											};
											this.allAppsGDS
													.load({
														params : {
															start : 0,
															limit : this.applGrid.pag.pageSize,
															ss : Wtf
																	.getCmp(
																			"Quick"
																					+ this.applGrid.id)
																	.getValue()
														}
													});
											this.applGrid.getView().emptyText = WtfGlobal
													.emptyGridRenderer(WtfGlobal
															.getLocaleText("hrms.recruitment.no.pending")
															+ " "
															+ this.applicantcmb
																	.getValue()
															+ " "
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.application.till.now"));
											this.applGrid.getView().refresh()
										}, this)
					},
					viewprofile : function() {
						var A, B;
						this.arr = this.sm2.getSelections();
						this.profid = this.arr[0].get("apcntid");
						var D = this.arr[0].get("apcntid");
						if (this.arr[0].get("employeetype") == 0) {
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (Wtf.getCmp(D + "Application") == null) {
								B = new Wtf.createapplicantForm(
										{
											autoScroll : true,
											profId : D,
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											id : D + "Application",
											closable : true,
											hidesubmit : true,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						} else {
							var C = false;
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (B == null) {
								B = new Wtf.myProfileWindow(
										{
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											closable : true,
											id : D + "Application",
											layout : "fit",
											editperm : C,
											lid : D,
											manager : true,
											report : false,
											border : false,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.setVisible(true);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					deleteapps : function() {
						if (this.sm2.hasSelection()) {
							this.delkey = this.sm2.getSelections();
							this.ids = [];
							this.sm2.clearSelections();
							for ( var A = 0; A < this.delkey.length; A++) {
								var B = this.allAppsGDS.indexOf(this.delkey[A]);
								WtfGlobal.highLightRow(this.applGrid, "FF0000",
										5, B);
								this.ids.push(this.delkey[A].get("id"))
							}
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("application"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/deleteAllappliations.rec",
																	params : {
																		flag : 42,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			64,
																			0);
																	var D = {
																		start : 0,
																		limit : this.applGrid.pag.pageSize
																	};
																	WtfGlobal
																			.delaytasks(
																					this.allAppsGDS,
																					D)
																},
																function() {
																	calMsgBoxShow(
																			54,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					editprospectfun : function() {
						var A = this.applicantcmb.getValue();
						if (A == "Internal") {
							A = 1
						} else {
							A = 0
						}
						if (this.sm2.hasSelection()) {
							this.editprospectwin = new Wtf.editprospect(
									{
										modal : true,
										title : WtfGlobal
												.getLocaleText("hrms.common.edit.prospect"),
										iconCls : getButtonIconCls(Wtf.btype.winicon),
										autoDestroy : true,
										resizable : false,
										employeetype : A,
										layout : "fit",
										appid : this.id,
										editval : "Shortlisted"
									});
							this.editprospectwin.show();
							this.editprospectwin.on("editpload",
									this.gridloads, this)
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					infoSenderFun : function() {
						var D = this.applGrid.getSelectionModel()
								.getSelections();
						var A = "[";
						var C = 0;
						while (C < D.length) {
							A += "{'uid':" + D[C].data.apcntid + ",'uname':"
									+ D[C].data.cname + ",'emailid':"
									+ D[C].data.email + "},";
							C++
						}
						if (A.length > 1) {
							A = A.substring(0, A.length - 1)
						}
						A += "]";
						var B = new Wtf.letterSenderWindow(
								{
									layout : "fit",
									modal : true,
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.send.letter"),
									closable : true,
									id : "letterSenderListWindow_id",
									closeAction : "close",
									width : 400,
									typeimage : "images/payroll.gif",
									height : 280,
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									scope : this,
									userlist : A
								});
						B.show()
					},
					exportApplications : function() {
						var A = "Rec/Job/exportAllApplications.rec?"
								+ Wtf.urlEncode(Wtf.urlDecode("employeetype="
										+ this.type + "&status=" + this.status
										+ "&statusid=" + this.statusid
										+ "&visible=" + true
										+ "&filetype=csv&name=" + this.title
										+ "&applicationflag=" + 0
										+ "&isStatusApplicable="
										+ (this.status == "" ? false : true)
										+ "&searchJson=" + this.searchJson));
						Wtf.get("downloadframe").dom.src = A
					},
					uploaddocuments : function() {
						var D = this.applicantcmb.getValue();
						if (D == "Internal") {
							D = "employee"
						} else {
							D = "applicant"
						}
						var F = this.sm2.getSelections();
						var C = (F[0].get("cname"));
						var E = F[0].get("apcntid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp("appfilepanel" + E);
						if (B == null) {
							B = new Wtf.document_panel(
									{
										layout : "fit",
										border : false,
										title : C
												+ WtfGlobal
														.getLocaleText("hrms.common.s.documents"),
										lid : E,
										id : "appfilepanel" + E,
										manager : true,
										closable : true,
										app : D,
										iconCls : getTabIconCls(Wtf.etype.hrmsdocuments)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					gridloads : function(A) {
						if (A == "Selected") {
							var C = Wtf.getCmp("qualifiedqualifiedgr");
							if (C != null) {
								C.getStore().load()
							}
						}
						if (A == "Rejected") {
							var B = Wtf.getCmp("rejectedrejectedgr");
							if (B != null) {
								B.getStore().load()
							}
						}
					},
					exportinfo : function() {
						var B, A = 1;
						var C = this.applGrid.getColumnModel();
						this.pdfStore = new Wtf.data.Store({});
						for (B = 0; B < C.getColumnCount(); B++) {
							if (C.isHidden(B) != undefined
									|| C.getColumnHeader(B) == ""
									|| C.getDataIndex(B) == "") {
								continue
							} else {
								var D = C.config[B].align;
								var E;
								if (D == undefined) {
									D = "center"
								}
								if (C.config[B].title == undefined) {
									E = C.config[B].exportDataIndex
								} else {
									E = C.config[B].title
								}
								this.newPdfRec = new Wtf.data.Record({
									header : E,
									title : C.config[B].header,
									width : C.config[B].pdfwidth,
									align : D,
									index : A
								});
								this.pdfStore.insert(this.pdfStore.getCount(),
										this.newPdfRec);
								A++
							}
						}
						this.grid = this.applGrid
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								})
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 3
							}
						});
						this.advanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.allAppsGDS.baseParams = {
							mode : 114,
							employeetype : this.type,
							status : this.status,
							statusid : this.statusid,
							flag : 38,
							gridst : 0
						};
						this.allAppsGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.advanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.allAppsGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							status : this.status,
							statusid : this.statusid,
							flag : 38,
							gridst : 0
						};
						this.allAppsGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.allAppsGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							status : this.status,
							statusid : this.statusid,
							flag : 38,
							gridst : 0
						};
						this.allAppsGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 3
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					}
				});
Wtf.AddJobs = function(A) {
	this.submitbtn = new Wtf.Button({
		text : WtfGlobal.getLocaleText("hrms.common.submit"),
		minWidth : 70,
		handler : this.sendjobSaveRequest,
		scope : this
	});
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 430,
		height : 490,
		buttons : [ this.submitbtn, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.AddJobs.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.AddJobs,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.AddJobs.superclass.initComponent.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.AddJobs.superclass.onRender.call(this, A);
						this.internaljobtype = new Wtf.data.SimpleStore(
								{
									fields : [ "jobtype", "jobtypename" ],
									data : [
											[
													"Both",
													WtfGlobal
															.getLocaleText("hrms.common.Both") ],
											[
													"External",
													WtfGlobal
															.getLocaleText("hrms.common.External") ],
											[
													"Internal",
													WtfGlobal
															.getLocaleText("hrms.common.Internal") ] ]
								});
						this.deptrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.posCmb = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.PositionName")
											+ "*",
									store : Wtf.desigStore,
									mode : "local",
									hiddenName : "name",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.Selectaposition"),
									typeAhead : true,
									forceSelection : true,
									allowBlank : false,
									width : 200,
									addNewFn : this.addDesignation
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(1,
													Wtf.desigStore, "Add")
										},
										scope : this
									}) ]
								});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						}
						this.deptCmb = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.department")
											+ "*",
									store : Wtf.depStore,
									mode : "local",
									valueField : "id",
									displayField : "name",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.Selectadepartment"),
									typeAhead : true,
									forceSelection : true,
									allowBlank : false,
									width : 200,
									addNewFn : this.addDepartment
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(7,
													Wtf.depStore, "Add")
										},
										scope : this
									}) ]
								});
						if (!Wtf.StoreMgr.containsKey("dep")) {
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore)
						}
						this.managerCmb = new Wtf.form.ComboBox(
								{
									store : Wtf.managerStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.approving.manager")
											+ "*",
									mode : "local",
									valueField : "userid",
									displayField : "username",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.Selectamanager"),
									typeAhead : true,
									forceSelection : true,
									allowBlank : false,
									width : 200
								});
						if (!Wtf.StoreMgr.containsKey("manager")) {
							Wtf.managerStore.on("load", function() {
								this.loadRecord()
							}, this);
							Wtf.managerStore.load();
							Wtf.StoreMgr.add("manager", Wtf.managerStore)
						} else {
							this.loadRecord()
						}
						this.startd = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.start.date")
									+ "*",
							width : 200,
							name : "startdate",
							value : new Date(),
							minValue : new Date().clearTime(true),
							allowBlank : false,
							format : "m/d/Y"
						});
						this.endd = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.end.date")
									+ "*",
							width : 200,
							value : new Date(),
							minValue : new Date().clearTime(true),
							name : "enddate",
							allowBlank : false,
							format : "m/d/Y"
						});
						this.startd
								.on(
										"blur",
										function(B) {
											if (B.getValue() > this.endd
													.getValue()) {
												this.endd
														.markInvalid(WtfGlobal
																.getLocaleText({
																	key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
																	params : [ this.startd
																			.getValue()
																			.format(
																					"m/d/Y") ]
																}))
											}
										}, this);
						this.endd
								.on(
										"blur",
										function(B) {
											if (B.getValue() < this.startd
													.getValue()) {
												B
														.markInvalid(WtfGlobal
																.getLocaleText({
																	key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
																	params : [ this.startd
																			.getValue()
																			.format(
																					"m/d/Y") ]
																}))
											}
										}, this);
						this.posdetail = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.PositionDetails"),
									name : "details",
									width : 200,
									maxLength : 512
								});
						this.posidformat = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.JobIDFormat"),
									name : "jobidformat",
									regex : /^[a-zA-Z0-9]{0,}$/,
									width : 200,
									maxLength : 255
								});
						this.posid = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.job.id"),
							name : "jobid",
							width : 200,
							disabled : true,
							maxLength : 255
						});
						this.jobtype = new Wtf.form.ComboBox(
								{
									store : this.internaljobtype,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.job.type")
											+ "*",
									mode : "local",
									hiddenName : "jobtype",
									valueField : "jobtype",
									displayField : "jobtypename",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.Selectthejobtype"),
									typeAhead : true,
									forceSelection : true,
									allowBlank : false,
									width : 200
								});
						this.nopos = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.no.of.vacancies")
											+ "*",
									name : "nopos",
									allowDecimals : false,
									width : 200,
									allowBlank : false,
									minValue : 1,
									maxLength : 5
								});
						this.IneternalJobForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									bodyStyle : "font-size:10px;padding:10px 0px 10px 10px;margin-top:3%",
									autoScroll : false,
									labelWidth : 119,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.posidformat, this.posid,
											this.posCmb, this.nopos,
											this.posdetail, this.deptCmb,
											this.managerCmb, this.startd,
											this.endd, this.jobtype ]
								});
						this.addjobpanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.recruitment.JobPosition"),
															WtfGlobal
																	.getLocaleText("hrms.common.FillupthefollowingDetails"),
															"images/addjobpos.jpg")
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.IneternalJobForm ]
												} ]
									} ]
								});
						this.add(this.addjobpanel);
						if (this.editflag == "true") {
							this.posCmb.disable();
							this.posCmb.setValue(this.posname);
							this.posdetail.setValue(this.posdetails);
							this.deptCmb.setValue(this.department);
							this.managerCmb.setValue(this.apprmanager);
							this.startd.setValue(this.startdate);
							this.endd.setValue(this.enddate);
							this.jobtype.setValue(this.jobstatus)
						}
					},
					sendjobSaveRequest : function() {
						if (!this.IneternalJobForm.getForm().isValid()) {
							return
						} else {
							if (this.startd.getValue().format("Ymd") > this.endd
									.getValue().format("Ymd")
									|| this.endd.getValue().format("Ymd") < new Date()
											.format("Ymd")) {
								this.endd
										.markInvalid(WtfGlobal
												.getLocaleText({
													key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
													params : [ this.startd
															.getValue().format(
																	"m/d/Y") ]
												}));
								return
							} else {
								this.submitbtn.setDisabled(true);
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : "Rec/Job/InternalJobpositions.rec?flag=8",
													params : {
														startdate : this.startd
																.getValue()
																.format("m/d/Y"),
														enddate : this.endd
																.getValue()
																.format("m/d/Y"),
														position : this.posCmb
																.getValue(),
														details : this.posdetail
																.getValue()
																.trim(),
														department : this.deptCmb
																.getValue(),
														manager : this.managerCmb
																.getValue(),
														jobtype : this.jobtype
																.getValue(),
														posid : this.positionid,
														jobid : this.posid
																.getValue(),
														nopos : this.nopos
																.getValue(),
														jobidformat : this.posidformat
																.getValue()
													}
												},
												this,
												function(response) {
													var res = eval("("
															+ response + ")");
													this.close();
													this.ds
															.load({
																params : {
																	start : this.grids.pag.cursor,
																	limit : this.grids.pag.pageSize,
																	ss : Wtf
																			.getCmp(
																					"Quick"
																							+ this.grids.id)
																			.getValue()
																}
															});
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	""
																			+ res.message
																			+ "" ],
															0)
												}, function() {
													calMsgBoxShow(52, 1)
												})
							}
						}
					},
					afterEditFunction1 : function(A) {
						if (this.startd.getValue().format("Ymd") < new Date()
								.format("Ymd")) {
							calMsgBoxShow(108, 0);
							this.startd.setValue("")
						}
					},
					loadRecord : function() {
						Wtf.Ajax
								.requestEx(
										{
											url : "Rec/Job/getJobidFormat.rec",
											params : {
												flag : 209
											}
										},
										this,
										function(req, res) {
											var resp = eval("(" + req + ")");
											var values = resp.data[0].maxempid;
											this.posidformat
													.setValue(resp.data[0].jobidformat);
											this.posid.setValue(values)
										}, function(req, res) {
										})
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					},
					addDepartment : function() {
						WtfGlobal.showmasterWindow(7, Wtf.depStore, "Add")
					}
				});
Wtf.interview = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		height : 380,
		width : 410,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.sendinterviewSave,
			scope : this,
			disabled : true
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.interview.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.interview,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.interview.superclass.initComponent.call(this)
					},
					loadAllStores : function() {
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.interview.superclass.onRender.call(this, A);
						this.interviewdate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.payroll.Date")
									+ "*",
							name : "interviewdt",
							width : 200,
							allowBlank : false,
							format : "m/d/Y",
							minValue : new Date().clearTime(true),
							value : new Date()
						});
						this.interviewtime = new Wtf.form.TimeField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.InterviewTime")
											+ "*",
									name : "interviewtime",
									width : 200,
									allowBlank : false,
									typeAhead : true,
									minValue : new Date(new Date()
											.format("M d, Y")
											+ " 8:00:00 AM"),
									maxValue : new Date(new Date().add(
											Date.DAY, 1).format("M d, Y")
											+ " 7:45:00 AM")
								});
						this.interviewplace = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.Location")
									+ "*",
							name : "interviewplace",
							maxLength : 255,
							width : 200,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.interviewdetails = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Comment"),
							name : "interviewcomment",
							width : 200,
							maxLength : 255,
							height : 50
						});
						this.userrec = new Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "fullname"
						} ]);
						this.empnameStore = new Wtf.data.Store({
							url : "Common/getAllUserDetailsHrms.common",
							baseParams : {
								userid : this.apcntid,
								grouper : "a",
								combo : true
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.userrec),
							autoLoad : false
						});
						this.empnameStore.load({
							params : {
								grouper : "a"
							}
						});
						this.empId = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.contact.person")
											+ "*",
									labelWidth : 110,
									mode : "local",
									hiddenName : "contactperson",
									store : this.empnameStore,
									allowBlank : false,
									displayField : "fullname",
									valueField : "userid",
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									width : 200,
									forceSelection : true
								});
						this.RecruiterRecord = Wtf.data.Record.create([ {
							name : "fname"
						}, {
							name : "rid"
						}, {
							name : "lname"
						}, {
							name : "fullname"
						} ]);
						this.RecruiterReader = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "count"
						}, this.RecruiterRecord);
						this.RecruiterStore = new Wtf.data.Store({
							url : "Rec/Job/getRecruiter.rec",
							reader : this.RecruiterReader,
							baseParams : {
								flag : 126,
								grouper : "a",
								firequery : "1"
							}
						});
						this.RecruiterStore.load();
						this.recruitercombo = new Wtf.form.ComboBox(
								{
									store : this.RecruiterStore,
									typeAhead : true,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.Dashboard.AssignInterviewer")
											+ "*",
									name : "recruiter",
									displayField : "fullname",
									hiddenName : "rid",
									valueField : "rid",
									mode : "local",
									width : 200,
									triggerAction : "all",
									allowBlank : false
								});
						this.check = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.SendMail"),
							name : "mail",
							checked : true
						});
								this.MSComboconfig = {
									store : this.RecruiterStore,
									typeAhead : true,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.Dashboard.AssignInterviewer")
											+ "*",
									name : "recruiter",
									displayField : "fullname",
									hiddenName : "rid",
									valueField : "rid",
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.Nointerviewerassignforinterview"),
									mode : "local",
									width : 200,
									triggerAction : "all",
									allowBlank : false
								}, this.nonmonBen = new Wtf.common.Select(Wtf
										.applyIf({
											multiSelect : true,
											labelSeparator : "",
											forceSelection : false
										}, this.MSComboconfig));
						this.interviewform = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									id : "interviewform",
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									labelWidth : 110,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.interviewdate,
											this.interviewtime,
											this.interviewplace,
											this.nonmonBen, this.empId,
											this.interviewdetails, this.check ]
								});
						this.headingType = WtfGlobal
								.getLocaleText("hrms.recruitment.schedule.interview");
						this.interviewpanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : this.isview ? getTopHtml(
															this.headingType,
															"",
															"images/interview-schedule.gif")
															: getTopHtml(
																	this.headingType,
																	WtfGlobal
																			.getLocaleText("hrms.common.FillupthefollowingDetails"),
																	"images/interview-schedule.gif")
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.interviewform ]
												} ]
									} ]
								});
						this.add(this.interviewpanel);
						this.RecruiterStore.on("load", function() {
							var B = this.RecruiterStore.find("rid",
									this.apcntid);
							if (B != -1) {
								var C = this.RecruiterStore.getAt(B);
								this.RecruiterStore.remove(C)
							}
							this.buttons[0].enable()
						}, this);
						this.empnameStore.on("load", function() {
							var B = this.empnameStore.find("userid",
									this.apcntid);
							if (B != -1) {
								var C = this.empnameStore.getAt(B);
								this.empnameStore.remove(C)
							}
						}, this)
					},
					sendinterviewSave : function() {
						if (!this.interviewform.form.isValid()) {
							return
						} else {
							if (this.reason == "forallapps") {
								this.arr = Wtf.getCmp(
										this.appid + "allappsviewgr")
										.getSelectionModel().getSelections();
								this.gridst = Wtf.getCmp(
										this.appid + "allappsviewgr")
										.getStore()
							} else {
								this.arr = Wtf
										.getCmp(this.appid + "rejectedgr")
										.getSelectionModel().getSelections();
								this.gridst = Wtf.getCmp(
										this.appid + "rejectedgr").getStore()
							}
							this.ids = [];
							this.cname = [];
							for ( var A = 0; A < this.arr.length; A++) {
								this.ids.push(this.arr[A].get("id"));
								this.cname.push(this.arr[A].get("cname"))
							}
							var B = {
								flag : 39,
								ids : this.ids,
								employeetype : this.employeetype,
								cname : this.cname
							};
							calMsgBoxShow(200, 4, true);
							calMsgBoxShow(202, 4, true);
							this.interviewform.form.submit({
								url : "Rec/Job/scheduleinterview.rec",
								params : B,
								scope : this,
								success : function() {
									var C = {
										start : 0,
										limit : this.appgrid.pag.pageSize
									};
									WtfGlobal.delaytasks(this.gridst, C);
									this.close();
									calMsgBoxShow(58, 0);
									if (msgFlag == 1) {
										WtfGlobal.closeProgressbar()
									}
								},
								failure : function() {
									calMsgBoxShow(59, 1);
									if (msgFlag == 1) {
										WtfGlobal.closeProgressbar()
									}
								}
							})
						}
					}
				});
Wtf.qualifiedApps = function(A) {
	Wtf.apply(this, A);
	Wtf.qualifiedApps.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.qualifiedApps,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.qualifiedApps.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.qualifiedApps.superclass.onRender.call(this, A);
						this.rejectedGrid();
						this.getAdvanceSearchComponent();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ this.qualifiedGrid ]
							} ]
						});
						this.add(this.pan);
						this.exportinfo();
						this.type = 0
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					rejectedGrid : function() {
						this.changeflag = 0;
						this.applicantstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "applicant",
											"applicanthidden" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Internal"),
													"Internal" ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.External"),
													"External" ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.Both"),
													"All" ] ]
								});
						this.applicantcmb = new Wtf.form.ComboBox(
								{
									store : this.applicantstore,
									displayField : "applicant",
									valueField : "applicanthidden",
									anchor : "100%",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.status"),
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									value : Wtf.cmpPref.defaultapps,
									mode : "local",
									width : 100
								});
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record
								.create([
										{
											name : "id"
										},
										{
											name : "posid"
										},
										{
											name : "apcntid"
										},
										{
											name : "jobid"
										},
										{
											name : "cname"
										},
										{
											name : "email"
										},
										{
											name : "jname"
										},
										{
											name : "applydt",
											type : "date"
										},
										{
											name : "status"
										},
										{
											name : "addr"
										},
										{
											name : "contact"
										},
										{
											name : "callback"
										},
										{
											name : "file"
										},
										{
											name : "recruiter"
										},
										{
											name : "rank"
										},
										{
											name : "interviewdt",
											type : "date"
										},
										{
											name : "joiningdate",
											type : "date"
										},
										{
											name : "callback"
										},
										{
											name : "interviewplace"
										},
										{
											name : "interviewcomment"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											mapping : "jobpositionid"
										},
										{
											name : WtfGlobal
													.getLocaleText("hrms.common.department"),
											mapping : "department"
										}, {
											name : "vacancy"
										}, {
											name : "filled"
										}, {
											name : "fname"
										}, {
											name : "lname"
										}, {
											name : "designationid"
										}, {
											name : "departmentid"
										}, {
											name : "designation"
										}, {
											name : "docid"
										}, {
											name : "employeetype"
										} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						var B = Wtf.cmpPref.defaultapps == "Internal" ? "1"
								: "0";
						this.qualifiedGDS = new Wtf.ux.MultiGroupingStore(
								{
									url : "Rec/Job/getJobApplications.rec",
									baseParams : {
										flag : 38,
										gridst : 1,
										employeetype : B
									},
									reader : this.reader,
									sortInfo : {
										field : "department",
										direction : "ASC"
									},
									groupField : [
											WtfGlobal
													.getLocaleText("hrms.common.department"),
											WtfGlobal
													.getLocaleText("hrms.common.jobid") ]
								});
						calMsgBoxShow(202, 4, true);
						this.qualifiedGDS.load();
						this.qualifiedGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.department"),
											exportDataIndex : "Department",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.candidate.name"),
											dataIndex : "cname",
											exportDataIndex : "cname",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											exportDataIndex : "email",
											sortable : true,
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.address"),
											dataIndex : "addr",
											exportDataIndex : "addr",
											sortable : true,
											renderer : function(C) {
												return unescape(C)
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.no"),
											dataIndex : "contact",
											exportDataIndex : "contact",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.selected.for"),
											dataIndex : WtfGlobal
													.getLocaleText("hrms.common.jobid"),
											exportDataIndex : "JobId",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applied.date"),
											dataIndex : "applydt",
											exportDataIndex : "applydt",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.joining.date"),
											dataIndex : "joiningdate",
											exportDataIndex : "joiningdate",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.resume"),
											dataIndex : "id",
											exportDataIndex : "id",
											renderer : function(D, C, H, G, F,
													E) {
												if (H.data.employeetype == 0
														&& H.data.docid.length > 0) {
													return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
															+ H.data.docid
															+ "&mailattch=true&dtype=attachment&applicant=applicant\")'><div class='pwndHRMS resumeIcon' style='cursor:pointer' title='"
															+ WtfGlobal
																	.getLocaleText("hrms.common.Clicktodownloaddocument")
															+ "' ></div></a></div>"
												}
											}
										} ]);
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.qualifiedGDS
												.load({
													params : {
														start : 0,
														limit : this.qualifiedGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.qualifiedGrid.id)
												.setValue("")
									}
								});
						this.appdocs = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.documents"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.rejected.documents.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.docbutton),
									id : this.id + "documentsqua",
									minWidth : 80,
									disabled : true,
									scope : this,
									handler : this.uploaddocuments
								});
						this.advanceSearchBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.advanced.search"),
									id : "advanced3",
									scope : this,
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.advanced.search.tooltip"),
									handler : this.configurAdvancedSearch,
									iconCls : "pwnd searchtabpane"
								});
						this.searchparams = [
								{
									name : "department",
									dbname : "position.departmentid.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.department"),
									xtype : "combo",
									cname : "department"
								},
								{
									name : "cname",
									dbname : "1",
									header : WtfGlobal
											.getLocaleText("hrms.common.candidate.name"),
									xtype : "textfield"
								},
								{
									name : "email",
									dbname : "2",
									header : WtfGlobal
											.getLocaleText("hrms.common.email.id"),
									xtype : "textfield"
								},
								{
									name : "addr",
									dbname : "4",
									header : WtfGlobal
											.getLocaleText("hrms.common.address"),
									xtype : "textfield"
								},
								{
									name : "contact",
									dbname : "3",
									header : WtfGlobal
											.getLocaleText("hrms.common.contact.no"),
									xtype : "textfield"
								},
								{
									name : "applydt",
									dbname : "applydate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.applied.date"),
									xtype : "datefield"
								},
								{
									name : "joiningdate",
									dbname : "joiningdate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.joining.date"),
									xtype : "datefield"
								}, {
									name : "jobid",
									dbname : "position.jobid",
									header : "Job Id Applied For",
									xtype : "textfield"
								} ];
						this.ExportInfoBtn = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								rowPdf : true
							},
							userinfo : true,
							get : 3,
							url : "Rec/Job/getJobApplicationsExport.rec",
							filename : this.title
						});
						this.deleteapp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.application"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.qualified.delete.application.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									disabled : true,
									scope : this,
									handler : this.deleteapps
								});
						this.viewprofile = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.view.profile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.qualified.view.profile.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									id : this.id + "viewprofilerejected",
									disabled : true,
									scope : this,
									handler : this.viewprofile
								});
						this.editprospect = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit.prospect"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.edit.prospect.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									minWidth : 85,
									disabled : true,
									scope : this,
									handler : this.editprospect
								});
						this.transferdata = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.transfer.applicant.data"),
									iconCls : getButtonIconCls(Wtf.btype.editbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.transfer.applicant.data.tooltip"),
									minWidth : 85,
									disabled : true,
									scope : this,
									handler : this.transferData
								});
						this.exportApplications = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.ExportApplications"),
									iconCls : "pwndExport export",
									minWidth : 81,
									scope : this,
									id : this.id + "exportApplications",
									handler : this.exportApplications,
									disabled : Wtf.cmpPref.defaultapps == "External" ? false
											: true
								});
						var A = [];
						A.push("-", this.refreshBtn);
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.qualifiedapps,
								Wtf.Perm.qualifiedapps.manage)) {
							A.push("-", this.deleteapp, "-", this.viewprofile,
									"-", this.editprospect, "-", this.appdocs,
									"-", this.ExportInfoBtn, "-",
									this.advanceSearchBtn)
						}
						A
								.push(
										"->",
										"-",
										(WtfGlobal
												.getLocaleText("hrms.recruitment.applicant.type") + ":"));
						A.push(this.applicantcmb);
						this.qualifiedGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : this.id + "qualifiedgr",
									store : this.qualifiedGDS,
									cm : this.cm,
									sm : this.sm2,
									view : new Wtf.ux.MultiGroupingView(
											{
												hideGroupedColumn : true,
												forceFit : true,
												showGroupName : false,
												enableGroupingMenu : false,
												enableGroupingX : false,
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.recruitment.no.selected")
																+ " "
																+ this.applicantcmb
																		.getValue()
																+ " "
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.application.till.now")),
												groupTextTpl : "{text}"
											}),
									displayInfo : true,
									loadMask : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.allapplication.grid.search.msg"),
									searchField : "cname",
									tbar : A,
									bbar : [ this.exportApplications ]
								});
						this.applicantcmb
								.on(
										"select",
										function(D, C, F) {
											var E;
											if (C.data.applicanthidden == "Internal") {
												E = 1;
												this.exportApplications
														.setDisabled(true)
											} else {
												if (C.data.applicanthidden == "External") {
													E = 0;
													this.exportApplications
															.setDisabled(false)
												} else {
													E = 2;
													this.exportApplications
															.setDisabled(true)
												}
											}
											this.qualifiedGDS.baseParams = {
												employeetype : E,
												flag : 38,
												gridst : 1
											};
											this.type = E;
											this.qualifiedGDS
													.load({
														params : {
															start : 0,
															limit : this.qualifiedGrid.pag.pageSize,
															ss : Wtf
																	.getCmp(
																			"Quick"
																					+ this.qualifiedGrid.id)
																	.getValue()
														}
													});
											this.qualifiedGrid.getView().emptyText = WtfGlobal
													.emptyGridRenderer(WtfGlobal
															.getLocaleText("hrms.recruitment.no.selected")
															+ " "
															+ this.applicantcmb
																	.getValue()
															+ " "
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.application.till.now"));
											this.qualifiedGrid.getView()
													.refresh()
										}, this);
						this.sm2
								.on(
										"selectionchange",
										function() {
											WtfGlobal.enableDisableBtnArr(A,
													this.qualifiedGrid, [ 5, 9,
															11 ], [ 3 ]);
											if (this.sm2.hasSelection()) {
												this.statusrec = this.sm2
														.getSelections();
												this.checkRec = this.statusrec[0]
														.get("jobid");
												this.disableFlag = false;
												for ( var C = 0; C < this.statusrec.length; C++) {
													if (this.checkRec != this.statusrec[C]
															.get("jobid")) {
														this.disableFlag = true
													}
												}
												if (this.disableFlag) {
													this.editprospect.disable()
												} else {
													this.editprospect.enable()
												}
											} else {
												this.deleteapp.disable();
												this.viewprofile.disable();
												this.editprospect.disable()
											}
										}, this);
						this.qualifiedGrid.on("cellclick", this.onCellClick,
								this)
					},
					DownloadLink : function(B, A, G, F, D, C) {
						var E = "";
						if (G.data["file"]) {
							E = '<img src="./images/document12.gif "  id=\''
									+ G.data["id"] + "'/>"
						} else {
							E = ""
						}
						return E
					},
					deleteapps : function() {
						if (this.sm2.hasSelection()) {
							this.delkey = this.sm2.getSelections();
							this.ids = [];
							for ( var A = 0; A < this.delkey.length; A++) {
								this.ids.push(this.delkey[A].get("id"))
							}
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("application"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												calMsgBoxShow(201, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "hrms.jsp",
																	params : {
																		flag : 42,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			64,
																			0);
																	this.qualifiedGDS
																			.load({
																				params : {
																					start : 0,
																					limit : this.qualifiedGrid.pag.pageSize,
																					ss : Wtf
																							.getCmp(
																									"Quick"
																											+ this.qualifiedGrid.id)
																							.getValue()
																				}
																			})
																},
																function() {
																	calMsgBoxShow(
																			54,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					viewprofile : function() {
						var A, B;
						this.arr = this.sm2.getSelections();
						this.profid = this.arr[0].get("apcntid");
						var D = this.arr[0].get("apcntid");
						if (this.arr[0].get("employeetype") == 0) {
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (Wtf.getCmp(D + "Application") == null) {
								B = new Wtf.createapplicantForm(
										{
											autoScroll : true,
											profId : D,
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											id : D + "Application",
											closable : true,
											hidesubmit : true,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						} else {
							var C = false;
							A = Wtf.getCmp("recruitmentmanage");
							B = Wtf.getCmp(D + "Application");
							if (B == null) {
								B = new Wtf.myProfileWindow(
										{
											title : this.arr[0].get("cname")
													+ WtfGlobal
															.getLocaleText("hrms.common.profile"),
											closable : true,
											id : D + "Application",
											layout : "fit",
											editperm : C,
											lid : D,
											report : false,
											manager : true,
											border : false,
											iconCls : getTabIconCls(Wtf.etype.hrmsprofile)
										});
								A.add(B)
							}
							A.setActiveTab(B);
							A.setVisible(true);
							A.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					savedata : function() {
						var jsondata = "";
						for ( var i = 0; i < this.qualifiedGDS.getCount(); i++) {
							jsondata += "{'status':'"
									+ this.qualifiedGDS.getAt(i).get("status")
									+ "',";
							jsondata += "'id':'"
									+ this.qualifiedGDS.getAt(i).get("id")
									+ "',";
							jsondata += "'recruiter':'"
									+ this.qualifiedGDS.getAt(i).get(
											"recruiter") + "',";
							jsondata += "'interviewdt':'"
									+ this.qualifiedGDS.getAt(i).get(
											"interviewdt") + "',";
							jsondata += "'rank':'"
									+ this.qualifiedGDS.getAt(i).get("rank")
									+ "',";
							jsondata += "'callback':'"
									+ this.qualifiedGDS.getAt(i)
											.get("callback") + "',";
							jsondata += "'apcntid':'"
									+ this.qualifiedGDS.getAt(i).get("apcntid")
									+ "'},"
						}
						var trmLen = jsondata.length - 1;
						var finalStr = jsondata.substr(0, trmLen);
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "hrms.jsp",
							params : {
								flag : 40,
								jsondata : finalStr
							}
						}, this, function(response) {
							var res = eval("(" + response + ")");
							calMsgBoxShow(29, 0);
							this.qualifiedGDS.load({
								params : {
									start : 0,
									limit : this.qualifiedGrid.pag.pageSize,
									ss : Wtf.getCmp(
											"Quick" + this.qualifiedGrid.id)
											.getValue()
								}
							})
						}, function(response) {
							calMsgBoxShow(65, 1)
						})
					},
					uploaddocuments : function() {
						var D = this.applicantcmb.getValue();
						if (D == "Internal") {
							D = "employee"
						} else {
							D = "applicant"
						}
						var F = this.sm2.getSelections();
						var C = (F[0].get("cname"));
						var E = F[0].get("apcntid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp("appfilepanel" + E);
						if (B == null) {
							B = new Wtf.document_panel(
									{
										layout : "fit",
										border : false,
										title : C
												+ WtfGlobal
														.getLocaleText("hrms.common.s.documents"),
										lid : E,
										id : "appfilepanel" + E,
										manager : true,
										closable : true,
										app : D,
										iconCls : getTabIconCls(Wtf.etype.hrmsdocuments)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					editprospect : function() {
						var A = this.applicantcmb.getValue();
						if (A == "Internal") {
							A = 1
						} else {
							A = 0
						}
						if (this.sm2.hasSelection()) {
							this.editprospect = new Wtf.editprospect(
									{
										modal : true,
										title : WtfGlobal
												.getLocaleText("hrms.common.edit.prospect"),
										iconCls : getButtonIconCls(Wtf.btype.winicon),
										autoDestroy : true,
										selected : true,
										resizable : false,
										employeetype : A,
										layout : "fit",
										appid : this.id,
										editval : "Selected"
									});
							this.editprospect.show();
							this.editprospect.on("editpload", this.gridloads,
									this)
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					onCellClick : function(G, E, D, I) {
						I.stopEvent();
						var A = I.getTarget("a");
						if (A == null) {
							return
						}
						var F = G.getColumnModel().getDataIndex(D);
						var B = this.sm2.getSelected().data;
						if (F == "jobpositionid") {
							var C = Wtf.getCmp("recruitmentmanage");
							var H = Wtf.getCmp(B.jobpositionid + "Jobs");
							if (H == null) {
								H = new Wtf.jobProfile(
										{
											id : B.jobpositionid + "Jobs",
											title : B.jobpositionid
													+ WtfGlobal
															.getLocaleText("hrms.recruitment.s.job.profile"),
											iconCls : "pwndHRMS jobprofiletabIcon",
											layout : "fit",
											closable : true,
											jobposid : B.jobpositionid,
											positionid : B.posid,
											border : false,
											disableSubmit : true,
											autoScroll : true
										});
								C.add(H)
							}
							C.setActiveTab(H);
							C.doLayout();
							Wtf.getCmp("as").doLayout()
						}
					},
					transferData : function() {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : WtfGlobal
											.getLocaleText("hrms.recruitment.transfer.applicant.data.msg")
											+ "<br><br><b>"
											+ WtfGlobal
													.getLocaleText("hrms.common.data.cannot.changed.later.msg")
											+ "</b>",
									buttons : Wtf.MessageBox.YESNO,
									icon : Wtf.MessageBox.QUESTION,
									scope : this,
									fn : function(A) {
										if (A == "yes") {
											this.showWindow()
										}
									}
								})
					},
					exportApplications : function() {
						var A = "Rec/Job/exportAllApplications.rec?"
								+ Wtf.urlEncode(Wtf.urlDecode("employeetype="
										+ this.type + "&status=" + this.status
										+ "&visible=" + true
										+ "&filetype=csv&name=" + this.title
										+ "&applicationflag=" + 1
										+ "&searchJson=" + this.searchJson));
						Wtf.get("downloadframe").dom.src = A
					},
					showWindow : function() {
						var rec = this.sm2.getSelected().data;
						var dept = rec.Department;
						var desig = rec.designation;
						this.employeeID = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.employee.id"),
							width : 200,
							disabled : true,
							allowBlank : false
						});
						this.userName = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.username")
									+ "*",
							width : 200,
							validator : WtfGlobal.noBlankCheck,
							allowBlank : false
						});
						this.newDesignation = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.designation"),
							width : 200,
							disabled : true,
							allowBlank : false
						});
						this.newDepartment = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.department"),
							width : 200,
							disabled : true,
							allowBlank : false
						});
						this.emailId = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.email.id")
									+ "*",
							width : 200,
							vtype : "email",
							allowBlank : false
						});
						if (this.applicantcmb.getValue() == "External"
								|| this.applicantcmb.getValue() == "Both") {
							if (rec.employeetype == 0) {
								var uname = rec.fname + "." + rec.lname;
								this.usernameForm = new Wtf.form.FormPanel(
										{
											waitMsgTarget : true,
											border : false,
											bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
											autoScroll : false,
											lableWidth : 70,
											layoutConfig : {
												deferredRender : false
											},
											items : [ this.employeeID,
													this.userName,
													this.newDepartment,
													this.newDesignation ]
										});
								this.usernamePanel = new Wtf.Panel(
										{
											border : false,
											layout : "fit",
											autoScroll : false,
											items : [ {
												border : false,
												region : "center",
												layout : "border",
												items : [
														{
															region : "north",
															height : 75,
															border : false,
															bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
															html : getTopHtml(
																	WtfGlobal
																			.getLocaleText("hrms.recruitment.assign.username"),
																	WtfGlobal
																			.getLocaleText("hrms.recruitment.username.for.selected.applicant"))
														},
														{
															border : false,
															region : "center",
															bodyStyle : "background:#f1f1f1;font-size:10px;",
															layout : "fit",
															items : [ this.usernameForm ]
														} ]
											} ]
										});
								this.userWindow = new Wtf.Window(
										{
											iconCls : getButtonIconCls(Wtf.btype.winicon),
											id : "applicantWindow",
											layout : "fit",
											closable : true,
											width : 400,
											title : WtfGlobal
													.getLocaleText("hrms.recruitment.transfer.applicant.data"),
											height : 330,
											border : false,
											modal : true,
											scope : this,
											plain : true,
											buttonAlign : "right",
											buttons : [
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.submit"),
														handler : function() {
															if (this.usernameForm
																	.getForm()
																	.isValid()) {
																this.uname = this.userName
																		.getValue();
																this
																		.getFormFields()
															}
														},
														scope : this
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.cancel"),
														scope : this,
														handler : function() {
															this.userWindow
																	.close()
														}
													} ],
											items : [ this.usernamePanel ]
										});
								this.userWindow.show();
								Wtf.Ajax.requestEx({
									url : "Rec/Job/getEmpidFormat.rec",
									params : {
										flag : 208
									}
								}, this, function(req) {
									this.resp = eval("(" + req + ")");
									this.values = this.resp.data[0].maxempid;
									this.employeeID.setValue(this.values)
								}, function() {
								});
								this.userName.setValue(uname);
								this.newDepartment.setValue(dept);
								this.newDesignation.setValue(desig);
								this.emailId.setValue(rec.email)
							} else {
								this.saveuserName(rec)
							}
						} else {
							this.saveuserName(rec)
						}
					},
					getFormFields : function() {
						this.userWindow.close();
						var arr = this.sm2.getSelections();
						var profid = arr[0].get("apcntid");
						Wtf.Ajax
								.requestEx(
										{
											url : "Rec/Job/getConfigRecruitment.rec",
											method : "POST",
											params : {
												fetchmaster : true,
												refid : profid,
												formtype : "All",
												mapping : true
											}
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											this.configData = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												for ( var n = 0; n < responseObj.data.length; n++) {
													if (responseObj.data[n].colnum > 4) {
														responseObj.data[n].colnum = 31
													}
												}
												this.showHeaderMappingWindow(
														responseObj, profid)
											}
										}, function() {
										})
					},
					showHeaderMappingWindow : function(res, profid) {
						this.changeflag = 0;
						var headerlist = [ [ 1, "First Name" ],
								[ 2, "Last Name" ], [ 3, "Email ID" ],
								[ 4, "Contact No" ],
								[ 5, "Permanent Address" ],
								[ 6, "Middle Name" ], [ 7, "Date Of Birth" ],
								[ 8, "Gender" ], [ 9, "Marital Status" ],
								[ 10, "Blood Group" ], [ 11, "Father's Name" ],
								[ 12, "Father's DOB" ],
								[ 13, "Mother's Name" ],
								[ 14, "Mother's DOB" ], [ 15, "Key Skills" ],
								[ 16, "PAN No" ], [ 17, "EPF No" ],
								[ 18, "Driving License No" ],
								[ 19, "Passport No" ],
								[ 20, "Expiry Date of Passport" ],
								[ 21, "Mobile no" ], [ 22, "Landline No" ],
								[ 23, "Other Email" ],
								[ 24, "Present Address" ],
								[ 25, "Present City" ],
								[ 26, "Present State" ],
								[ 27, "Present Country" ],
								[ 28, "Permanent City" ],
								[ 29, "Permanent State" ],
								[ 30, "Permanent Country" ], [ 31, "-" ] ];
						var headerds = new Wtf.data.SimpleStore({
							fields : [ {
								name : "index"
							}, {
								name : "headername"
							} ]
						});
						Wtf.ux.comboBoxRenderer = function(combo) {
							return function(value) {
								var idx = combo.store.find(combo.valueField,
										value);
								if (idx == -1) {
									return "-"
								}
								if (this.changeflag == 0) {
									if (idx != 0 && idx != 1 && idx != 2
											&& idx != 3) {
										return "-"
									}
								}
								var rec = combo.store.getAt(idx);
								return rec.get(combo.displayField)
							}
						};
						headerds.loadData(headerlist);
						var headerCombo = new Wtf.form.ComboBox(
								{
									store : headerds,
									displayField : "headername",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.columnl"),
									valueField : "index",
									mode : "local",
									forceSelection : true,
									editable : true,
									typeAhead : true,
									triggerAction : "all",
									selectOnFocus : true
								});
						headerCombo.on("select", function(combo, rec) {
							if (rec.get("index") == 1 || rec.get("index") == 2
									|| rec.get("index") == 3
									|| rec.get("index") == 4) {
								combo.setValue(31)
							}
						}, this);
						var listds = new Wtf.data.JsonStore({
							fields : [ {
								name : "fieldname"
							}, {
								name : "index"
							}, {
								name : "colnum"
							} ]
						});
						listds.loadData(res.data);
						var listcm = new Wtf.grid.ColumnModel(
								[
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.external.form.attributes"),
											dataIndex : "fieldname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.system.attributes"),
											dataIndex : "colnum",
											editor : headerCombo,
											renderer : Wtf.ux.comboBoxRenderer(
													headerCombo)
													.createDelegate(this)
										} ]);
						var haderMapgrid = new Wtf.grid.EditorGridPanel({
							region : "center",
							id : "headerlist" + this.id,
							clicksToEdit : 1,
							store : listds,
							cm : listcm,
							border : false,
							width : 434,
							loadMask : true,
							viewConfig : {
								forceFit : true
							}
						});
								this.headerMapWin = new Wtf.Window(
										{
											resizable : false,
											scope : this,
											layout : "border",
											modal : true,
											width : 400,
											height : 415,
											iconCls : "WinIcon",
											id : "importcsvwindow",
											title : WtfGlobal
													.getLocaleText("hrms.recruitment.map.applicant.information"),
											items : [
													{
														region : "north",
														height : 75,
														border : false,
														bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
														html : getTopHtml(
																WtfGlobal
																		.getLocaleText("hrms.recruitment.map.applicant.information"),
																WtfGlobal
																		.getLocaleText("hrms.recruitment.map.applicant.information.with.present.attribute"),
																"images/exportcsv40_52.gif")
													}, haderMapgrid ],
											buttons : [
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.back"),
														scope : this,
														handler : function() {
															this.headerMapWin
																	.close();
															this.showWindow()
														}
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.continue"),
														type : WtfGlobal
																.getLocaleText("hrms.common.submit"),
														scope : this,
														handler : function() {
															var mappedHeaders = "";
															var headerArray = new Array();
															var comboCount = headerds
																	.getCount() - 1;
															for (j = 0; j < listds
																	.getCount(); j++) {
																headerArray[j] = 0
															}
															for ( var j = 0; j < listds
																	.getCount(); j++) {
																var index = listds
																		.getAt(
																				j)
																		.get(
																				"colnum");
																index--;
																if (index < comboCount) {
																	headerArray[index] = headerArray[index] + 1;
																	var rec = headerCombo.store
																			.getAt(index);
																	if (rec != undefined) {
																		mappedHeaders += '"'
																				+ rec
																						.get(headerCombo.displayField)
																				+ '":'
																				+ this.configData.data[j].colnum
																				+ ","
																	}
																}
															}
															mappedHeaders = mappedHeaders
																	.substr(
																			0,
																			mappedHeaders.length - 1);
															mappedHeaders = "{"
																	+ mappedHeaders
																	+ "}";
															var mismatch = 0;
															for (j = 0; j < comboCount; j++) {
																if (headerArray[j] > 1) {
																	mismatch = 1;
																	break
																}
															}
															if (mismatch == 1) {
																msgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.error"),
																				WtfGlobal
																						.getLocaleText("hrms.recruitment.headers.mappings") ],
																		1);
																return
															}
															rec = this.sm2
																	.getSelected().data;
															var uname = rec.fname
																	+ "."
																	+ rec.lname;
															Wtf.Ajax
																	.requestEx(
																			{
																				url : "Rec/Job/getEmpidFormat.rec",
																				params : {
																					flag : 208
																				}
																			},
																			this,
																			function(
																					req) {
																				this.resp = eval("("
																						+ req
																						+ ")");
																				this.values = this.resp.data[0].maxempid;
																				Wtf.Ajax
																						.requestEx(
																								{
																									url : "Rec/Job/transferappdata.rec",
																									params : {
																										flag : 166,
																										mappedheader : mappedHeaders,
																										applicantid : profid,
																										employeetype : this.applicantcmb
																												.getValue(),
																										employeerectype : rec.employeetype,
																										employeeid : this.values,
																										empjoindate : rec.joiningdate
																												.format("Y-m-d"),
																										designationid : rec.designationid,
																										departmentid : rec.departmentid,
																										appusername : this.uname
																									}
																								},
																								this,
																								function(
																										response) {
																									calMsgBoxShow(
																											200,
																											4,
																											true);
																									if (response.success) {
																										calMsgBoxShow(
																												[
																														WtfGlobal
																																.getLocaleText("hrms.common.success"),
																														response.msg ],
																												0);
																										if (rec.employeetype == 0) {
																											this.headerMapWin
																													.close()
																										}
																										this.qualifiedGDS
																												.load({
																													params : {
																														start : 0,
																														limit : this.qualifiedGrid.pag.pageSize,
																														ss : Wtf
																																.getCmp(
																																		"Quick"
																																				+ this.qualifiedGrid.id)
																																.getValue()
																													}
																												})
																									} else {
																										calMsgBoxShow(
																												[
																														WtfGlobal
																																.getLocaleText("hrms.common.warning"),
																														response.msg ],
																												2)
																									}
																								},
																								function() {
																									calMsgBoxShow(
																											65,
																											1)
																								})
																			},
																			function() {
																			})
														}
													},
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.cancel"),
														scope : this,
														handler : function() {
															this.headerMapWin
																	.close()
														}
													} ]
										}), this.headerMapWin.show();
						this.changeflag = 1;
						haderMapgrid.on("beforeedit", function(object) {
							if (object.value == 1 || object.value == 2
									|| object.value == 3 || object.value == 4) {
								object.cancel = true
							}
						}, this)
					},
					saveuserName : function(A) {
						this.userflag = false;
						if (this.applicantcmb.getValue() == "Internal"
								|| A.employeetype == 1) {
							this.userflag = true
						} else {
							if (this.usernameForm.getForm().isValid()) {
								this.userflag = true
							}
						}
						if (this.userflag) {
							Wtf.Ajax
									.requestEx(
											{
												url : "Rec/Job/transferappdata.rec",
												params : {
													flag : 166,
													employeetype : this.applicantcmb
															.getValue(),
													employeerectype : A.employeetype,
													employeeid : this.employeeID
															.getValue(),
													applicantid : A.apcntid,
													empjoindate : A.joiningdate
															.format("Y-m-d"),
													applicationid : A.id,
													designationid : A.designationid,
													departmentid : A.departmentid,
													appusername : this.userName
															.getValue(),
													emailid : this.emailId
															.getValue()
												}
											},
											this,
											function(B) {
												calMsgBoxShow(200, 4, true);
												if (B.success) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	B.msg ], 0);
													if (this.applicantcmb
															.getValue() == "External") {
														this.userWindow.close()
													}
													this.qualifiedGDS
															.load({
																params : {
																	start : 0,
																	limit : this.qualifiedGrid.pag.pageSize,
																	ss : Wtf
																			.getCmp(
																					"Quick"
																							+ this.qualifiedGrid.id)
																			.getValue()
																}
															})
												} else {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	B.msg ], 2)
												}
											}, function() {
												calMsgBoxShow(65, 1)
											})
						} else {
							return
						}
					},
					gridloads : function(A) {
						if (A == "Rejected") {
							var C = Wtf.getCmp("rejectedrejectedgr");
							if (C != null) {
								C.getStore().load()
							}
						}
						if (A != "Rejected" && A != "Selected") {
							var B = Wtf.getCmp("allapplsallappsviewgr");
							if (B != null) {
								B.getStore().load()
							}
						}
					},
					exportinfo : function() {
						var B, A = 1;
						var C = this.qualifiedGrid.getColumnModel();
						this.pdfStore = new Wtf.data.Store({});
						for (B = 0; B < C.getColumnCount(); B++) {
							if (C.isHidden(B) != undefined
									|| C.getColumnHeader(B) == ""
									|| C.getDataIndex(B) == "") {
								continue
							} else {
								var D = C.config[B].align;
								var E;
								if (D == undefined) {
									D = "center"
								}
								if (C.config[B].title == undefined) {
									E = C.config[B].exportDataIndex
								} else {
									E = C.config[B].title
								}
								this.newPdfRec = new Wtf.data.Record({
									header : E,
									title : C.config[B].header,
									width : C.config[B].pdfwidth,
									align : D,
									index : A
								});
								this.pdfStore.insert(this.pdfStore.getCount(),
										this.newPdfRec);
								A++
							}
						}
						this.grid = this.qualifiedGrid
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								})
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 5
							}
						});
						this.advanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.qualifiedGDS.baseParams = {
							mode : 114,
							employeetype : this.type,
							flag : 38,
							gridst : 1
						};
						this.qualifiedGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.advanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.qualifiedGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							flag : 38,
							gridst : 1
						};
						this.qualifiedGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.qualifiedGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							employeetype : this.type,
							flag : 38,
							gridst : 1
						};
						this.qualifiedGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 5
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					}
				});
Wtf.recruiters = function(A) {
	Wtf.apply(this, A);
	Wtf.recruiters.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.recruiters,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.recruiters.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.recruiters.superclass.onRender.call(this, A);
						this.jobForm();
						this.add(this.recruiterGrid);
						this.on("activate", function() {
							this.doLayout()
						})
					},
					jobForm : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.recruiterRec = new Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "designation"
						}, {
							name : "department"
						}, {
							name : "emailid"
						}, {
							name : "status"
						} ]);
						this.recruiterStore = new Wtf.data.Store({
							url : "Rec/Job/getRecruitersFunction.rec",
							baseParams : {
								flag : 152
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "Count"
							}, this.recruiterRec),
							autoLoad : false
						});
						calMsgBoxShow(202, 4, true);
						this.recruiterStore.load();
						this.recruiterStore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.interviewer.name"),
											dataIndex : "username",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "emailid",
											sortable : true,
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.confirmation.request"),
											dataIndex : "status",
											sortable : true,
											renderer : function(C) {
												if (C == "0") {
													return "<FONT COLOR='blue'>"
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending")
															+ "</FONT>"
												} else {
													if (C == "1") {
														return "<FONT COLOR='green'>"
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.accepted")
																+ "</FONT>"
													} else {
														if (C == "2") {
															return "<FONT COLOR='red'>"
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.rejected")
																	+ "</FONT>"
														} else {
															return "<FONT COLOR='DarkGoldenRod'>"
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.not.sent")
																	+ "</FONT>"
														}
													}
												}
											}
										} ]);
						this.intstatusdata = [
								[
										"0",
										WtfGlobal
												.getLocaleText("hrms.recruitment.pending") ],
								[
										"1",
										WtfGlobal
												.getLocaleText("hrms.recruitment.accepted") ],
								[
										"2",
										WtfGlobal
												.getLocaleText("hrms.recruitment.rejected") ],
								[
										"3",
										WtfGlobal
												.getLocaleText("hrms.recruitment.not.sent") ] ];
						this.intstatusStore = new Wtf.data.SimpleStore({
							fields : [ "id", "intstatus" ],
							data : this.intstatusdata
						});
						this.interstatus = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.interviewer.status"),
									store : this.intstatusStore,
									mode : "local",
									hiddenName : "jobtype",
									valueField : "id",
									displayField : "intstatus",
									triggerAction : "all",
									typeAhead : true,
									loadMask : true,
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.status"),
									width : 120
								});
						this.clearFilterBut = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.clear.filter"),
									handler : this.clearFilter,
									iconCls : "pwndExport addfilter",
									tooltip : "Clear interviewer status filter.",
									scope : this
								});
						var B = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.set.as.interviewer"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.set.as.interviewer.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 112,
									disabled : true,
									scope : this,
									handler : function() {
										this.rec = this.sm2.getSelections();
										if (this.rec.length > 0) {
											this.assignRecruiter()
										} else {
											Wtf.MessageBox
													.show({
														msg : WtfGlobal
																.getLocaleText("hrms.common.please.select.record"),
														buttons : Wtf.MessageBox.OK
													})
										}
									}
								});
						this.unassgnrecruiter = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.unassign.interviewer"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.unassign.interviewer.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.cancelbutton),
									minWidth : 100,
									disabled : true,
									scope : this,
									handler : function() {
										this.deleteRecruiter()
									}
								});
						var A = new Array();
						A
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.recruiterStore
																.load({
																	params : {
																		start : 0,
																		limit : this.recruiterGrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.recruiterGrid.id)
																.setValue("")
													}
												}));
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.recruiters,
								Wtf.Perm.recruiters.create)) {
							A.push("-", B)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.recruiters,
								Wtf.Perm.recruiters.deleterctr)) {
							A.push("-");
							A.push(this.unassgnrecruiter)
						}
						A.push("-");
						A.push(this.clearFilterBut);
						A.push("-");
						A.push(this.interstatus);
						this.recruiterGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									store : this.recruiterStore,
									cm : this.cm,
									sm : this.sm2,
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									loadMask : true,
									displayInfo : true,
									serverSideSearch : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.search.interviewer.name"),
									searchField : "username",
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									},
									tbar : A
								});
						this.sm2.on("selectionchange", function() {
							var C = this.sm2.getSelections();
							var F = true, E = true;
							for ( var D = 0; D < C.length; D++) {
								if (C[D].get("status") == "1"
										|| C[D].get("status") == "0") {
									F = false
								} else {
									if (C[D].get("status") == "3") {
										E = false
									}
								}
							}
							if (F) {
								WtfGlobal.enableDisableBtnArr(A,
										this.recruiterGrid, [], [ 3 ])
							}
							if (E) {
								WtfGlobal.enableDisableBtnArr(A,
										this.recruiterGrid, [], [ 5 ])
							}
						}, this);
						this.interstatus.on("select", function(D, C, E) {
							this.recruiterStore.baseParams = {
								status : this.interstatus.getValue()
							};
							this.recruiterStore.load({
								params : {
									start : 0,
									limit : this.recruiterGrid.pag.pageSize,
									ss : Wtf.getCmp(
											"Quick" + this.recruiterGrid.id)
											.getValue()
								}
							})
						}, this)
					},
					clearFilter : function() {
						this.interstatus.reset();
						this.recruiterStore.baseParams = {
							flag : 152
						};
						this.recruiterStore.load()
					},
					assignRecruiter : function() {
						this.assignflag = true;
						this.recruit = this.sm2.getSelections();
						this.sm2.clearSelections();
						for ( var A = 0; A < this.recruit.length; A++) {
							var B = this.recruiterStore
									.indexOf(this.recruit[A]);
							WtfGlobal.highLightRow(this.recruiterGrid,
									"33CC33", 5, B);
							if (this.recruit[A].get("status") == "1") {
								this.assignflag = false
							}
						}
						if (this.assignflag) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										icon : Wtf.MessageBox.QUESTION,
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.selected.employees.interviewer.msg"),
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												this.recids = [];
												for (A = 0; A < this.recruit.length; A++) {
													this.recids
															.push(this.recruit[A]
																	.get("userid"))
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/addRecruitersFunction.rec",
																	params : {
																		flag : 125,
																		jobids : this.recids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			66,
																			0);
																	var E = {
																		start : 0,
																		limit : this.recruiterGrid.pag.pageSize,
																		ss : Wtf
																				.getCmp(
																						"Quick"
																								+ this.recruiterGrid.id)
																				.getValue()
																	};
																	WtfGlobal
																			.delaytasks(
																					this.recruiterStore,
																					E);
																	var D = Wtf
																			.getCmp("DSBMyWorkspaces");
																	if (D) {
																		D
																				.doSearch(
																						D.url,
																						"")
																	}
																},
																function() {
																	calMsgBoxShow(
																			67,
																			1)
																})
											}
										}
									})
						} else {
							this.recruiterGrid.getSelectionModel()
									.clearSelections();
							calMsgBoxShow(129, 0)
						}
					},
					deleteRecruiter : function() {
						if (this.recruiterGrid.getSelectionModel().getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							this.deleteflag = true;
							this.statrec = this.recruiterGrid
									.getSelectionModel().getSelections();
							this.apparr = [];
							this.sm2.clearSelections();
							for ( var A = 0; A < this.statrec.length; A++) {
								var B = this.recruiterStore
										.indexOf(this.statrec[A]);
								WtfGlobal.highLightRow(this.recruiterGrid,
										"FF0000", 5, B);
								if (this.statrec[A].get("status") == "2"
										|| this.statrec[A].get("status") == "3") {
									this.deleteflag = false
								}
							}
							if (this.deleteflag) {
								for (A = 0; A < this.statrec.length; A++) {
									this.apparr.push(this.statrec[A]
											.get("userid"))
								}
								this.deleteflag = true;
								Wtf.MessageBox
										.show({
											title : WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											icon : Wtf.MessageBox.QUESTION,
											msg : WtfGlobal
													.getLocaleText("hrms.recruitment.unassign.selected.interviewer.msg"),
											buttons : Wtf.MessageBox.YESNO,
											scope : this,
											fn : function(C) {
												if (C == "yes") {
													calMsgBoxShow(201, 4, true);
													Wtf.Ajax
															.requestEx(
																	{
																		url : "Rec/Job/addRecruitersFunction.rec",
																		params : {
																			flag : 125,
																			appid : this.apparr,
																			delrec : "true"
																		}
																	},
																	this,
																	function() {
																		calMsgBoxShow(
																				149,
																				0);
																		var E = {
																			start : 0,
																			limit : this.recruiterGrid.pag.pageSize,
																			ss : Wtf
																					.getCmp(
																							"Quick"
																									+ this.recruiterGrid.id)
																					.getValue()
																		};
																		WtfGlobal
																				.delaytasks(
																						this.recruiterStore,
																						E);
																		var D = Wtf
																				.getCmp("DSBMyWorkspaces");
																		if (D) {
																			D
																					.doSearch(
																							D.url,
																							"")
																		}
																	},
																	function() {
																		calMsgBoxShow(
																				27,
																				1)
																	})
												}
											}
										})
							} else {
								this.recruiterGrid.getSelectionModel()
										.clearSelections();
								calMsgBoxShow(129, 0)
							}
						}
					}
				});
Wtf.viewApplicants = function(A) {
	Wtf.viewApplicants.superclass.constructor.call(this, A);
	Wtf.form.Field.prototype.msgTarget = "side"
};
Wtf
		.extend(
				Wtf.viewApplicants,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.viewApplicants.superclass.initComponent.call(this,
								A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record.create([ {
							name : "empid"
						}, {
							name : "jobid"
						}, {
							name : "appname"
						}, {
							name : "designation"
						}, , {
							name : "department"
						}, {
							name : "email"
						}, {
							name : "contactno"
						} ]);
						calMsgBoxShow(202, 4, true);
						this.ds = new Wtf.data.Store({
							baseParams : {
								flag : 120,
								jobid : this.jid
							},
							url : Wtf.req.base + "hrms.jsp",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.record)
						});
						this.ds.load();
						this.ds.on("load", function() {
							WtfGlobal.closeProgressbar()
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applicant.name"),
											dataIndex : "appname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.contact.no"),
											dataIndex : "contactno"
										} ]);
						this.viewApplicantsGrid = new Wtf.KwlGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									},
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.external.grid.search.msg"),
									searchField : "appname",
									displayInfo : true
								});
						this.add(this.viewApplicantsGrid)
					},
					changestatus : function() {
						if (this.viewApplicantsGrid.getSelectionModel()
								.getCount() == 0) {
							calMsgBoxShow(42, 0)
						} else {
							this.statrec = this.viewApplicantsGrid
									.getSelectionModel().getSelections();
							this.apparr = [];
							for ( var A = 0; A < this.statrec.length; A++) {
								this.apparr.push(this.statrec[A].get("appid"))
							}
							Wtf.Ajax.requestEx({
								url : Wtf.req.base + "hrms.jsp",
								params : {
									flag : 10,
									appid : this.apparr
								}
							}, this, function() {
								calMsgBoxShow(70, 0);
								this.ds.load()
							}, function() {
								calMsgBoxShow(71, 1)
							})
						}
					},
					onRender : function(A) {
						Wtf.viewApplicants.superclass.onRender.call(this, A)
					}
				});
Wtf.agencyWindow = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 410,
		height : 400,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.sendjobSaveRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.agencyWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.agencyWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.agencyWindow.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						this.managerCmb = new Wtf.form.ComboBox(
								{
									store : Wtf.managerStore,
									mode : "local",
									width : 200,
									name : "manager",
									valueField : "userid",
									displayField : "username",
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.approving.manager")
											+ "*",
									typeAhead : true,
									allowBlank : false
								});
						if (!Wtf.StoreMgr.containsKey("manager")) {
							if (!this.isEdit) {
								Wtf.managerStore.on("load", this.setManager,
										this)
							} else {
								Wtf.managerStore.on("load", this.setManagerid,
										this)
							}
							Wtf.managerStore.load();
							Wtf.StoreMgr.add("manager", Wtf.managerStore)
						} else {
							if (!this.isEdit) {
								this.setManager()
							} else {
								this.setManagerid()
							}
						}
						this.agname = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.agency.name")
											+ "*",
									width : 200,
									name : "agname",
									maxLength : 255,
									validator : WtfGlobal.noBlankCheck,
									allowBlank : false
								});
						this.weburl = new Wtf.form.TextField(
								{
									allowBlank : false,
									width : 200,
									maxLength : 255,
									name : "url",
									vtype : "url",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.AgencyWebsite")
											+ "*"
								});
						this.agencyid = new Wtf.form.Hidden();
						this.rcost = new Wtf.form.NumberField(
								{
									allowBlank : false,
									width : 200,
									maxLength : 10,
									name : "cost",
									allowDecimals : true,
									allowNegative : false,
									lableWidth : 100,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.recruitment.cost")
											+ '(<span align="right" style="font-family:Lucida Sans Unicode;">'
											+ WtfGlobal.getCurrencySymbol()
											+ "</span>)*"
								});
						this.conper = new Wtf.form.TextField(
								{
									allowBlank : false,
									width : 200,
									maxLength : 100,
									validator : WtfGlobal.validateNameFields,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.contact.person")
											+ "*"
								});
						this.contact = new Wtf.form.TextField(
								{
									allowBlank : false,
									width : 200,
									maxLength : 20,
									name : "phoneno",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.AgencyContact")
											+ "*"
								});
						this.address = new Wtf.form.TextArea(
								{
									allowBlank : false,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.AgencyAddress")
											+ "*",
									width : 200,
									name : "address",
									validator : WtfGlobal.noBlankCheck,
									maxLength : 255
								});
						this.addAgencyForm = new Wtf.form.FormPanel(
								{
									frame : false,
									border : false,
									bodyStyle : "font-size:10px;padding:15px 20px;margin-left:3%;",
									labelWidth : 125,
									items : [ this.agencyid, this.agname,
											this.weburl, this.rcost,
											this.conper, this.managerCmb,
											this.contact, this.address ]
								});
						this.addAgencyPanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 75,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															this.wintitle,
															WtfGlobal
																	.getLocaleText("hrms.common.Fillupthefollowingform"),
															"images/addagency.jpg")
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.addAgencyForm ]
												} ]
									} ]
								});
						this.add(this.addAgencyPanel);
						Wtf.agencyWindow.superclass.onRender.call(this, A);
						if (this.record != null) {
							this.addAgencyForm
									.on(
											"render",
											function() {
												this.agname
														.setValue(this.record.data.agname);
												this.agencyid
														.setValue(this.record.data.agid);
														this.weburl
																.setValue(this.record.data.url),
														this.rcost
																.setValue(this.record.data.cost),
														this.conper
																.setValue(this.record.data.contactperson),
														this.contact
																.setValue(this.record.data.phoneno),
														this.address
																.setValue(this.record.data.address)
											}, this)
						}
					},
					setManager : function() {
						if (Wtf.managerStore.getCount() > 0) {
							this.managerCmb.setValue(Wtf.managerStore.getAt(0)
									.get("userid"))
						}
					},
					setManagerid : function() {
						if (Wtf.managerStore.getCount() > 0) {
							this.managerCmb
									.setValue(this.record.data.managerid)
						}
					},
					sendjobSaveRequest : function() {
						if (this.addAgencyForm.getForm().isValid()) {
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax.requestEx({
								url : "Rec/Agency/addAgency.rec",
								scope : this,
								params : {
									agencyid : this.agencyid.getValue(),
									agencyname : this.agname.getValue(),
									agencyweb : this.weburl.getValue(),
									reccost : this.rcost.getValue(),
									conperson : this.conper.getValue(),
									apprman : this.managerCmb.getValue(),
									agencyno : this.contact.getValue(),
									agencyadd : this.address.getValue()
								}
							}, this, function(a, req) {
								req = eval("(" + a + ")");
								if (req.message == "exist") {
									calMsgBoxShow(222, 2)
								} else {
									this.ds.load();
									if (this.isEdit) {
										calMsgBoxShow(151, 0)
									} else {
										calMsgBoxShow(68, 0)
									}
									this.close()
								}
							}, function() {
								calMsgBoxShow(27, 1)
							})
						} else {
							calMsgBoxShow(28, 2)
						}
					}
				});
Wtf.myProfileWindow = function(A) {
	Wtf.myProfileWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.myProfileWindow,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.myProfileWindow.superclass.initComponent.call(this)
					},
					onRender : function(F) {
						Wtf.myProfileWindow.superclass.onRender.call(this, F);
						var B = true;
						if (Wtf.cmpPref.payrollbase == "Date" == false) {
							if (WtfGlobal.CmpEnableDisable(Wtf.subCode,
									Wtf.payroll)) {
								if (!WtfGlobal.EnableDisable(Wtf.UPerm.payroll,
										Wtf.Perm.payroll.view)) {
									B = false
								}
							}
						}
						this.CostCenterRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "code"
						}, {
							name : "creationDate"
						} ]);
						this.CostCenterReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.CostCenterRec);
						this.CostCenterStore = new Wtf.data.Store({
							url : "Common/getCostCenter.common",
							reader : this.CostCenterReader
						});
						this.costcenter = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.costcenter"),
									store : this.CostCenterStore,
									mode : "local",
									typeAhead : true,
									editable : true,
									valueField : "id",
									hiddenName : "costcenter",
									displayField : "name",
									width : 200,
									triggerAction : "all",
									forceSelection : true,
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.cost.center"),
									disabled : this.editperm
								});
						this.CostCenterStore.load();
						this.frequencyStoreCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.salary.frequency"),
									hiddenName : "frequency",
									mode : "local",
									valueField : "id",
									displayField : "name",
									store : Wtf.frequencyStore,
									width : 200,
									typeAhead : true,
									forceSelection : true,
									disabled : true
								});
						var D = new Wtf.data.Record.create([ {
							name : "fname"
						}, {
							name : "middlename"
						}, {
							name : "lname"
						}, {
							name : "fullname"
						}, {
							name : "dob"
						}, {
							name : "gender"
						}, {
							name : "image"
						}, {
							name : "aboutuser"
						}, {
							name : "marriage"
						}, {
							name : "bloodgrp"
						}, {
							name : "bankacc"
						}, {
							name : "bankname"
						}, {
							name : "bankbranch"
						}, {
							name : "panno"
						}, {
							name : "pfno"
						}, {
							name : "drvlicense"
						}, {
							name : "passportno"
						}, {
							name : "exppassport"
						}, {
							name : "fathername"
						}, {
							name : "fatherdob"
						}, {
							name : "mothername"
						}, {
							name : "motherdob"
						}, {
							name : "spousename"
						}, {
							name : "spousedob"
						}, {
							name : "child1name"
						}, {
							name : "child1dob"
						}, {
							name : "child2name"
						}, {
							name : "child2dob"
						}, {
							name : "mobno"
						}, {
							name : "workno"
						}, {
							name : "landno"
						}, {
							name : "workmail"
						}, {
							name : "othermail"
						}, {
							name : "presentaddr"
						}, {
							name : "presentcity"
						}, {
							name : "presentstate"
						}, {
							name : "precountry"
						}, {
							name : "permaddr"
						}, {
							name : "permcity"
						}, {
							name : "permstate"
						}, {
							name : "permcountry"
						}, {
							name : "mailaddr"
						}, {
							name : "emgname"
						}, {
							name : "emgreln"
						}, {
							name : "emghome"
						}, {
							name : "emgwork"
						}, {
							name : "emgmob"
						}, {
							name : "emgaddr"
						}, {
							name : "empid"
						}, {
							name : "department"
						}, {
							name : "designationid"
						}, {
							name : "costcenter"
						}, {
							name : "frequency"
						}, {
							name : "managername"
						}, {
							name : "emptype"
						}, {
							name : "joindate"
						}, {
							name : "confirmdate"
						}, {
							name : "relievedate"
						}, {
							name : "trainingmon"
						}, {
							name : "trainingyr"
						}, {
							name : "probationyr"
						}, {
							name : "probationmon"
						}, {
							name : "noticeyr"
						}, {
							name : "noticemon"
						}, {
							name : "commid"
						}, {
							name : "branchcode"
						}, {
							name : "branchcity"
						}, {
							name : "branchaddr"
						}, {
							name : "brachcountry"
						}, {
							name : "keyskills"
						}, {
							name : "wkstarttime"
						}, {
							name : "wkendtime"
						}, {
							name : "weekoff"
						} ]);
						var G = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, D);
						this.profstore = new Wtf.data.Store({
							url : "Common/getEmpProfile.common",
							reader : G,
							autoLoad : true,
							baseParams : {
								flag : 52,
								userid : this.lid
							}
						});
						this.depCmb = new Wtf.form.ComboBox({
							store : Wtf.depStore,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.department"),
							mode : "local",
							hiddenName : "department",
							name : "department",
							width : 200,
							disabled : this.editperm,
							forceSelection : true,
							valueField : "id",
							displayField : "name",
							typeAhead : true,
							triggerAction : "all"
						});
						if (!Wtf.StoreMgr.containsKey("dep")) {
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore)
						}
						this.desigCmb = new Wtf.form.ComboBox({
							store : Wtf.desigStore,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.designation"),
							mode : "local",
							hiddenName : "designationid",
							name : "designationid",
							disabled : this.editperm,
							forceSelection : true,
							width : 200,
							valueField : "id",
							displayField : "name",
							triggerAction : "all",
							typeAhead : true,
							listeners : {
								scope : this,
								Select : function(Q, P) {
									this.templateCmb.clearValue();
									this.templateStore.removeAll();
									this.templateStore.baseParams = {
										type : "getTemplistperDesign"
									};
									this.templateStore.load({
										params : {
											desigid : P.get("id")
										}
									})
								}
							}
						});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						}
						this.managerCmb = new Wtf.form.ComboBox({
							displayField : "username",
							store : Wtf.reportingToStore,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.ReportingTo"),
							mode : "local",
							hiddenName : "reportto",
							name : "managername",
							forceSelection : true,
							valueField : "userid",
							triggerAction : "all",
							width : 200,
							typeAhead : true
						});
						if (!Wtf.StoreMgr.containsKey("reportingto")) {
							Wtf.reportingToStore.load();
							Wtf.StoreMgr.add("reportingto",
									Wtf.reportingToStore)
						}
						this.countrycombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PresentCountry"),
									width : 200,
									store : Wtf.countryStore,
									typeAhead : true,
									valueField : "id",
									name : "presentcountry",
									hiddenName : "presentcountry",
									displayField : "name",
									forceSelection : true,
									mode : "local",
									triggerAction : "all"
								});
						this.countrycombo1 = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PermanentCountry"),
									width : 200,
									store : Wtf.countryStore,
									typeAhead : true,
									name : "permcountry",
									hiddenName : "permcountry",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									mode : "local",
									triggerAction : "all",
									disabled : this.blockemployeestoedit
								});
						this.branchcountrycombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.BranchCountry"),
									width : 200,
									store : Wtf.countryStore,
									typeAhead : true,
									name : "branchcountry",
									hiddenName : "branchcountry",
									valueField : "id",
									disabled : this.editperm,
									forceSelection : true,
									displayField : "name",
									mode : "local",
									triggerAction : "all"
								});
						if (!Wtf.StoreMgr.containsKey("country")) {
							Wtf.countryStore.load();
							Wtf.StoreMgr.add("country", Wtf.countryStore)
						}
						this.maritstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "marit" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Single") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.Married") ] ]
								});
						this.genderstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "gender" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Male") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.Female") ] ]
								});
						this.relationstore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "relation" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Brother") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.Father") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.Friend") ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.common.Mother") ],
											[
													"5",
													WtfGlobal
															.getLocaleText("hrms.common.Sister") ],
											[
													"6",
													WtfGlobal
															.getLocaleText("hrms.common.Other") ] ]
								});
						this.daystore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "weekday" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.Sunday") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.Monday") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.Tuesday") ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.Wednesday") ],
											[
													"5",
													WtfGlobal
															.getLocaleText("hrms.Thursday") ],
											[
													"6",
													WtfGlobal
															.getLocaleText("hrms.Friday") ],
											[
													"7",
													WtfGlobal
															.getLocaleText("hrms.Saturday") ] ]
								});
						this.prdstore = new Wtf.data.SimpleStore({
							fields : [ "id" ],
							data : [ [ "0" ], [ "1" ], [ "2" ], [ "3" ],
									[ "4" ], [ "5" ], [ "6" ], [ "7" ],
									[ "8" ], [ "9" ], [ "10" ], [ "11" ],
									[ "12" ] ]
						});
						this.jobtypestore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "jobtype" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.FullTime") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.PartTime") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.Contract") ] ]
								});
						this.emptypestore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "type" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Trainee") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.Contractual") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.common.Permanent") ] ]
								});
						this.timestore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "type" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.am") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.pm") ] ]
								});
						this.dateofjoining = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.DateofJoining")
									+ "*",
							format : "Y-m-d",
							name : "joindate",
							disabled : this.editperm,
							width : 200,
							allowBlank : false
						});
						this.dateofconfirm = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.DateofConfirmation")
											+ "*",
									format : "Y-m-d",
									name : "confirmdate",
									disabled : this.editperm,
									width : 200,
									allowBlank : false
								});
						this.dateofrelieve = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.DateofRelieving"),
									format : "Y-m-d",
									name : "relievedate",
									disabled : true,
									width : 200
								});
						this.dob = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.DateofBirth"),
							format : "Y-m-d",
							name : "DoB",
							width : 200,
							maxValue : new Date().clearTime(true),
							disabled : this.blockemployeestoedit
						});
						this.marState = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.MaritalStatus"),
									hiddenName : "marital",
									store : this.maritstore,
									displayField : "marit",
									valueField : "id",
									selectOnFocus : true,
									triggerAction : "all",
									typeAhead : true,
									forceSelection : true,
									mode : "local",
									width : 200
								});
						this.gender = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Gender"),
							hiddenName : "gender",
							store : this.genderstore,
							displayField : "gender",
							valueField : "gender",
							forceSelection : true,
							selectOnFocus : true,
							triggerAction : "all",
							typeAhead : true,
							mode : "local",
							width : 200,
							disabled : this.blockemployeestoedit
						});
						this.homeTele = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.LandlineNo"),
							name : "landno",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.workTele = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.WorkTelephone"),
									name : "workno",
									width : 200,
									maxLength : 20,
									disabled : this.blockemployeestoedit
								});
						this.mobileno = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.MobileNo"),
							name : "mobno",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.emergencyTele = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.LandlineNo"),
							name : "emghome",
							width : 200,
							maxLength : 20
						});
						this.emergencyTele2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.WorkContactNo"),
									name : "emgwork",
									width : 200,
									maxLength : 20
								});
						this.emergencyTele3 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.MobileNo"),
							name : "emgmob",
							width : 200,
							maxLength : 20
						});
						this.emergencyname = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.EmergencyContactPersonName"),
									name : "emgname",
									width : 200,
									maxLength : 255
								});
						this.emergencyaddr = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.EmergencyContactPersonAddress"),
									name : "emgaddr",
									height : 35,
									width : 200,
									maxLength : 255
								});
						this.workEmail = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.WorkEmail"),
							name : "workmail",
							vtype : "email",
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit
						});
						this.otherEmail = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.OtherEmail"),
							vtype : "email",
							name : "othermail",
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit
						});
						this.empid = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employee.id"),
									name : "empid",
									disabled : this.editperm,
									regex : /^[a-zA-Z]{1,}-{1}[0-9]{1,}$|^[a-zA-Z]{1,}-{1}[0-9]{1,}-{1}[a-zA-Z]{1,}$|^[0-9]{0,}$/,
									width : 200,
									maxLength : 255
								});
						this.fullname = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.FullName"),
							name : "fullname",
							readOnly : true,
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit
						});
						this.userpicture = new Wtf.Panel(
								{
									border : false,
									width : 350,
									layout : "column",
									items : [
											{
												id : this.id
														+ "userpicturepanel",
												border : false,
												style : "float:left;",
												columnWidth : 0.4,
												html : "<img id='"
														+ this.id
														+ "userpicture' height='80' width='80' alt='User Image' src=images/defaultuser.png?v="
														+ Math.random()
														+ "&userImg=true'/>"
											}, {
												id : this.id + "aboutUser",
												border : false,
												columnWidth : 0.6
											} ]
								});
						this.fname = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.FirstName")
									+ "*",
							name : "fname",
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit,
							allowBlank : false
						});
						this.lname = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.LastName")
									+ "*",
							name : "lname",
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit,
							allowBlank : false
						});
						this.mname = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.MiddleName"),
							name : "mname",
							enableKeyEvents : true,
							width : 200,
							maxLength : 255,
							disabled : this.blockemployeestoedit
						});
						this.bloodgrp = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.BloodGroup"),
							name : "bloodgrp",
							width : 200,
							maxLength : 10,
							disabled : this.blockemployeestoedit
						});
						this.fathername = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.FatherName"),
							name : "fathername",
							width : 200,
							maxLength : 250,
							disabled : this.blockemployeestoedit
						});
						this.fatherdob = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.FatherDOB"),
							format : "Y-m-d",
							name : "fatherDoB",
							width : 200,
							maxValue : new Date().clearTime(true),
							disabled : this.blockemployeestoedit
						});
						this.mothername = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.MotherName"),
							name : "mothername",
							width : 200,
							maxLength : 250,
							disabled : this.blockemployeestoedit
						});
						this.motherdob = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.MotherDOB"),
							format : "Y-m-d",
							name : "motherDoB",
							width : 200,
							maxValue : new Date().clearTime(true),
							disabled : this.blockemployeestoedit
						});
						this.spousename = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.SpouseName"),
							name : "spousename",
							disabled : true,
							width : 200,
							maxLength : 250
						});
						this.spousedob = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.SpouseDOB"),
							format : "Y-m-d",
							name : "spouseDoB",
							disabled : true,
							width : 200,
							maxValue : new Date().clearTime(true)
						});
						this.childname = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.FirstChildName"),
									disabled : true,
									name : "child1name",
									width : 200,
									maxLength : 250
								});
						this.childdob = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.FirstChildDOB"),
									format : "Y-m-d",
									disabled : true,
									name : "childDoB1",
									width : 200,
									maxValue : new Date().clearTime(true)
								});
						this.childname1 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.SecondChildName"),
									disabled : true,
									name : "child2name",
									width : 200,
									maxLength : 250
								});
						this.childdob1 = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.SecondChildDOB"),
									format : "Y-m-d",
									disabled : true,
									name : "childDoB2",
									width : 200,
									maxValue : new Date().clearTime(true)
								});
						this.bankacc = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.BankAc"),
							name : "bankacc",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.bankname = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.BankName"),
							name : "bankname",
							width : 200,
							maxLength : 250,
							disabled : this.blockemployeestoedit
						});
						this.bankbranch = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.BankBranch"),
							name : "bankbranch",
							width : 200,
							maxLength : 250,
							disabled : this.blockemployeestoedit
						});
						this.panno = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.PANNo"),
							name : "panno",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.pfno = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.EPFNo"),
							name : "pfno",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.drivingli = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.DrivingLicenseNo"),
									name : "drvlicense",
									width : 200,
									maxLength : 20,
									disabled : this.blockemployeestoedit
								});
						this.passport = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.PassportNo"),
							name : "passportno",
							width : 200,
							maxLength : 20,
							disabled : this.blockemployeestoedit
						});
						this.exppassport = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.ExpiryDateofPassport"),
									format : "Y-m-d",
									name : "exppassport",
									width : 200,
									disabled : this.blockemployeestoedit
								});
						this.city1 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.PresentCity"),
							name : "presentcity",
							emptyText : "",
							width : 200,
							maxLength : 255
						});
						this.state1 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.PresentState"),
							name : "presentstate",
							emptyText : "",
							width : 200,
							maxLength : 255
						});
						this.city2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PermanentCity"),
									name : "permcity",
									emptyText : "",
									width : 200,
									maxLength : 255,
									disabled : this.blockemployeestoedit
								});
						this.state2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PermanentState"),
									name : "permstate",
									emptyText : "",
									width : 200,
									maxLength : 255,
									disabled : this.blockemployeestoedit
								});
						this.addr = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PresentAddress"),
									name : "presentaddr",
									height : 35,
									width : 200,
									maxLength : 255
								});
						this.permaddr = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.PermanentAddress"),
									name : "permaddr",
									height : 35,
									emptyText : "",
									width : 200,
									maxLength : 255,
									disabled : this.blockemployeestoedit
								});
						this.mailaddr = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.MailingAddress"),
									name : "mailaddr",
									height : 35,
									emptyText : "",
									width : 200,
									maxLength : 255,
									disabled : this.blockemployeestoedit
								});
						this.commid = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.CommunicationID"),
									name : "commid",
									width : 200,
									disabled : this.editperm,
									maxLength : 100
								});
						this.workbranch = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.WorkingBranchCode"),
									name : "branchcode",
									width : 200,
									disabled : this.editperm,
									maxLength : 20
								});
						this.workbranchaddr = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.BranchAddress"),
									name : "branchaddr",
									width : 200,
									disabled : this.editperm,
									maxLength : 255
								});
						this.branchcity = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.BranchCity"),
							name : "branchcity",
							width : 200,
							disabled : this.editperm,
							maxLength : 255
						});
						this.keyskills = new Wtf.form.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.KeySkills"),
							name : "keyskills",
							width : 200,
							maxLength : 1000
						});
						this.trainmon = new Wtf.form.ComboBox({
							hiddenName : "trainingmon",
							store : this.prdstore,
							displayField : "id",
							valueField : "id",
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.Months"),
							selectOnFocus : true,
							disabled : this.editperm,
							triggerAction : "all",
							editable : false,
							mode : "local",
							labelWidth : 150,
							width : 100,
							listWidth : 100
						});
						this.trainyr = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.TrainingPeriod"),
									hiddenName : "trainingyr",
									store : this.prdstore,
									displayField : "id",
									valueField : "id",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.Years"),
									selectOnFocus : true,
									disabled : this.editperm,
									triggerAction : "all",
									editable : false,
									mode : "local",
									width : 100,
									listWidth : 100
								});
						this.probationmonth = new Wtf.form.ComboBox({
							hiddenName : "probationmon",
							store : this.prdstore,
							displayField : "id",
							valueField : "id",
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.Months"),
							selectOnFocus : true,
							triggerAction : "all",
							disabled : this.editperm,
							editable : false,
							mode : "local",
							labelWidth : 150,
							width : 100,
							listWidth : 100
						});
						this.probationyear = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.ProbationPeriod"),
									hiddenName : "probationyr",
									store : this.prdstore,
									displayField : "id",
									valueField : "id",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.Years"),
									selectOnFocus : true,
									disabled : this.editperm,
									triggerAction : "all",
									editable : false,
									mode : "local",
									width : 100,
									listWidth : 100
								});
						this.noticemonth = new Wtf.form.ComboBox({
							hiddenName : "noticemon",
							store : this.prdstore,
							displayField : "id",
							valueField : "id",
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.Months"),
							selectOnFocus : true,
							triggerAction : "all",
							disabled : this.editperm,
							editable : false,
							mode : "local",
							labelWidth : 150,
							width : 100,
							listWidth : 100
						});
						this.noticeyear = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.NoticePeriod"),
							hiddenName : "noticeyr",
							store : this.prdstore,
							displayField : "id",
							valueField : "id",
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.Years"),
							disabled : this.editperm,
							selectOnFocus : true,
							triggerAction : "all",
							editable : false,
							mode : "local",
							width : 100,
							listWidth : 100
						});
						this.relnship = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.RelationwithEmergencyContactPerson"),
									hiddenName : "emgreln",
									store : this.relationstore,
									displayField : "relation",
									valueField : "relation",
									selectOnFocus : true,
									triggerAction : "all",
									editable : false,
									mode : "local",
									width : 200,
									listWidth : 200
								});
						this.emptype = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.TypeofEmployment"),
									name : "emptype",
									hiddenName : "emptype",
									store : this.emptypestore,
									displayField : "type",
									valueField : "type",
									disabled : this.editperm,
									selectOnFocus : true,
									triggerAction : "all",
									editable : false,
									mode : "local",
									width : 200
								});
						this.MSComboconfig = {
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.WeeklyOff"),
							hiddenName : "weekoff",
							store : this.daystore,
							displayField : "weekday",
							valueField : "weekday",
							selectOnFocus : true,
							triggerAction : "all",
							typeAhead : true,
							mode : "local",
							width : 200,
							disabled : this.blockemployeestoedit
						}, this.daycmp = new Wtf.common.Select(Wtf.applyIf({
							multiSelect : true,
							labelSeparator : "",
							forceSelection : false
						}, this.MSComboconfig));
						this.acadGridRowSM = new Wtf.grid.CheckboxSelectionModel(
								{
									singleSelect : false
								});
						this.workexGridRowSM = new Wtf.grid.CheckboxSelectionModel(
								{
									singleSelect : false
								});
						this.qual = new Wtf.form.TextField({
							allowBlank : false,
							maxLength : 100
						});
						this.lnst = new Wtf.form.TextField({
							name : "Institute",
							allowBlank : false,
							maxLength : 255
						});
						this.yearofgrad = new Wtf.form.DateField({
							name : "yeargrd",
							allowBlank : false,
							format : "Y-m-d"
						});
						this.yearofgradfrom = new Wtf.form.DateField({
							name : "yeargrdfrm",
							allowBlank : false,
							format : "Y-m-d"
						});
						this.marks = new Wtf.form.TextField({
							name : "marks",
							allowBlank : false,
							maxLength : 15
						});
						this.org = new Wtf.form.TextField({
							name : "organisation",
							allowBlank : false,
							maxLength : 255
						});
						this.pos = new Wtf.form.TextField({
							name : "position",
							allowBlank : false,
							maxLength : 255
						});
						this.beyr = new Wtf.form.DateField({
							name : "beginyear",
							allowBlank : false,
							format : "Y-m-d"
						});
						this.endyr = new Wtf.form.DateField({
							name : "endyear",
							allowBlank : false,
							format : "Y-m-d"
						});
						this.comment = new Wtf.form.TextField({
							name : "comment",
							maxLength : 255
						});
						this.pecomment = new Wtf.form.TextField({
							name : "pecomment",
							maxLength : 255
						});
						this.peorg = new Wtf.form.TextField({
							name : "peorg",
							maxLength : 255
						});
						this.pedesig = new Wtf.form.TextField({
							name : "pedesig",
							maxLength : 255
						});
						this.pestartyr = new Wtf.form.DateField({
							name : "pestart",
							format : "Y-m-d"
						});
						this.peendyr = new Wtf.form.DateField({
							name : "peend",
							format : "Y-m-d"
						});
						this.starttime = new Wtf.form.TimeField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.StartTime"),
							name : "starttime",
							width : 200,
							forceSelection : true,
							minValue : new Date(new Date().format("M d, Y")
									+ " 8:00:00 AM"),
							maxValue : new Date(new Date().add(Date.DAY, 1)
									.format("M d, Y")
									+ " 7:45:00 AM"),
							value : "8:00 AM",
							disabled : this.blockemployeestoedit
						});
						this.endtime = new Wtf.form.TimeField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.EndTime"),
							name : "endtime",
							width : 200,
							forceSelection : true,
							minValue : new Date(new Date().format("M d, Y")
									+ " 8:00:00 AM"),
							maxValue : new Date(new Date().add(Date.DAY, 1)
									.format("M d, Y")
									+ " 7:45:00 AM"),
							value : "8:00 AM",
							disabled : this.blockemployeestoedit
						});
						this.quacombo = new Wtf.form.ComboBox({
							store : Wtf.quaStore,
							editable : false,
							name : "qualification",
							displayField : "name",
							mode : "local",
							triggerAction : "all",
							allowBlank : false
						});
						if (!Wtf.StoreMgr.containsKey("qua")) {
							Wtf.quaStore.load();
							Wtf.StoreMgr.add("qua", Wtf.quaStore)
						}
						this.training = new Wtf.Panel({
							width : 515,
							frame : false,
							border : false,
							layout : "column",
							defaults : {
								labelWidth : 150
							},
							items : [ {
								columnWidth : 0.5,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.trainyr ]
							}, {
								columnWidth : 0.5,
								frame : false,
								border : false,
								items : [ this.trainmon ]
							} ]
						});
						this.probation = new Wtf.Panel({
							width : 515,
							frame : false,
							border : false,
							layout : "column",
							defaults : {
								labelWidth : 150
							},
							items : [ {
								columnWidth : 0.5,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.probationyear ]
							}, {
								columnWidth : 0.5,
								frame : false,
								border : false,
								items : [ this.probationmonth ]
							} ]
						});
						this.notice = new Wtf.Panel({
							width : 515,
							frame : false,
							border : false,
							layout : "column",
							defaults : {
								labelWidth : 150
							},
							items : [ {
								columnWidth : 0.5,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.noticeyear ]
							}, {
								columnWidth : 0.5,
								frame : false,
								border : false,
								items : [ this.noticemonth ]
							} ]
						});
						var A = new Array();
						this.subButton1 = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									iconCls : getButtonIconCls(Wtf.btype.submitbutton),
									scope : this,
									handler : function() {
										var Q = this.dateofjoining.getValue();
										var P = this.dateofconfirm.getValue();
										if (P < Q && userroleid == 1) {
											calMsgBoxShow(165, 0)
										} else {
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.common.save.data"),
															WtfGlobal
																	.getLocaleText("hrms.common.want.to.save.changes"),
															function(R) {
																if (R != "yes") {
																	return
																}
																this
																		.saveprofile()
															}, this)
										}
									}
								});
						this.CncBtn = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							iconCls : getButtonIconCls(Wtf.btype.cancelbutton),
							scope : this,
							handler : function() {
								this.displayFormValue();
								this.acadds.load();
								this.workds.load()
							}
						});
						this.persninfo = new Wtf.form.FormPanel(
								{
									baseParams : {
										flag : 50,
										formname : "Personal",
										userid : this.lid
									},
									url : "Common/saveempprofile.common",
									layout : "column",
									bodyStyle : "background:white ",
									border : false,
									items : [
											{
												columnWidth : 0.5,
												style : "margin-top:1%;margin-left:3%",
												layout : "form",
												autoHeight : true,
												border : false,
												defaults : {
													labelWidth : 150
												},
												items : [
														{
															xtype : "fieldset",
															title : WtfGlobal
																	.getLocaleText("hrms.common.PersonalDetails"),
															width : "75%",
															height : "30%",
															style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
															items : [
																	this.userpicture,
																	this.fname,
																	this.mname,
																	this.lname,
																	this.fullname,
																	this.dob,
																	this.gender,
																	this.marState,
																	this.bloodgrp ]
														},
														{
															xtype : "fieldset",
															title : WtfGlobal
																	.getLocaleText("hrms.common.OtherDetails"),
															width : "75%",
															height : "30%",
															style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
															items : [
																	this.bankacc,
																	this.bankname,
																	this.bankbranch,
																	this.panno,
																	this.pfno,
																	this.drivingli,
																	this.passport,
																	this.exppassport ]
														} ]
											},
											this.rightperpan = new Wtf.Panel(
													{
														columnWidth : 0.45,
														border : false,
														style : "margin-top:1%",
														layout : "form",
														autoHeight : true,
														defaults : {
															labelWidth : 150
														},
														items : [
																{
																	xtype : "fieldset",
																	width : "75%",
																	height : "30%",
																	title : WtfGlobal
																			.getLocaleText("hrms.common.DependentDetails"),
																	style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
																	items : [
																			this.fathername,
																			this.fatherdob,
																			this.mothername,
																			this.motherdob,
																			this.spousename,
																			this.spousedob,
																			this.childname,
																			this.childdob,
																			this.childname1,
																			this.childdob1 ]
																},
																{
																	xtype : "fieldset",
																	width : "75%",
																	height : "25%",
																	title : WtfGlobal
																			.getLocaleText("hrms.common.KeySkills"),
																	style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
																	items : [ this.keyskills ]
																} ]
													}) ]
								});
						this.attrPanel = new Wtf.attributeComponent({
							widthValue : 200,
							configType : "Personal",
							layout : "form",
							border : false,
							refid : this.lid,
							grouper : "viewprofile",
							chk : 1
						});
						this.rightperpan
								.add(this.attrCont = new Wtf.Panel(
										{
											border : false,
											items : [ {
												xtype : "fieldset",
												title : WtfGlobal
														.getLocaleText("hrms.common.ExtraDetails"),
												border : false,
												width : "75%",
												height : "25%",
												style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
												items : [ this.attrPanel ]
											} ]
										}));
						this.attrPanel.on("closeform", function() {
							if (this.attrPanel.items.length == 0) {
								this.rightperpan.remove(this.attrCont)
							}
							this.rightperpan.doLayout()
						}, this);
						this.contactspnl = new Wtf.form.FormPanel(
								{
									baseParams : {
										flag : 50,
										formname : "Contact",
										userid : this.lid
									},
									url : "Common/saveempprofile.common",
									layout : "column",
									bodyStyle : "background:white ",
									border : false,
									items : [
											this.leftconpan = new Wtf.Panel(
													{
														columnWidth : 0.5,
														width : "50%",
														autoHeight : true,
														style : "margin-top:1%;margin-left:3%",
														layout : "form",
														defaults : {
															labelWidth : 150
														},
														border : false,
														items : [ {
															xtype : "fieldset",
															title : WtfGlobal
																	.getLocaleText("hrms.common.ContactDetails"),
															width : "75%",
															height : 500,
															style : "padding-left:50px;padding-bottom:20px;padding-top:25px",
															items : [
																	this.mobileno,
																	this.workTele,
																	this.homeTele,
																	this.workEmail,
																	this.otherEmail,
																	this.addr,
																	this.city1,
																	this.state1,
																	this.countrycombo,
																	this.permaddr,
																	this.city2,
																	this.state2,
																	this.countrycombo1,
																	this.mailaddr ]
														} ]
													}),
											{
												columnWidth : 0.45,
												border : false,
												autoHeight : true,
												style : "margin-top:1%",
												layout : "form",
												defaults : {
													labelWidth : 150
												},
												items : [
														{
															xtype : "fieldset",
															width : "75%",
															height : 300,
															title : WtfGlobal
																	.getLocaleText("hrms.common.EmergencyContactDetails"),
															style : "padding-left:50px;padding-bottom:20px;padding-top:25px",
															items : [
																	this.emergencyname,
																	this.relnship,
																	this.emergencyTele,
																	this.emergencyTele2,
																	this.emergencyTele3,
																	this.emergencyaddr ]
														},
														{
															xtype : "fieldset",
															width : "75%",
															height : 180,
															title : WtfGlobal
																	.getLocaleText("hrms.common.WorkShiftDetails"),
															style : "padding-left:50px;padding-top:25px",
															items : [
																	this.starttime,
																	this.endtime,
																	this.daycmp ]
														} ]
											} ]
								});
						this.attrPanel1 = new Wtf.attributeComponent({
							widthValue : 200,
							configType : "Contact",
							layout : "form",
							border : false,
							refid : this.lid,
							chk : 1
						});
						this.leftconpan
								.add(this.attrCont1 = new Wtf.Panel(
										{
											border : false,
											items : [ {
												xtype : "fieldset",
												border : false,
												title : WtfGlobal
														.getLocaleText("hrms.common.ExtraDetails"),
												width : "75%",
												height : "25%",
												style : "padding-left:50px;padding-bottom:20px;padding-top:10px",
												items : [ this.attrPanel1 ]
											} ]
										}));
						this.attrPanel1.on("closeform", function() {
							if (this.attrPanel1.items.length == 0) {
								this.leftconpan.remove(this.attrCont1)
							}
							this.leftconpan.doLayout()
						}, this);
						this.empdelbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.delete"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.common.DeleteRecord"),
										text : WtfGlobal
												.getLocaleText("hrms.common.Clicktodeleteselectedrecord")
									},
									disabled : true,
									handler : function() {
										this.empGridDel()
									},
									scope : this
								});
						var I = "";
						var E = new Array();
						I = Wtf.grid.EditorGridPanel;
						E.push(this.empdelbtn);
						this.EmpGridRowSM = new Wtf.grid.CheckboxSelectionModel(
								{
									singleSelect : false
								});
						var L = Wtf.data.Record.create([ {
							name : "templatename"
						}, {
							name : "payinterval"
						}, {
							name : "templateid"
						}, {
							name : "salaryflag"
						}, {
							name : "basic"
						}, {
							name : "effectivedate",
							type : "date",
							dateFormat : "Y-m-d"
						} ]);
						var O = new Wtf.data.KwlJsonReader({
							root : "data"
						}, L);
						this.assignedTemplatestore = new Wtf.data.Store(
								{
									url : "Payroll/Template/getAssignedTemplateForEmp.py",
									method : "GET",
									reader : O
								});
						var C = new Wtf.grid.ColumnModel(
								[
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.TemplateName"),
											dataIndex : "templatename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EffectiveFrom"),
											dataIndex : "effectivedate",
											sortable : true,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText({
														key : "hrms.common.BasicSalarysym",
														params : [ WtfGlobal
																.getCurrencySymbol() ]
													}),
											dataIndex : "basic",
											align : "right"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payinterval"),
											dataIndex : "payinterval",
											renderer : function(Q) {
												var P = " - ";
												switch (Q) {
												case 1:
													P = WtfGlobal
															.getLocaleText("hrms.payroll.onceamonth");
													break;
												case 2:
													P = WtfGlobal
															.getLocaleText("hrms.payroll.twiceamonth");
													break;
												case 3:
													P = WtfGlobal
															.getLocaleText("hrms.payroll.onceaweek");
													break
												}
												return P
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											width : 40,
											renderer : this.deleteRenderer
													.createDelegate(this)
										} ]);
						this.salaryTemplateGrid = new Wtf.grid.GridPanel({
							store : this.assignedTemplatestore,
							cm : C,
							border : false,
							height : 500,
							viewConfig : {
								forceFit : true
							}
						});
						this.templaterec = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "templateid"
						} ]);
						this.templateStore = new Wtf.data.Store({
							url : Wtf.req.base + "PayrollHandler.jsp",
							baseParams : {
								type : "getTemplistperDesign"
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.templaterec),
							autoLoad : false
						});
						this.templateStore
								.on(
										"load",
										function() {
											if (this.templateStore.getCount() == 0) {
												this.templateCmb.emptyText = WtfGlobal
														.getLocaleText("hrms.common.Notemplateassignedforselecteddesignation");
												this.templateCmb.reset()
											} else {
												var P = this.templateStore
														.find("id", this);
												if (P != -1) {
													this.templateCmb
															.setValue(F.record.data.templateid)
												} else {
													this.templateCmb.emptyText = WtfGlobal
															.getLocaleText("hrms.common.SelectTemplate");
													this.templateCmb.reset()
												}
											}
										}, this);
						this.templateStore.on("loadexception", function() {
							this.templateCmb.reset()
						}, this);
						this.templateStore.load();
						this.templateCmb = new Wtf.form.ComboBox(
								{
									store : this.templateStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Salarytemplate"),
									mode : "local",
									hiddenName : "templateid",
									name : "templateid",
									width : 140,
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.SelectTemplate"),
									valueField : "templateid",
									displayField : "name",
									forceSelection : true,
									triggerAction : "all",
									typeAhead : true
								});
						this.effectiveFromdtpicker = new Wtf.form.DateField({
							format : "m-d-Y",
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.EffectiveFrom")
						});
						this.basicSal = new Wtf.form.NumberField({
							width : 100,
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.BasicSalary"),
							maxLength : 10,
							allowNegative : false
						});
						this.assignTemplateBtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.AssignTemplate"),
									id : "btnsavetemp",
									handler : function() {
										if (this.effectiveFromdtpicker
												.getValue() != ""
												&& this.templateCmb.getValue() != ""
												&& this.basicSal.getValue() != ""
												&& this.effectiveFromdtpicker
														.getValue() >= this.dateofjoining
														.getValue()) {
											var P = this.assignedTemplatestore
													.find(
															"effectivedate",
															this.effectiveFromdtpicker
																	.getValue());
											if (P == -1) {
												this.assignTemplateBtn
														.disable();
												Wtf.Ajax
														.requestEx(
																{
																	url : "Payroll/Template/assignTemplateToUser.py",
																	method : "POST",
																	params : {
																		templateid : this.templateCmb
																				.getValue(),
																		effectivedate : this.effectiveFromdtpicker
																				.getValue()
																				.format(
																						"Y-m-d"),
																		basicsal : this.basicSal
																				.getValue(),
																		userid : this.lid,
																		mode : "add"
																	}
																},
																this,
																function(Q) {
																	if (!Q.success) {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						Q.msg ],
																				2)
																	} else {
																		this.assignedTemplatestore
																				.load({
																					params : {
																						userid : this.lid
																					}
																				});
																		this.templateCmb
																				.reset();
																		this.effectiveFromdtpicker
																				.reset();
																		this.basicSal
																				.setValue(0);
																		this.assignTemplateBtn
																				.enable()
																	}
																},
																function(Q) {
																	this.assignTemplateBtn
																			.enable()
																})
											} else {
												Wtf.MessageBox
														.alert(
																WtfGlobal
																		.getLocaleText("hrms.common.Dateselectionerror"),
																WtfGlobal
																		.getLocaleText("hrms.common.Dateselectionerror.Message"))
											}
										} else {
											if (this.effectiveFromdtpicker
													.getValue() < this.dateofjoining
													.getValue()) {
												calMsgBoxShow(191, 2)
											} else {
												if (this.basicSal.getValue() == "") {
													this.basicSal.markInvalid()
												}
												calMsgBoxShow(28, 2)
											}
										}
										this.assignTemplateBtn.enable()
									},
									scope : this
								});
						this.orgpanel = new Wtf.form.FormPanel(
								{
									baseParams : {
										flag : 50,
										formname : "Organizational",
										userid : this.lid
									},
									url : "Common/saveempprofile.common",
									layout : "column",
									bodyStyle : "background:white ",
									border : false,
									items : [
											{
												columnWidth : 0.49,
												style : "margin-top:1%;margin-left:3%",
												width : "50%",
												layout : "form",
												autoHeight : true,
												border : false,
												defaults : {
													labelWidth : 150
												},
												items : [ {
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.common.OrganizationalDetails"),
													width : "75%",
													height : 560,
													style : "padding-left:50px;padding-bottom:20px;padding-top:25px",
													items : [
															this.empid,
															this.depCmb,
															this.desigCmb,
															this.costcenter,
															this.frequencyStoreCmb,
															this.managerCmb,
															this.emptype,
															this.commid,
															this.workbranch,
															this.workbranchaddr,
															this.branchcity,
															this.branchcountrycombo,
															this.dateofjoining,
															this.dateofconfirm,
															this.dateofrelieve,
															this.training,
															this.probation,
															this.notice ]
												} ]
											},
											this.rightorgpan = new Wtf.Panel(
													{
														columnWidth : 0.48,
														border : false,
														style : "margin-top:1%;",
														layout : "form",
														autoHeight : true,
														defaults : {
															labelWidth : 150
														},
														items : [ {
															xtype : "fieldset",
															title : WtfGlobal
																	.getLocaleText("hrms.common.SalaryTemplates"),
															width : "90%",
															hidden : B,
															height : 500,
															layout : "border",
															style : "padding-bottom:20px;padding-top:25px",
															items : [
																	{
																		layout : "column",
																		bodyStyle : "background-color:#FFFFFF;",
																		region : "north",
																		height : 50,
																		border : false,
																		items : [
																				{
																					columnWidth : 0.32,
																					border : false,
																					items : [ this.templateCmb ]
																				},
																				{
																					columnWidth : 0.23,
																					border : false,
																					items : [ this.basicSal ]
																				},
																				{
																					columnWidth : 0.24,
																					border : false,
																					items : [ this.effectiveFromdtpicker ]
																				},
																				{
																					columnWidth : 0.2,
																					border : false,
																					items : [ this.assignTemplateBtn ]
																				} ]
																	},
																	{
																		region : "center",
																		bodyStyle : "background-color:#FFFFFF;",
																		layout : "fit",
																		items : [ this.salaryTemplateGrid ]
																	} ]
														} ]
													}) ]
								});
						this.assignedTemplatestore.load({
							params : {
								userid : this.lid,
								grouper : "viewprofile"
							}
						});
						this.salaryTemplateGrid
								.on(
										"rowclick",
										function(Q, P, R) {
											if (R
													.getTarget("div[class='pwndCommon gridCancel']")) {
												Wtf.MessageBox
														.show({
															title : WtfGlobal
																	.getLocaleText("hrms.common.confirm"),
															msg : deleteMsgBox("template"),
															buttons : Wtf.MessageBox.YESNO,
															icon : Wtf.MessageBox.QUESTION,
															scope : this,
															fn : function(T) {
																if (T == "yes") {
																	calMsgBoxShow(
																			201,
																			4,
																			true);
																	var U = Q.store
																			.getAt(P);
																	var S = new Date();
																	if (U
																			.get("salaryflag") == "0") {
																		Wtf.Ajax
																				.requestEx(
																						{
																							url : "Payroll/Template/assignTemplateToUser.py",
																							method : "POST",
																							params : {
																								templateid : U
																										.get("templateid"),
																								effectivedate : U
																										.get(
																												"effectivedate")
																										.format(
																												"Y-m-d"),
																								userid : this.lid,
																								mode : "delete"
																							}
																						},
																						this,
																						function(
																								V) {
																							if (V.msg == "invalid") {
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.warning"),
																												WtfGlobal
																														.getLocaleText("hrms.common.deletePrevGenSalforSamePayCycle") ],
																										2)
																							} else {
																								Q.store
																										.remove(U);
																								this.assignedTemplatestore
																										.load({
																											params : {
																												userid : this.lid
																											}
																										});
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.success"),
																												WtfGlobal
																														.getLocaleText("hrms.common.Templatedeletedsuccessfully") ],
																										0)
																							}
																							Q.store
																									.remove(U);
																							this.assignedTemplatestore
																									.load({
																										params : {
																											userid : this.lid
																										}
																									})
																						},
																						function(
																								V) {
																						})
																	} else {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						WtfGlobal
																								.getLocaleText("hrms.common.SalalreadyGenCantUnassignEmployee") ],
																				2)
																	}
																}
															}
														})
											}
										}, this);
						this.attrPanel2 = new Wtf.attributeComponent({
							widthValue : 200,
							configType : "Organizational",
							layout : "form",
							border : false,
							refid : this.lid,
							chk : 1
						});
						this.rightorgpan
								.add(this.attrCont2 = new Wtf.Panel(
										{
											border : false,
											items : [ {
												xtype : "fieldset",
												border : false,
												title : WtfGlobal
														.getLocaleText("hrms.common.ExtraDetails"),
												width : "84%",
												height : "25%",
												style : "padding-left:50px;padding-bottom:20px;padding-top:25px",
												items : [ this.attrPanel2 ]
											} ]
										}));
						this.attrPanel2.on("closeform", function() {
							if (this.attrPanel2.items.length == 0) {
								this.rightorgpan.remove(this.attrCont2)
							}
							this.rightorgpan.doLayout()
						}, this);
						this.work = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "organisation"
						}, {
							name : "position"
						}, {
							name : "beginyear",
							type : "date"
						}, {
							name : "endyear",
							type : "date"
						}, {
							name : "comment"
						} ]);
						this.workds = new Wtf.data.Store({
							method : "POST",
							pruneModifiedRecords : true,
							baseParams : {
								flag : 51,
								userid : this.lid,
								type : "work"
							},
							url : Wtf.req.base + "hrms.jsp",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.work)
						});
						this.workcm = new Wtf.grid.ColumnModel(
								[
										this.workexGridRowSM,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Organization"),
											dataIndex : "organisation",
											editor : this.org
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Position"),
											dataIndex : "position",
											editor : this.pos
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "beginyear",
											editor : this.beyr,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "endyear",
											editor : this.endyr,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Comment"),
											dataIndex : "comment",
											editor : this.comment
										} ]);
						this.acad = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "qualification"
						}, {
							name : "institution"
						}, {
							name : "gradyear",
							type : "date"
						}, {
							name : "marks"
						}, {
							name : "qualificationin"
						}, {
							name : "yeargrdfrm",
							type : "date"
						} ]);
						this.acadds = new Wtf.data.Store({
							method : "POST",
							pruneModifiedRecords : true,
							baseParams : {
								flag : 51,
								userid : this.lid,
								type : "acad"
							},
							url : Wtf.req.base + "hrms.jsp",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.acad)
						});
						this.acadcm = new Wtf.grid.ColumnModel(
								[
										this.acadGridRowSM,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Qualification"),
											dataIndex : "qualification",
											editor : this.quacombo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Specialization"),
											dataIndex : "qualificationin",
											editor : this.qual
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Institution"),
											dataIndex : "institution",
											editor : this.lnst
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "yeargrdfrm",
											editor : this.yearofgradfrom,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "gradyear",
											editor : this.yearofgrad,
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Marks.Grade"),
											dataIndex : "marks",
											editor : new Wtf.form.TextField({
												name : "marks",
												allowBlank : false
											})
										} ]);
						var K = new Array(
								this.addAcadBtn = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.add"),
											iconCls : getButtonIconCls(Wtf.btype.addbutton),
											tooltip : {
												title : WtfGlobal
														.getLocaleText("hrms.common.AddRecord"),
												text : WtfGlobal
														.getLocaleText("hrms.common.Clicktoaddrecord")
											},
											handler : function() {
												this.acadrec()
											},
											scope : this
										}),
								"-",
								this.delAcadBtn = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											iconCls : getButtonIconCls(Wtf.btype.deletebutton),
											tooltip : {
												title : WtfGlobal
														.getLocaleText("hrms.common.DeleteRecord"),
												text : WtfGlobal
														.getLocaleText("hrms.common.Clicktodeleteselectedrecord")
											},
											id : "BtnAcadDel" + this.id,
											disabled : true,
											handler : function() {
												this.acadGridDel()
											},
											scope : this
										}));
						var H = new Array(
								this.addWorkexBtn = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.add"),
											iconCls : getButtonIconCls(Wtf.btype.addbutton),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.Clicktoaddrecord"),
											handler : function() {
												this.workrec()
											},
											scope : this
										}),
								"-",
								this.delWorkexBtn = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											iconCls : getButtonIconCls(Wtf.btype.deletebutton),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.Clicktodeleteselectedrecord"),
											id : "BtnWorkexDel" + this.id,
											disabled : true,
											handler : function() {
												this.workexGridDel()
											},
											scope : this
										}));
						this.expPanel = new Wtf.Panel(
								{
									border : false,
									title : WtfGlobal
											.getLocaleText("hrms.common.QualificationandEmploymentDetails"),
									layout : "border",
									bodyStyle : "background:white;",
									iconCls : getTabIconCls(Wtf.etype.hrmsqualification),
									items : [
											{
												region : "west",
												split : true,
												width : "50%",
												frame : true,
												style : "padding:20px 0px;",
												title : WtfGlobal
														.getLocaleText("hrms.common.EmployeeQualification"),
												layout : "fit",
												border : false,
												tbar : K,
												items : [ this.acadGrid = new Wtf.grid.EditorGridPanel(
														{
															border : false,
															autoDestroy : true,
															ds : this.acadds,
															cm : this.acadcm,
															sm : this.acadGridRowSM,
															clicksToEdit : 1,
															viewConfig : {
																forceFit : true
															}
														}) ]
											},
											{
												region : "center",
												title : WtfGlobal
														.getLocaleText("hrms.common.EmploymentDetails"),
												border : false,
												frame : true,
												style : "padding:20px 0px;",
												layout : "fit",
												labelWidth : 136,
												items : [ this.workGrid = new Wtf.grid.EditorGridPanel(
														{
															border : false,
															autoDestroy : true,
															ds : this.workds,
															cm : this.workcm,
															sm : this.workexGridRowSM,
															clicksToEdit : 1,
															viewConfig : {
																forceFit : true
															}
														}) ],
												tbar : H
											} ]
								});
						A.push("->");
						A.push(this.subButton1);
						this.docpanel = new Wtf.document_panel({
							title : WtfGlobal
									.getLocaleText("hrms.common.documents"),
							layout : "fit",
							border : false,
							lid : this.lid,
							manager : this.manager,
							id : "filepanel" + this.id,
							iconCls : getTabIconCls(Wtf.etype.hrmsdocument)
						});
						var N = 1;
						if (this.report) {
							N = 0
						}
						var J = "";
						if (Wtf.cmpPref.annmng) {
							J = Wtf.AppraisalReport
						} else {
							J = Wtf.finalReport
						}
						this.appraisalPanel = new J(
								{
									id : "myfinalreport",
									title : '<div wtf:qtip="'
											+ WtfGlobal
													.getLocaleText("hrms.common.AppraisalReport.tooltip")
											+ '">'
											+ WtfGlobal
													.getLocaleText("hrms.common.AppraisalReport")
											+ "</div>",
									layout : "fit",
									border : false,
									reviewappraisal : false,
									myfinalReport : true,
									iconCls : getTabIconCls(Wtf.etype.hrmsreport)
								});
						if (Wtf.cmpPref.payrollbase == "Date") {
							this.salarypanel = new Wtf.MyPayslip(
									{
										id : this.id + "myPayslipEmpProfile",
										layout : "fit",
										title : "<div wtf:qtip='"
												+ WtfGlobal
														.getLocaleText("hrms.payroll.my.payslip.tooltip")
												+ "'>"
												+ WtfGlobal
														.getLocaleText("hrms.payroll.my.payslip")
												+ "</div>",
										border : false,
										selectedUserID : this.lid,
										iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip)
									})
						} else {
							this.salarypanel = new Wtf.viewmypayslip({
								id : this.id + "viewmypayslip",
								layout : "fit",
								title : WtfGlobal
										.getLocaleText("hrms.common.Payslips"),
								profile : true,
								userid : this.lid,
								border : false,
								iconCls : getTabIconCls(Wtf.etype.hrmsreport)
							})
						}
						this.tabPanel = new Wtf.TabPanel(
								{
									activeTab : 0,
									border : false,
									items : [
											this.persninfopan = new Wtf.Panel(
													{
														border : false,
														title : WtfGlobal
																.getLocaleText("hrms.common.PersonalDetails"),
														autoScroll : true,
														iconCls : getTabIconCls(Wtf.etype.hrmspersonaldata)
													}),
											this.contactspnlpan = new Wtf.Panel(
													{
														border : false,
														title : WtfGlobal
																.getLocaleText("hrms.common.ContactandWorkShiftDetails"),
														autoScroll : true,
														iconCls : getTabIconCls(Wtf.etype.hrmscontactinfo)
													}),
											this.orgpanelpan = new Wtf.Panel(
													{
														border : false,
														title : WtfGlobal
																.getLocaleText("hrms.common.OrganizationalDetails"),
														autoScroll : true,
														iconCls : getTabIconCls(Wtf.etype.hrmsorganization)
													}), this.expPanel,
											this.docpanel ],
									bbar : A
								});
						if (WtfGlobal.CmpEnableDisable(Wtf.subCode,
								Wtf.appraisal)) {
							if (!this.manager) {
								this.tabPanel.add(this.appraisalPanel)
							}
						}
						if (WtfGlobal
								.CmpEnableDisable(Wtf.subCode, Wtf.payroll)) {
							if (!WtfGlobal.EnableDisable(Wtf.UPerm.payroll,
									Wtf.Perm.payroll.view)) {
								this.tabPanel.add(this.salarypanel)
							}
						}
						this.add(this.tabPanel);
						this.tabPanel.doLayout();
						this.tabPanel.on("beforetabchange",
								function(Q, P) {
									if (P.id == "filepanel" + this.id
											|| P.id == "myfinalreport"
											|| P.id == this.id
													+ "viewmypayslip"
											|| P.id == this.id
													+ "myPayslipEmpProfile") {
										this.tabPanel.getBottomToolbar()
												.setVisible(false)
									} else {
										this.tabPanel.getBottomToolbar()
												.setVisible(true)
									}
									this.tabPanel.syncSize()
								}, this);
						this.persninfopan.on("activate", function() {
							this.persninfopan.add(this.persninfo);
							this.subButton1.setDisabled(false);
							this.persninfopan.doLayout()
						}, this);
						this.orgpanelpan.on("activate", function() {
							this.orgpanelpan.add(this.orgpanel);
							this.doLayout()
						}, this);
						var M = false;
						this.expPanel.on("activate", function() {
							this.subButton1.setDisabled(false);
							if (!M) {
								this.acadds.load();
								this.workds.load()
							}
							M = true;
							this.doLayout()
						}, this);
						this.contactspnlpan.on("activate", function() {
							this.subButton1.setDisabled(false);
							this.contactspnlpan.add(this.contactspnl);
							this.doLayout()
						}, this);
						this.docpanel.on("activate", function() {
							this.doLayout()
						}, this);
						this.appraisalPanel.on("activate", function() {
							this.doLayout()
						}, this);
						this.salarypanel.on("activate", function() {
							this.doLayout()
						}, this);
						this.marState.on("select", this.enableMarstatus, this);
						this.profstore.on("load", this.displayFormValue, this);
						this.acadds.on("load", this.acadrec, this);
						this.workds.on("load", this.workrec, this);
						this.mname.on("blur", this.setfullname, this);
						this.fname.on("blur", this.setfullname, this);
						this.lname.on("blur", this.setfullname, this);
						this.acadGrid.on("afteredit", this.fillacadGridValue,
								this);
						this.workGrid.on("afteredit", this.fillworkGridValue,
								this);
						this.workGrid.on("validateedit", this.validate, this);
						this.acadGrid.on("validateedit", this.validateacad,
								this);
						this.workexGridRowSM.on("selectionchange", function() {
							if (this.workexGridRowSM.hasSelection()) {
								this.delWorkexBtn.enable()
							} else {
								this.delWorkexBtn.disable()
							}
						}, this);
						this.acadGridRowSM.on("selectionchange", function() {
							if (this.acadGridRowSM.hasSelection()) {
								this.delAcadBtn.enable()
							} else {
								this.delAcadBtn.disable()
							}
						}, this)
					},
					acadrec : function() {
						this.acadnewrec = new this.acad({
							id : "",
							qualification : "",
							qualificationin : "",
							institution : "",
							gradyear : "",
							marks : ""
						});
						this.acadds.add(this.acadnewrec)
					},
					workrec : function() {
						this.worknewrec = new this.work({
							id : "",
							organisation : "",
							position : "",
							beginyear : "",
							endyear : "",
							comment : ""
						});
						this.workds.add(this.worknewrec)
					},
					perec : function() {
						this.penewrec = new this.employer({
							id : "",
							organisation : "",
							position : "",
							beginyear : "",
							endyear : "",
							comment : ""
						});
						this.empds.add(this.penewrec)
					},
					fillacadGridValue : function(A) {
						if (A.row == this.acadds.getCount() - 1) {
							this.acadrec()
						}
						this.mainflag = 1
					},
					fillworkGridValue : function(A) {
						if (A.row == this.workds.getCount() - 1) {
							this.workrec()
						}
						this.mainflag = 1
					},
					fillempGridValue : function(A) {
						if (A.row == this.empds.getCount() - 1) {
							this.perec()
						}
						this.mainflag = 1
					},
					validate : function(A) {
						if (A.column == 4) {
							if (A.record.get("beginyear") > A.value) {
								return false
							}
						}
					},
					validateacad : function(A) {
						if (A.column == 5) {
							if (A.record.get("yeargrdfrm") > A.value) {
								return false
							}
						}
					},
					validateemployer : function(A) {
						if (A.column == 4) {
							if (A.record.get("beginyear") > A.value) {
								return false
							}
						}
					},
					saveprofile : function() {
						calMsgBoxShow(200, 4, true);
						this.errflag = 0;
						this.errmsg = "";
						this.formflag = 1;
						if (this.persninfo.getForm().isValid()
								&& this.contactspnl.getForm().isValid()
								&& this.orgpanel.getForm().isValid()) {
							if (this.attrPanel.isValidate()
									&& this.attrPanel1.isValidate()
									&& this.attrPanel2.isValidate()) {
								if (this.lid == this.managerCmb.getValue()
										&& this.roleid != 1 && userroleid == 1) {
									calMsgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.common.CannotAssignEmployeesasOwnManager") ],
											2)
								} else {
									calMsgBoxShow(200, 4, true);
									this.persnFormSubmit()
								}
							} else {
								calMsgBoxShow(203, 2)
							}
						} else {
							calMsgBoxShow(5, 2)
						}
					},
					persnFormSubmit : function() {
						this.persninfo.getForm().submit({
							success : function(B, A) {
								this.contactsFormSubmit()
							},
							failure : function(B, A) {
								this.errflag = this.errflag + 1;
								this.errmsg = WtfGlobal.getLocaleText({
									key : "hrms.common.errorPersonalDetails",
									params : [ this.errmsg ]
								}) + ", ";
								this.contactsFormSubmit()
							},
							scope : this
						})
					},
					contactsFormSubmit : function() {
						if (this.contactspnlpan.items) {
							this.formflag = this.formflag + 1;
							this.contactspnl
									.getForm()
									.submit(
											{
												success : function(B, A) {
													this.orgFormSubmit()
												},
												failure : function(B, A) {
													this.errflag = this.errflag + 1;
													this.errmsg = WtfGlobal
															.getLocaleText({
																key : "hrms.common.errorContactandWorkShiftDetails",
																params : [ this.errmsg ]
															})
															+ ", ";
													this.orgFormSubmit()
												},
												scope : this
											})
						} else {
							this.orgFormSubmit()
						}
					},
					orgFormSubmit : function() {
						if (this.orgpanelpan.items) {
							this.formflag = this.formflag + 1;
							this.orgpanel
									.getForm()
									.submit(
											{
												success : function(f, a) {
													this.qualNEmpSubmit()
												},
												failure : function(f, a) {
													this.errflag = this.errflag + 1;
													var res = eval("("
															+ a.response.responseText
															+ ")");
													if (!res.success) {
														this.errmsg = WtfGlobal
																.getLocaleText({
																	key : "hrms.common.errorOrganizationalDetailsMsg",
																	params : [
																			this.errmsg,
																			res.msg ]
																})
																+ ", "
													} else {
														this.errmsg = WtfGlobal
																.getLocaleText({
																	key : "hrms.common.errorOrganizationalDetails",
																	params : [ this.errmsg ]
																})
																+ ", "
													}
													this.qualNEmpSubmit()
												},
												scope : this
											})
						} else {
							this.qualNEmpSubmit()
						}
					},
					qualNEmpSubmit : function() {
						var jsondata = "";
						var jsondata1 = "";
						var jsondata2 = "";
						var vflag = 0;
						var saveflag = 1;
						var saveflag1 = 1;
						var saveflag2 = 1;
						if (this.workds.getCount() > 0) {
							var modifiedwork = this.workds.getModifiedRecords();
							for (i = 0; i < modifiedwork.length; i++) {
								if (modifiedwork[i].get("organisation") == ""
										|| modifiedwork[i].get("position") == ""
										|| modifiedwork[i].get("beginyear") == ""
										|| modifiedwork[i].get("endyear") == "") {
									vflag = 0;
									this.formflag = this.formflag + 1;
									this.errflag = this.errflag + 1;
									this.errmsg = WtfGlobal
											.getLocaleText({
												key : "hrms.common.errorQualificationandEmploymentDetails",
												params : [ this.errmsg ]
											})
											+ ", ";
									calMsgBoxShow(28, 0, false, 250);
									saveflag1 = 0;
									break
								} else {
									vflag = 1;
									saveflag1 = 1
								}
							}
							if (vflag == 1) {
								for ( var i = 0; i < this.workds.getCount() - 1; i++) {
									jsondata += "{'id':'"
											+ this.workds.getAt(i).get("id")
											+ "',";
									jsondata += "'organisation':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.workds
															.getAt(i)
															.get("organisation"))
											+ "',";
									jsondata += "'position':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.workds
															.getAt(i).get(
																	"position"))
											+ "',";
									jsondata += "'beginyear':'"
											+ WtfGlobal
													.convertToGenericDate(this.workds
															.getAt(i)
															.get("beginyear"))
											+ "',";
									jsondata += "'endyear':'"
											+ WtfGlobal
													.convertToGenericDate(this.workds
															.getAt(i).get(
																	"endyear"))
											+ "',";
									jsondata += "'type':'work',";
									jsondata += "'comment':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.workds
															.getAt(i).get(
																	"comment"))
											+ "'},"
								}
								var trmLen = jsondata.length - 1;
								var finalwork = jsondata.substr(0, trmLen)
							}
						}
						if (this.acadds.getCount() > 0) {
							var modifiedacad = this.acadds.getModifiedRecords();
							for (i = 0; i < modifiedacad.length; i++) {
								if (modifiedacad[i].get("qualification") == ""
										|| modifiedacad[i].get("institution") == ""
										|| modifiedacad[i].get("gradyear") == ""
										|| modifiedacad[i].get("marks") == ""
										|| modifiedacad[i]
												.get("qualifiacationin") == ""
										|| modifiedacad[i].get("yeargrdfrm") == "") {
									vflag = 0;
									this.formflag = this.formflag + 1;
									this.errflag = this.errflag + 1;
									this.errmsg = WtfGlobal
											.getLocaleText({
												key : "hrms.common.errorQualificationandEmploymentDetails",
												params : [ this.errmsg ]
											})
											+ ", ";
									calMsgBoxShow(28, 0, false, 250);
									saveflag = 0;
									break
								} else {
									vflag = 1;
									saveflag = 1
								}
							}
							if (vflag == 1) {
								for ( var j = 0; j < this.acadds.getCount() - 1; j++) {
									jsondata1 += "{'id':'"
											+ this.acadds.getAt(j).get("id")
											+ "',";
									jsondata1 += "'qualification':'"
											+ this.acadds.getAt(j).get(
													"qualification") + "',";
									jsondata1 += "'institution':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.acadds
															.getAt(j)
															.get("institution"))
											+ "',";
									jsondata1 += "'gradyear':'"
											+ WtfGlobal
													.convertToGenericDate(this.acadds
															.getAt(j).get(
																	"gradyear"))
											+ "',";
									jsondata1 += "'yeargrdfrm':'"
											+ WtfGlobal
													.convertToGenericDate(this.acadds
															.getAt(j)
															.get("yeargrdfrm"))
											+ "',";
									jsondata1 += "'qualificationin':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.acadds
															.getAt(j)
															.get(
																	"qualificationin"))
											+ "',";
									jsondata1 += "'type':'acad',";
									jsondata1 += "'marks':'"
											+ WtfGlobal
													.onlySinglequoateRenderer(this.acadds
															.getAt(j).get(
																	"marks"))
											+ "'},"
								}
								var trmLen1 = jsondata1.length - 1;
								var finalacad = jsondata1.substr(0, trmLen1)
							}
						}
						if (saveflag == 1 && saveflag1 == 1 && saveflag2 == 1) {
							this.formflag = this.formflag + 1;
							Wtf.Ajax
									.requestEx(
											{
												url : "Common/saveempprofile.common",
												params : {
													flag : 50,
													jsondatawk : finalwork,
													jsondatacad : finalacad,
													userid : this.lid
												}
											},
											this,
											function(response) {
												var res = eval("(" + response
														+ ")");
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																res.msg ], 1);
												this.successOrFail();
												this.workds.load();
												this.acadds.load()
											},
											function(response) {
												this.errflag = this.errflag + 1;
												this.errmsg = WtfGlobal
														.getLocaleText({
															key : "hrms.common.errorQualificationandEmploymentDetails",
															params : [ this.errmsg ]
														})
														+ ", ";
												calMsgBoxShow(27, 1);
												this.successOrFail()
											})
						} else {
							this.successOrFail()
						}
					},
					successOrFail : function() {
						if (this.errflag == this.formflag) {
							calMsgBoxShow(27, 1)
						} else {
							if (this.errflag == 0) {
								msgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.success"),
												WtfGlobal
														.getLocaleText("hrms.Messages.calMsgBoxShow122") ],
										1)
							} else {
								this.errmsg = this.errmsg.substring(0, Math
										.max(0, this.errmsg.length - 2));
								msgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.success"),
												WtfGlobal
														.getLocaleText({
															key : "hrms.common.ProfileUpdatedSuccessExceptError",
															params : [ "<br>"
																	+ this.errmsg ]
														}) ], 1)
							}
						}
					},
					displayFormValue : function() {
						if (this.profstore.getCount() > 0) {
							var B = this.profstore.getAt(0);
							var C = B.data.image;
							var A = Wtf.get(this.id + "userpicture");
							A.dom.src = C;
							Wtf.get(this.id + "aboutUser").dom.innerHTML = '<div style="float:right;">'
									+ B.data.aboutuser + "</div>";
							this.fname.setValue(B.data.fname);
							this.mname.setValue(B.data.middlename);
							this.lname.setValue(B.data.lname);
							this.fullname.setValue(B.data.fullname);
							this.dob.setValue(B.data.dob);
							this.gender.setValue(B.data.gender);
							this.marState.setValue(B.data.marriage);
							this.bloodgrp.setValue(B.data.bloodgrp);
							this.bankacc.setValue(B.data.bankacc);
							this.bankname.setValue(B.data.bankname);
							this.bankbranch
									.setValue(unescape(B.data.bankbranch));
							this.panno.setValue(B.data.panno);
							this.pfno.setValue(B.data.pfno);
							this.drivingli.setValue(B.data.drvlicense);
							this.passport.setValue(B.data.passportno);
							this.exppassport.setValue(B.data.exppassport);
							this.fathername.setValue(B.data.fathername);
							this.fatherdob.setValue(B.data.fatherdob);
							this.mothername.setValue(B.data.mothername);
							this.motherdob.setValue(B.data.motherdob);
							this.spousename.setValue(B.data.spousename);
							this.spousedob.setValue(B.data.spousedob);
							this.childname.setValue(B.data.child1name);
							this.childdob.setValue(B.data.child1dob);
							this.childname1.setValue(B.data.child2name);
							this.childdob1.setValue(B.data.child2dob);
							if (B.data.mobno != "") {
								this.mobileno.setValue(B.data.mobno)
							}
							if (B.data.workno != "") {
								this.workTele.setValue(B.data.workno)
							}
							if (B.data.landno != "") {
								this.homeTele.setValue(B.data.landno)
							}
							this.workEmail.setValue(B.data.workmail);
							this.otherEmail.setValue(B.data.othermail);
							this.addr.setValue(unescape(B.data.presentaddr));
							this.city1.setValue(B.data.presentcity);
							this.state1.setValue(B.data.presentstate);
							this.countrycombo.setValue(B.data.precountry);
							this.permaddr.setValue(unescape(B.data.permaddr));
							this.city2.setValue(B.data.permcity);
							this.state2.setValue(B.data.permstate);
							this.countrycombo1.setValue(B.data.permcountry);
							this.mailaddr.setValue(unescape(B.data.mailaddr));
							this.emergencyname.setValue(B.data.emgname);
							this.relnship.setValue(B.data.emgreln);
							if (B.data.emghome != "") {
								this.emergencyTele.setValue(B.data.emghome)
							}
							if (B.data.emgwork != "") {
								this.emergencyTele2
										.setValue(unescape(B.data.emgwork))
							}
							if (B.data.emgmob != "") {
								this.emergencyTele3.setValue(B.data.emgmob)
							}
							this.emergencyaddr
									.setValue(unescape(B.data.emgaddr));
							this.empid.setValue(B.data.empid);
							this.depCmb.setValue(B.data.department);
							this.desigCmb.setValue(B.data.designationid);
							this.costcenter.setValue(B.data.costcenter);
							if (B.data.frequency == -1) {
								this.frequencyStoreCmb.setValue("")
							} else {
								this.frequencyStoreCmb
										.setValue(B.data.frequency)
							}
							this.templateStore.baseParams = {
								type : "getTemplistperDesign"
							};
							this.templateStore.load({
								params : {
									desigid : B.data.designationid
								}
							});
							this.managerCmb.setValue(B.data.managername);
							this.emptype.setValue(B.data.emptype);
							this.dateofjoining.setValue(B.data.joindate);
							this.dateofconfirm.setValue(B.data.confirmdate);
							this.dateofrelieve.setValue(B.data.relievedate);
							this.trainmon.setValue(B.data.trainingmon);
							this.trainyr.setValue(B.data.trainingyr);
							this.probationmonth.setValue(B.data.probationmon);
							this.probationyear.setValue(B.data.probationyr);
							this.noticemonth.setValue(B.data.noticemon);
							this.noticeyear.setValue(B.data.noticeyr);
							this.commid.setValue(B.data.commid);
							this.workbranch.setValue(B.data.branchcode);
							this.workbranchaddr.setValue(B.data.branchaddr);
							this.branchcity.setValue(B.data.branchcity);
							this.branchcountrycombo
									.setValue(B.data.brachcountry);
							this.keyskills.setValue(unescape(B.data.keyskills));
							if (B.data.wkstarttime != "") {
								this.starttime.setValue(B.data.wkstarttime)
							}
							if (B.data.wkendtime != "") {
								this.endtime.setValue(B.data.wkendtime)
							}
							if (B.data.weekoff != "") {
								this.daycmp.setValue(B.data.weekoff)
							}
						}
						this.enableMarstatus()
					},
					setfullname : function() {
						this.fullname.setValue(this.fname.getValue() + " "
								+ this.mname.getValue() + " "
								+ this.lname.getValue())
					},
					workexGridDel : function() {
						if (this.workexGridRowSM.hasSelection()) {
							this.delkey1 = this.workexGridRowSM.getSelections();
							this.ids1 = [];
							for ( var A = 0; A < this.delkey1.length; A++) {
								this.ids1.push(this.delkey1[A].get("id"))
							}
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("employment detail"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "hrms.jsp",
																	params : {
																		flag : 53,
																		ids : this.ids1
																	}
																},
																this,
																function() {
																	for ( var C = 0; C < this.delkey1.length; C++) {
																		this.workds
																				.remove(this.delkey1[C])
																	}
																	calMsgBoxShow(
																			120,
																			0)
																},
																function() {
																	calMsgBoxShow(
																			121,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					acadGridDel : function() {
						if (this.acadGridRowSM.hasSelection()) {
							this.delkey = this.acadGridRowSM.getSelections();
							this.ids = [];
							for ( var A = 0; A < this.delkey.length; A++) {
								this.ids.push(this.delkey[A].get("id"))
							}
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : deleteMsgBox("qualification detail"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "hrms.jsp",
																	params : {
																		flag : 53,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	for ( var C = 0; C < this.delkey.length; C++) {
																		this.acadds
																				.remove(this.delkey[C])
																	}
																	calMsgBoxShow(
																			116,
																			0)
																},
																function() {
																	calMsgBoxShow(
																			117,
																			0)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					empGridDel : function() {
						if (this.EmpGridRowSM.hasSelection()) {
							this.delkey2 = this.EmpGridRowSM.getSelections();
							this.ids2 = [];
							for ( var A = 0; A < this.delkey2.length; A++) {
								this.ids2.push(this.delkey2[A].get("id"))
							}
							Wtf.MessageBox.show({
								title : WtfGlobal
										.getLocaleText("hrms.common.confirm"),
								msg : deleteMsgBox("employee detail"),
								icon : Wtf.MessageBox.QUESTION,
								buttons : Wtf.MessageBox.YESNO,
								scope : this,
								fn : function(B) {
									if (B == "yes") {
										Wtf.Ajax.requestEx({
											url : Wtf.req.base + "hrms.jsp",
											params : {
												flag : 53,
												ids : this.ids2
											}
										}, this, function() {
											calMsgBoxShow(142, 0);
											this.empds.load()
										}, function() {
											calMsgBoxShow(117, 0)
										})
									}
								}
							})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					enableMarstatus : function() {
						var A = this.marState.getValue();
						if (A == 2) {
							this.spousename.enable();
							this.spousedob.enable();
							this.childname.enable();
							this.childdob.enable();
							this.childname1.enable();
							this.childdob1.enable()
						} else {
							this.spousename.disable();
							this.spousedob.disable();
							this.childname.disable();
							this.childdob.disable();
							this.childname1.disable();
							this.childdob1.disable();
							this.spousename.setValue("");
							this.spousedob.setValue("");
							this.childname.setValue("");
							this.childdob.setValue("");
							this.childname1.setValue("");
							this.childdob1.setValue("")
						}
					},
					deleteRenderer : function(B, A, D, C) {
						if (D.data.id != "-1") {
							return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.common.DeleteRecord")
									+ "></div></div>"
						}
					}
				});
Wtf.empmnt = function(A) {
	Wtf.apply(this, A);
	Wtf.empmnt.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.empmnt,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.empmnt.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.empmnt.superclass.onRender.call(this, A);
						this.empGrid();
						this.getAdvanceSearchComponent();
						this.exportinfo();
						this.getConfigData();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						this.MembergridPanel = new Wtf.common.KWLListPanel(
								{
									id : "membergridpanel" + this.id,
									title : "<div style='height:14px;width:14px;background-color:#99CC99;float:left;margin-top:3px;'></div>&nbsp; : "
											+ WtfGlobal
													.getLocaleText("hrms.admin.Profilependingforapproval"),
									autoLoad : false,
									autoScroll : true,
									paging : false,
									layout : "fit",
									items : [ this.allempGrid ]
								});
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ this.MembergridPanel ]
							} ]
						});
						this.add(this.pan)
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					getConfigData : function() {
						this.count = 0;
						Wtf.Ajax
								.requestEx(
										{
											url : "CustomCol/getConfigData.do",
											method : "POST",
											params : {
												configFlag : "true",
												configType : "Personal",
												flag : 218,
												grouper : "usergrid"
											}
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												this.count = responseObj.data.length;
												for ( var i = 0; i < responseObj.data.length; i++) {
													this.searchparams[this.searchparams.length] = {
														name : responseObj.data[i].fieldname,
														dbname : responseObj.data[i].colnum,
														header : responseObj.data[i].fieldname,
														xtype : "textfield",
														iscustom : true
													}
												}
											}
										}, function() {
										});
						Wtf.Ajax
								.requestEx(
										{
											url : "CustomCol/getConfigData.do",
											method : "POST",
											params : {
												configFlag : "true",
												configType : "Contact",
												flag : 218,
												grouper : "usergrid"
											}
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												this.count = responseObj.data.length;
												for ( var i = 0; i < responseObj.data.length; i++) {
													this.searchparams[this.searchparams.length] = {
														name : responseObj.data[i].fieldname,
														dbname : responseObj.data[i].colnum,
														header : responseObj.data[i].fieldname,
														xtype : "textfield",
														iscustom : true
													}
												}
											}
										}, function() {
										});
						Wtf.Ajax
								.requestEx(
										{
											url : "CustomCol/getConfigData.do",
											method : "POST",
											params : {
												configFlag : "true",
												configType : "Organizational",
												flag : 218,
												grouper : "usergrid",
												firequery : "1"
											}
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												this.count = responseObj.data.length;
												for ( var i = 0; i < responseObj.data.length; i++) {
													this.searchparams[this.searchparams.length] = {
														name : responseObj.data[i].fieldname,
														dbname : responseObj.data[i].colnum,
														header : responseObj.data[i].fieldname,
														xtype : "textfield",
														iscustom : true
													}
												}
											}
											this.loaddata()
										}, function() {
										})
					},
					empGrid : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "designation"
						}, {
							name : "designationid"
						}, {
							name : "department"
						}, {
							name : "departmentname"
						}, {
							name : "firstname"
						}, {
							name : "lastname"
						}, {
							name : "image"
						}, {
							name : "emailid"
						}, {
							name : "lastlogin",
							type : "date"
						}, {
							name : "aboutuser"
						}, {
							name : "address"
						}, {
							name : "contactnumber"
						}, {
							name : "manager"
						}, {
							name : "managerid"
						}, {
							name : "salary"
						}, {
							name : "roleid",
							mapping : "role"
						}, {
							name : "accno"
						}, {
							name : "rolename"
						}, {
							name : "employeeid"
						}, {
							name : "status"
						}, {
							name : "fullname"
						}, {
							name : "reviewer"
						}, {
							name : "reviewerid"
						}, {
							name : "templateid"
						}, {
							name : "frequency"
						} ]);
						this.empGDS = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "count"
							}, this.record),
							url : "Common/getAllUserDetailsHrms.common",
							baseParams : {
								mode : 114
							}
						});
						calMsgBoxShow(202, 4, true);
						this.empGDS.load({
							params : {
								grouper : "usergrid",
								start : 0,
								limit : 15
							}
						});
						this.empGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.searchparams = [
								{
									name : "fname",
									dbname : "u.firstName",
									header : WtfGlobal
											.getLocaleText("hrms.common.FirstName"),
									xtype : "textfield"
								},
								{
									name : "mname",
									dbname : "emp.middlename",
									header : WtfGlobal
											.getLocaleText("hrms.common.MiddleName"),
									xtype : "textfield"
								},
								{
									name : "lname",
									dbname : "u.lastName",
									header : WtfGlobal
											.getLocaleText("hrms.common.LastName"),
									xtype : "textfield"
								},
								{
									name : "DoB",
									dbname : "emp.DoB",
									header : WtfGlobal
											.getLocaleText("hrms.common.DoB"),
									xtype : "datefield"
								},
								{
									name : "gender",
									dbname : "emp.gender",
									header : WtfGlobal
											.getLocaleText("hrms.common.Gender"),
									xtype : "combo",
									cname : "gender"
								},
								{
									name : "marital",
									dbname : "emp.marriage",
									header : WtfGlobal
											.getLocaleText("hrms.common.MaritalStatus"),
									xtype : "combo",
									cname : "marital"
								},
								{
									name : "bldgrp",
									dbname : "emp.bloodgrp",
									header : WtfGlobal
											.getLocaleText("hrms.common.BloodGroup"),
									xtype : "textfield"
								},
								{
									name : "bankname",
									dbname : "emp.bankname",
									header : WtfGlobal
											.getLocaleText("hrms.common.BankName"),
									xtype : "textfield"
								},
								{
									name : "bankbranch",
									dbname : "emp.bankbranch",
									header : WtfGlobal
											.getLocaleText("hrms.common.BankBranch"),
									xtype : "textfield"
								},
								{
									name : "city1",
									dbname : "emp.presentcity",
									header : WtfGlobal
											.getLocaleText("hrms.common.PresentCity"),
									xtype : "textfield"
								},
								{
									name : "state1",
									dbname : "emp.presentstate",
									header : WtfGlobal
											.getLocaleText("hrms.common.PresentState"),
									xtype : "textfield"
								},
								{
									name : "precountry",
									dbname : "emp.presentcountry.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.PresentCountry"),
									xtype : "combo",
									cname : "country"
								},
								{
									name : "city2",
									dbname : "emp.permcity",
									header : WtfGlobal
											.getLocaleText("hrms.common.PermanentCity"),
									xtype : "textfield"
								},
								{
									name : "state2",
									dbname : "emp.permstate",
									header : WtfGlobal
											.getLocaleText("hrms.common.PermanentState"),
									xtype : "textfield"
								},
								{
									name : "permcountry",
									dbname : "emp.permcountry.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.PermanentCountry"),
									xtype : "combo",
									cname : "country"
								},
								{
									name : "department",
									dbname : "ua.department.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.department"),
									xtype : "combo",
									cname : "department"
								},
								{
									name : "designationid",
									dbname : "ua.designationid.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.designation"),
									xtype : "combo",
									cname : "designation"
								},
								{
									name : "managername",
									dbname : "concat(mgr.assignman.firstName,' ',mgr.assignman.lastName)",
									header : WtfGlobal
											.getLocaleText("hrms.performance.appraiser"),
									xtype : "textfield"
								},
								{
									name : "appraisername",
									dbname : "concat(rev.reviewer.firstName,' ',rev.reviewer.lastName)",
									header : WtfGlobal
											.getLocaleText("hrms.common.Reviewer"),
									xtype : "textfield"
								},
								{
									name : "Dtojoin",
									dbname : "emp.joindate",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.joining.date"),
									xtype : "datefield"
								},
								{
									name : "Dtoconfirm",
									dbname : "emp.confirmdate",
									header : WtfGlobal
											.getLocaleText("hrms.common.ConfirmationDate"),
									xtype : "datefield"
								},
								{
									name : "brachcode",
									dbname : "emp.branchcode",
									header : WtfGlobal
											.getLocaleText("hrms.common.BranchCode"),
									xtype : "textfield"
								},
								{
									name : "brachcity",
									dbname : "emp.branchcity",
									header : WtfGlobal
											.getLocaleText("hrms.common.BranchCity"),
									xtype : "textfield"
								},
								{
									name : "brachcountry",
									dbname : "emp.branchcountry.id",
									header : WtfGlobal
											.getLocaleText("hrms.common.BranchCountry"),
									xtype : "combo",
									cname : "country"
								},
								{
									name : "keyskills",
									dbname : "emp.keyskills",
									header : WtfGlobal
											.getLocaleText("hrms.common.Keyskills"),
									xtype : "textfield"
								},
								{
									name : "wkstart",
									dbname : "emp.wkstarttime",
									header : WtfGlobal
											.getLocaleText("hrms.common.WorkShiftStartTime"),
									xtype : "timefield"
								},
								{
									name : "wkend",
									dbname : "emp.wkendtime",
									header : WtfGlobal
											.getLocaleText("hrms.common.WorkShiftEndTime"),
									xtype : "timefield"
								},
								{
									name : "weeklyoff",
									dbname : "emp.weekoff",
									header : WtfGlobal
											.getLocaleText("hrms.common.WeeklyOff"),
									xtype : "combo",
									cname : "weeklyoff"
								},
								{
									name : "organisation",
									dbname : "exp.organization",
									header : WtfGlobal
											.getLocaleText("hrms.common.PreviousEmployer"),
									xtype : "textfield"
								},
								{
									name : "position",
									dbname : "exp.position",
									header : WtfGlobal
											.getLocaleText("hrms.common.PreviousPosition"),
									xtype : "textfield"
								},
								{
									name : "qualification",
									dbname : "exp.qualification",
									header : WtfGlobal
											.getLocaleText("hrms.common.Qualification"),
									xtype : "combo",
									cname : "qualification"
								},
								{
									name : "institution",
									dbname : "exp.institution",
									header : WtfGlobal
											.getLocaleText("hrms.common.EducationalInstitute"),
									xtype : "textfield"
								},
								{
									name : "marks",
									dbname : "exp.marks",
									header : WtfGlobal
											.getLocaleText("hrms.common.Marks.Grade"),
									xtype : "textfield"
								},
								{
									name : "qualificationin",
									dbname : "exp.qaulin",
									header : WtfGlobal
											.getLocaleText("hrms.common.Specialization"),
									xtype : "textfield"
								} ];
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											autoWidth : true,
											pdfwidth : 50,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.UserName"),
											dataIndex : "username",
											pdfwidth : 60,
											autoWidth : true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											autoWidth : true,
											pdfwidth : 100,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											autoWidth : true,
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											autoWidth : true,
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EmailAddress"),
											dataIndex : "emailid",
											autoSize : true,
											sortable : true,
											pdfwidth : 100,
											renderer : WtfGlobal.renderEmailTo,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.ProfileStatus"),
											dataIndex : "status",
											autoSize : true,
											pdfwidth : 60,
											align : "center",
											sortable : true,
											groupable : true,
											renderer : function(E) {
												if (E == "Pending") {
													return ('<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending") + "</FONT>")
												} else {
													if (E == "Approved") {
														return ('<FONT COLOR="green">'
																+ WtfGlobal
																		.getLocaleText("hrms.common.Approved") + "</FONT>")
													} else {
														if (E == "In Process") {
															return ('<FONT COLOR="red">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.in.process") + "</FONT>")
														} else {
															if (E == "On Hold") {
																return ('<FONT COLOR="DarkGoldenRod">'
																		+ WtfGlobal
																				.getLocaleText("hrms.recruitment.on.hold") + "</FONT>")
															} else {
																if (E == "Incomplete") {
																	return ('<FONT COLOR="Brown">'
																			+ WtfGlobal
																					.getLocaleText("hrms.recruitment.InComplete") + "</FONT>")
																} else {
																	return E
																}
															}
														}
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.AssignedAppraiser"),
											dataIndex : "manager",
											autoSize : true,
											sortable : true,
											pdfwidth : 120,
											groupable : true,
											renderer : function(E) {
												return '<div wtf:qtip="' + E
														+ '">' + E + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.AssignedReviewer"),
											dataIndex : "reviewer",
											autoSize : true,
											sortable : true,
											pdfwidth : 120,
											groupable : true,
											renderer : function(E) {
												return '<div wtf:qtip="' + E
														+ '">' + E + "</div>"
											}
										} ]);
						this.approvebtn = new Wtf.Action(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.ApproveProfile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.ApproveProfile.tooltip"),
									id : this.id + "approved",
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									disabled : true,
									scope : this,
									handler : this.approve_status
								});
						var D = new Array();
						var C = new Array();
						var A = [];
						A
								.push(
										this.viewEditProfile = new Wtf.Action(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.ViewEditProfile"),
													iconCls : getButtonIconCls(Wtf.btype.viewbutton),
													id : this.id
															+ "viewprofilerejected",
													tooltip : WtfGlobal
															.getLocaleText("hrms.common.ViewEditProfile.tooltip"),
													disabled : true,
													scope : this,
													handler : this.viewprofile
												}), this.approvebtn);
						A
								.push(this.documents = new Wtf.Action(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.documents"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.documents.tooltip"),
											iconCls : getButtonIconCls(Wtf.btype.documentbutton),
											id : this.id + "empdocs",
											disabled : true,
											scope : this,
											handler : this.documents
										}));
						A
								.push(this.terminationOfService = new Wtf.Action(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.TerminationofService"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.TerminationofService.tooltip"),
											iconCls : "pwnd terminationIcon",
											disabled : true,
											scope : this,
											handler : this.termination
										}));
						A
								.push(this.personnelHistory = new Wtf.Action(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.PersonnelHistory"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.PersonnelHistory.tooltip"),
											iconCls : "pwnd emphistoryIcon",
											disabled : true,
											scope : this,
											handler : this.emphistory
										}));
						if (!isMalaysianCompany) {
							A
									.push(this.employeeTaxDeclaration = new Wtf.Action(
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.user.tax.declaration"),
												tooltip : WtfGlobal
														.getLocaleText("hrms.payroll.user.tax.declaration"),
												iconCls : "pwndHRMS incometaxuserformIcon",
												disabled : true,
												scope : this,
												handler : function() {
													var F = this.sm2
															.getSelections();
													var E = F[0].get("userid");
													if (E != undefined) {
														payrollDeclarationForm(E)
													}
												}
											}))
						}
						D
								.push(
										"-",
										this.reset = new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.empGDS
																.load({
																	params : {
																		grouper : "usergrid",
																		start : 0,
																		limit : this.allempGrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.allempGrid.id)
																.setValue("")
													}
												}));
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
								Wtf.Perm.useradmin.manageuser)) {
							D
									.push(
											"-",
											this.personnelActions = new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.admin.PersonnelActions"),
														iconCls : "pwndCommon personalActionIcon",
														menu : new Wtf.menu.Menu(
																{
																	items : A
																})
													}))
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
								Wtf.Perm.useradmin.assignperm)) {
							if (!isStandAlone) {
								this.edituser = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.EditUser"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.admin.EditUser.tooltip"),
											id : this.id + "EditUser",
											disabled : true,
											scope : this,
											iconCls : getButtonIconCls(Wtf.btype.editbutton),
											handler : function() {
												this.showUserForm(true)
											}
										});
								D.push("-", this.edituser)
							}
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.useradmin,
								Wtf.Perm.useradmin.assignmanager)) {
							C
									.push(this.assignManBtn = new Wtf.Toolbar.Button(
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.AssignAppraiser"),
												tooltip : WtfGlobal
														.getLocaleText("hrms.admin.AssignAppraiser.tooltip"),
												iconCls : "pwndHRMS managerbuttonIcon",
												id : this.id
														+ "assignmanagerbtn",
												allowDomMove : false,
												disabled : true,
												scope : this,
												handler : function() {
													this.assignManager(true,
															false)
												}
											}))
						}
						C
								.push(
										"-",
										this.assignRevBtn = new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.AssignReviewer"),
													iconCls : "pwndCommon profilebuttonIcon",
													tooltip : WtfGlobal
															.getLocaleText("hrms.admin.AssignReviewer.tooltip"),
													id : this.id
															+ "assignreviewerbtn",
													allowDomMove : false,
													disabled : true,
													scope : this,
													handler : function() {
														this.assignManager(
																false, false)
													}
												}));
						this.assigncompbtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.assign.component"),
									iconCls : "pwndCommon profilebuttonIcon",
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.assign.default.component.settings.selected.employee"),
									id : this.id + "assigncompbtn",
									allowDomMove : false,
									disabled : true,
									scope : this,
									hidden : Wtf.cmpPref.payrollbase == "Date" ? false
											: true,
									handler : function() {
										this.assignComponent()
									}
								});
						this.assignfreqbtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.assign.frequency"),
									iconCls : "pwndCommon profilebuttonIcon",
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.assign.payroll.frequency.selected.employee"),
									id : this.id + "assignfreqbtn",
									allowDomMove : false,
									disabled : true,
									scope : this,
									hidden : Wtf.cmpPref.payrollbase == "Date" ? false
											: true,
									handler : function() {
										this.assignFrequency()
									}
								});
						if (Wtf.cmpPref.payrollbase == "Date") {
							C.push("-", this.assigncompbtn);
							C.push("-", this.assignfreqbtn)
						}
						C
								.push(
										"-",
										this.assignsalbtn = new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.Administration.AssignSalaryAuthorization"),
													iconCls : "pwndCommon profilebuttonIcon",
													tooltip : WtfGlobal
															.getLocaleText("hrms.Administration.AssignSalaryAuthorization.tooltip"),
													allowDomMove : false,
													scope : this,
													handler : function() {
														this.assignManager(
																false, true)
													}
												}));
						var B = [];
						B
								.push(this.newEmployeesReport = new Wtf.Action(
										{
											text : WtfGlobal
													.getLocaleText("hrms.admin.NewEmployeesReport"),
											iconCls : getButtonIconCls(Wtf.btype.reportbutton),
											id : this.id + "joineerepbtn",
											disabled : false,
											scope : this,
											handler : function() {
												this.joineeReport()
											}
										}));
						B
								.push(this.designationChangesReport = new Wtf.Action(
										{
											text : WtfGlobal
													.getLocaleText("hrms.admin.DesignationChangesReport"),
											iconCls : getButtonIconCls(Wtf.btype.reportbutton),
											id : this.id + "desigchngbtn",
											disabled : false,
											scope : this,
											handler : function() {
												this.desigChngReport()
											}
										}));
						D
								.push(
										"-",
										this.reports = new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.Reports"),
													iconCls : getButtonIconCls(Wtf.btype.reportbutton),
													tooltip : WtfGlobal
															.getLocaleText("hrms.admin.Reports.tooltip"),
													menu : new Wtf.menu.Menu({
														items : B
													})
												}));
						D
								.push(
										"-",
										this.AdvanceSearchBtn = new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.advanced.search"),
													id : "advanced3",
													scope : this,
													tooltip : WtfGlobal
															.getLocaleText("hrms.admin.AdvanceSearch.tooltip"),
													handler : this.configurAdvancedSearch,
													iconCls : "pwnd searchtabpane"
												}));
						if (isStandAlone) {
							D.push("-", this.getUserManagementBtns())
						}
						D.push("->", "-",
								this.ExportUserInfoBtn = new Wtf.exportButton({
									obj : this,
									menuItem : {
										csv : true,
										pdf : true,
										rowPdf : true
									},
									userinfo : true,
									get : 3,
									url : "Common/exportUserInfo.common",
									filename : this.title
								}));
						this.allempGrid = new Wtf.KwlGridPanel({
							border : false,
							id : this.id + "qualifiedgr",
							store : this.empGDS,
							cm : this.cm,
							sm : this.sm2,
							loadMask : true,
							displayInfo : true,
							enableColumnHide : false,
							trackMouseOver : true,
							clicksToEdit : 1,
							stripeRows : true,
							searchLabel : " ",
							searchLabelSeparator : " ",
							searchEmptyText : WtfGlobal
									.getLocaleText("hrms.admin.grid.search"),
							searchField : "fullname",
							tbar : D,
							bbar : C,
							serverSideSearch : true,
							viewConfig : {
								forceFit : true,
								getRowClass : function(E) {
									if (E.data.status == "Pending") {
										return "green-row"
									}
								}
							}
						});
						this.sm2
								.on(
										"selectionchange",
										function() {
											this.deleteUser.setDisabled(false);
											if (this.sm2.getCount() == 0) {
												this.deleteUser
														.setDisabled(true);
												this.viewEditProfile
														.setDisabled(true);
												this.documents
														.setDisabled(true);
												this.terminationOfService
														.setDisabled(true);
												if (!isMalaysianCompany) {
													this.employeeTaxDeclaration
															.setDisabled(true)
												}
												this.personnelHistory
														.setDisabled(true);
												this.approvebtn
														.setDisabled(true);
												this.edituser.setDisabled(true);
												this.assignManBtn
														.setDisabled(true);
												this.assignRevBtn
														.setDisabled(true);
												this.assigncompbtn
														.setDisabled(true);
												this.assignfreqbtn
														.setDisabled(true)
											} else {
												if (this.sm2.getCount() == 1) {
													this.viewEditProfile
															.setDisabled(false);
													this.documents
															.setDisabled(false);
													this.terminationOfService
															.setDisabled(false);
													if (!isMalaysianCompany) {
														this.employeeTaxDeclaration
																.setDisabled(false)
													}
													this.personnelHistory
															.setDisabled(false);
													this.approvebtn
															.setDisabled(false);
													this.edituser
															.setDisabled(false);
													this.assignManBtn
															.setDisabled(false);
													this.assignRevBtn
															.setDisabled(false);
													this.assigncompbtn
															.setDisabled(false);
													this.assignfreqbtn
															.setDisabled(false)
												} else {
													if (this.sm2.getCount() > 1) {
														this.viewEditProfile
																.setDisabled(true);
														this.documents
																.setDisabled(true);
														this.terminationOfService
																.setDisabled(false);
														if (!isMalaysianCompany) {
															this.employeeTaxDeclaration
																	.setDisabled(true)
														}
														this.personnelHistory
																.setDisabled(true);
														this.approvebtn
																.setDisabled(false);
														this.edituser
																.setDisabled(true);
														this.assignManBtn
																.setDisabled(true);
														this.assignRevBtn
																.setDisabled(true);
														this.assigncompbtn
																.setDisabled(true);
														this.assignfreqbtn
																.setDisabled(false)
													}
												}
											}
										}, this)
					},
					exportinfo : function() {
						var D, C = 1;
						var E = this.allempGrid.getColumnModel();
						this.pdfStore = new Wtf.data.Store({});
						for (D = 1; D < E.getColumnCount(); D++) {
							if (E.isHidden(D) != undefined
									|| E.getColumnHeader(D) == ""
									|| E.getDataIndex(D) == "") {
								continue
							} else {
								var F = E.config[D].align;
								var G;
								if (F == undefined) {
									F = "center"
								}
								if (E.config[D].title == undefined) {
									G = E.config[D].dataIndex
								} else {
									G = E.config[D].title
								}
								this.newPdfRec = new Wtf.data.Record({
									header : G,
									title : E.config[D].header,
									width : E.config[D].pdfwidth,
									align : F,
									index : C
								});
								this.pdfStore.insert(this.pdfStore.getCount(),
										this.newPdfRec);
								C++
							}
						}
						var B = [ "accno", "lastname", "contactnumber",
								"rolename", "alternatecontactnumber",
								"aboutuser", "salary", "fax", "updatedon",
								"lastlogin", "firstname", "createdon",
								"pannumber", "ssnnumber", "address", "dob",
								"gender", "bloodgrp", "fathername",
								"mothername", "passportno", "joindate",
								"confirmdate", "middlename", "keyskills",
								"wkstarttime", "wkendtime", "weekoff" ];
						var A = [
								WtfGlobal.getLocaleText("hrms.common.acc.no"),
								WtfGlobal.getLocaleText("hrms.common.LastName"),
								WtfGlobal
										.getLocaleText("hrms.common.contact.number"),
								WtfGlobal.getLocaleText("hrms.common.RoleName"),
								WtfGlobal
										.getLocaleText("hrms.common.alternate.contact.number"),
								WtfGlobal
										.getLocaleText("hrms.common.about.user"),
								WtfGlobal.getLocaleText("hrms.common.Salary"),
								WtfGlobal.getLocaleText("hrms.common.fax"),
								WtfGlobal
										.getLocaleText("hrms.common.Updatedon"),
								WtfGlobal
										.getLocaleText("hrms.common.last.login"),
								WtfGlobal
										.getLocaleText("hrms.common.FirstName"),
								WtfGlobal
										.getLocaleText("hrms.common.CreatedOn"),
								WtfGlobal
										.getLocaleText("hrms.common.pan.number"),
								WtfGlobal
										.getLocaleText("hrms.common.ssn.number"),
								WtfGlobal
										.getLocaleText("hrms.recruitment.profile.Address"),
								WtfGlobal.getLocaleText("hrms.common.DoB"),
								WtfGlobal.getLocaleText("hrms.common.Gender"),
								WtfGlobal
										.getLocaleText("hrms.common.BloodGroup"),
								WtfGlobal
										.getLocaleText("hrms.common.father.name"),
								WtfGlobal
										.getLocaleText("hrms.common.mother.name"),
								WtfGlobal
										.getLocaleText("hrms.common.PassportNo"),
								WtfGlobal
										.getLocaleText("hrms.recruitment.joining.date"),
								WtfGlobal
										.getLocaleText("hrms.common.ConfirmationDate"),
								WtfGlobal
										.getLocaleText("hrms.common.MiddleName"),
								WtfGlobal
										.getLocaleText("hrms.common.KeySkills"),
								WtfGlobal
										.getLocaleText("hrms.common.week.starttime"),
								WtfGlobal
										.getLocaleText("hrms.common.week.endtime"),
								WtfGlobal.getLocaleText("hrms.common.week.off") ];
						for (D = 0; D < B.length; D++) {
							this.newPdfRec = new Wtf.data.Record({
								header : B[D],
								title : A[D],
								width : 60,
								align : F,
								index : C
							});
							this.pdfStore.insert(this.pdfStore.getCount(),
									this.newPdfRec);
							C++
						}
						this.grid = this.allempGrid
					},
					viewprofile : function() {
						var D = false;
						var G = this.sm2.getSelections();
						var F = (G[0].get("firstname") + " " + G[0]
								.get("lastname"));
						var E = G[0].get("userid");
						var B = G[0].get("roleid");
						var A = Wtf.getCmp("empmanagement");
						var C = Wtf.getCmp("empmntprofile" + E);
						if (C == null) {
							C = new Wtf.myProfileWindow(
									{
										title : WtfGlobal
												.getLocaleText({
													key : "hrms.admin.employeesProfile",
													params : [ F ]
												}),
										closable : true,
										id : "empmntprofile" + E,
										layout : "fit",
										editperm : D,
										blockemployeestoedit : false,
										lid : E,
										roleid : B,
										manager : true,
										report : false,
										Grid : this.allempGrid,
										showTemplate : Wtf.cmpPref.payrollbase == "Date" ? false
												: true,
										border : false,
										iconCls : "pwnd myProfileIcon"
									});
							A.add(C)
						}
						A.setActiveTab(C);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					documents : function() {
						var E = this.sm2.getSelections();
						var D = (E[0].get("firstname") + " " + E[0]
								.get("lastname"));
						var C = E[0].get("userid");
						var A = Wtf.getCmp("empmanagement");
						var B = Wtf.getCmp("empfilepanel" + C);
						if (B == null) {
							B = new Wtf.document_panel({
								layout : "fit",
								border : false,
								title : WtfGlobal.getLocaleText({
									key : "hrms.admin.employeesDocuments",
									params : [ D ]
								}),
								lid : C,
								id : "empfilepanel" + C,
								manager : true,
								closable : true,
								iconCls : "pwndCommon documenttabIcon"
							});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					approve_status : function() {
						var C = [];
						var B = this.sm2.getSelections();
						var D = true;
						for ( var E = 0; E < B.length; E++) {
							if (B[E].data.status != "Pending") {
								D = false
							}
						}
						if (D) {
							var A = this.sm2.getSelections();
							for (E = 0; E < A.length; E++) {
								C.push(A[E].get("userid"))
							}
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax.requestEx({
								url : "Common/approveprofile.common",
								params : {
									flag : 404,
									emp_ids : C
								}
							}, this, function() {
								calMsgBoxShow(70, 0, false, 250);
								this.empGDS.load({
									params : {
										start : 0,
										limit : this.allempGrid.pag.pageSize,
										ss : Wtf.getCmp(
												"Quick" + this.allempGrid.id)
												.getValue()
									}
								})
							}, function() {
								calMsgBoxShow(27, 1)
							})
						} else {
							calMsgBoxShow(148, 0);
							this.sm2.clearSelections()
						}
					},
					showUserForm : function(B) {
						var C = null;
						if (B) {
							if (this.allempGrid.getSelectionModel()
									.hasSelection() == false
									|| this.allempGrid.getSelectionModel()
											.getCount() > 1) {
								Wtf.MessageBox
										.alert(
												WtfGlobal
														.getLocaleText("hrms.common.EditUser"),
												WtfGlobal
														.getLocaleText("hrms.common.EditUser.msg"));
								return
							}
							C = this.allempGrid.getSelectionModel()
									.getSelected()
						}
						var A = new Wtf.common.CreateUser({
							isEdit : B,
							record : C
						});
						A.on("save", this.genSuccessResponse, this);
						A.on("notsave", this.genFailureResponse, this)
					},
					assignManager : function(C, E) {
						var B = "";
						var A = "";
						var D = this.allempGrid.getSelectionModel()
								.getSelections();
						if (C) {
							B = WtfGlobal
									.getLocaleText("hrms.common.AssignAppraiser");
							A = D[0].get("userid")
						} else {
							if (E) {
								B = WtfGlobal
										.getLocaleText("hrms.Administration.AssignSalaryAuthorization")
							} else {
								B = WtfGlobal
										.getLocaleText("hrms.common.AssignReviewer");
								A = D[0].get("userid")
							}
						}
						this.recWindow = new Wtf.assignManagerWin({
							iconCls : getButtonIconCls(Wtf.btype.winicon),
							layout : "fit",
							closable : true,
							width : 760,
							title : B,
							height : 600,
							border : false,
							empGDS : this.empGDS,
							modal : true,
							userid : A,
							scope : this,
							plain : true,
							allempGrid : this.allempGrid,
							managerF : C,
							salaryManagerF : E
						});
						this.recWindow.show()
					},
					assignComponent : function() {
						var A = "";
						var C = this.allempGrid.getSelectionModel()
								.getSelections();
						A = C[0].get("userid");
						var B = C[0].get("frequency");
						if (B == -1) {
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.admin.assign.frequency.selected.resource") ],
									0)
						} else {
							this.compWindow = new Wtf.assignComponentWin(
									{
										iconCls : getButtonIconCls(Wtf.btype.winicon),
										layout : "fit",
										closable : true,
										width : 860,
										title : WtfGlobal
												.getLocaleText("hrms.payroll.assign.payroll.component"),
										height : 600,
										border : false,
										empGDS : this.empGDS,
										modal : true,
										userid : A,
										frequency : B,
										scope : this,
										plain : true,
										allempGrid : this.allempGrid
									});
							this.compWindow.show()
						}
					},
					assignFrequency : function() {
						var A = "";
						var B = this.allempGrid.getSelectionModel()
								.getSelections();
						this.empSelected = new Wtf.data.Store(this.allempGrid
								.getStore().initialConfig);
						this.empSelected.add(B);
						this.compWindow = new Wtf.AssignFrequency(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									closable : true,
									width : 600,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.assign.frequency"),
									height : 500,
									border : false,
									modal : true,
									empGDS : this.empSelected,
									id : "assign_frequency_window",
									scope : this,
									emparr : B,
									grid : this.allempGrid
								});
						this.compWindow.show()
					},
					saveassignManager : function() {
						if (this.recGrid.getSelectionModel().getCount() == 0) {
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.common.pleaseSelectRecFirst") ],
									1)
						} else {
							this.user = this.allempGrid.getSelectionModel()
									.getSelections();
							this.userids = [];
							this.managerid = [];
							this.assignflag = true;
							for ( var B = 0; B < this.user.length; B++) {
								this.userids.push(this.user[B].get("userid"))
							}
							this.manager = this.recGrid.getSelectionModel()
									.getSelections();
							for ( var A = 0; A < this.manager.length; A++) {
								this.managerid.push(this.manager[A]
										.get("userid"))
							}
							for (B = 0; B < this.user.length; B++) {
								for (A = 0; A < this.manager.length; A++) {
									if (this.user[B].get("userid") == this.manager[A]
											.get("userid")) {
										this.assignflag = false;
										break
									}
								}
							}
							if (!this.assignflag) {
								this.recWindow.close();
								msgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.warning"),
												WtfGlobal
														.getLocaleText("hrms.common.PleaseSelValidRecord") ],
										1)
							} else {
								var D = this.sm2.getSelected();
								var C = this.empGDS.indexOf(D);
								this.sm2.clearSelections();
								WtfGlobal.highLightRow(this.allempGrid,
										"33CC33", 5, C);
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : Wtf.req.base
															+ "hrms.jsp",
													params : {
														flag : 137,
														userid : this.userids,
														managerid : this.managerid,
														isManager : true
													}
												},
												this,
												function() {
													this.recWindow.close();
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.admin.Appraiserassignedsuccessfully") ],
															1, 1);
													var E = new Wtf.util.DelayedTask(
															function() {
																this.empGDS
																		.load({
																			params : {
																				start : 0,
																				limit : this.allempGrid.pag.pageSize,
																				ss : Wtf
																						.getCmp(
																								"Quick"
																										+ this.allempGrid.id)
																						.getValue()
																			}
																		})
															}, this);
													E.delay(1000)
												},
												function() {
													Wtf.Msg
															.alert(
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.admin.Errorinassigningmanager"))
												})
							}
						}
					},
					genSuccessResponse : function(A) {
						var D = this.sm2.getSelected();
						var C = this.empGDS.indexOf(D);
						this.sm2.clearSelections();
						WtfGlobal.highLightRow(this.allempGrid, "33CC33", 5, C);
						if (A.success == true) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.success"),
											A.msg ], 0);
							var B = new Wtf.util.DelayedTask(function() {
								this.empGDS.load({
									params : {
										start : this.allempGrid.pag.cursor,
										limit : this.allempGrid.pag.pageSize,
										ss : Wtf.getCmp(
												"Quick" + this.allempGrid.id)
												.getValue()
									}
								})
							}, this);
							B.delay(1000)
						}
						this.enable()
					},
					genFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						msgBoxShow(
								[ WtfGlobal.getLocaleText("hrms.common.error"),
										B ], 2);
						this.enable()
					},
					assignReviewer : function() {
						this.assignReviewer = new Wtf.assignReviewer(
								{
									modal : true,
									title : WtfGlobal
											.getLocaleText("hrms.common.AssignReviewer"),
									resizable : false,
									layout : "fit",
									empGDS : this.empGDS,
									allempGrid : this.allempGrid,
									sm2 : this.sm2
								});
						this.assignReviewer.show()
					},
					termination : function() {
						this.terWindow = new Wtf.terService(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									closable : true,
									resizable : false,
									title : WtfGlobal
											.getLocaleText("hrms.common.TerminationofService"),
									border : false,
									grids : this.allempGrid,
									id : this.id + "termwindow",
									modal : true,
									scope : this,
									plain : true
								});
						this.terWindow.show()
					},
					emphistory : function() {
						var E = this.sm2.getSelections();
						var D = (E[0].get("firstname") + " " + E[0]
								.get("lastname"));
						var C = E[0].get("userid");
						var A = Wtf.getCmp("empmanagement");
						var B = Wtf.getCmp("historypanel" + C);
						if (B == null) {
							B = new Wtf.emphistory({
								layout : "fit",
								border : false,
								title : WtfGlobal.getLocaleText({
									key : "hrms.admin.employeesHistory",
									params : [ D ]
								}),
								lid : C,
								id : "historypanel" + C,
								closable : true,
								iconCls : "pwnd emphistoryTabIcon"
							});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					joineeReport : function() {
						var A = Wtf.getCmp("empmanagement");
						var B = Wtf.getCmp("joineerep");
						if (B == null) {
							B = new Wtf.NewJoineesReport(
									{
										layout : "fit",
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.admin.NewEmployeesReport"),
										id : "joineerep",
										closable : true,
										iconCls : getTabIconCls(Wtf.etype.crm)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					desigChngReport : function() {
						var A = Wtf.getCmp("empmanagement");
						var B = Wtf.getCmp("desigchngrep");
						if (B == null) {
							B = new Wtf.DesigChngReport(
									{
										layout : "fit",
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.admin.DesignationChangesReport"),
										id : "desigchngrep",
										closable : true,
										iconCls : getTabIconCls(Wtf.etype.crm)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								})
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 1
							}
						});
						this.AdvanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.empGDS.baseParams = {
							mode : 114
						};
						this.empGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.AdvanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.empGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson
						};
						this.empGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.empGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson
						};
						this.empGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 1
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					},
					getUserManagementBtns : function() {
						this.createUser = new Wtf.Action({
							text : WtfGlobal
									.getLocaleText("hrms.common.CreateUser"),
							iconCls : "pwnd setModerator",
							id : this.id + "createUser",
							scope : this,
							handler : function() {
								new Wtf.common.ManageUser({
									id : "createUserForm",
									url : "Common/standAloneSaveUser.common",
									isEdit : false,
									grid : this.allempGrid,
									store : this.empGDS
								}).show()
							}
						});
						this.edituser = new Wtf.Action({
							text : WtfGlobal
									.getLocaleText("hrms.common.EditUser"),
							id : this.id + "EditUser",
							disabled : true,
							scope : this,
							iconCls : "pwnd editusericon",
							handler : function() {
								this.showUserForm(true)
							}
						});
						this.deleteUser = new Wtf.Action(
								{
									text : WtfGlobal
											.getLocaleText("hrms.stanalone.delete.user"),
									iconCls : "deleteModerator",
									id : this.id + "deleteUser",
									scope : this,
									disabled : true,
									handler : function() {
										var userids = new Array();
										var rec = this.sm2.getSelections();
										for ( var i = 0; i < this.sm2
												.getCount(); i++) {
											if (loginid == rec[i].data.userid) {
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.warning"),
																WtfGlobal
																		.getLocaleText("hrms.stanalone.user.delete.error.msg") ],
														0);
												return
											} else {
												userids
														.push(rec[i].data.userid)
											}
										}
										Wtf.MessageBox
												.confirm(
														WtfGlobal
																.getLocaleText("hrms.stanalone.delete.user"),
														WtfGlobal
																.getLocaleText("hrms.stanalone.delete.user.msg"),
														function(btn) {
															if (btn != "yes") {
																return
															}
															Wtf.Ajax
																	.requestEx(
																			{
																				url : "Common/standAloneDeleteUser.common",
																				params : {
																					userids : userids
																				}
																			},
																			this,
																			function(
																					response) {
																				var responseObj = eval("("
																						+ response
																						+ ")");
																				if (responseObj.data.creator
																						&& responseObj.data.othersdeleted) {
																					msgBoxShow(
																							[
																									WtfGlobal
																											.getLocaleText("hrms.common.warning"),
																									WtfGlobal
																											.getLocaleText("hrms.stanalone.creator.cannot.delete.msg.other.deleted") ],
																							0);
																					this.empGDS
																							.load({
																								params : {
																									grouper : "usergrid",
																									start : 0,
																									limit : this.allempGrid.pag.pageSize
																								}
																							})
																				} else {
																					if (responseObj.data.creator) {
																						msgBoxShow(
																								[
																										WtfGlobal
																												.getLocaleText("hrms.common.warning"),
																										WtfGlobal
																												.getLocaleText("hrms.stanalone.creator.cannot.delete.msg") ],
																								0)
																					} else {
																						msgBoxShow(
																								[
																										WtfGlobal
																												.getLocaleText("hrms.common.success"),
																										WtfGlobal
																												.getLocaleText("hrms.stanalone.delete.user.success.msg") ],
																								1);
																						this.empGDS
																								.load({
																									params : {
																										grouper : "usergrid",
																										start : 0,
																										limit : this.allempGrid.pag.pageSize
																									}
																								})
																					}
																				}
																			},
																			function() {
																				calMsgBoxShow(
																						27,
																						1)
																			})
														}, this)
									}
								});
						var menubtns = [ this.createUser, this.edituser,
								this.deleteUser ];
						var userManagement = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.UserManagement"),
									iconCls : "user-management",
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.common.UserManagement"),
										text : WtfGlobal
												.getLocaleText("hrms.standalone.create.manage.user")
									},
									menu : new Wtf.menu.Menu({
										items : menubtns
									})
								});
						return userManagement
					}
				});
		Wtf.document_panel = function(A) {
			Wtf.document_panel.superclass.constructor.call(this, A)
		},
		Wtf
				.extend(
						Wtf.document_panel,
						Wtf.Panel,
						{
							initComponent : function(A) {
								Wtf.document_panel.superclass.initComponent
										.call(this, A)
							},
							onRender : function(B) {
								Wtf.document_panel.superclass.onRender.call(
										this, B);
								this.headingType = WtfGlobal
										.getLocaleText("hrms.common.UploadFiles");
								this.add_files = new Wtf.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.UploadDocuments"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.UploadDocuments.tooltip"),
											iconCls : getButtonIconCls(Wtf.btype.documentbutton),
											scope : this,
											handler : this.show_upload_window
										});
								this.deletedoc = new Wtf.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.DeleteDocuments"),
											tooltip : WtfGlobal
													.getLocaleText("hrms.common.DeleteDocuments.tooltip"),
											iconCls : getButtonIconCls(Wtf.btype.deletebutton),
											scope : this,
											disabled : true,
											handler : this.deletedocumnets
										});
								this.documentRecord = Wtf.data.Record.create([
										{
											name : "docid"
										}, {
											name : "docname"
										}, {
											name : "docdesc"
										}, {
											name : "uploadedby"
										}, {
											name : "docsize",
											type : "float"
										}, {
											name : "uploaddate",
											type : "date"
										} ]);
								this.docReader = new Wtf.data.KwlJsonReader1({
									root : "data",
									totalProperty : "count"
								}, this.documentRecord);
								this.profile_store = new Wtf.data.Store({
									url : "Common/Document/getDocs.common",
									baseParams : {
										flag : 54,
										userid : this.lid,
										manager : this.manager,
										applicant : this.app
									},
									reader : this.docReader
								});
								calMsgBoxShow(202, 4, true);
								this.profile_store.load();
								this.profile_store.on("load", function() {
									if (msgFlag == 1) {
										WtfGlobal.closeProgressbar()
									}
								}, this);
								this.sm2 = new Wtf.grid.CheckboxSelectionModel(
										{
											singleSelect : false
										});
								var A = "";
								if (this.manager) {
									A = new Wtf.grid.ColumnModel(
											[
													this.sm2,
													new Wtf.grid.RowNumberer(),
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentName"),
														dataIndex : "docname"
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentDescription"),
														dataIndex : "docdesc"
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentUploadedBy"),
														dataIndex : "uploadedby"
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentDate"),
														dataIndex : "uploaddate",
														renderer : WtfGlobal.onlyDateRenderer
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentSize"),
														dataIndex : "docsize",
														renderer : this.filesize
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.Download"),
														dataIndex : "id",
														renderer : function(E,
																D, I, H, G, F) {
															return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
																	+ I.data.docid
																	+ "&mailattch=true&dtype=attachment&applicant="
																	+ F.baseParams.applicant
																	+ "\")'><div class='pwndCommon downloaddocs' style='cursor:pointer' title="
																	+ WtfGlobal
																			.getLocaleText("hrms.common.Clicktodownloaddocument")
																	+ " ></div></a></div>"
														}
													} ])
								} else {
									A = new Wtf.grid.ColumnModel(
											[
													this.sm2,
													new Wtf.grid.RowNumberer(),
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentName"),
														dataIndex : "docname"
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentDescription"),
														dataIndex : "docdesc"
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentDate"),
														dataIndex : "uploaddate",
														renderer : WtfGlobal.onlyDateRenderer
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.DocumentSize"),
														dataIndex : "docsize",
														renderer : this.filesize
													},
													{
														header : WtfGlobal
																.getLocaleText("hrms.common.Download"),
														dataIndex : "id",
														renderer : function(E,
																D, I, H, G, F) {
															return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
																	+ I.data.docid
																	+ "&mailattch=true&dtype=attachment&applicant="
																	+ F.baseParams.applicant
																	+ "\")'><div class='pwndCommon downloaddocs' style='cursor:pointer' title="
																	+ WtfGlobal
																			.getLocaleText("hrms.common.Clicktodownloaddocument")
																	+ " ></div></a></div>"
														}
													} ])
								}
								var C = [];
								C
										.push("-", this.add_files, "-",
												this.deletedoc);
								this.grid = new Wtf.KwlGridPanel(
										{
											border : false,
											store : this.profile_store,
											cm : A,
											sm : this.sm2,
											StripeRows : true,
											loadMask : true,
											searchLabel : " ",
											searchLabelSeparator : " ",
											searchEmptyText : WtfGlobal
													.getLocaleText("hrms.common.SearchbyDocumentNameDescription"),
											searchField : "docname",
											serverSideSearch : true,
											viewConfig : {
												forceFit : true,
												emptyText : WtfGlobal
														.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:docUpload(\""
																+ this.id
																+ "\")'>"
																+ WtfGlobal
																		.getLocaleText("hrms.common.Getstartedbyuploadingdocuments")
																+ "</a>")
											},
											displayInfo : true,
											tbar : C
										});
								this.add(this.grid);
								this.sm2.on("selectionchange", function() {
									WtfGlobal.enableDisableBtnArr(C, this.grid,
											[], [ 3 ])
								}, this)
							},
							show_upload_window : function() {
								this.createuploadwindow();
								this.upload_window.show()
							},
							filesize : function(C, B, E) {
								var D = parseFloat(E.data["docsize"]);
								var A;
								if (D >= 1024) {
									A = (D / 1024);
									return (A.toFixed(2) + " MB")
								} else {
									return (parseFloat(D).toFixed(2) + " KB")
								}
							},
							createuploadwindow : function() {
								this.docdesc = new Wtf.form.TextArea(
										{
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											height : "50%",
											name : "docdesc",
											width : 200,
											maxLength : 255
										});
								this.UploadForm = new Wtf.form.FormPanel(
										{
											waitMsgTarget : true,
											fileUpload : true,
											labelWidth : 110,
											url : "Common/Document/addDocuments.common?fileAdd=true&IsIE="
													+ Wtf.isIE,
											border : false,
											bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
											autoScroll : false,
											autoHeight : true,
											defaultType : "textfield",
											layoutConfig : {
												deferredRender : false
											},
											items : [
													{
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.common.File")
																+ "*",
														inputType : "file",
														width : 235,
														id : "fileupload"
																+ this.id
													}, this.docdesc, {
														xtype : "hidden",
														name : "refid",
														value : this.lid
													}, {
														xtype : "hidden",
														name : "applicantid",
														value : this.app
													} ]
										});
								var A = new Array();
								A
										.push({
											text : WtfGlobal
													.getLocaleText("hrms.common.Upload"),
											handler : this.uploadDoc,
											scope : this
										});
								A
										.push({
											text : WtfGlobal
													.getLocaleText("hrms.common.cancel"),
											scope : this,
											handler : function() {
												this.upload_window.close()
											}
										});
								this.upload_window = new Wtf.Window(
										{
											title : WtfGlobal
													.getLocaleText("hrms.common.UploadWindow"),
											iconCls : getButtonIconCls(Wtf.btype.winicon),
											autoHeight : true,
											width : 450,
											modal : true,
											items : [
													{
														border : false,
														cls : "panelstyleClass1",
														html : this.isview ? getTopHtml(
																this.headingType,
																"",
																"images/upload-file.gif")
																: getTopHtml(
																		this.headingType,
																		WtfGlobal
																				.getLocaleText("hrms.common.Browseyourcomputerselectfiletoupload"),
																		"images/upload-file.gif")
													},
													{
														border : false,
														cls : "panelstyleClass2",
														items : [ this.UploadForm ]
													} ],
											buttonAlign : "right",
											buttons : A
										})
							},
							uploadDoc : function() {
								var A = Wtf.getCmp("fileupload" + this.id)
										.getValue();
								if (A == "") {
									calMsgBoxShow(140, 0)
								} else {
									if (this.UploadForm.form.isValid()) {
										Wtf.MessageBox
												.confirm(
														WtfGlobal
																.getLocaleText("hrms.common.confirm"),
														WtfGlobal
																.getLocaleText("hrms.common.youtouploadthedocument"),
														function(B) {
															if (B != "yes") {
																this.upload_window
																		.close()
															} else {
																calMsgBoxShow(
																		202, 4,
																		true);
																this.UploadForm
																		.getForm()
																		.submit(
																				{
																					scope : this,
																					success : function() {
																						this.profile_store
																								.load({
																									params : {
																										start : 0,
																										limit : this.grid.pag.pageSize,
																										ss : this.grid.quickSearchTF
																												.getValue()
																									}
																								});
																						calMsgBoxShow(
																								141,
																								0);
																						this.upload_window
																								.close()
																					},
																					failure : function() {
																						calMsgBoxShow(
																								27,
																								1);
																						this.upload_window
																								.close()
																					}
																				})
															}
														}, this)
									}
								}
							},
							deletedocumnets : function() {
								Wtf.MessageBox
										.confirm(
												WtfGlobal
														.getLocaleText("hrms.common.confirm"),
												deleteMsgBox("document"),
												function(B) {
													if (B == "yes") {
														var C = this.sm2
																.getSelections();
														var D = [];
														this.sm2
																.clearSelections();
														for ( var A = 0; A < C.length; A++) {
															D
																	.push(C[A]
																			.get("docid"));
															var E = this.profile_store
																	.indexOf(C[A]);
															WtfGlobal
																	.highLightRow(
																			this.grid,
																			"FF0000",
																			5,
																			E)
														}
														calMsgBoxShow(201, 4,
																true);
														Wtf.Ajax
																.requestEx(
																		{
																			url : "Common/Document/deleteDocuments.common",
																			params : {
																				flag : 60,
																				ids : D,
																				applicant : this.app
																			}
																		},
																		this,
																		function() {
																			var F = {
																				start : 0,
																				limit : this.grid.pag.pageSize,
																				ss : this.grid.quickSearchTF
																						.getValue()
																			};
																			WtfGlobal
																					.delaytasks(
																							this.profile_store,
																							F);
																			calMsgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.success"),
																							WtfGlobal
																									.getLocaleText("hrms.common.Selecteddocumentaredeletedsuccessfully") ],
																					0)
																		},
																		function() {
																			calMsgBoxShow(
																					27,
																					1)
																		})
													}
												}, this)
							}
						});
function docUpload(A) {
	Wtf.getCmp(A).show_upload_window()
}
Wtf.terService = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 430,
		height : 300,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.SaveRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.terService.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.terService,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.terService.superclass.initComponent.call(this)
					},
					loadAllStores : function() {
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.terService.superclass.onRender.call(this, A);
						this.terCmb = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.TerminationCause")
											+ "*",
									store : Wtf.terStore,
									mode : "local",
									valueField : "id",
									displayField : "name",
									hiddenName : "tercause",
									triggerAction : "all",
									typeAhead : true,
									allowBlank : false,
									width : 200,
									addNewFn : this.addtermination
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(15,
													Wtf.terStore, "Add")
										},
										scope : this
									}) ]
								});
						if (!Wtf.StoreMgr.containsKey("ter")) {
							Wtf.terStore.on("load", this.setReason, this);
							Wtf.terStore.load();
							Wtf.StoreMgr.add("ter", Wtf.terStore)
						} else {
							this.setReason()
						}
						this.terdesc = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.performance.description"),
									width : 200,
									name : "terdesc",
									maxLength : 255
								});
						this.terdate = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.TerminationDate")
											+ "*",
									width : 200,
									name : "relievedate",
									value : new Date(),
									allowBlank : false,
									format : "Y-m-d"
								});
						this.IneternalForm = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder",
									style : "background: transparent;padding-left:20px;padding-top: 20px;padding-right: 0px;",
									autoScroll : false,
									labelWidth : 119,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.terdate, this.terCmb,
											this.terdesc ]
								});
						this.terminationpanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 80,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.common.TerminationofService"),
															WtfGlobal
																	.getLocaleText("hrms.common.FillupthefollowingDetails"),
															"images/termination-of-ser-popup.jpg")
												},
												{
													border : false,
													region : "center",
													cls : "formstyleClass2",
													layout : "fit",
													items : [ this.IneternalForm ]
												} ]
									} ]
								});
						this.add(this.terminationpanel)
					},
					SaveRequest : function() {
						if (!this.IneternalForm.form.isValid()) {
							return
						} else {
							var B = [];
							if (this.grids.getSelectionModel().getCount() > 0) {
								this.arr = this.grids.getSelectionModel()
										.getSelections()
							}
							this.grids.getSelectionModel().clearSelections();
							for ( var A = 0; A < this.arr.length; A++) {
								var C = this.grids.getStore().indexOf(
										this.arr[A]);
								WtfGlobal.highLightRow(this.grids, "33CC33", 5,
										C);
								B.push(this.arr[A].get("userid"))
							}
							Wtf.MessageBox
									.confirm(
											WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											WtfGlobal
													.getLocaleText("hrms.common.Doyouwanttoterminateservicesoftheselectedemployees"),
											function(D) {
												if (D == "yes") {
													calMsgBoxShow(200, 4, true);
													this.IneternalForm.form
															.submit({
																url : "Common/terminateEmp.common",
																params : {
																	flag : 57,
																	ids : B
																},
																scope : this,
																success : function(
																		E, H) {
																	if (H.result.msg == "invalidterminatedate") {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						WtfGlobal
																								.getLocaleText("hrms.common.Relievingdateafterjoindate") ],
																				1)
																	} else {
																		if (H.result.msg == "adminerror") {
																			calMsgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.warning"),
																							WtfGlobal
																									.getLocaleText("hrms.common.SuperAdmincannotbeDeletedTerminationService") ],
																					2)
																		} else {
																			var G = {
																				start : 0,
																				limit : this.grids.pag.pageSize,
																				ss : Wtf
																						.getCmp(
																								"Quick"
																										+ this.grids.id)
																						.getValue()
																			};
																			WtfGlobal
																					.delaytasks(
																							this.grids
																									.getStore(),
																							G);
																			this
																					.close();
																			calMsgBoxShow(
																					155,
																					0);
																			var F = Wtf
																					.getCmp("exempgridexempdgr");
																			if (F != null) {
																				F
																						.getStore()
																						.load()
																			}
																		}
																	}
																},
																failure : function() {
																	calMsgBoxShow(
																			156,
																			0)
																}
															})
												} else {
													this.close();
													this.grids
															.getSelectionModel()
															.clearSelections()
												}
											}, this)
						}
					},
					addtermination : function() {
						WtfGlobal.showmasterWindow(15, Wtf.terStore, "Add")
					},
					setReason : function() {
						if (Wtf.terStore.getCount() > 0) {
							this.terCmb.setValue(Wtf.terStore.getAt(
									Wtf.terStore.getCount() - 1).get("id"))
						}
						if (Wtf.terStore.getCount() == 1) {
							this.terCmb.setValue("")
						}
					}
				});
Wtf.rehire = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 430,
		height : 260,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.RehireRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.rehire.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.rehire,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.rehire.superclass.initComponent.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.rehire.superclass.onRender.call(this, A);
						this.templaterec = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "templateid"
						} ]);
						this.descmb = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.designation")
											+ "*",
									store : Wtf.desigStore,
									mode : "local",
									valueField : "id",
									displayField : "name",
									hiddenName : "desg",
									triggerAction : "all",
									typeAhead : true,
									allowBlank : false,
									width : 200,
									addNewFn : this.addDesignation
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											WtfGlobal.showmasterWindow(1,
													Wtf.desigStore, "Add")
										},
										scope : this
									}) ]
								});
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.on("load", this.setReason, this);
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore)
						} else {
							this.setReason()
						}
						this.deptCmb = new Wtf.form.FnComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.department")
									+ "*",
							store : Wtf.depStore,
							mode : "local",
							valueField : "id",
							hiddenName : "dept",
							displayField : "name",
							triggerAction : "all",
							typeAhead : true,
							allowBlank : false,
							width : 200,
							addNewFn : this.addDepartment.createDelegate(this),
							plugins : [ new Wtf.common.comboAddNew({
								handler : function() {
									WtfGlobal.showmasterWindow(7, Wtf.depStore,
											"Add")
								},
								scope : this
							}) ]
						});
						if (!Wtf.StoreMgr.containsKey("dep")) {
							Wtf.depStore.on("load", this.setDepartment, this);
							Wtf.depStore.load();
							Wtf.StoreMgr.add("dep", Wtf.depStore)
						} else {
							this.setDepartment()
						}
						this.salary = new Wtf.form.NumberField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Salary")
									+ "*",
							width : 200,
							hidden : true,
							hideLabel : true,
							name : "salary",
							allowNegative : false,
							value : 0,
							maxLength : 10
						});
						this.joindate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.DateofJoining")
									+ "*",
							width : 200,
							name : "joindate",
							value : new Date(),
							allowBlank : false,
							format : "Y-m-d"
						});
						this.rehireform = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder",
									style : "background: transparent;padding-left:20px;padding-top: 20px;padding-right: 0px;",
									autoScroll : false,
									labelWidth : 119,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.deptCmb, this.descmb,
											this.joindate, this.salary ]
								});
						this.rehirepanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 80,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.common.RehiretheExEmployee"),
															WtfGlobal
																	.getLocaleText("hrms.common.FillupthefollowingDetails"),
															"images/rehire-popup.jpg")
												}, {
													border : false,
													region : "center",
													cls : "formstyleClass2",
													layout : "fit",
													items : [ this.rehireform ]
												} ]
									} ]
								});
						this.add(this.rehirepanel)
					},
					RehireRequest : function() {
						if (!this.rehireform.form.isValid()) {
							return
						} else {
							var C = [];
							var A = this.grids.getSelectionModel()
									.getSelections();
							this.grids.getSelectionModel().clearSelections();
							for ( var B = 0; B < A.length; B++) {
								var D = this.grids.getStore().indexOf(A[B]);
								WtfGlobal.highLightRow(this.grids, "33CC33", 5,
										D);
								C.push(A[B].get("userid"))
							}
							Wtf.MessageBox
									.confirm(
											WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											WtfGlobal
													.getLocaleText("hrms.common.Doyourehireselectedemployees"),
											function(E) {
												if (E == "yes") {
													calMsgBoxShow(200, 4, true);
													this.rehireform.form
															.submit({
																url : "Common/rehireEmp.common",
																params : {
																	flag : 58,
																	ids : C
																},
																scope : this,
																success : function(
																		F, I) {
																	if (I.result.msg == "invalidjoindate") {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						WtfGlobal
																								.getLocaleText("hrms.common.Currentjoiningdateafterterminationdate") ],
																				1)
																	} else {
																		var H = {
																			start : 0,
																			limit : this.grids.pag.pageSize,
																			ss : Wtf
																					.getCmp(
																							"Quick"
																									+ this.grids.id)
																					.getValue()
																		};
																		WtfGlobal
																				.delaytasks(
																						this.grids
																								.getStore(),
																						H);
																		this
																				.close();
																		calMsgBoxShow(
																				158,
																				0);
																		var G = Wtf
																				.getCmp("empmntgridqualifiedgr");
																		if (G != null) {
																			G
																					.getStore()
																					.load()
																		}
																	}
																},
																failure : function() {
																	calMsgBoxShow(
																			159,
																			0)
																}
															})
												} else {
												}
											}, this)
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					},
					addDepartment : function() {
						WtfGlobal.showmasterWindow(7, Wtf.depStore, "Add")
					},
					setReason : function() {
						if (Wtf.desigStore.getCount() > 0) {
							this.descmb.setValue(Wtf.desigStore.getAt(
									Wtf.desigStore.getCount() - 1).get("id"))
						}
					},
					setDepartment : function() {
						if (Wtf.depStore.getCount() > 0) {
							this.deptCmb.setValue(Wtf.depStore.getAt(
									Wtf.depStore.getCount() - 1).get("id"))
						}
					}
				});
Wtf.exemp = function(A) {
	Wtf.apply(this, A);
	Wtf.exemp.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.exemp,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.exemp.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.exemp.superclass.onRender.call(this, A);
						this.exempGrid();
						this.add(this.allexempGrid)
					},
					exempGrid : function() {
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "designation"
						}, {
							name : "designationid"
						}, {
							name : "department"
						}, {
							name : "departmentname"
						}, {
							name : "emailid"
						}, {
							name : "contactno"
						}, {
							name : "employeeid"
						}, {
							name : "fullname"
						}, {
							name : "termdate",
							type : "date"
						}, {
							name : "termreason"
						}, {
							name : "termdesc"
						}, {
							name : "termby"
						} ]);
						this.fromdate = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getFirstDateOfMonth()
						});
						this.todate = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							disabled : true,
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getLastDateOfMonth()
						});
						this.fromdate.on("change", function() {
							var B = new Date();
							B = this.fromdate.getValue();
							this.todate.setValue(B.add(Date.MONTH, +0)
									.getLastDateOfMonth())
						}, this);
						this.exempGDS = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "count"
							}, this.record),
							url : "Common/getexEmployees.common",
							baseParams : {
								mode : 115
							}
						});
						this.exempGDS.load();
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EmailAddress"),
											dataIndex : "emailid",
											autoSize : true,
											sortable : true,
											renderer : WtfGlobal.renderEmailTo,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.DateofLeaving"),
											dataIndex : "termdate",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.ReasonforLeaving"),
											dataIndex : "termreason",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.ReasonDescription"),
											dataIndex : "termdesc",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.TerminatedBy"),
											dataIndex : "termby",
											sortable : true
										} ]);
						var A = new Array();
						A
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.exempGDS
																.load({
																	params : {
																		grouper : "usergrid",
																		start : 0,
																		limit : this.allexempGrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.allexempGrid.id)
																.setValue("")
													}
												}),
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.view.edit.profile"),
													iconCls : getButtonIconCls(Wtf.btype.viewbutton),
													tooltip : WtfGlobal
															.getLocaleText("hrms.common.ViewEditProfile.tooltip2"),
													id : this.id
															+ "viewprofilerejected",
													disabled : true,
													scope : this,
													handler : this.viewprofile
												}),
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.Rehire"),
													iconCls : "pwnd rehireIcon",
													tooltip : WtfGlobal
															.getLocaleText("hrms.common.Rehire.tooltip"),
													disabled : true,
													scope : this,
													handler : this.rehirefun
												}),
										"-",
										this.fromdate,
										"-",
										this.todate,
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.GenerateMonthlyReport"),
													iconCls : getButtonIconCls(Wtf.btype.reportbutton),
													tooltip : WtfGlobal
															.getLocaleText("hrms.common.GenerateMonthlyReport.tooltip"),
													disabled : false,
													scope : this,
													handler : this.monthlyreport
												}));
						this.allexempGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : this.id + "exempdgr",
									store : this.exempGDS,
									cm : this.cm,
									sm : this.sm,
									loadMask : true,
									displayInfo : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									serverSideSearch : true,
									searchField : "fullname",
									tbar : A,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.common.Noexemployeerecordtoshow"))
									}
								});
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(A, this.allexempGrid,
									[ 3 ], [ 5 ])
						}, this)
					},
					viewprofile : function() {
						var C = false;
						var F = this.sm.getSelections();
						var E = (F[0].get("fullname"));
						var D = F[0].get("userid");
						var A = Wtf.getCmp("empmanagement");
						var B = Wtf.getCmp("empmntprofile" + D);
						if (B == null) {
							B = new Wtf.myProfileWindow({
								title : WtfGlobal.getLocaleText({
									key : "hrms.common.empsProfile",
									params : [ E ]
								}),
								closable : true,
								id : "empmntprofile" + D,
								layout : "fit",
								editperm : C,
								exemp : true,
								lid : D,
								manager : true,
								report : false,
								border : false,
								iconCls : "pwnd myProfileIcon"
							});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					rehirefun : function() {
						this.rehire = new Wtf.rehire({
							iconCls : getButtonIconCls(Wtf.btype.winicon),
							layout : "fit",
							closable : true,
							resizable : false,
							title : WtfGlobal
									.getLocaleText("hrms.common.Rehire"),
							border : false,
							grids : this.allexempGrid,
							id : this.id + "rehirewindow",
							modal : true,
							scope : this,
							plain : true
						});
						this.rehire.show()
					},
					monthlyreport : function() {
						var C = new Date();
						var D = new Date();
						D = this.todate.getValue();
						C = this.fromdate.getValue();
						this.fromdate.setValue(C.format("Y-m-d"));
						this.todate.setValue(D.format("Y-m-d"));
						var B = this.fromdate.getRawValue();
						var A = this.todate.getRawValue();
						this.exempGDS.baseParams = {
							mode : 115,
							startdate : B,
							enddate : A
						};
						this.exempGDS.load()
					}
				});
Wtf.emphistory = function(A) {
	Wtf.apply(this, A);
	Wtf.emphistory.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.emphistory,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.emphistory.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.emphistory.superclass.onRender.call(this, A);
						this.emphstGrid();
						this.add(this.emphistGrid)
					},
					emphstGrid : function() {
						this.sm2 = new Wtf.grid.RowSelectionModel({
							singleSelect : false
						});
						this.hstrec = Wtf.data.Record.create([ {
							name : "hid"
						}, {
							name : "designation"
						}, {
							name : "department"
						}, {
							name : "startdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "salary"
						}, {
							name : "category"
						} ]);
						this.hstGDS = new Wtf.data.GroupingStore({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "count"
							}, this.hstrec),
							url : "Common/getEmpHistory.common",
							baseParams : {
								mode : 116,
								userid : this.lid
							},
							sortInfo : {
								field : "category",
								direction : "ASC"
							},
							groupField : "category"
						});
						this.hstGDS.load();
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "department",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Salary"),
											dataIndex : "salary",
											autoSize : true,
											renderer : WtfGlobal.currencyRenderer,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "startdate",
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											renderer : WtfGlobal.onlyDateRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.category"),
											dataIndex : "category"
										} ]);
						this.emphistGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : this.id + "emphstgr",
									store : this.hstGDS,
									cm : this.cm,
									sm : this.sm2,
									loadMask : true,
									displayInfo : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									noSearch : true,
									view : new Wtf.grid.GroupingView(
											{
												forceFit : true,
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.common.Nohistoryrecordtoshow")),
												hideGroupedColumn : true,
												groupTextTpl : '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "'
														+ WtfGlobal
																.getLocaleText("hrms.common.records")
														+ '" : "'
														+ WtfGlobal
																.getLocaleText("hrms.common.record")
														+ '"]})'
											})
								})
					}
				});
Wtf.assignReviewer = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 600,
		height : 600,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Assign"),
			handler : this.saveassignReviewer,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.assignReviewer.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.assignReviewer,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.assignReviewer.superclass.initComponent.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.assignReviewer.superclass.onRender.call(this, A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.cm2 = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											dataIndex : "username",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											sortable : true
										} ]);
						this.recGrid = new Wtf.grid.GridPanel({
							cm : this.cm2,
							store : Wtf.employeeStore,
							sm : this.sm,
							viewConfig : {
								forceFit : true
							}
						});
						this.recPanel = new Wtf.Panel(
								{
									frame : true,
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 75,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #FFFFFF;",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.common.AssignReviewer"),
															WtfGlobal
																	.getLocaleText("hrms.common.Selectfromthefollowingmanager"),
															"images/assign-manager.gif")
												},
												{
													border : false,
													region : "center",
													bodyStyle : "background:#f1f1f1;font-size:10px;",
													layout : "fit",
													items : [ this.recGrid ]
												} ]
									} ]
								});
						this.add(this.recPanel);
						this.on("show", function() {
							if (!Wtf.StoreMgr.containsKey("manager")) {
								Wtf.employeeStore.on("load", this.loadReviewer,
										this);
								Wtf.employeeStore.load();
								Wtf.StoreMgr.add("manager", Wtf.employeeStore)
							} else {
								this.loadReviewer()
							}
						})
					},
					saveassignReviewer : function() {
						if (this.recGrid.getSelectionModel().getCount() == 0) {
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.common.pleaseSelectRecFirst") ],
									1)
						} else {
							this.user = this.allempGrid.getSelectionModel()
									.getSelections();
							this.userids = [];
							this.reviewerids = [];
							this.assignflag = true;
							for ( var B = 0; B < this.user.length; B++) {
								this.userids.push(this.user[B].get("userid"))
							}
							this.reviewer = this.recGrid.getSelectionModel()
									.getSelections();
							for ( var A = 0; A < this.reviewer.length; A++) {
								this.reviewerids.push(this.reviewer[A]
										.get("userid"))
							}
							for (B = 0; B < this.user.length; B++) {
								for (A = 0; A < this.reviewer.length; A++) {
									if (this.user[B].get("userid") == this.reviewer[A]
											.get("userid")) {
										this.assignflag = false;
										break
									}
								}
							}
							if (!this.assignflag) {
								this.close();
								msgBoxShow(
										[
												WtfGlobal
														.getLocaleText("hrms.common.warning"),
												WtfGlobal
														.getLocaleText("hrms.common.PleaseSelValidRecord") ],
										1)
							} else {
								var D = this.sm2.getSelected();
								var C = this.empGDS.indexOf(D);
								this.sm2.clearSelections();
								WtfGlobal.highLightRow(this.allempGrid,
										"33CC33", 5, C);
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : Wtf.req.base
															+ "hrms.jsp",
													params : {
														flag : 137,
														userid : this.userids,
														reviewerid : this.reviewerids,
														isManager : false
													}
												},
												this,
												function() {
													this.close();
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.common.Reviewerassignedsuccessfully") ],
															1, 1);
													var E = new Wtf.util.DelayedTask(
															function() {
																this.empGDS
																		.load({
																			params : {
																				start : 0,
																				limit : this.allempGrid.pag.pageSize,
																				ss : Wtf
																						.getCmp(
																								"Quick"
																										+ this.allempGrid.id)
																						.getValue()
																			}
																		})
															}, this);
													E.delay(1000)
												},
												function() {
													Wtf.Msg
															.alert(
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.common.Errorinassigningreviewer"))
												})
							}
						}
					},
					loadReviewer : function() {
						var D = this.sm2.getSelected();
						if (D.data["reviewerid"].length == 1) {
							this.revid = D.data["reviewerid"];
							var C = Wtf.employeeStore.findBy(this.findrevuser,
									this);
							this.sm.selectRow(C)
						}
						if (D.data["reviewerid"].length > 1) {
							var E = [];
							var A = [];
							E = D.data["reviewerid"];
							for ( var B = 0; B < E.length; B++) {
								this.revid = E[B];
								A[B] = Wtf.employeeStore.findBy(
										this.findrevuser, this)
							}
							this.sm.selectRows(A)
						}
					},
					findrevuser : function(A) {
						if (A.get("userid") == this.revid) {
							return true
						} else {
							return false
						}
					}
				});
Wtf.assignManagerWin = function(A) {
	Wtf.apply(this, A);
	Wtf.assignManagerWin.superclass.constructor.call(this, {
		buttonAlign : "right",
		buttons : [ this.savebtn = new Wtf.Button({
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			scope : this,
			minWidth : 75,
			disabled : true,
			handler : function() {
				this.createMemberList()
			}
		}), {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			scope : this,
			handler : function() {
				this.close()
			}
		} ]
	});
	this.addEvents({
		"savedata" : true
	})
};
Wtf
		.extend(
				Wtf.assignManagerWin,
				Wtf.Window,
				{
					group_id : "",
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(C) {
						Wtf.assignManagerWin.superclass.onRender.call(this, C);
						this.availablesm = new Wtf.grid.CheckboxSelectionModel();
						this.availablecm = new Wtf.grid.ColumnModel(
								[
										this.availablesm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											dataIndex : "username",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											sortable : true
										} ]);
						this.quickSearchEmp = new Wtf.wtfQuickSearch(
								{
									width : 150,
									field : "username",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg")
								});
						this.availableds = new Wtf.data.Store({
							url : "Common/getAvailableManagers.common",
							baseParams : {
								flag : 211,
								manager : this.managerF,
								userid : this.userid,
								salarymanager : this.salaryManagerF
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, new Wtf.data.Record.create([ {
								name : "userid"
							}, {
								name : "username"
							}, {
								name : "designation"
							}, {
								name : "departmentname"
							} ])),
							autoLoad : false
						});
						this.availablegrid = new Wtf.KwlEditorGridPanel(
								{
									height : 100,
									store : this.availableds,
									cm : this.availablecm,
									border : false,
									id : this.id + "empavailablegrid",
									sm : this.availablesm,
									autoScroll : true,
									searchField : "username",
									serverSideSearch : true,
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									viewConfig : {
										forceFit : true,
										autoFill : true
									}
								});
						this.availableds.on("load", this.empSearch, this);
						this.selectedRec = new Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "designation"
						}, {
							name : "departmentname"
						} ]);
						this.selectedds = new Wtf.data.Store({
							url : "Common/getAssignedManager.common",
							baseParams : {
								manager : this.managerF,
								salarymanager : this.salaryManagerF,
								flag : 61,
								userid : this.userid
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.selectedRec),
							autoLoad : false
						});
						this.selectedsm = new Wtf.grid.CheckboxSelectionModel();
						this.selectedcm = new Wtf.grid.ColumnModel(
								[
										this.selectedsm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											dataIndex : "username",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											sortable : true
										} ]);
						this.quickSearchAssgEmp = new Wtf.wtfQuickSearch(
								{
									width : 150,
									field : "username",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg")
								});
						this.selectedgrid = new Wtf.grid.EditorGridPanel(
								{
									height : 100,
									store : this.selectedds,
									cm : this.selectedcm,
									sm : this.selectedsm,
									autoScroll : true,
									border : false,
									viewConfig : {
										forceFit : true
									},
									tbar : [
											WtfGlobal
													.getLocaleText("hrms.common.QuickSearch")
													+ ": ",
											this.quickSearchAssgEmp ]
								});
						this.selectedds.load();
						this.selectedds.on("load", this.empAssgSearch, this);
						this.movetoright = document.createElement("img");
						this.movetoright.src = "images/arrowright.gif";
						this.movetoright.style.width = "24px";
						this.movetoright.style.height = "24px";
						this.movetoright.style.margin = "5px 0px 5px 0px";
						this.movetoright.onclick = this.movetorightclicked
								.createDelegate(this, []);
						this.movetoleft = document.createElement("img");
						this.movetoleft.src = "images/arrowleft.gif";
						this.movetoleft.style.width = "24px";
						this.movetoleft.style.height = "24px";
						this.movetoleft.style.margin = "5px 0px 5px 0px";
						this.movetoleft.onclick = this.movetoleftclicked
								.createDelegate(this, []);
						this.centerdiv = document.createElement("div");
						this.centerdiv.appendChild(this.movetoright);
						this.centerdiv.appendChild(this.movetoleft);
						this.centerdiv.style.padding = "135px 10px 135px 10px";
						var A = "1";
						var E = "";
						var H = "";
						if (this.text1 == "edit") {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Update");
							var G = 9;
							A = this.group_id;
							E = WtfGlobal
									.getLocaleText("hrms.performance.group.updated.successfully");
							H = "Edit Group";
							this.imgsrc = "edit-group.gif"
						} else {
							this.bttntext = WtfGlobal
									.getLocaleText("hrms.common.Create");
							var G = 6;
							A = this.group_id;
							E = "Group Added successfully.";
							H = "Create New Group";
							this.imgsrc = "add-group.gif"
						}
						var I = "";
						var B = "";
						var F = "";
						var D = "";
						if (this.managerF) {
							I = WtfGlobal
									.getLocaleText("hrms.performance.appraiser");
							B = WtfGlobal
									.getLocaleText("hrms.common.AssignAppraiser");
							F = WtfGlobal
									.getLocaleText("hrms.common.Selectemployeeforassigningappraiser")
						} else {
							if (this.salaryManagerF) {
								I = WtfGlobal
										.getLocaleText("hrms.administration.salary.authorization");
								B = WtfGlobal
										.getLocaleText("hrms.Administration.AssignSalaryAuthorization");
								F = WtfGlobal
										.getLocaleText("hrms.common.Selectemployeeforassignsalaryauthorization")
							} else {
								I = WtfGlobal
										.getLocaleText("hrms.common.Reviewer");
								B = WtfGlobal
										.getLocaleText("hrms.common.AssignReviewer");
								F = WtfGlobal
										.getLocaleText("hrms.common.Selectemployeeforassigningreviewer")
							}
						}
						this.assignTeamPanel = new Wtf.Panel(
								{
									layout : "border",
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												cls : "formstyleClass",
												html : getTopHtml(B, " " + F,
														"images/assign-manager.gif")
											},
											{
												region : "center",
												border : false,
												layout : "fit",
												items : [ {
													border : false,
													bodyStyle : "background:transparent;",
													layout : "border",
													items : [
															{
																region : "west",
																border : false,
																width : 350,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.common.Employees"),
																	border : false,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.availablegrid
																} ]
															},
															{
																region : "center",
																border : false,
																contentEl : this.centerdiv
															},
															{
																region : "east",
																border : false,
																width : 350,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : B,
																	border : false,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.selectedgrid
																} ]
															} ]
												} ]
											} ]
								});
						this.add(this.assignTeamPanel)
					},
					empSearch : function(A, C, B) {
						this.quickSearchEmp.StorageChanged(A)
					},
					empAssgSearch : function(A, C, B) {
						this.quickSearchAssgEmp.StorageChanged(A);
						if (this.selectedds.getCount() > 0) {
							this.savebtn.enable()
						} else {
							this.savebtn.disable()
						}
						this.refreshAssignedparams();
						this.availableds.load()
					},
					refreshAssignedparams : function() {
						var B = [];
						for ( var A = 0; A < this.selectedds.getCount(); A++) {
							B.push(this.selectedds.getAt(A).get("userid"))
						}
						this.availableds.baseParams.managerids = B
					},
					movetorightclicked : function() {
						var A = this.availablesm.getSelections();
						if (A.length > 0) {
							this.selectedds.add(A);
							this.refreshAssignedparams()
						}
						for ( var B = 0; B < A.length; B++) {
							this.availableds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							this.savebtn.enable()
						} else {
							this.savebtn.disable()
						}
					},
					movetoleftclicked : function() {
						var A = this.selectedsm.getSelections();
						if (A.length > 0) {
							this.availableds.add(A);
							this.refreshAssignedparams()
						}
						for ( var B = 0; B < A.length; B++) {
							this.selectedds.remove(A[B])
						}
						this.quickSearchEmp.StorageChanged(this.availableds);
						this.quickSearchAssgEmp.StorageChanged(this.selectedds);
						if (this.selectedds.getCount() > 0) {
							this.savebtn.enable()
						} else {
							this.savebtn.disable()
						}
					},
					createMemberList : function() {
						var D = [];
						var E = [];
						var A = [];
						this.assignflag = true;
						if (this.selectedds.getCount() == 0) {
							var H = "";
							if (this.managerF) {
								H = WtfGlobal
										.getLocaleText("hrms.admin.assign.appraiser.msg")
							} else {
								if (this.salaryManagerF) {
									H = WtfGlobal
											.getLocaleText("hrms.admin.assign.salary.authorizer.msg")
								} else {
									H = WtfGlobal
											.getLocaleText("hrms.admin.assign.reviewer.msg")
								}
							}
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											H ], 0);
							return false
						}
						for ( var C = 0; C < this.selectedds.getCount(); C++) {
							D.push(this.selectedds.getAt(C).get("userid"))
						}
						for ( var C = 0; C < this.availableds.getCount(); C++) {
							E.push(this.availableds.getAt(C).get("userid"))
						}
						for ( var B = 0; B < D.length; B++) {
							if (D[B] == this.userid) {
								this.assignflag = false;
								break
							}
						}
						if (!this.assignflag) {
							this.close();
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText("hrms.common.PleaseSelValidRecord") ],
									1)
						} else {
							var G = this.allempGrid.getSelectionModel()
									.getSelected();
							this.allempGrid.getSelectionModel()
									.clearSelections();
							if (G != undefined) {
								var F = this.empGDS.indexOf(G);
								WtfGlobal.highLightRow(this.allempGrid,
										"33CC33", 5, F)
							}
							A.push(this.userid);
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax
									.requestEx(
											{
												url : "Common/assignManager.common",
												params : {
													flag : 137,
													userid : A,
													managerid : D,
													availmanagerid : E,
													isManager : this.managerF,
													salaryManagerF : this.salaryManagerF
												}
											},
											this,
											function() {
												var J = "";
												if (this.managerF) {
													J = WtfGlobal
															.getLocaleText("hrms.common.Appraiserassignedsuccessfully")
												} else {
													if (this.salaryManagerF) {
														J = WtfGlobal
																.getLocaleText("hrms.common.authorizedassignedsuccessfully")
													} else {
														J = WtfGlobal
																.getLocaleText("hrms.common.Reviewerassignedsuccessfully")
													}
												}
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																J ], 0, 0);
												var I = new Wtf.util.DelayedTask(
														function() {
															this.empGDS
																	.load({
																		params : {
																			start : this.allempGrid.pag.cursor,
																			limit : this.allempGrid.pag.pageSize,
																			ss : Wtf
																					.getCmp(
																							"Quick"
																									+ this.allempGrid.id)
																					.getValue()
																		}
																	});
															this.close()
														}, this);
												I.delay(1000)
											},
											function() {
												Wtf.Msg
														.alert(
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.common.Errorinassigningmanager"))
											})
						}
					}
				});
Wtf.NewJoineesReport = function(A) {
	Wtf.NewJoineesReport.superclass.constructor.call(this, A);
	A.autoScroll = false
};
Wtf
		.extend(
				Wtf.NewJoineesReport,
				Wtf.Panel,
				{
					onRender : function(C) {
						Wtf.NewJoineesReport.superclass.onRender.call(this, C);
						this.fromdaterep = new Wtf.form.DateField({
							width : 155,
							scope : this,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getFirstDateOfMonth()
						});
						this.todaterep = new Wtf.form.DateField({
							width : 155,
							readOnly : true,
							scope : this,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getLastDateOfMonth()
						});
						var B = this.fromdaterep.getValue().format("m/d/Y");
						var A = this.todaterep.getValue().format("m/d/Y");
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "designation"
						}, {
							name : "designationid"
						}, {
							name : "department"
						}, {
							name : "departmentname"
						}, {
							name : "fname"
						}, {
							name : "lname"
						}, {
							name : "image"
						}, {
							name : "emailid"
						}, {
							name : "lastlogin",
							type : "date"
						}, {
							name : "aboutuser"
						}, {
							name : "address"
						}, {
							name : "contactno"
						}, {
							name : "manager"
						}, {
							name : "managerid"
						}, {
							name : "salary"
						}, {
							name : "roleid",
							mapping : "role"
						}, {
							name : "accno"
						}, {
							name : "rolename"
						}, {
							name : "employeeid"
						}, {
							name : "status"
						}, {
							name : "fullname"
						}, {
							name : "reviewer"
						}, {
							name : "reviewerid"
						}, {
							name : "templateid"
						}, {
							name : "joindate",
							type : "date"
						} ]);
						this.empGDS = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "count"
							}, this.record),
							url : "Common/getAllUserDetailsHrms.common",
							baseParams : {
								mode : 114,
								stdate : B,
								enddate : A
							}
						});
						this.empGDS.load();
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.UserName"),
											dataIndex : "username",
											autoWidth : true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EmailAddress"),
											dataIndex : "emailid",
											autoSize : true,
											sortable : true,
											renderer : WtfGlobal.renderEmailTo,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.ProfileStatus"),
											dataIndex : "status",
											autoSize : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.AssignedAppraiser"),
											dataIndex : "manager",
											autoSize : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.AssignedReviewer"),
											dataIndex : "reviewer",
											autoSize : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.joining.date"),
											dataIndex : "joindate",
											renderer : WtfGlobal.onlyDateRenderer,
											autoSize : true,
											sortable : true,
											groupable : true
										} ]);
						this.allempGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : this.id + "qualifiedgr",
									store : this.empGDS,
									cm : this.cm,
									sm : this.sm2,
									loadMask : true,
									displayInfo : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "fullname",
									tbar : [
											WtfGlobal
													.getLocaleText("hrms.common.start.date")
													+ ":",
											this.fromdaterep,
											WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											this.todaterep,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.timesheet.generate.report"),
												minWidth : 100,
												scope : this,
												iconCls : getButtonIconCls(Wtf.btype.reportbutton),
												handler : function() {
													var E = this.fromdaterep
															.getValue().format(
																	"m/d/Y");
													var D = this.todaterep
															.getValue().format(
																	"m/d/Y");
													this.empGDS.removeAll();
													this.empGDS.baseParams = {
														mode : 114,
														stdate : E,
														enddate : D
													};
													calMsgBoxShow(202, 4, true);
													this.empGDS
															.load({
																scope : this,
																params : {
																	start : 0,
																	limit : this.allempGrid.pag.pageSize
																}
															});
													this.empGDS
															.on(
																	"load",
																	function() {
																		WtfGlobal
																				.closeProgressbar()
																	}, this)
												}
											} ],
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.common.Nonewemployeesforselectedduration"))
									}
								});
						this.UsergridPanel2 = new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.allempGrid ]
						});
						this.innerpanel2 = new Wtf.Panel({
							layout : "fit",
							cls : "backcolor",
							border : false,
							items : [ this.UsergridPanel2 ]
						});
						this.add(this.innerpanel2)
					}
				});
Wtf.DesigChngReport = function(A) {
	Wtf.DesigChngReport.superclass.constructor.call(this, A);
	A.autoScroll = false
};
Wtf
		.extend(
				Wtf.DesigChngReport,
				Wtf.Panel,
				{
					onRender : function(C) {
						Wtf.DesigChngReport.superclass.onRender.call(this, C);
						this.fromdaterep = new Wtf.form.DateField({
							width : 155,
							scope : this,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getFirstDateOfMonth()
						});
						this.todaterep = new Wtf.form.DateField({
							width : 155,
							readOnly : true,
							scope : this,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getLastDateOfMonth()
						});
						var B = this.fromdaterep.getValue().format("m/d/Y");
						var A = this.todaterep.getValue().format("m/d/Y");
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "olddesignation"
						}, {
							name : "newdesignation"
						}, {
							name : "newdepartmentname"
						}, {
							name : "olddepartmentname"
						}, {
							name : "fullname"
						}, {
							name : "employeeid"
						}, {
							name : "updatedate",
							type : "date"
						} ]);
						this.empGDS = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "count"
							}, this.record),
							url : "Common/getPromotedEmp.common",
							baseParams : {
								mode : 117,
								stdate : B,
								enddate : A
							}
						});
						this.empGDS.load();
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.UserName"),
											dataIndex : "username",
											autoWidth : true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.OldDepartment"),
											dataIndex : "olddepartmentname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.OldDesignation"),
											dataIndex : "olddesignation",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.CurrentDepartment"),
											dataIndex : "newdepartmentname",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.CurrentDesignation"),
											dataIndex : "newdesignation",
											autoWidth : true,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Updatedon"),
											dataIndex : "updatedate",
											renderer : WtfGlobal.onlyDateRenderer,
											autoSize : true,
											sortable : true,
											groupable : true
										} ]);
						this.allempGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : this.id + "deschnggr",
									store : this.empGDS,
									cm : this.cm,
									sm : this.sm2,
									loadMask : true,
									displayInfo : true,
									enableColumnHide : false,
									trackMouseOver : true,
									clicksToEdit : 1,
									stripeRows : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "fullname",
									tbar : [
											WtfGlobal
													.getLocaleText("hrms.common.start.date")
													+ ":",
											this.fromdaterep,
											WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											this.todaterep,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.timesheet.generate.report"),
												minWidth : 100,
												scope : this,
												iconCls : getButtonIconCls(Wtf.btype.reportbutton),
												handler : function() {
													var E = this.fromdaterep
															.getValue().format(
																	"m/d/Y");
													var D = this.todaterep
															.getValue().format(
																	"m/d/Y");
													this.empGDS.removeAll();
													this.empGDS.baseParams = {
														mode : 117,
														stdate : E,
														enddate : D
													};
													calMsgBoxShow(202, 4, true);
													this.empGDS
															.load({
																scope : this,
																params : {
																	start : 0,
																	limit : this.allempGrid.pag.pageSize
																}
															});
													this.empGDS
															.on(
																	"load",
																	function() {
																		WtfGlobal
																				.closeProgressbar()
																	}, this)
												}
											} ],
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.common.Norecordsforselectedduration"))
									}
								});
						this.UsergridPanel2 = new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.allempGrid ]
						});
						this.innerpanel2 = new Wtf.Panel({
							layout : "fit",
							cls : "backcolor",
							border : false,
							items : [ this.UsergridPanel2 ]
						});
						this.add(this.innerpanel2)
					}
				});
Wtf.recruitmentJobs = function(A) {
	Wtf.recruitmentJobs.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.recruitmentJobs,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.recruitmentJobs.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.recruitmentJobs.superclass.onRender.call(this, A);
						this.record = Wtf.data.Record.create([ {
							name : "applicationid"
						}, {
							name : "jobname"
						}, {
							name : "jid"
						}, {
							name : "jdescription"
						}, {
							name : "jstartdate"
						}, {
							name : "jenddate"
						}, {
							name : "jdepartment"
						}, {
							name : "posmasterid"
						}, {
							name : "jobpositionid"
						}, {
							name : "selectionstatus"
						}, {
							name : "status"
						} ]);
						this.jobRecord = Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "id"
						} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						this.position = "";
						this.ds = new Wtf.data.Store({
							url : "Rec/Job/jobsearch.rec",
							reader : this.reader
						});
						this.ds.on("beforeload", function() {
							this.ds.baseParams = {
								flag : 36,
								userid : this.profId,
								start : 0,
								limit : this.myJobsgrid.pag.pageSize
							}
						}, this);
						this.com1Reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.jobRecord);
						this.com1store = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							reader : this.com1Reader,
							baseParams : {
								flag : 203,
								configid : 1
							}
						});
						this.com1store.load();
						this.com1store.on("load", function() {
							this.allrec = new this.jobRecord({
								id : "All",
								name : WtfGlobal
										.getLocaleText("hrms.recruitment.all")
							});
							this.com1store.add(this.allrec)
						}, this);
						this.com1combo = new Wtf.form.ComboBox({
							store : this.com1store,
							valueField : "id",
							displayField : "name",
							scope : this,
							hiddenName : "position",
							selectOnFocus : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.recruitment.all"),
							mode : "local",
							width : 150,
							editable : true,
							typeAhead : true,
							height : 200,
							value : "All",
							triggerAction : "all"
						});
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.id"),
											sortable : true,
											dataIndex : "jobpositionid"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											sortable : true,
											dataIndex : "jobname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											sortable : true,
											dataIndex : "jdepartment"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.details"),
											sortable : true,
											dataIndex : "jdescription"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											sortable : true,
											align : "center",
											dataIndex : "jstartdate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.due.date"),
											sortable : true,
											align : "center",
											dataIndex : "jenddate"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "selectionstatus",
											sortable : true,
											renderer : function(C) {
												if (C == "Pending") {
													return '<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending")
															+ "</FONT>"
												} else {
													if (C == "Shortlisted") {
														return '<FONT COLOR="green">'
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.shortlisted")
																+ "</FONT>"
													} else {
														if (C == "In Process") {
															return '<FONT COLOR="red">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.in.process")
																	+ "</FONT>"
														} else {
															if (C == "On Hold") {
																return '<FONT COLOR="DarkGoldenRod">'
																		+ WtfGlobal
																				.getLocaleText("hrms.recruitment.on.hold")
																		+ "</FONT>"
															} else {
																if (C == "Rejected") {
																	return '<FONT COLOR="Indigo">'
																			+ WtfGlobal
																					.getLocaleText("hrms.recruitment.rejected")
																			+ "</FONT>"
																} else {
																	if (C == "Selected") {
																		return '<FONT COLOR="Fuchsia">'
																				+ WtfGlobal
																						.getLocaleText("hrms.recruitment.Selected")
																				+ "</FONT>"
																	} else {
																		return '<FONT COLOR="Brown">'
																				+ C
																				+ "</FONT>"
																	}
																}
															}
														}
													}
												}
											}
										} ]);
						this.applybutton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.ApplyForJob"),
									iconCls : "pwndHRMS assignbuttonIcon",
									scope : this,
									id : "recapplyforjob",
									disabled : true,
									handler : this.applyjob
								});
						this.canceljobButton = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.CancelJob"),
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									minWidth : 90,
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.recruitment.JobPosition"),
										text : WtfGlobal
												.getLocaleText("hrms.recruitment.CancelJob.tooltip")
									},
									scope : this,
									handler : function() {
										this.rec = this.sm.getSelections();
										if (this.rec.length > 0) {
											this.canceljob()
										} else {
											Wtf.MessageBox
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.warning"),
														msg : WtfGlobal
																.getLocaleText("hrms.recruitment.Pleaseselectajobposition"),
														buttons : Wtf.MessageBox.OK
													})
										}
									}
								});
						this.myJobsgrid = new Wtf.KwlGridPanel(
								{
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									layout : "fit",
									border : false,
									displayInfo : true,
									loadMask : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.SearchbyJobId"),
									searchField : "jobpositionid",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.Nojobstodisplay")
												+ "</font></center>"
									},
									tbar : [
											"-",
											this.applybutton,
											this.canceljobButton,
											"->",
											WtfGlobal
													.getLocaleText("hrms.recruitment.selectby.designation")
													+ ":", this.com1combo ]
								});
						var B = new Array();
						B.push("recviewprerequisites");
						enableDisableButton(B, this.ds, this.sm);
						this.sm
								.on(
										"selectionchange",
										function() {
											this.applybutton.disable();
											this.canceljobButton.disable();
											if (this.sm.getCount() > 0) {
												var C = "";
												this.canceljobButton.enable();
												this.applybutton.enable();
												for ( var D = 0; D < this.sm.selections.length; D++) {
													if (this.sm.selections.items[D].data.selectionstatus != "Pending") {
														this.canceljobButton
																.disable()
													}
													if (C != this.sm.selections.items[D].data.status) {
														this.applybutton
																.disable();
														C = this.sm.selections.items[D].data.status;
														break
													}
													C = this.sm.selections.items[D].data.status
												}
											}
										}, this);
						this.com1combo.on("render", function() {
							this.com1combo.setValue("All");
							this.search()
						}, this);
						this.add(this.myJobsgrid);
						this.com1combo.on("select", this.search, this)
					},
					search : function() {
						calMsgBoxShow(202, 4, true);
						this.myJobsgrid.quickSearchTF.setValue("");
						if (this.com1combo.getValue() == "All") {
							this.position = "";
							this.ds.load({
								params : {
									userid : this.profId,
									start : 0,
									limit : this.myJobsgrid.pag.pageSize
								}
							})
						} else {
							this.position = this.com1combo.getValue();
							this.ds.load({
								params : {
									userid : this.profId,
									position : this.com1combo.getValue(),
									start : 0,
									limit : this.myJobsgrid.pag.pageSize
								}
							})
						}
						this.ds.on("load", function() {
							if (msgFlag == 1) {
								Wtf.MessageBox.hide()
							}
						}, this)
					},
					applyjob : function() {
						if (this.sm.hasSelection()) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.AreyousureApplyselectedjobposition"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(B) {
											if (B == "yes") {
												this.poskey = this.sm
														.getSelections();
												this.ids = [];
												for ( var A = 0; A < this.poskey.length; A++) {
													this.ids
															.push(this.poskey[A]
																	.get("jid"))
												}
												this.currentdate = new Date()
														.format("m/d/Y");
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/applyforjobexternal.rec",
																	params : {
																		flag : 37,
																		apcntid : this.profId,
																		posid : this.ids,
																		applydt : this.currentdate,
																		employeetype : 0
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			125,
																			0);
																	this.sm
																			.clearSelections();
																	if (this.com1combo
																			.getValue() == "All") {
																		this.ds
																				.load({
																					params : {
																						flag : 36,
																						userid : this.profId,
																						start : 0,
																						limit : this.myJobsgrid.pag.pageSize
																					}
																				})
																	} else {
																		this.ds
																				.load({
																					params : {
																						flag : 36,
																						position : this.com1combo
																								.getValue(),
																						userid : this.profId,
																						start : 0,
																						limit : this.myJobsgrid.pag.pageSize
																					}
																				})
																	}
																	if (Wtf
																			.getCmp("recjobstatusgrid"
																					+ this.profId) != null) {
																		Wtf
																				.getCmp(
																						"recjobstatusgrid"
																								+ this.profId)
																				.getStore()
																				.load()
																	}
																},
																function() {
																	calMsgBoxShow(
																			126,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					canceljob : function() {
						this.delkey = this.sm.getSelections();
						this.jobids = [];
						this.applyflag = false;
						for ( var A = 0; A < this.delkey.length; A++) {
							if (this.delkey[A].get("selectionstatus") == "Pending") {
								this.applyflag = true
							}
						}
						if (this.applyflag) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.Areyousurecancelselectedjobposition"),
										buttons : Wtf.MessageBox.YESNO,
										icon : Wtf.MessageBox.QUESTION,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												this.poskey = this.sm
														.getSelections();
												this.ids = [];
												for ( var B = 0; B < this.poskey.length; B++) {
													this.ids
															.push(this.poskey[B]
																	.get("applicationid"))
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/canceljobexternal.rec",
																	params : {
																		flag : 37,
																		applicationid : this.ids,
																		employeetype : 1
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			212,
																			0);
																	this.sm
																			.clearSelections();
																	this.ds
																			.load({
																				params : {
																					flag : 36,
																					userid : this.profId,
																					start : 0,
																					limit : this.myJobsgrid.pag.pageSize
																				}
																			});
																	if (Wtf
																			.getCmp("recjobstatusgrid"
																					+ this.profId) != null) {
																		Wtf
																				.getCmp(
																						"recjobstatusgrid"
																								+ this.profId)
																				.getStore()
																				.load()
																	}
																},
																function() {
																	calMsgBoxShow(
																			126,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(129, 0);
							this.jbGrid.getSelectionModel().clearSelections()
						}
					},
					dateRenderer : function(A) {
						if (!A) {
							return A
						}
						return A.format("l, F d, Y")
					}
				});
Wtf.recruitmentJobstatus = function(A) {
	Wtf.recruitmentJobstatus.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.recruitmentJobstatus,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.recruitmentJobstatus.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						Wtf.recruitmentJobstatus.superclass.onRender.call(this,
								A);
						this.record = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "jobid"
						}, {
							name : "jname"
						}, {
							name : "applydt",
							type : "date"
						}, {
							name : "interviewdt",
							type : "date"
						}, {
							name : "status"
						}, {
							name : "jobpositionid"
						}, {
							name : "jobDetails"
						} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						this.ds = new Wtf.data.Store({
							url : "Rec/Job/getJobApplications.rec",
							baseParams : {
								flag : 38,
								userid : this.profId
							},
							reader : this.reader
						});
						calMsgBoxShow(202, 4, true);
						this.ds.load();
						this.ds.on("load", function() {
							Wtf.MessageBox.hide()
						}, this);
						this.sm = new Wtf.grid.RowSelectionModel({
							singleSelect : false
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.id"),
											dataIndex : "jobpositionid"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "jname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.job.details"),
											dataIndex : "jobDetails"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applied.date"),
											renderer : this.dateRenderer,
											dataIndex : "applydt"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "status",
											renderer : function(B) {
												if (B == "Pending") {
													return '<FONT COLOR="blue">'
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.pending")
															+ "</FONT>"
												} else {
													if (B == "Shortlisted") {
														return '<FONT COLOR="green">'
																+ WtfGlobal
																		.getLocaleText("hrms.recruitment.shortlisted")
																+ "</FONT>"
													} else {
														if (B == "In Process") {
															return '<FONT COLOR="red">'
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.in.process")
																	+ "</FONT>"
														} else {
															if (B == "On Hold") {
																return '<FONT COLOR="DarkGoldenRod">'
																		+ WtfGlobal
																				.getLocaleText("hrms.recruitment.on.hold")
																		+ "</FONT>"
															} else {
																if (B == "Rejected") {
																	return '<FONT COLOR="Indigo">'
																			+ WtfGlobal
																					.getLocaleText("hrms.recruitment.rejected")
																			+ "</FONT>"
																} else {
																	if (B == "Selected") {
																		return '<FONT COLOR="Fuchsia">'
																				+ WtfGlobal
																						.getLocaleText("hrms.recruitment.Selected")
																				+ "</FONT>"
																	}
																}
															}
														}
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.interview.date"),
											renderer : this.dateRenderer,
											dataIndex : "interviewdt"
										} ]);
						this.myjobstatusgrid = new Wtf.KwlGridPanel(
								{
									id : "recjobstatusgrid" + this.profId,
									cm : this.cm,
									store : this.ds,
									sm : this.sm,
									border : false,
									layout : "fit",
									loadMask : true,
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.SearchbyJobIdJobDetails"),
									searchField : "jobpositionid",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : '<center><font size="4">'
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg")
												+ "</font></center>"
									}
								});
						this.add(this.myjobstatusgrid)
					},
					dateRenderer : function(A) {
						if (!A) {
							return A
						}
						return A.format("l, F d, Y")
					}
				});
Wtf.CreateApplicant = function(A) {
	this.Form = new Wtf.form.FormPanel(
			{
				border : false,
				region : "center",
				autoScroll : true,
				style : "padding-Left:0px;padding-top:10px;padding-right: 40px;",
				layout : "form",
				labelWidth : 105,
				defaults : {
					xtype : "textfield",
					width : 200,
					allowBlank : false
				},
				items : [
						{
							name : "fname",
							maxLength : 50,
							validator : WtfGlobal.noBlankCheck,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.profile.FirstName")
									+ "*"
						},
						{
							name : "lname",
							maxLength : 50,
							validator : WtfGlobal.noBlankCheck,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.profile.LastName")
									+ "*"
						},
						{
							name : "e",
							id : "applicantemailid",
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Email")
									+ "*",
							vtype : "email",
							maxLength : 50
						},
						this.contact = new Wtf.form.TextField(
								{
									name : "contact",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.profile.ContactNo")
											+ "*",
									maxLength : 20
								}), {
							xtype : "hidden",
							name : "compname",
							value : "demo"
						} ]
			});
	var D = WtfGlobal.getLocaleText("hrms.recruitment.create.applicant");
	var B = "";
	var C = "";
	B = WtfGlobal.getLocaleText("hrms.common.FillupthefollowingDetails");
	C = "images/createuser.png";
	this.CreatePanel = new Wtf.Panel(
			{
				region : "center",
				border : false,
				autoScroll : true,
				layout : "border",
				bodyStyle : "padding-Left:10px;padding-top:10px;padding-right: 0px;",
				items : [
						{
							region : "north",
							height : 75,
							border : false,
							bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
							html : getTopHtml(D, B, C)
						},
						{
							region : "center",
							border : false,
							bodyStyle : "padding-Left:20px;padding-top:20px;padding-right: 0px;background-color:#f1f1f1;",
							items : [ this.Form ]
						} ]
			});
	Wtf.apply(this, {
		layout : "fit",
		items : [ {
			border : false,
			layout : "border",
			items : [ this.CreatePanel ]
		} ],
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Create"),
			scope : this,
			handler : this.saveApplicant.createDelegate(this)
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			scope : this,
			handler : function() {
				this.close()
			}
		} ]
	}, A);
	Wtf.CreateApplicant.superclass.constructor.call(this, A);
	this.addEvents({
		"updategrid" : true
	})
};
Wtf
		.extend(
				Wtf.CreateApplicant,
				Wtf.Window,
				{
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.CreateApplicant.superclass.onRender.call(this, A)
					},
					enablePwd : function(A, B) {
						if (B.length < 4) {
							Wtf.Msg
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.error"),
										msg : WtfGlobal
												.getLocaleText("hrms.common.PasswordshouldbemorethanFourcharacter"),
										buttons : Wtf.Msg.OK,
										animEl : "elId",
										icon : Wtf.MessageBox.ERROR
									})
						}
					},
					checkPwd : function(A, B) {
						if (B != this.pass.getValue()) {
							Wtf.Msg
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.error"),
										msg : WtfGlobal
												.getLocaleText("hrms.common.EnterSamePassword"),
										buttons : Wtf.Msg.OK,
										animEl : "elId",
										icon : Wtf.MessageBox.ERROR
									});
							A.setValue("")
						}
					},
					saveApplicant : function() {
						var rec = this.Form.getForm().getValues();
						if (!this.Form.getForm().isValid()) {
							return
						} else {
							Wtf.MessageBox
									.confirm(
											WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											WtfGlobal
													.getLocaleText("hrms.common.Areyousureyouwanttocreateanapplicant"),
											function(btn) {
												if (btn != "yes") {
													return
												}
												calMsgBoxShow(200, 4, true);
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/createapplicantFunction.rec",
																	params : rec
																},
																this,
																function(
																		response) {
																	var res = eval("("
																			+ response
																			+ ")");
																	calMsgBoxShow(
																			[
																					""
																							+ res.type
																							+ "",
																					""
																							+ res.msg
																							+ "" ],
																			0);
																	this
																			.fireEvent(
																					"updategrid",
																					this);
																	if (res.type != "Warning"
																			|| res.type != WtfGlobal
																					.getLocaleText("hrms.common.warning")) {
																		this.Form
																				.getForm()
																				.reset();
																		this
																				.close()
																	} else {
																		Wtf
																				.getCmp(
																						"applicantemailid")
																				.setValue(
																						"")
																	}
																},
																function() {
																	Wtf.Msg
																			.alert(
																					WtfGlobal
																							.getLocaleText("hrms.common.Message"),
																					WtfGlobal
																							.getLocaleText("hrms.CampaignDetail.Someerroroccoured"))
																})
											}, this)
						}
					},
					genSuccessResponse : function(res) {
						var msg;
						res = eval("(" + res + ")");
						if (res.data == "msg:{succcess: true}") {
							Wtf.Msg
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.success"),
											WtfGlobal
													.getLocaleText("hrms.common.Applicantcreatedsuccessfully"));
							this.fireEvent("updategrid", this);
							this.Form.getForm().reset()
						} else {
							if (res.error == "msg:{companyname failure}") {
								msg = WtfGlobal
										.getLocaleText("hrms.common.CompanyNamenotavailable")
							} else {
								if (res.error == "msg:{userid failure}") {
									msg = WtfGlobal
											.getLocaleText("hrms.common.Useridnotavailable")
								} else {
									msg = WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Someerroroccoured")
								}
							}
							Wtf.Msg.alert(WtfGlobal
									.getLocaleText("hrms.common.Message"), msg)
						}
					},
					genFailureResponse : function(res) {
						var msg;
						res = eval("(" + res + ")");
						if (res == '{"data":"{"uri":"./applicantLogin.html","success":true}"}') {
							Wtf.Msg
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.success"),
											WtfGlobal
													.getLocaleText("hrms.common.Applicantcreatedsuccessfully"));
							this.fireEvent("updategrid", this);
							this.Form.getForm().reset()
						} else {
							Wtf.Msg
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.Message"),
											WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Someerroroccoured"))
						}
					}
				});
Wtf.appsList = function(A) {
	Wtf.apply(this, A);
	Wtf.appsList.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.appsList,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.appsList.superclass.initComponent.call(this)
					},
					onRender : function(A) {
						Wtf.appsList.superclass.onRender.call(this, A);
						this.allapplsGrid();
						this.getAdvanceSearchComponent();
						this.objsearchComponent.on("filterStore",
								this.filterStore, this);
						this.objsearchComponent.on("clearStoreFilter",
								this.clearStoreFilter, this);
						this.objsearchComponent.on("saveStore", this.saveStore,
								this);
						this.objsearchComponent.on("reloadgridStore",
								this.reloadgridStore, this);
						this.pan = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.objsearchComponent, {
								region : "center",
								layout : "fit",
								border : false,
								items : [ this.applGrid ]
							} ]
						});
						this.add(this.pan);
						this.exportinfo()
					},
					loaddata : function() {
						var B = new Array();
						this.objsearchComponent.cm = this.searchparams;
						for (i = 0; i < this.objsearchComponent.cm.length; i++) {
							var A = new Array();
							if (this.objsearchComponent.cm[i].dbname
									&& (this.objsearchComponent.cm[i].hidden == undefined || this.objsearchComponent.cm[i].hidden == false)) {
								var D = headerCheck(WtfGlobal
										.HTMLStripper(this.objsearchComponent.cm[i].header));
								A.push(D);
								A.push(this.objsearchComponent.cm[i].dbname);
								A.push(this.objsearchComponent.cm[i].xtype);
								A.push(this.objsearchComponent.cm[i].cname);
								A.push(this.objsearchComponent.cm[i].iscustom);
								B.push(A)
							}
						}
						var C = B;
						this.objsearchComponent.combostore.removeAll();
						this.objsearchComponent.combostore.loadData(C)
					},
					allapplsGrid : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record.create([ {
							name : "lid"
						}, {
							name : "uname"
						}, {
							name : "cname"
						}, {
							name : "email"
						}, {
							name : "address1"
						}, {
							name : "contactno"
						}, {
							name : "documents"
						} ]);
						this.reader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record);
						this.allAppsGDS = new Wtf.data.Store({
							url : "Rec/Job/getExternalApplicant.rec",
							baseParams : {
								flag : 49
							},
							reader : this.reader
						});
						calMsgBoxShow(202, 4, true);
						this.allAppsGDS.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.allAppsGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.applicant.name"),
											dataIndex : "cname",
											sortable : true,
											pdfwidth : 50
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.email.id"),
											dataIndex : "email",
											sortable : true,
											pdfwidth : 50,
											renderer : WtfGlobal.renderEmailTo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.contact"),
											dataIndex : "contactno",
											sortable : true,
											pdfwidth : 50
										} ],
								{
									header : WtfGlobal
											.getLocaleText("hrms.common.documents"),
									dataIndex : "documents",
									sortable : true,
									align : "center",
									renderer : function(C, B, G, F, E, D) {
										return "<div><a href='javascript:void(0)' title='Download' onclick='setDldUrl(\"fdownload.jsp?url="
												+ G.data.docid
												+ "&mailattch=true&dtype=attachment\")'><img class='downloaddocs' src='images/document-download.gif' style='cursor:pointer' title='"
												+ WtfGlobal
														.getLocaleText("hrms.common.Clicktodownloaddocument")
												+ "' ></a></div>"
									}
								});
						this.refreshBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.allAppsGDS
												.load({
													params : {
														start : 0,
														limit : this.applGrid.pag.pageSize
													}
												});
										Wtf.getCmp("Quick" + this.applGrid.id)
												.setValue("")
									}
								});
						this.createapp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.create.applicant"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.create.applicant.tooltip"),
									iconCls : "pwndCommon profilebuttonIcon",
									scope : this,
									handler : this.createApplicant
								});
						this.viewprofile = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.view.edit.profile"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.view.edit.profile.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.viewbutton),
									disabled : true,
									scope : this,
									handler : this.addprofile
								});
						this.jobsearch = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.job.search"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.job.search.tooltip"),
									iconCls : "pwndCommon searchbuttonIcon",
									disabled : true,
									scope : this,
									handler : this.jobSearch
								});
						this.jobstatus = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.job.status"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.job.status.tooltip"),
									iconCls : "pwndHRMS jobstatustabIcon",
									disabled : true,
									scope : this,
									handler : this.jobStatus
								});
						this.document = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.documents"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.external.documents.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.docbutton),
									disabled : true,
									scope : this,
									handler : this.uploaddocuments
								});
						this.advanceSearchBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.advanced.search"),
									id : "advanced3",
									scope : this,
									tooltip : WtfGlobal
											.getLocaleText("hrms.common.advanced.search.tooltip"),
									handler : this.configurAdvancedSearch,
									iconCls : "pwnd searchtabpane"
								});
						this.exportApplications = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.ExportApplications"),
									iconCls : "pwndExport export",
									minWidth : 81,
									scope : this,
									id : this.id + "exportApplications",
									handler : this.exportApplications
								});
						this.searchparams = [
								{
									name : "cname",
									dbname : "col1",
									header : WtfGlobal
											.getLocaleText("hrms.recruitment.applicant.name"),
									xtype : "textfield"
								},
								{
									name : "email",
									dbname : "col3",
									header : WtfGlobal
											.getLocaleText("hrms.common.email.id"),
									xtype : "textfield"
								},
								{
									name : "contact",
									dbname : "col4",
									header : WtfGlobal
											.getLocaleText("hrms.common.contact.no"),
									xtype : "textfield"
								} ];
						this.ExportInfoBtn = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								rowPdf : true
							},
							userinfo : true,
							get : 3,
							url : "Rec/Job/getExternalApplicantForExport.rec",
							filename : this.title
						});
						this.deleteapp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.applicant"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.recruitment.delete.applicant.tooltip"),
									iconCls : getButtonIconCls(Wtf.btype.deletebutton),
									minWidth : 109,
									disabled : true,
									scope : this,
									handler : this.deleteapps
								});
						var A = [];
						A.push("-", this.refreshBtn, "-", this.createapp, "-",
								this.viewprofile, "-", this.deleteapp, "-",
								this.jobsearch, "-", this.jobstatus, "-",
								this.document, "-", this.ExportInfoBtn, "-",
								this.advanceSearchBtn);
						this.applGrid = new Wtf.KwlGridPanel(
								{
									border : false,
									id : "allappslist",
									store : this.allAppsGDS,
									cm : this.cm,
									sm : this.sm2,
									loadMask : true,
									displayInfo : true,
									trackMouseOver : true,
									stripeRows : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.external.grid.search.msg"),
									searchField : "uname",
									serverSideSearch : true,
									tbar : A,
									bbar : [ this.exportApplications ],
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:createApplicant(\""
														+ this.id
														+ "\")'>"
														+ WtfGlobal
																.getLocaleText("hrms.recruitment.external.grid.msg")
														+ "</a>")
									}
								});
						this.sm2.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(A, this.applGrid, [
									5, 9, 11, 13 ], [ 7 ])
						}, this)
					},
					addprofile : function() {
						this.arr = this.sm2.getSelections();
						if (this.sm2.hasSelection() == false) {
							calMsgBoxShow(42, 0);
							return
						}
						var C = this.arr[0].get("lid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp(C + "Application");
						if (B == null) {
							B = new Wtf.createapplicantForm(
									{
										autoScroll : true,
										closable : true,
										al : true,
										title : this.arr[0].get("cname")
												+ WtfGlobal
														.getLocaleText("hrms.common.profile"),
										profId : C,
										iconCls : getTabIconCls(Wtf.etype.hrmsprofile),
										id : C + "Application"
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					jobSearch : function() {
						this.arr = this.sm2.getSelections();
						if (this.sm2.hasSelection() == false) {
							calMsgBoxShow(42, 0);
							return
						}
						var C = this.arr[0].get("lid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp(C + "jobsearch");
						if (B == null) {
							B = new Wtf.recruitmentJobs(
									{
										autoScroll : true,
										closable : true,
										layout : "fit",
										title : this.arr[0].get("cname")
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.s.jobs"),
										profId : C,
										arr : this.arr[0],
										id : C + "jobsearch",
										iconCls : getTabIconCls(Wtf.etype.hrmsexternaljob),
										border : false
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.doLayout()
					},
					jobStatus : function() {
						this.arr = this.sm2.getSelections();
						if (this.sm2.hasSelection() == false) {
							calMsgBoxShow(42, 0);
							return
						}
						var C = this.arr[0].get("lid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp(C + "jobstatus");
						if (B == null) {
							B = new Wtf.recruitmentJobstatus(
									{
										autoScroll : true,
										closable : true,
										border : false,
										layout : "fit",
										iconCls : "pwndHRMS jobstatustabIcon",
										title : this.arr[0].get("cname")
												+ WtfGlobal
														.getLocaleText("hrms.recruitment.s.job.status"),
										profId : C,
										id : C + "jobstatus"
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.doLayout()
					},
					loadStore : function() {
						this.allAppsGDS.load({
							params : {
								start : 0,
								limit : this.applGrid.pag.pageSize,
								ss : Wtf.getCmp("Quick" + this.applGrid.id)
										.getValue()
							}
						})
					},
					createApplicant : function() {
						var A = Wtf.getCmp("createApplicant");
						if (!A) {
							A = new Wtf.CreateApplicant(
									{
										title : WtfGlobal
												.getLocaleText("hrms.recruitment.create.applicant"),
										id : "createApplicant",
										closable : true,
										modal : true,
										iconCls : getButtonIconCls(Wtf.btype.winicon),
										width : 410,
										height : 300,
										resizable : false,
										layout : "fit",
										buttonAlign : "right"
									});
							A.show();
							A.on("updateGrid", this.loadStore, this)
						}
					},
					uploaddocuments : function() {
						if (this.sm2.hasSelection() == false) {
							calMsgBoxShow(42, 0);
							return
						}
						var E = this.sm2.getSelections();
						var C = (E[0].get("cname"));
						var D = E[0].get("lid");
						var A = Wtf.getCmp("recruitmentmanage");
						var B = Wtf.getCmp("appfilepanel" + D);
						if (B == null) {
							B = new Wtf.document_panel(
									{
										layout : "fit",
										border : false,
										title : C
												+ " "
												+ WtfGlobal
														.getLocaleText("hrms.common.documents"),
										lid : D,
										id : "appfilepanel" + D,
										manager : false,
										closable : true,
										app : "applicant",
										iconCls : getTabIconCls(Wtf.etype.hrmsdocuments)
									});
							A.add(B)
						}
						A.setActiveTab(B);
						A.setVisible(true);
						A.doLayout();
						Wtf.getCmp("as").doLayout()
					},
					deleteapps : function() {
						if (this.sm2.hasSelection()) {
							this.delkey = this.sm2.getSelections();
							this.ids = [];
							this.sm2.clearSelections();
							for ( var A = 0; A < this.delkey.length; A++) {
								this.ids.push(this.delkey[A].get("lid"));
								var B = this.allAppsGDS.indexOf(this.delkey[A]);
								WtfGlobal.highLightRow(this.applGrid, "FF0000",
										5, B)
							}
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.recruitment.delete.selected.applicants"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(C) {
											if (C == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : "Rec/Job/deleteJobapplicant.rec",
																	params : {
																		flag : 56,
																		ids : this.ids
																	}
																},
																this,
																function() {
																	calMsgBoxShow(
																			64,
																			0);
																	var D = {
																		start : 0,
																		limit : this.applGrid.pag.pageSize,
																		ss : Wtf
																				.getCmp(
																						"Quick"
																								+ this.applGrid.id)
																				.getValue()
																	};
																	WtfGlobal
																			.delaytasks(
																					this.allAppsGDS,
																					D)
																},
																function() {
																	calMsgBoxShow(
																			54,
																			1)
																})
											}
										}
									})
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					exportinfo : function() {
						var B, A = 1;
						var C = this.applGrid.getColumnModel();
						this.pdfStore = new Wtf.data.Store({});
						for (B = 0; B < C.getColumnCount(); B++) {
							if (C.isHidden(B) != undefined
									|| C.getColumnHeader(B) == ""
									|| C.getDataIndex(B) == "") {
								continue
							} else {
								var D = C.config[B].align;
								var E;
								if (D == undefined) {
									D = "center"
								}
								if (C.config[B].title == undefined) {
									E = C.config[B].dataIndex
								} else {
									E = C.config[B].title
								}
								this.newPdfRec = new Wtf.data.Record({
									header : E,
									title : C.config[B].header,
									width : C.config[B].pdfwidth,
									align : D,
									index : A
								});
								this.pdfStore.insert(this.pdfStore.getCount(),
										this.newPdfRec);
								A++
							}
						}
						this.grid = this.applGrid
					},
					exportApplications : function() {
						var A = "Rec/Job/exportAllApplications.rec?"
								+ Wtf.urlEncode(Wtf.urlDecode("employeetype="
										+ this.type + "&status=" + this.status
										+ "&visible=" + true
										+ "&filetype=csv&name=" + this.title
										+ "&applicationflag=" + 1
										+ "&allApplicationList=" + true
										+ "&searchJson=" + this.searchJson));
						Wtf.get("downloadframe").dom.src = A
					},
					getAdvanceSearchComponent : function() {
						this.objsearchComponent = new Wtf.advancedSearchComponent(
								{
									cm : this.searchparams,
									searchid : this.searchid
								});
						this.objsearchComponent.searchFlag = 6
					},
					configurAdvancedSearch : function() {
						this.objsearchComponent.show();
						this.objsearchComponent.searchStore.load({
							params : {
								searchid : this.searchid,
								searchFlag : 6
							}
						});
						this.advanceSearchBtn.disable();
						this.doLayout()
					},
					clearStoreFilter : function() {
						this.allAppsGDS.baseParams = {
							mode : 114,
							start : 0,
							limit : this.applGrid.pag.pageSize
						};
						this.allAppsGDS.load();
						this.searchJson = "";
						this.searchid = "";
						this.objsearchComponent.hide();
						this.advanceSearchBtn.enable();
						this.doLayout()
					},
					filterStore : function(A) {
						this.searchJson = A;
						this.allAppsGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							start : 0,
							limit : this.applGrid.pag.pageSize,
							ss : Wtf.getCmp("Quick" + this.applGrid.id)
									.getValue()
						};
						this.allAppsGDS.load()
					},
					reloadgridStore : function(A) {
						this.searchJson = "";
						if (this.searchid != undefined) {
							this.searchJson = A
						}
						this.allAppsGDS.baseParams = {
							mode : 114,
							searchJson : this.searchJson,
							start : 0,
							limit : this.applGrid.pag.pageSize,
							ss : Wtf.getCmp("Quick" + this.applGrid.id)
									.getValue()
						};
						this.allAppsGDS.load()
					},
					saveStore : function(json, saveSearchName) {
						this.saveJson = json;
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/saveSearch.common",
											params : {
												mode : 115,
												saveJson : this.saveJson,
												saveSearchName : saveSearchName,
												searchFlag : 6
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.isduplicate) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.administration.remember.already.exists.change.name",
																			params : [ saveSearchName ]
																		}) ],
														0, false, 450)
											} else {
												calMsgBoxShow(204, 0, false,
														300);
												reloadSavedSeaches()
											}
										}, function(response) {
											calMsgBoxShow(27, 1)
										})
					}
				});
function createApplicant(A) {
	Wtf.getCmp(A).createApplicant()
}
Wtf.createapplicantForm = function(A) {
	Wtf.apply(this, A);
	Wtf.createapplicantForm.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.createapplicantForm,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.createapplicantForm.superclass.initComponent.call(
								this, A);
						this.chkbox = new Wtf.form.Checkbox(
								{
									boxLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.Ihavereadagreetothelegaldisclaimer"),
									style : "margin-left:40%",
									listeners : {
										check : this.show_submit,
										scope : this
									}
								});
						this.submit = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.recruitment.Submitresume"),
									disabled : true,
									scope : this,
									handler : this.submitFormValue
								});
						this.pan7 = new Wtf.Panel(
								{
									frame : true,
									bodyStyle : "background:white",
									buttonAlign : "center",
									autoHeight : true,
									items : [
											{
												html : "<center> <font color='red'>"
														+ WtfGlobal
																.getLocaleText("hrms.recruitment.Disclaimer")
														+ "</font></center><hr/></br>"
											},
											{
												html : "&nbsp "
														+ WtfGlobal
																.getLocaleText("hrms.recruitment.Disclaimer.Undertaking")
											}, this.chkbox ],
									buttons : [ this.submit ]
								});
						this.getallpanels()
					},
					getallpanels : function() {
						this.PersonalattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.PersonalInformation"),
									widthValue : 215,
									layout : "form",
									frame : true,
									border : false,
									refid : this.profId,
									formtype : "Personal",
									id : "Personal" + this.profId,
									fetchmaster : true,
									chk : 1,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
								});
						this.ContactattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.ContactInformation"),
									widthValue : 215,
									layout : "form",
									frame : true,
									border : false,
									refid : this.profId,
									formtype : "Contact",
									id : "Contact" + this.profId,
									fetchmaster : true,
									chk : 1,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
								});
						this.AcademicattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.AcademicInformation"),
									widthValue : 215,
									layout : "form",
									frame : true,
									border : false,
									refid : this.profId,
									formtype : "Academic",
									fetchmaster : true,
									id : "Academic" + this.profId,
									chk : 1,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
								});
						this.WorkattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.WorkExperienceDetailsFullTime"),
									widthValue : 215,
									layout : "form",
									frame : true,
									border : false,
									refid : this.profId,
									formtype : "Work",
									id : "Work" + this.profId,
									fetchmaster : true,
									chk : 1,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
								});
						this.OtherattrPanel = new Wtf.Panel(
								{
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.OtherInformation"),
									widthValue : 215,
									layout : "form",
									frame : true,
									border : false,
									id : "other" + this.profId,
									refid : this.profId,
									formtype : "other",
									fetchmaster : true,
									chk : 1,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px;"
								});
						this.recinfo = new Wtf.FormPanel({
							autoHeight : true,
							url : "Rec/Job/saveConfigRecruitment.rec",
							frame : true,
							fileUpload : true,
							border : false,
							labelWidth : 150,
							items : [ this.PersonalattrPanel,
									this.ContactattrPanel,
									this.AcademicattrPanel, this.WorkattrPanel,
									this.OtherattrPanel ]
						})
					},
					onRender : function(A) {
						this.add(this.recinfo);
						this.add(this.pan7);
						this.renderconfigfields();
						Wtf.createapplicantForm.superclass.onRender.call(this,
								A)
					},
					show_submit : function() {
						if (this.chkbox.checked == true) {
							this.submit.enable()
						} else {
							this.submit.disable()
						}
					},
					submitFormValue : function() {
						var B = this.ValidateForm();
						if (B) {
							var A = this.recinfo.getForm().getValues();
							A.update = true;
							A.profileid = this.profId;
							calMsgBoxShow(200, 4, true);
							this.recinfo.getForm().submit(
									{
										scope : this,
										params : {
											Id : this.profId
										},
										success : function() {
											if (msgFlag == 1) {
												WtfGlobal.closeProgressbar()
											}
											calMsgBoxShow(206, 0);
											Wtf.getCmp("recruitmentmanage")
													.remove(this)
										},
										failure : function() {
											calMsgBoxShow(27, 1)
										}
									})
						} else {
							calMsgBoxShow(5, 0)
						}
					},
					ValidateForm : function() {
						for ( var A = 0; A < this.fieldsdata.length; A++) {
							if (!Wtf.getCmp(this.id + "text" + A).isValid()) {
								return false
							}
						}
						return true
					},
					renderconfigfields : function() {
						this.fetchmaster = true;
						this.count = 0;
						this.widthValue = 215;
						Wtf.Ajax
								.requestEx(
										{
											url : "Rec/Job/getConfigRecruitment.rec",
											method : "POST",
											params : {
												visible : "True",
												fetchmaster : this.fetchmaster,
												refid : this.profId,
												formtype : "All"
											}
										},
										this,
										function(response) {
											var responseObj = eval("("
													+ response + ")");
											if (responseObj.data != ""
													&& responseObj.data != null) {
												this.count = responseObj.data.length;
												this.fieldsdata = responseObj.data;
												for ( var i = 0; i < responseObj.data.length; i++) {
													if (responseObj.data[i].configtype == 0) {
														this.text = new Wtf.form.TextField(
																{
																	id : this.id
																			+ "text"
																			+ i,
																	fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																			+ "*"
																			: responseObj.data[i].fieldname,
																	name : "Col"
																			+ responseObj.data[i].colnum,
																	value : responseObj.data[i].configdata[0],
																	width : this.widthValue,
																	allowBlank : (responseObj.data[i].allowblank == 0) ? false
																			: true
																});
														Wtf
																.getCmp(
																		responseObj.data[i].formtype
																				+ this.profId)
																.add(this.text)
													} else {
														if (responseObj.data[i].configtype == 7) {
															this.text = new Wtf.form.TextField(
																	{
																		id : this.id
																				+ "text"
																				+ i,
																		fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																				+ "*"
																				: responseObj.data[i].fieldname,
																		name : "Col"
																				+ responseObj.data[i].colnum,
																		value : responseObj.data[i].configdata[0],
																		width : this.widthValue,
																		allowBlank : (responseObj.data[i].allowblank == 0) ? false
																				: true,
																		vtype : "email"
																	});
															Wtf
																	.getCmp(
																			responseObj.data[i].formtype
																					+ this.profId)
																	.add(
																			this.text)
														} else {
															if (responseObj.data[i].configtype == 6) {
																Wtf
																		.getCmp(
																				responseObj.data[i].formtype
																						+ this.profId)
																		.add(
																				new Wtf.form.NumberField(
																						{
																							id : this.id
																									+ "text"
																									+ i,
																							fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																									+ "*"
																									: responseObj.data[i].fieldname,
																							name : "Col"
																									+ responseObj.data[i].colnum,
																							value : (!isNaN(responseObj.data[i].configdata[0]) && responseObj.data[i].configdata[0] != undefined) ? responseObj.data[i].configdata[0]
																									: 0,
																							maxLength : 10,
																							scope : this,
																							width : this.widthValue,
																							allowBlank : (responseObj.data[i].allowblank == 0) ? false
																									: true
																						}))
															} else {
																if (responseObj.data[i].configtype == 22) {
																	Wtf
																			.getCmp(
																					responseObj.data[i].formtype
																							+ this.profId)
																			.add(
																					new Wtf.form.Checkbox(
																							{
																								id : this.id
																										+ "text"
																										+ i,
																								fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																										+ " *"
																										: responseObj.data[i].fieldname,
																								name : "Col"
																										+ responseObj.data[i].colnum,
																								checked : (this.profId.length == 0) ? false
																										: responseObj.data[i].configdata[0],
																								scope : this
																							}))
																} else {
																	if (responseObj.data[i].configtype == 2) {
																		Wtf
																				.getCmp(
																						responseObj.data[i].formtype
																								+ this.profId)
																				.add(
																						new Wtf.form.DateField(
																								{
																									id : this.id
																											+ "text"
																											+ i,
																									fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																											+ "*"
																											: responseObj.data[i].fieldname,
																									name : "Col"
																											+ responseObj.data[i].colnum,
																									value : responseObj.data[i].configdata[0],
																									width : this.widthValue,
																									format : "Y-m-j",
																									allowBlank : (responseObj.data[i].allowblank == 0) ? false
																											: true
																								}))
																	} else {
																		if (responseObj.data[i].configtype == 3) {
																			var storedata = [];
																			if (responseObj.data[i].data != null) {
																				for ( var ctr = 0; ctr < responseObj.data[i].data.length; ctr++) {
																					var storerecord = [];
																					storerecord
																							.push(responseObj.data[i].data[ctr].masterid);
																					storerecord
																							.push(responseObj.data[i].data[ctr].masterdata);
																					storedata
																							.push(storerecord)
																				}
																			}
																			this.ruleTypeStore = new Wtf.data.SimpleStore(
																					{
																						fields : [
																								"id",
																								"name" ],
																						data : storedata
																					});
																			this.ruleTypeCombo = new Wtf.form.ComboBox(
																					{
																						id : this.id
																								+ "text"
																								+ i,
																						triggerAction : "all",
																						store : this.ruleTypeStore,
																						mode : "local",
																						width : this.widthValue,
																						listWidth : this.widthValue,
																						displayField : "name",
																						fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																								+ "*"
																								: responseObj.data[i].fieldname,
																						valueField : "id",
																						name : "Col"
																								+ responseObj.data[i].colnum,
																						hiddenName : "Col"
																								+ responseObj.data[i].colnum,
																						editable : false,
																						value : responseObj.data[i].configdata[0],
																						allowBlank : (responseObj.data[i].allowblank == 0) ? false
																								: true
																					});
																			Wtf
																					.getCmp(
																							responseObj.data[i].formtype
																									+ this.profId)
																					.add(
																							this.ruleTypeCombo)
																		} else {
																			if (responseObj.data[i].configtype == 55) {
																				Wtf
																						.getCmp(
																								responseObj.data[i].formtype
																										+ this.profId)
																						.add(
																								new Wtf.MenuHTMLEditor(
																										{
																											id : this.id
																													+ "text"
																													+ i,
																											fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																													+ "*"
																													: responseObj.data[i].fieldname,
																											width : this.widthValue,
																											height : 100,
																											value : responseObj.data[i].configdata[0],
																											name : responseObj.data[i].fieldname,
																											allowBlank : (responseObj.data[i].allowblank == 0) ? false
																													: true
																										}))
																			} else {
																				if (responseObj.data[i].configtype == 4) {
																					Wtf
																							.getCmp(
																									responseObj.data[i].formtype
																											+ this.profId)
																							.add(
																									new Wtf.form.TextArea(
																											{
																												id : this.id
																														+ "text"
																														+ i,
																												fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																														+ "*"
																														: responseObj.data[i].fieldname,
																												name : "Col"
																														+ responseObj.data[i].colnum,
																												value : responseObj.data[i].configdata[0],
																												scope : this,
																												width : this.widthValue,
																												allowBlank : (responseObj.data[i].allowblank == 0) ? false
																														: true
																											}))
																				} else {
																					if (responseObj.data[i].configtype == 77) {
																						var storedata1 = [];
																						if (responseObj.data[i].masterdata != null) {
																							for ( var ctr1 = 0; ctr1 < responseObj.data[i].masterdata.length; ctr1++) {
																								var storerecord1 = [];
																								storerecord1
																										.push(responseObj.data[i].masterdata[ctr1].id);
																								storerecord1
																										.push(responseObj.data[i].masterdata[ctr1].data);
																								storedata1
																										.push(storerecord1)
																							}
																						}
																						this.ruleTypeStore1 = new Wtf.data.SimpleStore(
																								{
																									fields : [
																											"id",
																											"name" ],
																									data : storedata1
																								});
																						Wtf
																								.getCmp(
																										responseObj.data[i].formtype
																												+ this.profId)
																								.add(
																										new Wtf.common.Select(
																												Wtf
																														.applyIf(
																																{
																																	multiSelect : true,
																																	forceSelection : true
																																},
																																{
																																	id : this.id
																																			+ "text"
																																			+ i,
																																	triggerAction : "all",
																																	store : this.ruleTypeStore1,
																																	mode : "local",
																																	width : this.widthValue,
																																	listWidth : this.widthValue,
																																	displayField : "name",
																																	fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																																			+ "*"
																																			: responseObj.data[i].fieldname,
																																	valueField : "id",
																																	hiddenName : responseObj.data[i].fieldname,
																																	name : "Col"
																																			+ responseObj.data[i].colnum,
																																	value : responseObj.data[i].configdata,
																																	scope : this,
																																	allowBlank : (responseObj.data[i].allowblank == 0) ? false
																																			: true
																																})))
																					} else {
																						if (responseObj.data[i].configtype == 5) {
																							Wtf
																									.getCmp(
																											responseObj.data[i].formtype
																													+ this.profId)
																									.add(
																											new Wtf.common.helpTextField(
																													{
																														id : this.id
																																+ "text"
																																+ i,
																														fieldLabel : (responseObj.data[i].allowblank == 0) ? responseObj.data[i].fieldname
																																+ "*"
																																: responseObj.data[i].fieldname,
																														name : "Col"
																																+ responseObj.data[i].colnum,
																														fileName : (responseObj.data[i].configdata[0] == undefined) ? ""
																																: "<span><a href='javascript:void(0)' title="
																																		+ WtfGlobal
																																				.getLocaleText("hrms.common.Download")
																																		+ " onclick='setDldUrl(\"Common/Document/downloadDocuments.common?url="
																																		+ responseObj.data[i].configdata[0]
																																		+ "&mailattch=true&dtype=attachment&applicant=applicant\")'><span class='pwndHRMS resumeIcon' style='cursor:pointer;padding-left:20px;margin-top:-20px;' title="
																																		+ WtfGlobal
																																				.getLocaleText("hrms.common.Clicktodownloaddocument")
																																		+ " ></span></a></span>",
																														scope : this,
																														width : this.widthValue,
																														autoCreate : {
																															tag : "input",
																															type : "text",
																															size : "13",
																															autocomplete : "off"
																														},
																														msgTarget : "under",
																														allowBlank : (responseObj.data[i].configdata[0] == undefined && responseObj.data[i].allowblank == 0) ? false
																																: true,
																														inputType : "file"
																													}))
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												this.recinfo.doLayout()
											}
										}, function() {
										})
					}
				});
Wtf.jobProfile = function(A) {
	Wtf.jobProfile.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.jobProfile,
				Wtf.Panel,
				{
					initComponent : function(A) {
						isNewReq = 1;
						this.addEvents({
							"editjobprofile" : true
						});
						this.jobrecord = new Wtf.data.Record.create([ {
							name : "jobid"
						}, {
							name : "designation"
						}, {
							name : "details"
						}, {
							name : "department"
						}, {
							name : "manager"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "jobtype"
						}, {
							name : "travel"
						}, {
							name : "expmonth"
						}, {
							name : "expyear"
						}, {
							name : "relocation"
						}, {
							name : "location"
						}, {
							name : "jobshift"
						}, {
							name : "posid"
						}, {
							name : "nopos"
						}, {
							name : "jobmeta"
						} ]);
						this.jobrecordreader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.jobrecord);
						this.jobstore = new Wtf.data.Store({
							url : "Rec/Job/getjobprofileFunction.rec",
							reader : this.jobrecordreader,
							autoLoad : true,
							baseParams : {
								flag : 155,
								position : this.positionid
							}
						});
						this.schd = [
								[
										WtfGlobal
												.getLocaleText("hrms.common.FullTime"),
										"1" ],
								[
										WtfGlobal
												.getLocaleText("hrms.common.PartTime"),
										"2" ] ];
						this.sch = new Wtf.data.SimpleStore({
							fields : [ "initial", "id" ],
							data : this.schd
						});
						this.jobrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.jobStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 1,
								flag : 203
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.jobrec),
							autoLoad : false
						});
						this.jobName = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.JobName"),
							readOnly : true,
							width : 200
						});
						this.jobType = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.JobShift"),
									store : this.sch,
									displayField : "initial",
									valueField : "id",
									typeAhead : true,
									triggerAction : "all",
									disabled : this.viewOnlyType,
									forceSelection : true,
									mode : "local",
									selectOnFocus : true,
									width : 200
								});
						this.location = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.Location"),
									readOnly : this.viewOnlyType,
									width : 200,
									maxLength : 255
								});
						this.nopos = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.no.of.vacancies")
											+ "*",
									name : "nopos",
									readOnly : this.viewOnlyType,
									allowDecimals : false,
									width : 200,
									allowBlank : false,
									minValue : 1,
									maxLength : 5
								});
						this.deptrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.deptStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 7,
								flag : 203
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.deptrec),
							autoLoad : false
						});
						this.jobDepartment = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.department"),
							readOnly : true,
							width : 200
						});
						this.apprManager = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.approving.manager")
											+ "*",
									store : Wtf.managerStore,
									displayField : "username",
									valueField : "userid",
									disabled : this.viewOnlyType,
									forceSelection : true,
									allowBlank : false,
									typeAhead : true,
									triggerAction : "all",
									mode : "local",
									selectOnFocus : true,
									width : 200
								});
						if (!Wtf.StoreMgr.containsKey("manager")) {
							Wtf.managerStore.load();
							Wtf.managerStore.on("load", function() {
								Wtf.StoreMgr.add("manager", Wtf.managerStore)
							}, this)
						}
						this.jobstartDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.start.date")
									+ "*",
							allowBlank : false,
							disabled : this.viewOnlyType,
							format : "m/d/Y",
							width : 200
						});
						this.jobendDate = new Wtf.form.DateField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.end.date")
									+ "*",
							allowBlank : false,
							disabled : this.viewOnlyType,
							format : "m/d/Y",
							width : 200
						});
						this.jobstartDate
								.on(
										"blur",
										function(B) {
											if (B.getValue() > this.jobendDate
													.getValue()) {
												this.jobendDate
														.markInvalid(WtfGlobal
																.getLocaleText({
																	key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
																	params : [ this.jobstartDate
																			.getValue()
																			.format(
																					"m/d/Y") ]
																}))
											}
										}, this);
						this.jobendDate
								.on(
										"blur",
										function(B) {
											if (B.getValue() < this.jobstartDate
													.getValue()) {
												B
														.markInvalid(WtfGlobal
																.getLocaleText({
																	key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
																	params : [ this.jobstartDate
																			.getValue()
																			.format(
																					"m/d/Y") ]
																}))
											}
										}, this);
						this.yesNoStore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "name" ],
									data : [
											[
													"Yes",
													WtfGlobal
															.getLocaleText("hrms.recruitment.callback.Yes") ],
											[
													"No",
													WtfGlobal
															.getLocaleText("hrms.recruitment.callback.No") ] ]
								});
						this.travel = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.TravelRequired"),
									store : this.yesNoStore,
									displayField : "name",
									valueField : "id",
									disabled : this.viewOnlyType,
									forceSelection : true,
									typeAhead : true,
									triggerAction : "all",
									selectOnFocus : true,
									mode : "local",
									width : 200
								});
						this.relocation = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.RelocationProvided"),
									store : this.yesNoStore,
									displayField : "name",
									valueField : "id",
									disabled : this.viewOnlyType,
									forceSelection : true,
									typeAhead : true,
									triggerAction : "all",
									selectOnFocus : true,
									mode : "local",
									width : 200
								});
						this.exp = [ [ 0 ], [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ],
								[ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], [ 11 ] ];
						this.expstore = new Wtf.data.SimpleStore({
							fields : [ "exp" ],
							data : this.exp
						});
						this.exp_year = new Wtf.form.ComboBox(
								{
									store : this.expstore,
									displayField : "exp",
									valueField : "exp",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.Experienceyearsmonths"),
									labelSeperator : "",
									disabled : this.viewOnlyType,
									forceSelection : true,
									name : "workyear",
									typeAhead : true,
									width : 70,
									labelWidth : 70,
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.Year"),
									mode : "local",
									triggerAction : "all"
								});
						this.exp_month = new Wtf.form.ComboBox({
							store : this.expstore,
							displayField : "exp",
							valueField : "exp",
							labelSeperator : "",
							disabled : this.viewOnlyType,
							forceSelection : true,
							name : "workmonth",
							typeAhead : true,
							width : 70,
							emptyText : WtfGlobal
									.getLocaleText("hrms.common.Months"),
							mode : "local",
							triggerAction : "all"
						});
						this.experiencepanel = new Wtf.Panel({
							width : 600,
							frame : false,
							border : false,
							style : "margin-bottom:0px",
							layout : "column",
							items : [ {
								width : 265,
								frame : false,
								border : false,
								layout : "form",
								items : [ this.exp_year ]
							}, {
								width : 150,
								frame : false,
								border : false,
								layout : "form",
								labelWidth : 10,
								labelSeparator : " ",
								items : [ this.exp_month ]
							} ]
						});
						this.jobDescription = new Wtf.form.TextArea(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.JobDescription"),
									width : 200,
									readOnly : this.viewOnlyType,
									height : 75,
									maxLength : 512
								});
						this.posid = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.recruitment.job.id"),
							name : "jobid",
							width : 200,
							disabled : true,
							maxLength : 255
						});
						this.descriptionPanel = new Wtf.Panel({
							autoHeight : true,
							border : false,
							labelWidth : 120,
							cls : "formstyleClass5",
							layout : "form",
							columnWidth : 0.99,
							items : [ this.jobDescription ]
						});
						this.form1 = new Wtf.form.FormPanel({
							columnWidth : 0.48,
							labelWidth : 120,
							autoHeight : true,
							border : false,
							frame : false,
							style : "margin-bottom:0px",
							bodyStyle : "padding:0px 0px 0px 200px;",
							items : [ this.posid, this.jobName,
									this.jobDepartment, this.apprManager,
									this.jobType, this.location,
									this.jobDescription ]
						});
						this.form2 = new Wtf.form.FormPanel({
							columnWidth : 0.52,
							labelWidth : 145,
							autoHeight : true,
							border : false,
							frame : false,
							style : "margin-bottom:0px",
							bodyStyle : "padding:0px 0px 0px 100px;",
							items : [ this.nopos, this.jobstartDate,
									this.jobendDate, this.travel,
									this.relocation, this.experiencepanel ]
						});
						this.jobprofileForm = new Wtf.Panel(
								{
									frame : false,
									border : false,
									bodyStyle : "background-color:#FFFFFF;padding:20px 20px 20px 20px;",
									layout : "column",
									items : [ this.form1, this.form2 ]
								});
						this.record1 = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "responsibility"
						} ]);
						this.reader1 = new Wtf.data.KwlJsonReader1({
							root : "responsibility",
							totalProperty : "count"
						}, this.record1);
						this.dataStore1 = new Wtf.data.Store({
							url : "Rec/Job/viewjobprofileFunction.rec",
							reader : this.reader1,
							baseParams : {
								flag : 157,
								position : this.positionid,
								type : 1
							}
						});
						this.addButton1 = new Wtf.Button({
							text : WtfGlobal.getLocaleText("hrms.common.add"),
							iconCls : getButtonIconCls(Wtf.btype.addbutton),
							minWidth : 45,
							scope : this,
							handler : function() {
								this.addstore1rec()
							}
						});
						this.deleteButton1 = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							iconCls : getButtonIconCls(Wtf.btype.deletebutton),
							minWidth : 45,
							disabled : true,
							scope : this,
							handler : function() {
								this.deleterec(this.responsibility)
							}
						});
						this.sm1 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.column1 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm1,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.Responsibility"),
											dataIndex : "responsibility",
											editor : this.viewOnlyType ? null
													: new Wtf.form.TextField({
														maxLength : 255
													})
										} ]);
						this.responsibility = new Wtf.grid.EditorGridPanel(
								{
									store : this.dataStore1,
									autoScroll : true,
									cm : this.column1,
									sm : this.sm1,
									height : 250,
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.Responsibilities"),
									clicksToEdit : 1,
									viewConfig : {
										forceFit : true
									},
									cls : "formstyleClass5",
									border : true,
									tbar : this.viewOnlyType ? null : [
											this.addButton1, "-",
											this.deleteButton1 ]
								});
						this.record2 = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "skill"
						}, {
							name : "skilldesc"
						} ]);
						this.reader2 = new Wtf.data.KwlJsonReader1({
							root : "skill",
							totalProperty : "count"
						}, this.record2);
						this.dataStore2 = new Wtf.data.Store({
							url : "Rec/Job/viewjobprofileFunction.rec",
							reader : this.reader2,
							baseParams : {
								flag : 157,
								position : this.positionid,
								type : 2
							}
						});
						this.addButton2 = new Wtf.Button({
							text : WtfGlobal.getLocaleText("hrms.common.add"),
							iconCls : getButtonIconCls(Wtf.btype.addbutton),
							minWidth : 45,
							scope : this,
							handler : this.addstore2rec
						});
						this.deleteButton2 = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							iconCls : getButtonIconCls(Wtf.btype.deletebutton),
							minWidth : 45,
							scope : this,
							disabled : true,
							handler : function() {
								this.deleterec(this.skillgrid)
							}
						});
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.column2 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.recruitment.Skill"),
											dataIndex : "skill",
											editor : this.viewOnlyType ? null
													: new Wtf.form.TextField({
														maxLength : 255
													})
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "skilldesc",
											editor : this.viewOnlyType ? null
													: new Wtf.form.TextField({
														maxLength : 255
													})
										} ]);
						this.skillgrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.dataStore2,
									autoScroll : true,
									cm : this.column2,
									sm : this.sm2,
									height : 250,
									viewConfig : {
										forceFit : true
									},
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.SkillsRequired"),
									clicksToEdit : 1,
									cls : "formstyleClass5",
									border : true,
									tbar : this.viewOnlyType ? null : [
											this.addButton2, "-",
											this.deleteButton2 ]
								});
						this.record3 = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "qualification"
						}, {
							name : "qualificationdesc"
						} ]);
						this.reader3 = new Wtf.data.KwlJsonReader1({
							root : "qualification",
							totalProperty : "count"
						}, this.record3);
						this.dataStore3 = new Wtf.data.Store({
							url : "Rec/Job/viewjobprofileFunction.rec",
							reader : this.reader3,
							baseParams : {
								flag : 157,
								position : this.positionid,
								type : 3
							}
						});
						this.sm3 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.column3 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm3,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Qualification"),
											dataIndex : "qualification",
											editor : this.viewOnlyType ? null
													: new Wtf.form.TextField({
														maxLength : 255
													})
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "qualificationdesc",
											editor : this.viewOnlyType ? null
													: new Wtf.form.TextField({
														maxLength : 255
													})
										} ]);
						this.addButton3 = new Wtf.Button({
							text : WtfGlobal.getLocaleText("hrms.common.add"),
							iconCls : getButtonIconCls(Wtf.btype.addbutton),
							minWidth : 45,
							scope : this,
							handler : this.addstore3rec
						});
						this.deleteButton3 = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							iconCls : getButtonIconCls(Wtf.btype.deletebutton),
							minWidth : 45,
							disabled : true,
							scope : this,
							handler : function() {
								this.deleterec(this.qualgrid)
							}
						});
						this.qualgrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.dataStore3,
									autoScroll : true,
									cm : this.column3,
									sm : this.sm3,
									height : 250,
									title : WtfGlobal
											.getLocaleText("hrms.recruitment.QualificationRequired"),
									clicksToEdit : 1,
									viewConfig : {
										forceFit : true
									},
									cls : "formstyleClass5",
									border : true,
									tbar : this.viewOnlyType ? null : [
											this.addButton3, "-",
											this.deleteButton3 ]
								});
						this.submit = new Wtf.Button({
							text : WtfGlobal.getLocaleText("hrms.common.Save"),
							iconCls : getButtonIconCls(Wtf.btype.submitbutton),
							scope : this,
							handler : this.saveFormValue
						});
						this.bbar = this.viewOnlyType ? null : [ "->",
								this.submit ], this.jobpanel = new Wtf.Panel({
							scrollable : true,
							autoScroll : true,
							autoWidth : true,
							autoHeight : true,
							border : false,
							items : [ this.jobprofileForm, this.responsibility,
									this.skillgrid, this.qualgrid ]
						});
						if (this.disableSubmit) {
							this.submit.disable()
						}
						Wtf.jobProfile.superclass.initComponent.call(this, A)
					},
					onRender : function(A) {
						this.add(this.jobpanel);
						this.jobstore.on("load", this.displayFormValue, this);
						Wtf.jobProfile.superclass.onRender.call(this, A);
						this.sm1.on("selectionchange", function() {
							if (this.sm1.hasSelection()) {
								this.deleteButton1.enable()
							} else {
								this.deleteButton1.disable()
							}
						}, this);
						this.sm2.on("selectionchange", function() {
							if (this.sm2.hasSelection()) {
								this.deleteButton2.enable()
							} else {
								this.deleteButton2.disable()
							}
						}, this);
						this.sm3.on("selectionchange", function() {
							if (this.sm3.hasSelection()) {
								this.deleteButton3.enable()
							} else {
								this.deleteButton3.disable()
							}
						}, this)
					},
					saveFormValue : function() {
						if (isNewReq == 1) {
							if (this.jobstartDate.getValue().format("Ymd") > this.jobendDate
									.getValue().format("Ymd")
									|| !this.form2.getForm().isValid()
									|| !this.form1.getForm().isValid()) {
								if (this.jobstartDate.getValue().format("Ymd") > this.jobendDate
										.getValue().format("Ymd")) {
									this.jobendDate
											.markInvalid(WtfGlobal
													.getLocaleText({
														key : "hrms.recruitment.Thedateinthisfieldbeequaltooraftermessage",
														params : [ this.jobstartDate
																.getValue()
																.format("m/d/Y") ]
													}))
								}
								calMsgBoxShow(203, 0);
								return
							} else {
								isNewReq = 0;
								this.submit.setDisabled(true);
								Wtf.Ajax
										.requestEx(
												{
													url : "Rec/Job/InternalJobpositions.rec",
													params : {
														startdate : this.jobstartDate
																.getValue()
																.format("m/d/Y"),
														enddate : this.jobendDate
																.getValue()
																.format("m/d/Y"),
														details : (this.jobDescription
																.getRawValue()
																.trim()
																.replace(
																		/^\n*/,
																		" "))
																.replace(
																		/\n*$/,
																		" "),
														manager : this.apprManager
																.getValue(),
														jobshift : this.jobType
																.getValue(),
														posid : this.positionid,
														location : this.location
																.getValue(),
														relocation : this.relocation
																.getValue(),
														travel : this.travel
																.getValue(),
														expyear : this.exp_year
																.getValue(),
														expmonth : this.exp_month
																.getValue(),
														nopos : this.nopos
																.getValue()
													}
												}, this, function() {
													isNewReq = 1;
													calMsgBoxShow(174, 0);
													this.submit
															.setDisabled(false)
												}, function() {
													isNewReq = 1;
													calMsgBoxShow(52, 1);
													this.submit
															.setDisabled(false)
												});
								var D = "";
								var B = "";
								var A = "";
								var C;
								for ( var F = 0; F < this.dataStore1.getCount(); F++) {
									C = this.dataStore1.getAt(F).data;
									if (C.responsibility.trim() != "") {
										D += "{'id':'" + C.id + "',";
										D += "'type':'" + 1 + "',";
										D += "'responsibility':'"
												+ WtfGlobal
														.onlySinglequoateRenderer(C.responsibility)
												+ "'},"
									}
								}
								var I = D.length - 1;
								var H = D.substr(0, I);
								for (F = 0; F < this.dataStore2.getCount(); F++) {
									C = this.dataStore2.getAt(F).data;
									if (C.skill.trim() != "") {
										B += "{'id':'" + C.id + "',";
										B += "'type':'" + 2 + "',";
										B += "'skill':'"
												+ WtfGlobal
														.onlySinglequoateRenderer(C.skill)
												+ "',";
										B += "'skilldesc':'"
												+ WtfGlobal
														.onlySinglequoateRenderer(C.skilldesc)
												+ "'},"
									}
								}
								I = B.length - 1;
								var G = B.substr(0, I);
								for (F = 0; F < this.dataStore3.getCount(); F++) {
									C = this.dataStore3.getAt(F).data;
									if (C.qualification.trim() != "") {
										A += "{'id':'" + C.id + "',";
										A += "'type':'" + 3 + "',";
										A += "'qualification':'"
												+ WtfGlobal
														.onlySinglequoateRenderer(C.qualification)
												+ "',";
										A += "'qualificationdesc':'"
												+ WtfGlobal
														.onlySinglequoateRenderer(C.qualificationdesc)
												+ "'},"
									}
								}
								I = A.length - 1;
								var E = A.substr(0, I);
								calMsgBoxShow(200, 4, true);
								Wtf.Ajax.requestEx({
									url : "Rec/Job/addjobprofile.rec",
									params : {
										flag : 156,
										jsondataresp : H,
										jsondataskill : G,
										jsondataqual : E,
										position : this.positionid
									}
								}, this, function() {
									this.submit.setDisabled(false);
									this.dataStore1.reload();
									this.dataStore2.reload();
									this.dataStore3.reload()
								}, function() {
									calMsgBoxShow(52, 1);
									this.submit.setDisabled(false)
								})
							}
						}
					},
					displayFormValue : function() {
						if (this.jobstore.getCount() > 0) {
							var A = this.jobstore.getAt(0);
							this.jobName.setValue(A.data.designation);
							this.jobDescription.setValue(A.data.details);
							this.jobDepartment.setValue(A.data.department);
							this.apprManager.setValue(A.data.manager);
							this.jobstartDate.setValue(A.data.startdate);
							this.jobendDate.setValue(A.data.enddate);
							this.travel.setValue(A.data.travel);
							this.exp_month.setValue(A.data.expmonth);
							this.exp_year.setValue(A.data.expyear);
							this.relocation.setValue(A.data.relocation);
							this.location.setValue(A.data.location);
							this.jobType.setValue(A.data.jobshift);
							this.posid.setValue(A.data.posid);
							this.nopos.setValue(A.data.nopos);
							var B = A.data.jobmeta.data;
							this.dataStore1.loadData(B);
							this.dataStore2.loadData(B);
							this.dataStore3.loadData(B)
						}
					},
					addstore1rec : function() {
						this.responsibility.getStore().add(new this.record1({
							id : "",
							responsibility : ""
						}))
					},
					addstore2rec : function() {
						this.skillgrid.getStore().add(new this.record2({
							id : "",
							skill : "",
							skilldesc : ""
						}))
					},
					addstore3rec : function() {
						this.qualgrid.getStore().add(new this.record3({
							id : "",
							qualification : "",
							qualificationdesc : ""
						}))
					},
					deleterec : function(B) {
						this.delgrid = B;
						this.rec = this.delgrid.getSelectionModel()
								.getSelections();
						this.delarr = [];
						this.delgrid.getSelectionModel().clearSelections();
						for ( var A = 0; A < this.rec.length; A++) {
							if (this.rec[A].get("id") != "") {
								this.delarr.push(this.rec[A].get("id"))
							} else {
								this.delgrid.getStore().remove(this.rec[A])
							}
						}
						if (this.delarr.length > 0) {
							Wtf.Ajax.requestEx({
								url : Wtf.req.base + "hrms.jsp",
								params : {
									flag : 175,
									delid : this.delarr
								}
							}, this, function() {
								this.delgrid.getStore().load()
							}, function() {
							})
						}
					}
				});
Wtf.ExportInterface = function(A) {
	Wtf.ExportInterface.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.ExportInterface,
				Wtf.Window,
				{
					initComponent : function(A) {
						this.winHeight = 424;
						if (Wtf.isIE6) {
							this.winHeight = 413
						}
						this.topTitle = WtfGlobal.getLocaleText({
							key : "hrms.export.exportfile",
							params : [ WtfGlobal.getLocaleText("hrms.export."
									+ this.type) ]
						});
						this.opt = WtfGlobal.getLocaleText({
							key : "hrms.export.chosecolumnText",
							params : [ WtfGlobal.getLocaleText("hrms.export."
									+ this.type) ]
						});
						this.colSM = new Wtf.grid.CheckboxSelectionModel({
							width : 25
						});
						this.colCM = new Wtf.grid.ColumnModel(
								[
										this.colSM,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Column"),
											dataIndex : "title"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.title"),
											dataIndex : "header",
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.index"),
											dataIndex : "index",
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.align"),
											dataIndex : "align",
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Width"),
											hidden : ((this.type == "csv") ? true
													: false),
											dataIndex : "width",
											editor : new Wtf.form.NumberField({
												allowBlank : false,
												maxValue : 850,
												minValue : 50
											})
										} ]);
						this.headerField = new Wtf.form.TextField({
							labelSeparator : "",
							width : 180,
							emptyText : mainPanel.getActiveTab().title
						});
						this.colG = new Wtf.grid.EditorGridPanel({
							store : this.pdfDs,
							border : false,
							layout : "fit",
							width : 328,
							height : 270,
							viewConfig : {
								forceFit : true
							},
							cm : this.colCM,
							autoScroll : true,
							clicksToEdit : 1,
							sm : this.colSM
						});
						this.colG.on("render", function(B) {
							B.getSelectionModel().selectAll()
						}, this);
						this.title = WtfGlobal
								.getLocaleText("hrms.export.Export");
						this.iconCls = getButtonIconCls(Wtf.btype.winicon);
						this.height = this.winHeight;
						this.width = 350;
						this.modal = true;
						this.layout = "table";
						this.layoutConfig = {
							columns : 1
						};
						this.resizable = false;
						this.items = [
								{
									height : 75,
									border : false,
									bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(
											this.topTitle,
											this.opt,
											this.type == "csv" ? "images/export-csv-popup.jpg"
													: "images/export-pdf-popup.jpg")
								},
								{
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:5px 5px 0px 5px;",
									layout : "fit",
									width : 338,
									items : [ this.colG ]
								} ];
						this.buttons = [
								{
									text : WtfGlobal
											.getLocaleText("hrms.export.Previous"),
									scope : this,
									hidden : ((this.type == "csv") ? true
											: false),
									hidden : (!this.parent) ? true : false,
									handler : function() {
										this.hide();
										this.parent.show()
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.export.Export"),
									scope : this,
									handler : function() {
										var B = this.colSM.getSelections();
										if (B.length > 0) {
											var L = [];
											var S = [];
											var F = [];
											var R = [];
											var H = [];
											var G = 0;
											var K = 0;
											for ( var M = 0; M < B.length; M++) {
												var N = B[M].data;
												L.push(N.header);
												if (N.title.indexOf("(") != -1) {
													N.title = N.title
															.substring(
																	0,
																	N.title
																			.indexOf("(") - 1)
												}
												if (N.title.indexOf("*") != -1) {
													N.title = N.title
															.substring(
																	0,
																	N.title.length - 1);
													S.push(N.title)
												} else {
													S.push(N.title)
												}
												F.push(N.width);
												R.push(N.index);
												if (N.align == "") {
													H.push("none")
												} else {
													H.push(N.align)
												}
											}
											G = R.length;
											for (M = 0; M < G; M++) {
												for ( var I = M + 1; I < G; I++) {
													if (R[M] > R[I]) {
														var O = L[M];
														L[M] = L[I];
														L[I] = O;
														O = S[M];
														S[M] = S[I];
														S[I] = O;
														O = F[M];
														F[M] = F[I];
														F[I] = O;
														O = H[M];
														H[M] = H[I];
														H[I] = O
													}
												}
											}
											if (this.type == "pdf") {
												var J = Math.floor(820 / G);
												if (G >= (this.pdfDs
														.getTotalCount() * 0.75)) {
													J = 150
												}
												J = Math.round(J);
												for (M = 0; M < B.length; M++) {
													if (B[M].data["width"] > J) {
														K = 1
													}
												}
												if (K == 1) {
													K = 1;
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText({
																				key : "hrms.export.MaxWidthIs",
																				params : [ J ]
																			}) ],
															1)
												}
											}
											if (K == 0) {
												this.close();
												if (this.get == 3) {
													var D = this.url + "?"
															+ this.mode
															+ "&config="
															+ this.configstr
															+ "&name="
															+ this.filename
															+ "&filetype="
															+ this.type
															+ "&header=" + L
															+ "&title=" + S
															+ "&width=" + F
															+ "&align=" + H
															+ "&get="
															+ this.get + ""
												} else {
													var P = this.obj.grid
															.getStore().lastOptions;
													var Q = (P.params != undefined ? P.params.startdate
															: undefined);
													var E = (P.params != undefined ? P.params.enddate
															: undefined);
													var C = (P.params != undefined ? P.params.empid
															: undefined);
													var D = this.url
															+ "?"
															+ this.mode
															+ "&config="
															+ this.configstr
															+ "&name="
															+ this.filename
															+ "&filetype="
															+ this.type
															+ "&header="
															+ L
															+ "&title="
															+ S
															+ "&name="
															+ this.headerField
																	.getValue()
															+ "&width=" + F
															+ "&get="
															+ this.get
															+ "&align=" + H
															+ "&startdate=" + Q
															+ "&enddate=" + E
															+ "&empid=" + C
															+ "&exportFile="
															+ true
												}
												Wtf.get("downloadframe").dom.src = D
											}
										} else {
											msgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.warning"),
															WtfGlobal
																	.getLocaleText("hrms.export.SelectAtLeastOneColumn") ],
													1)
										}
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									scope : this,
									handler : function() {
										this.close()
									}
								} ];
						Wtf.ExportInterface.superclass.initComponent.call(this,
								A)
					}
				});
Wtf.exportButton = function(B) {
	var A = [];
	if (B.menuItem.csv == true) {
		this.isPDF = false;
		A.push(this.createButton("csv"))
	}
	if (B.menuItem.pdf == true) {
		this.isPDF = true;
		A.push(this.createButton("pdf"))
	}
	Wtf.apply(this, {
		menu : A
	}, B);
	Wtf.exportButton.superclass.constructor.call(this, B)
};
Wtf.extend(Wtf.exportButton, Wtf.Toolbar.Button, {
	text : WtfGlobal.getLocaleText("hrms.export.Export"),
	iconCls : "pwndExport export",
	createButton : function(B) {
		var A = new Wtf.Action({
			text : WtfGlobal.getLocaleText({
				key : "hrms.export.ExportToFile",
				params : [ WtfGlobal.getLocaleText("hrms.export."
						+ B.toUpperCase()) ]
			}),
			iconCls : "pwndExport " + (this.isPDF ? "exportpdf" : "exportcsv"),
			scope : this,
			handler : function() {
				this.exportWithTemplate(this.obj, B, this.get, this.url,
						this.filename)
			}
		});
		return A
	},
	createRowButton : function(A) {
		var B = new Wtf.Action({
			text : WtfGlobal.getLocaleText("hrms.export.ExportSingleRow"),
			iconCls : "pwndExport exportpdf",
			scope : this,
			disabled : true,
			handler : function() {
				this.exportSingleRow(this.obj, this.get)
			}
		});
		return B
	},
	exportWithTemplate : function(G, E, D, C, B) {
		if (G.pdfStore == undefined) {
			G.pdfStore = new Wtf.data.Store({});
			G.pdfStore = this.filPdfStore(G, G.grid.getColumnModel())
		}
		var A = this.genJsonForPdf(G);
		if (E == "pdf") {
			new Wtf.selectTempWin({
				type : E,
				get : D,
				mode : Wtf.urlEncode(G.grid.getStore().baseParams),
				filename : B,
				storeToload : G.pdfStore,
				gridConfig : A,
				grid : G.EditorGrid,
				obj : G,
				url : C,
				json : (G.searchJson != undefined) ? G.searchJson : ""
			})
		} else {
			var F = new Wtf.ExportInterface({
				type : E,
				get : D,
				mode : Wtf.urlEncode(G.grid.getStore().baseParams),
				filename : B,
				pdfDs : G.pdfStore,
				url : C,
				obj : G
			});
			F.show()
		}
	},
	filPdfStore : function(D, B) {
		var A = 1;
		for (i = 1; i < B.getColumnCount(); i++) {
			if (B.isHidden(i) != undefined || B.getColumnHeader(i) == ""
					|| B.getDataIndex(i) == "") {
				continue
			} else {
				if (B.config[i].pdfwidth != undefined) {
					var C = B.config[i].align;
					var E;
					if (C == undefined) {
						C = "center"
					}
					if (B.config[i].title == undefined) {
						E = B.config[i].dataIndex
					} else {
						E = WtfGlobal.HTMLStripper(B.config[i].title)
					}
					D.newPdfRec = new Wtf.data.Record({
						header : E,
						title : WtfGlobal.HTMLStripper(B.config[i].header),
						width : B.config[i].pdfwidth,
						align : C,
						index : A
					});
					D.pdfStore.insert(D.pdfStore.getCount(), D.newPdfRec);
					A++
				}
			}
		}
		return D.pdfStore
	},
	genJsonForPdf : function(E) {
		var D = "{ data:[";
		for (i = 0; i < E.pdfStore.getCount(); i++) {
			var A = E.pdfStore.getAt(i);
			D += "{'header':'" + WtfGlobal.HTMLStripper(A.data.header) + "',";
			if (A.data.align == "right" && A.data.title.indexOf("(") != -1) {
				A.data.title = A.data.title.substring(0, A.data.title
						.indexOf("(") - 1)
			}
			D += "'title':'" + A.data.title + "',";
			D += "'width':'" + A.data.width + "',";
			D += "'align':'" + A.data.align + "'},"
		}
		var C = D.length - 1;
		var B = D.substr(0, C);
		B += "]}";
		return B
	},
	getDateDiff : function(A, E) {
		var C = new Date(A);
		var B = C.getElapsed(new Date(E));
		var D = B / (3600000 * 24);
		return D
	},
	exportSingleRow : function(C, A) {
		var B = null;
		var F = 0;
		var E = null;
		var D = C.grid.getSelectionModel().getSelected();
		if (A == 5 || A == 6) {
			B = this.getDateDiff(D.data.duedate, D.data.invoicedate);
			F = C.isCustomer ? 1 : 2;
			E = "&name=" + D.data.customername + "&terms=" + B + "&amount="
					+ D.data.amount + "&bills=" + D.data.invoiceid
		} else {
			F = C.isCNReport ? 4 : 3;
			E = "&name=" + D.data.personname + "&amount=" + D.data.amount
					+ "&id=" + D.data.noteid + "&type=" + C.transType
		}
		Wtf.get("downloadframe").dom.src = "exportInv.jsp?mode=" + F + "&rec="
				+ E + "&filename=" + Wtf.getCmp("as").getActiveTab().title
				+ "&filetype=pdf"
	}
});
Wtf.TimesheetReport = function(A) {
	A.autoScroll = "true";
	Wtf.TimesheetReport.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.TimesheetReport,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.TimesheetReport.superclass.initComponent.call(this,
								A)
					},
					onRender : function(A) {
						Wtf.TimesheetReport.superclass.onRender.call(this, A);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						Wtf.ux.grid.GridSummary.Calculations.totalTime1 = function(
								N, J, L, I, G) {
							var F = [];
							var K = [];
							K = I[L];
							if (K != 0) {
								K = K.split(":")
							}
							F = N.split(":");
							var M = Wtf.getValidNumberOrDefault(K[0], 0)
									+ Wtf.getValidNumberOrDefault(F[0], 0);
							var H = Wtf.getValidNumberOrDefault(K[1], 0)
									+ Wtf.getValidNumberOrDefault(F[1], 0);
							if (H >= 60) {
								M++;
								H -= 60
							}
							M = M < 10 ? "0" + M : M;
							H = H < 10 ? "0" + H : H;
							return M + ":" + H
						};
						this.summary = new Wtf.ux.grid.GridSummary();
						this.jobRecord = Wtf.data.Record.create([ {
							name : "jobtype"
						}, {
							name : "jobtypename"
						}, {
							name : "col1"
						}, {
							name : "col2"
						}, {
							name : "col3"
						}, {
							name : "col4"
						}, {
							name : "col5"
						}, {
							name : "col6"
						}, {
							name : "col7"
						}, {
							name : "colid1"
						}, {
							name : "colid2"
						}, {
							name : "colid3"
						}, {
							name : "colid4"
						}, {
							name : "colid5"
						}, {
							name : "colid6"
						}, {
							name : "colid7"
						}, {
							name : "total"
						} ]);
						this.jobReader = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.jobRecord);
						this.jobstore = new Wtf.data.Store({
							url : "Timesheet/EmployeesTimesheet.ts",
							reader : this.jobReader,
							baseParams : {
								flag : 26
							}
						});
						this.fromdate = new Wtf.form.DateField({
							name : "from",
							width : 150,
							format : "Y-m-d",
							disabled : true
						});
						this.todate = new Wtf.form.TextField({
							name : "to",
							width : 150,
							readOnly : true,
							disabled : true
						});
						this.fromdate.on("render", function() {
							this.fromdate.setValue(this.viewstdate);
							this.changegridheader()
						}, this);
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.job"),
											width : 200,
											pdfwidth : 60,
											sortable : true,
											dataIndex : "jobtypename",
											summaryRenderer : WtfGlobal.totalSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.sunday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											align : "center",
											summaryType : "totalTime1",
											dataIndex : "col1",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.monday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											align : "center",
											summaryType : "totalTime1",
											dataIndex : "col2",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.tuesday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											summaryType : "totalTime1",
											dataIndex : "col3",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.wednesday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											dataIndex : "col4",
											summaryType : "totalTime1",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.thursday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											summaryType : "totalTime1",
											dataIndex : "col5",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.friday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											summaryType : "totalTime1",
											dataIndex : "col6",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.saturday"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											summaryType : "totalTime1",
											dataIndex : "col7",
											align : "center",
											renderer : WtfGlobal.timeSummaryRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.timesheet.total"),
											width : 200,
											sortable : true,
											pdfwidth : 60,
											dataIndex : "total",
											summaryType : "totalTime1",
											renderer : this.totaltime
										} ]);
						this.grid = new Wtf.grid.GridPanel({
							store : this.jobstore,
							autoScroll : true,
							border : false,
							id : "timesheetReportGrid" + this.id,
							plugins : [ this.summary ],
							scope : this,
							stripeRows : true,
							viewConfig : {
								forceFit : true
							},
							cm : this.cm1,
							sm : this.sm
						});
						var E = [];
						var D = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								pdf : true,
								rowPdf : true
							},
							get : 2,
							url : "Timesheet/timesheetExport.ts",
							filename : this.title
						});
						var C = new Wtf.Button({
							text : WtfGlobal
									.getLocaleText("hrms.timesheet.Chart"),
							scope : this,
							iconCls : "pwnd chart1",
							handler : this.addChart
						});
						E.push(WtfGlobal
								.getLocaleText("hrms.timesheet.fromdate")
								+ ":", this.fromdate, "-", WtfGlobal
								.getLocaleText("hrms.timesheet.todate")
								+ ":", this.todate, "-", D, "-", C);
						var B = new Wtf.Panel({
							tbar : E,
							border : false,
							autoScroll : true,
							id : "timepanel" + this.id,
							layout : "fit",
							items : [ this.grid ]
						});
						this.add(B);
						this.on("activate", function(G, F) {
							this.doLayout()
						})
					},
					changegridheader : function() {
						this.day = this.fromdate.getValue().format("D");
						var A = (this.day == WtfGlobal.getLocaleText(
								"hrms.Sunday").substring(0, 3) ? 0
								: (this.day == WtfGlobal.getLocaleText(
										"hrms.Monday").substring(0, 3) ? 1
										: (this.day == WtfGlobal.getLocaleText(
												"hrms.Tuesday").substring(0, 3) ? 2
												: (this.day == WtfGlobal
														.getLocaleText(
																"hrms.Wednesday")
														.substring(0, 3) ? 3
														: (this.day == WtfGlobal
																.getLocaleText(
																		"hrms.Thursday")
																.substring(0, 3) ? 4
																: (this.day == WtfGlobal
																		.getLocaleText(
																				"hrms.Friday")
																		.substring(
																				0,
																				3) ? 5
																		: (this.day == WtfGlobal
																				.getLocaleText(
																						"hrms.Saturday")
																				.substring(
																						0,
																						3) ? 6
																				: 7)))))));
						var C = new Date();
						var D = new Date();
						D = this.fromdate.getValue();
						C = this.fromdate.getValue();
						if (A == 7) {
							switch (this.day) {
							case "Sun":
								C.setDate(C.getDate());
								D.setDate(D.getDate() + 6);
								break;
							case "Mon":
								C.setDate(C.getDate() - 1);
								D.setDate(D.getDate() + 5);
								break;
							case "Tue":
								C.setDate(C.getDate() - 2);
								D.setDate(D.getDate() + 4);
								break;
							case "Wed":
								C.setDate(C.getDate() - 3);
								D.setDate(D.getDate() + 3);
								break;
							case "Thu":
								C.setDate(C.getDate() - 4);
								D.setDate(D.getDate() + 2);
								break;
							case "Fri":
								C.setDate(C.getDate() - 5);
								D.setDate(D.getDate() + 1);
								break;
							case "Sat":
								C.setDate(C.getDate() - 6);
								D.setDate(D.getDate());
								break
							}
						} else {
							C.setDate(C.getDate() - A);
							D.setDate(D.getDate() + (6 - A))
						}
						this.fromdate.setValue(C.format("Y-m-d"));
						this.todate.setValue(D.format("Y-m-d"));
						this.dateArray = new Array();
						this.dateArray.push(C.format("Y-m-d"));
						this.cm1.setColumnHeader(2, C.format("D d M Y"));
						for (i = 2; i < 8; i++) {
							C.setDate(C.getDate() + 1);
							this.dateArray.push(C.format("Y-m-d"));
							this.cm1
									.setColumnHeader(i + 1, C.format("D d M Y"))
						}
						var B = this.fromdate.getRawValue();
						calMsgBoxShow(202, 4, true);
						this.jobstore.load({
							params : {
								empid : this.empid,
								startdate : B,
								enddate : this.todate.getValue()
							}
						});
						this.jobstore.on("load", function() {
							WtfGlobal.closeProgressbar()
						}, this)
					},
					totaltime : function(G, F, E) {
						var D = "00:00";
						var A = [];
						var H = 0;
						var B = 0;
						for ( var C = 1; C <= 7; C++) {
							var I = E.data["col" + C + ""];
							if (typeof I == "string" && I.indexOf(":") >= 0) {
								D = I
							}
							A = D.split(":");
							H += Wtf.getValidNumberOrDefault(A[0], 0);
							B += Wtf.getValidNumberOrDefault(A[1], 0);
							if (B >= 60) {
								H++;
								B -= 60
							}
						}
						H = H < 10 ? "0" + H : H;
						B = B < 10 ? "0" + B : B;
						return H + ":" + B + " hrs"
					},
					addChart : function() {
						var B = Wtf.getCmp("timesheetmanage");
						var H = Wtf.getCmp("timesheetChart" + this.empid);
						if (H == null) {
							H = new Wtf.Panel(
									{
										id : "timesheetChart" + this.empid,
										title : WtfGlobal
												.getLocaleText({
													key : "hrms.timesheet.usersTimesheetChart",
													params : [ this.empname ]
												}),
										iconCls : getTabIconCls(Wtf.etype.crm),
										autoScroll : true,
										layout : "border",
										bodyStyle : "background:white",
										border : false,
										closable : true,
										items : [
												{
													region : "center",
													layout : "fit",
													cls : "panelstyleClass1",
													html : '<div id="timesheetChartjobwise'
															+ this.id
															+ '" style="margin-top:150px;margin-left:20px" ></div>',
													border : false
												},
												{
													region : "west",
													layout : "fit",
													width : "50%",
													cls : "panelstyleClass1",
													html : '<div id="timesheetChartdaywise'
															+ this.id
															+ '" style="margin-top:150px;margin-left:20px"  ></div>',
													border : false
												} ]
									});
							B.add(H)
						}
						B.setActiveTab(H);
						B.doLayout();
						Wtf.getCmp("as").doLayout();
						var E = "scripts/HRMSGraph/krwcolumn.swf";
						var D = "scripts/HRMSGraph/timesheet.xml";
						var F = "jspfiles/chardata.jsp?flag=3&dates="
								+ this.dateArray + "&empid=" + this.empid + "";
						createNewChart(E, "krwcolumn", "600px", "300px", "8",
								"#FFFFFF", D, F, "timesheetChartdaywise"
										+ this.id);
						var G = this.createJson();
						var A = "jspfiles/chardata.jsp?flag=4&dates="
								+ this.dateArray + "&empid=" + this.empid
								+ "&jobs=" + G[0] + "&jobnames=" + G[1];
						var C = "scripts/HRMSGraph/timesheet_1.xml";
						createNewChart(E, "krwcolumn", "600px", "300px", "8",
								"#FFFFFF", C, A, "timesheetChartjobwise"
										+ this.id)
					},
					createJson : function() {
						var D = [];
						var C = [];
						var A = [];
						for ( var B = 0; B < this.jobstore.getCount(); B++) {
							A.push(this.jobstore.getAt(B).get("jobtypename"));
							C.push(this.jobstore.getAt(B).get("jobtype"))
						}
						D[0] = C;
						D[1] = A;
						return D
					}
				});
Wtf.reportBuilder.label = function(A) {
	Wtf.apply(this, A);
	Wtf.reportBuilder.label.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.reportBuilder.label, Wtf.BoxComponent, {
	cls : "reportTitle",
	onRender : function(A) {
		Wtf.reportBuilder.label.superclass.onRender.call(this, A);
		this.labelDiv = document.createElement("div");
		if (this.text) {
			this.labelDiv.innerHTML = this.text
		}
		this.editLink = document.createElement("a");
		this.editLink.className = "edit";
		this.editLink.href = "#";
		this.editLink.innerHTML = "Edit";
		this.editLink.onclick = this.editLinkClicked.createDelegate(this,
				[ this ]);
		this.labelDiv.appendChild(this.editLink);
		this.applyToMarkup(this.labelDiv)
	},
	editLinkClicked : function() {
		var A = WtfGlobal.getLocaleText("hrms.common.Save");
		if (this.editLink.innerHTML != "Edit") {
			A = "Edit"
		}
		this.editLink.innerHTML = A
	}
});
Wtf.reportBuilder.containerPanel = function(A) {
	Wtf.apply(this, A);
	this.border = true;
	Wtf.reportBuilder.containerPanel.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.reportBuilder.containerPanel, Wtf.Panel, {
	baseCls : "reportContainerDiv",
	autoHeight : true,
	initComponent : function(A) {
		Wtf.reportBuilder.containerPanel.superclass.initComponent.call(this, A)
	},
	onRender : function(A) {
		Wtf.reportBuilder.containerPanel.superclass.onRender.call(this, A);
		if (this.header) {
			this.el.dom.removeChild(this.header)
		}
	}
});
Wtf.reportBuilder.builderPanel = function(A) {
	Wtf.apply(this, A);
	Wtf.reportBuilder.builderPanel.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.reportBuilder.builderPanel, Wtf.Panel, {
	baseCls : "reportBuilder",
	autoScroll : true,
	initComponent : function(A) {
		Wtf.reportBuilder.builderPanel.superclass.initComponent.call(this, A)
	},
	onRender : function(A) {
		Wtf.reportBuilder.builderPanel.superclass.onRender.call(this, A);
		this.cPanel = new Wtf.reportBuilder.containerPanel({});
		if (this.formCont !== undefined) {
			this.cPanel.add(this.formCont)
		}
		this.add(this.cPanel)
	}
});
Wtf.customReport = function(C) {
	Wtf.apply(this, C);
	Wtf.form.Field.prototype.msgTarget = "under";
	var B = {
		ctCls : "reportfieldContainer",
		labelStyle : "font-size:11px; text-align:right;"
	};
	this.attachheight = 130;
	this.hfheight = 150;
	this.subtitle = new Wtf.Panel({
		bodyStyle : "margin-bottom:3px;padding-left:105px;",
		border : false,
		html : "<a tabindex=3 id = 'subtitlelink" + this.id
				+ "'class='attachmentlink' href=\"#\" onclick=\"Addsubtitle('"
				+ this.id + "')\">"
				+ WtfGlobal.getLocaleText("hrms.export.AddSubtitle") + "</a>"
	});
	this.count = 1;
	this.hfieldset = new Wtf.Panel(
			{
				columnWidth : 0.59,
				border : false,
				height : this.attachheight,
				items : [
						{
							xtype : "fieldset",
							title : WtfGlobal
									.getLocaleText("hrms.export.HeaderFields"),
							cls : "customFieldSet",
							defaults : B,
							autoHeight : true,
							items : [
									{
										xtype : "textfield",
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.export.HeaderNote"),
										labelSeparator : "",
										tabIndex : 1,
										maxLength : 40,
										maxLengthText : WtfGlobal
												.getLocaleText("hrms.export.MaxLengthText40"),
										emptyText : WtfGlobal
												.getLocaleText("hrms.export.InsertNote")
									},
									{
										xtype : "textfield",
										fieldLabel : WtfGlobal
												.getLocaleText("hrms.export.ReportTitle"),
										labelSeparator : "",
										maxLength : 40,
										tabIndex : 2,
										maxLengthText : WtfGlobal
												.getLocaleText("hrms.export.MaxLengthText40"),
										emptyText : WtfGlobal
												.getLocaleText("hrms.export.InsertTitle")
									} ]
						}, this.subtitle ]
			});
	var D = "#FFFFFF";
	var A = "#000000";
	this.bclrPicker = new Wtf.Panel(
			{
				border : false,
				html : ' <div tabindex=24 id = "bimg_div'
						+ this.id
						+ '" style="cursor:pointer; height:12px; width:12px; margin:auto; padding:auto; border:thin solid; border-color:'
						+ A
						+ "; background-color:"
						+ D
						+ ';" onclick="showPaletteBg(\''
						+ this.id
						+ "')\" onkeypress=\"javascript:if(event.keyCode==13)showPaletteBg('"
						+ this.id + "');\"></div>"
			});
	this.tclrPicker = new Wtf.Panel(
			{
				border : false,
				html : '<div tabindex=25 id = "timg_div'
						+ this.id
						+ '" style="cursor:pointer; height:12px; width:12px; margin:auto; padding:auto; border:thin solid; border-color:'
						+ A
						+ "; background-color:"
						+ A
						+ ';" onclick="showPaletteTxt(\''
						+ this.id
						+ "')\" onkeypress=\"javascript:if(event.keyCode==13)showPaletteTxt('"
						+ this.id + "');\"></div>"
			});
	this.tcc = A;
	this.bcc = D;
	this.fpager = new Wtf.form.Checkbox({
		name : "pager",
		boxLabel : WtfGlobal.getLocaleText("hrms.export.Paging"),
		labelSeparator : "",
		tabIndex : 28,
		listeners : {
			check : this.checkfPager,
			scope : this
		}
	});
	this.hpager = new Wtf.form.Checkbox({
		name : "pager",
		boxLabel : WtfGlobal.getLocaleText("hrms.export.Paging"),
		tabIndex : 15,
		labelSeparator : "",
		listeners : {
			check : this.checkhPager,
			scope : this
		}
	});
	this.hdater = new Wtf.form.Checkbox({
		name : "dater",
		boxLabel : WtfGlobal.getLocaleText("hrms.payroll.Date"),
		tabIndex : 14,
		labelSeparator : "",
		listeners : {
			check : this.checkhDater,
			scope : this
		}
	});
	this.fdater = new Wtf.form.Checkbox({
		name : "dater",
		boxLabel : WtfGlobal.getLocaleText("hrms.payroll.Date"),
		tabIndex : 27,
		labelSeparator : "",
		listeners : {
			check : this.checkfDater,
			scope : this
		}
	});
	this.customForm = new Wtf.FormPanel(
			{
				fileUpload : true,
				autoScroll : true,
				border : false,
				width : "100%",
				frame : false,
				method : "POST",
				scope : this,
				labelWidth : 40,
				items : [
						{
							border : false,
							html : '<center><div style="padding-top:10px;color:#154288;font-weight:bold"> '
									+ WtfGlobal
											.getLocaleText("hrms.export.Customizereportselectingyourpreferences")
									+ '</div><hr style = "width:95%;"></center>'
						},
						{
							layout : "column",
							border : false,
							items : [ this.hfieldset, {
								columnWidth : 0.2,
								border : false,
								bodyStyle : "margin-left:50%;margin-top:15%;",
								items : [ this.hdater ]
							}, {
								columnWidth : 0.19,
								border : false,
								bodyStyle : "margin-left:15%;margin-top:15%;",
								items : [ this.hpager ]
							} ]
						},
						{
							border : false,
							html : '<center><hr style = "width:95%;"></center>'
						},
						{
							layout : "column",
							border : false,
							items : [
									{
										columnWidth : 0.49,
										border : false,
										items : [
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.PageBorder"),
													cls : "customFieldSet",
													defaults : B,
													autoHeight : true,
													items : [
															{
																xtype : "radio",
																id : "pbordertrue"
																		+ this.id,
																name : "pborder",
																inputValue : "true",
																tabIndex : 16,
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.WithBorder"),
																labelSeparator : "",
																checked : true
															},
															{
																xtype : "radio",
																name : "pborder",
																inputValue : "false",
																tabIndex : 17,
																labelSeparator : "",
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.NoBorder")
															} ]
												},
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.DataandGridBorder"),
													cls : "customFieldSet",
													defaults : B,
													autoHeight : true,
													items : [
															{
																xtype : "radio",
																id : "gridbordertrue"
																		+ this.id,
																name : "dborder",
																inputValue : "true",
																tabIndex : 20,
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.WithBorder"),
																labelSeparator : "",
																checked : true
															},
															{
																xtype : "radio",
																name : "dborder",
																inputValue : "false",
																labelSeparator : "",
																tabIndex : 21,
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.NoBorder")
															} ]
												},
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.SelectBackgroundColor"),
													cls : "customFieldSet",
													id : this.id
															+ "bcolorPicker",
													autoHeight : true,
													items : [ this.bclrPicker ]
												} ]
									},
									{
										columnWidth : 0.49,
										border : false,
										items : [
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.PageView"),
													cls : "customFieldSet",
													defaults : B,
													autoHeight : true,
													items : [
															{
																xtype : "radio",
																name : "pview",
																inputValue : "false",
																tabIndex : 18,
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.Potrait"),
																labelSeparator : ""
															},
															{
																xtype : "radio",
																name : "pview",
																id : "pageviewtrue"
																		+ this.id,
																inputValue : "true",
																tabIndex : 19,
																labelSeparator : "",
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.Landscape"),
																checked : true
															} ]
												},
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.CompanyLogo"),
													cls : "customFieldSet",
													defaults : B,
													autoHeight : true,
													items : [
															{
																xtype : "radio",
																name : "complogo",
																inputValue : "false",
																tabIndex : 22,
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.HideLogo"),
																labelSeparator : "",
																checked : true
															},
															{
																xtype : "radio",
																name : "complogo",
																id : "companylogo"
																		+ this.id,
																inputValue : "true",
																tabIndex : 23,
																labelSeparator : "",
																boxLabel : WtfGlobal
																		.getLocaleText("hrms.export.ShowLogo")
															} ]
												},
												{
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.export.SelectTextColor"),
													cls : "customFieldSet",
													id : this.id
															+ "tcolorPicker",
													autoHeight : true,
													items : [ this.tclrPicker ]
												} ]
									} ]
						},
						{
							border : false,
							html : '<center><hr style = "width:95%;"></center>'
						},
						{
							layout : "column",
							border : false,
							items : [
									{
										columnWidth : 0.59,
										border : false,
										items : [ {
											xtype : "fieldset",
											title : WtfGlobal
													.getLocaleText("hrms.export.FooterFields"),
											cls : "customFieldSet",
											defaults : B,
											autoHeight : true,
											items : [ {
												xtype : "textfield",
												id : "footernote" + this.id,
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.export.FooterNote"),
												tabIndex : 26,
												maxLength : 40,
												maxLengthText : WtfGlobal
														.getLocaleText("hrms.export.MaxLengthText40"),
												labelSeparator : "",
												emptyText : WtfGlobal
														.getLocaleText("hrms.export.InsertNote")
											} ]
										} ]
									},
									{
										columnWidth : 0.2,
										border : false,
										bodyStyle : "margin-left:55%;margin-top:15%;",
										items : [ this.fdater ]
									},
									{
										columnWidth : 0.2,
										border : false,
										bodyStyle : "margin-left:15%;margin-top:15%;",
										items : [ this.fpager ]
									} ]
						},
						{
							border : false,
							html : '<center><hr style = "width:95%;"></center>'
						},
						{
							xtype : "button",
							text : "<b>"
									+ WtfGlobal
											.getLocaleText("hrms.export.ExportPDFFile")
									+ "<b>",
							cls : "exportpdfbut",
							tabIndex : 29,
							scope : this,
							handler : function() {
								if (this.customForm.getForm().isValid()) {
									Wtf.MessageBox
											.confirm(
													WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													WtfGlobal
															.getLocaleText("hrms.export.Doyoutosavereportforfurtheruses"),
													function(E, F) {
														if (E == "yes") {
															this.saveTemplate()
														} else {
															this.exportPdf()
														}
													}, this)
								} else {
									Wtf.MessageBox
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.alert"),
													WtfGlobal
															.getLocaleText("hrms.export.Pleasevalidateentries"))
								}
							}
						} ]
			});
	Wtf.customReport.superclass.constructor.call(this, C)
};
Wtf
		.extend(
				Wtf.customReport,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.customReport.superclass.onRender.call(this, A);
						if (this.reportType == 2) {
							Wtf.getCmp(this.id + "adjustColWidth").hide()
						}
						this.add(this.customForm)
					},
					removesubtitle : function() {
						this.attachheight -= 35;
						this.hfieldset.setHeight(this.attachheight);
						if (this.count > 5) {
							document.getElementById("subtitlelink" + this.id).style.display = "block"
						}
						this.count--;
						if (this.count == 1) {
							document.getElementById("subtitlelink" + this.id).innerHTML = WtfGlobal
									.getLocaleText("hrms.export.AddSubtitle")
						}
						this.doLayout()
					},
					Addsubtitle : function() {
						var C = this.count * 2;
						var B = new Wtf.form.TextField({
							fieldLabel : "",
							labelSeparator : "",
							tabIndex : C + 1,
							emptyText : WtfGlobal
									.getLocaleText("hrms.export.AddSubtitle"),
							maxLength : 40,
							name : "subtitle" + (this.count++)
						});
						this.attachheight = this.attachheight + 35;
						var A = "subtitle" + this.count + this.id;
						this.hfieldset
								.insert(
										this.count,
										new Wtf.Panel(
												{
													id : A,
													cls : "subtitleAddRemove",
													border : false,
													html : "<a tabindex="
															+ (C + 2)
															+ ' href="#" class ="attachmentlink" style ="margin-left:5px" onclick="removesubtitle(\''
															+ A
															+ "','"
															+ this.id
															+ "')\">"
															+ WtfGlobal
																	.getLocaleText("hrms.common.Remove")
															+ "</a>",
													items : B
												}));
						this.hfieldset.setHeight(this.attachheight);
						document.getElementById("subtitlelink" + this.id).innerHTML = WtfGlobal
								.getLocaleText("hrms.export.Addanothersubtitle");
						if (this.count > 5) {
							document.getElementById("subtitlelink" + this.id).style.display = "none"
						}
						this.doLayout()
					},
					checkhDater : function(B, A) {
						if (A) {
							this.fdater.reset()
						}
					},
					checkfDater : function(B, A) {
						if (A) {
							this.hdater.reset()
						}
					},
					checkhPager : function(B, A) {
						if (A) {
							this.fpager.reset()
						}
					},
					checkfPager : function(B, A) {
						if (A) {
							this.hpager.reset()
						}
					},
					saveTemplate : function() {
						var A = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.name")
									+ " *",
							id : "repTemplateName",
							allowBlank : false,
							maxLength : 40,
							width : 255
						});
						var B = new Wtf.form.TextArea({
							id : "repDescField",
							height : 187,
							hideLabel : true,
							cls : "descArea",
							maxLeangth : 200,
							fieldClass : "descLabel",
							width : 356
						});
						var C = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.export.NewReportTemplate"),
									width : 390,
									layout : "border",
									iconCls : "iconwin",
									modal : true,
									height : 330,
									frame : true,
									border : false,
									items : [
											{
												region : "north",
												height : 45,
												width : "95%",
												id : "northRegion",
												border : false,
												items : [ {
													layout : "form",
													border : false,
													labelWidth : 100,
													frame : true,
													items : [ A ]
												} ]
											},
											{
												region : "center",
												width : "95%",
												height : "100%",
												id : "centerRegion",
												layout : "fit",
												border : false,
												items : [ {
													xtype : "fieldset",
													title : WtfGlobal
															.getLocaleText("hrms.performance.description"),
													cls : "textAreaDiv",
													labelWidth : 0,
													frame : false,
													border : false,
													items : [ B ]
												} ]
											} ],
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Save"),
												handler : function() {
													if (!A.isValid()) {
														return
													}
													this.saveReportTemplate(C,
															A, B);
													this.exportPdf();
													mainPanel.remove(mainPanel
															.getActiveTab())
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												handler : function() {
													C.close()
												}
											} ]
								});
						C.show()
					},
					saveReportTemplate : function(E, A, B) {
						var D = WtfGlobal.HTMLStripper(A.getValue());
						var C = WtfGlobal.HTMLStripper(B.getValue());
						if (D == null && D == "") {
							Wtf.MessageBox
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.error"),
											WtfGlobal
													.getLocaleText("hrms.export.ThereportTempnotbeensavedPleasecheckentriesandtryagain"));
							return
						}
						if (B.isValid()) {
							Wtf.Ajax
									.requestEx(
											{
												url : "Common/ExportPdfTemplate/saveReportTemplate.common",
												params : {
													action : 0,
													name : D,
													data : this.generateData(),
													desc : C,
													userid : loginid
												},
												method : "POST"
											},
											this,
											function(F, G) {
												if (F.success) {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.export.Thetemplatehasbeensaved") ],
															1)
												}
											},
											function() {
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.export.CouldnotcreatetemplatePleasetryagain") ],
														2)
											});
							E.close()
						}
					},
					exportPdf : function() {
						var F = this.generateData();
						if (this.get == 3) {
							var E = new Wtf.ExportInterface({
								type : this.type,
								mode : this.mode,
								get : this.get,
								url : this.url,
								filename : this.filename,
								gridConfig : this.gridConfig,
								cd : 1,
								json : this.json,
								pdfDs : this.obj.pdfStore,
								obj : this.obj,
								configstr : F
							});
							E.show()
						} else {
							var G = this.obj.grid.getStore().lastOptions;
							var C = G.params.startdate;
							var A = G.params.enddate;
							var D = G.params.empid;
							var B = this.url + "?" + this.mode + "&config=" + F
									+ "&name=" + this.filename + "&filetype="
									+ this.type + "&get=" + this.get
									+ "&gridconfig="
									+ encodeURIComponent(this.gridconfig)
									+ "&startdate=" + C + "&enddate=" + A
									+ "&empid=" + D + ""
						}
						Wtf.get("downloadframe").dom.src = B
					},
					generateData : function() {
						var F = "";
						var A = this.hfieldset.findByType("textfield");
						var D = WtfGlobal.ScriptStripper(WtfGlobal
								.HTMLStripper(A[0].getValue()));
						var J = WtfGlobal.ScriptStripper(WtfGlobal
								.HTMLStripper(A[1].getValue()));
						var Q = "";
						for (i = 2; i < A.length; i++) {
							F += Q
									+ WtfGlobal.ScriptStripper(WtfGlobal
											.HTMLStripper(A[i].getValue()));
							Q = "~"
						}
						var K = this.hdater.getValue();
						var B = this.hpager.getValue();
						var G = this.fdater.getValue();
						var P = this.fpager.getValue();
						var O = WtfGlobal.ScriptStripper(WtfGlobal
								.HTMLStripper(Wtf
										.getCmp("footernote" + this.id)
										.getValue()));
						var I = Wtf.getCmp("pbordertrue" + this.id)
								.getGroupValue();
						var N = (Wtf.getCmp("gridbordertrue" + this.id)
								.getGroupValue());
						var M = (Wtf.getCmp("pageviewtrue" + this.id)
								.getGroupValue());
						var L = (Wtf.getCmp("companylogo" + this.id)
								.getGroupValue());
						var H = this.tcc.substring(1);
						var C = this.bcc.substring(1);
						var E = '{"landscape":"' + M + '","pageBorder":"' + I
								+ '","gridBorder":"' + N + '","title":"' + J
								+ '","subtitles":"' + F + '","headNote":"' + D
								+ '","showLogo":"' + L + '","headDate":"' + K
								+ '","footDate":"' + G + '","footPager":"' + P
								+ '","headPager":"' + B + '","footNote":"' + O
								+ '","textColor":"' + H + '","bgColor":"' + C
								+ '"}';
						return E
					},
					showColorPanelBg : function(C) {
						var A = new Wtf.menu.ColorItem({
							id : "coloritem"
						});
						var B = new Wtf.menu.Menu({
							id : "contextMenu",
							items : [ A ]
						});
						B.showAt(Wtf.get(this.id + "bcolorPicker").getXY());
						A
								.on(
										"select",
										function(E, D) {
											this.bcc = "#" + D;
											Wtf.get("bimg_div" + this.id).dom.style.backgroundColor = this.bcc
										}, this)
					},
					showColorPanelTxt : function(C) {
						var A = new Wtf.menu.ColorItem({
							id : "coloritem"
						});
						var B = new Wtf.menu.Menu({
							id : "contextMenu",
							items : [ A ]
						});
						B.showAt(Wtf.get(this.id + "tcolorPicker").getXY());
						A
								.on(
										"select",
										function(E, D) {
											this.tcc = "#" + D;
											Wtf.get("timg_div" + this.id).dom.style.backgroundColor = this.tcc
										}, this)
					}
				});
function Addsubtitle(A) {
	Wtf.getCmp(A).Addsubtitle()
}
function removesubtitle(A, B) {
	Wtf.getCmp(A).ownerCt.remove(Wtf.getCmp(A), true);
	Wtf.getCmp(B).removesubtitle()
}
function showPaletteBg(A) {
	Wtf.getCmp(A).showColorPanelBg(Wtf.get("bimg_div" + A))
}
function showPaletteTxt(A) {
	Wtf.getCmp(A).showColorPanelTxt(Wtf.get("timg_div" + A))
}
Wtf.selectTempWin = function(config) {
	Wtf.apply(this, config);
	back = this;
	var templateRec = Wtf.data.Record.create([ {
		name : "tempid",
		mapping : "tempid"
	}, {
		name : "tempname",
		mapping : "tempname"
	}, {
		name : "description",
		mapping : "description"
	}, {
		name : "configstr",
		mapping : "configstr"
	} ]);
	var template_ds = new Wtf.data.Store({
		url : "Common/ExportPdfTemplate/getAllReportTemplate.common",
		method : "GET",
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, templateRec)
	});
	var sm = new Wtf.grid.RowSelectionModel({
		singleSelect : true
	});
	var namePanel = new Wtf.grid.GridPanel({
		id : "templateName",
		autoScroll : true,
		enableColumnResize : false,
		border : false,
		viewConfig : {
			forceFit : true
		},
		cm : new Wtf.grid.ColumnModel([ new Wtf.grid.RowNumberer, {
			header : WtfGlobal.getLocaleText("hrms.common.name"),
			dataIndex : "tempname"
		} ]),
		ds : template_ds,
		sm : sm,
		height : 180
	});
	namePanel
			.on(
					"cellclick",
					function(gridObj, ri, ci, e) {
						var config = gridObj.getStore().getAt(ri).data["configstr"];
						this.templateid = gridObj.getStore().getAt(ri).data["tempid"];
						var configstr = eval("(" + config + ")");
						var title = configstr["title"];
						var subtitle = configstr["subtitles"];
						var starr = subtitle.split("~");
						var subtitles = "";
						for ( var i = 0; i < starr.length; i++) {
							subtitles += "<div>" + starr[i] + "</div>"
						}
						var textColor = "#" + configstr["textColor"];
						var bgColor = "#" + configstr["bgColor"];
						var headdate = configstr["headDate"] == "true" ? "<small>2009/01/01</small>"
								: "";
						var footdate = configstr["footDate"] == "true" ? "<small>2009/01/01</small>"
								: "";
						var headnote = configstr["headNote"];
						var footnote = configstr["footNote"];
						var headpager = configstr["headPager"] == "true" ? "1"
								: "";
						var footpager = configstr["footPager"] == "true" ? "1"
								: "";
						var pageborder = configstr["pageBorder"] == "true" ? "border:thin solid #666;"
								: "";
						var gridborder = configstr["gridBorder"] == "true" ? "1"
								: "0";
						var displaylogo = configstr["showLogo"] == "true" ? "block"
								: "none";
						var pagelayoutPR = "height:380px;width:270px;margin:auto;";
						var pagelayoutLS = "height:270px;width:380px;margin:57px auto;";
						var pagelayout = configstr["landscape"] == "true" ? pagelayoutLS
								: pagelayoutPR;
						var reportPreview = '<div style="'
								+ pagelayout
								+ "align:center;color:"
								+ textColor
								+ ";font-family:arial;padding:5px;font-size:12px;background:"
								+ bgColor
								+ ';border-right:4px solid #DDD;border-bottom:4px solid #888"><div style="'
								+ pageborder
								+ 'height:99%;width:99%;"><div style="border-bottom:thin solid #666;margin:0 2px;height:6%;width:98%;"><table border=0 width=100% style="font-size:12px"><tr><td align="left" width=25%>'
								+ headdate
								+ '</td><td align="center" >'
								+ headnote
								+ '</td><td align="right" width=25%>'
								+ headpager
								+ '</td></tr></table></div><div style="margin:0 2px;height:86%;width:98%;text-align:center;overflow:hidden;"><div style="border-bottom:thin solid #666;"><div style="display:'
								+ displaylogo
								+ ';position:absolute;font-size:16px;margin:1px 0 0 1px"><b>Deskera</b></div><div style="display:'
								+ displaylogo
								+ ';position:absolute;color:#8080FF;font-size:16px"><b>Deskera</b><sup><small><small><small>TM</small></small></small></sup></div><br/><div style="font-size:13px"><b>'
								+ title
								+ "</b></div>"
								+ subtitles
								+ "<br/></div><table border="
								+ gridborder
								+ ' width=90% cellspacing=0 style="font-size:12px;margin:5px auto;"><tr><td align="center" width=10%><b>No.</b></td><td align="center" width=20%><b>Index</b></td><td align="center" width=45%><b>Task Name</b></td><td align="right" width=25%><b>Resources</b></td></tr><tr><td align="center">1.</td><td align="center">31</td><td align="center">Gather info.</td><td align="right" >Thomas</td></tr><tr><td align="center">2.</td><td align="center">56</td><td align="center">Documentation</td><td align="right" >Jane,Alice</td></tr><tr><td align="center">3.</td><td align="center">78</td><td align="center">Planning</td><td align="right" >Darin</td></tr><tr><td align="center">4.</td><td align="center">90</td><td align="center">Coding</td><td align="right" >John</td></tr><tr><td align="center">5.</td><td align="center">111</td><td align="center">Implemention</td><td align="right">John</td></tr><tr><td align="center">6.</td><td align="center">112</td><td align="center">Submission</td><td align="right">John</td></tr></table></div><div style="border-top:thin solid #666;margin:0 2px;height:6%;width:98%;"><table border=0 width=100% style="font-size:12px"><tr><td align="left" width=25%>'
								+ footdate + '</td><td align="center" >'
								+ footnote
								+ '</td><td align="right" width=25%>'
								+ footpager
								+ "</td></tr></table></div></div></div>";
						var reportTmp = new Wtf.Template(reportPreview);
						reportTmp.overwrite(Wtf.getCmp("layoutpreview").body);
						back.smTmp = namePanel.getSelectionModel();
						back.configstr = back.smTmp.getSelected().data["configstr"]
					}, this);
	template_ds.load();
	var templatePanel = new Wtf.Panel(
			{
				id : "templatePanel",
				layout : "border",
				border : false,
				width : 500,
				items : [
						{
							region : "center",
							width : "50%",
							border : false,
							layout : "fit",
							height : "100%",
							items : [ namePanel ]
						},
						{
							region : "east",
							width : 410,
							border : false,
							layout : "fit",
							height : "100%",
							bodyStyle : "background:#EEEEEE",
							items : [ {
								layout : "fit",
								xtype : "fieldset",
								cls : "textAreaDiv",
								preventScrollbars : false,
								frame : true,
								border : false,
								id : "layoutpreview",
								html : "<div style='font-size:14px;margin-top:175px;text-align:center;'>"
										+ WtfGlobal
												.getLocaleText("hrms.export.Selectatemplatetoviewitspreview")
										+ "</div>"
							} ]
						} ]
			});
	this.templateWindow = new Wtf.Window(
			{
				title : WtfGlobal
						.getLocaleText("hrms.export.ExistingReportTemplates"),
				modal : true,
				iconCls : getButtonIconCls(Wtf.btype.winicon),
				layout : "fit",
				items : [ templatePanel ],
				resizable : true,
				autoDestroy : true,
				height : 600,
				width : 600,
				buttons : [
						{
							text : WtfGlobal
									.getLocaleText("hrms.export.SelectColumns"),
							scope : this,
							handler : function() {
								var smTmpcheck = namePanel.getSelectionModel();
								if (smTmpcheck.getCount() < 1) {
									msgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.export.Pleaseselectonetemplate") ],
											1);
									return
								} else {
									this.templateWindow.hide();
									var expt = new Wtf.ExportInterface({
										type : this.type,
										mode : this.mode,
										get : this.get,
										url : this.url,
										filename : this.filename,
										parent : this.templateWindow,
										gridConfig : this.gridConfig,
										cd : 1,
										json : this.json,
										fromdate : this.fromdate,
										todate : this.todate,
										pdfDs : this.storeToload,
										obj : this.obj,
										configstr : back.configstr
									});
									expt.show()
								}
							}
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.export.Export"),
							scope : this,
							handler : function() {
								var smTmp = namePanel.getSelectionModel();
								if (smTmp.getCount() < 1) {
									msgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.export.Pleaseselectonetemplate") ],
											1);
									return
								} else {
									if (this.get == 3) {
										var expt = new Wtf.ExportInterface({
											type : this.type,
											mode : this.mode,
											get : this.get,
											url : this.url,
											filename : this.filename,
											parent : this.templateWindow,
											gridConfig : this.gridConfig,
											cd : 1,
											json : this.json,
											fromdate : this.fromdate,
											todate : this.todate,
											pdfDs : this.storeToload,
											obj : this.obj,
											configstr : back.configstr
										});
										expt.show()
									} else {
										var params = this.obj.grid.getStore().lastOptions;
										var startdate = (params.params != undefined ? params.params.startdate
												: undefined);
										var enddate = (params.params != undefined ? params.params.enddate
												: undefined);
										var empid = (params.params != undefined ? params.params.empid
												: undefined);
										configstr = smTmp.getSelected().data["configstr"];
										var url = this.url
												+ "?"
												+ this.mode
												+ "&config="
												+ configstr
												+ "&name="
												+ this.filename
												+ "&filetype="
												+ this.type
												+ "&get="
												+ this.get
												+ "&gridconfig="
												+ encodeURIComponent(this.gridConfig)
												+ "&startdate=" + startdate
												+ "&enddate=" + enddate
												+ "&empid=" + empid
												+ "&exportFile=" + true;
										Wtf.get("downloadframe").dom.src = url
									}
									this.templateWindow.hide()
								}
								this.templateWindow.hide()
							},
							scope : this
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.CreateNew"),
							handler : function() {
								var custForm = new Wtf.customReport({
									autoScroll : true,
									border : false,
									width : "99%",
									bodyStyle : "background:white;",
									id : "custForm" + this.id + this.tabtitle,
									reportGrid : this.grid,
									type : this.type,
									mode : this.mode,
									get : this.get,
									filename : this.filename,
									url : this.url,
									gridconfig : this.gridConfig,
									cd : this.cd,
									obj : this.obj,
									reportType : 1
								});
								var eobj = Wtf.getCmp(this.id + "_buildReport"
										+ this.tabtitle);
								if (eobj === undefined) {
									eobj = new Wtf.reportBuilder.builderPanel(
											{
												title : WtfGlobal
														.getLocaleText("hrms.export.BuildReportLayout"),
												iconCls : "pwndExport template_builder",
												id : this.id + "_buildReport"
														+ this.tabtitle,
												closable : true,
												autoScroll : true,
												formCont : custForm
											});
									mainPanel.add(eobj)
								}
								this.templateWindow.close();
								mainPanel.setActiveTab(eobj);
								mainPanel.doLayout()
							},
							scope : this
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							handler : function() {
								var smTmp = namePanel.getSelectionModel();
								if (smTmp.getCount() < 1) {
									msgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.export.Pleaseselecttemplate") ],
											2);
									return
								} else {
									Wtf.MessageBox
											.confirm(
													WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													WtfGlobal
															.getLocaleText("hrms.export.Areyousuretodeletetheselectedtemplate"),
													function(btn) {
														if (btn == "yes") {
															Wtf.Ajax
																	.requestEx(
																			{
																				url : "Common/ExportPdfTemplate/deleteReportTemplate.common",
																				params : {
																					action : 2,
																					deleteflag : this.templateid
																				},
																				method : "POST"
																			},
																			this,
																			function(
																					res) {
																				msgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.success"),
																								WtfGlobal
																										.getLocaleText("hrms.export.Thetemplatedeletedsuccessfully") ],
																						1);
																				template_ds
																						.reload()
																			},
																			function() {
																				msgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.error"),
																								WtfGlobal
																										.getLocaleText("hrms.export.CouldnotdeletetemplatePleasetryagain") ],
																						2)
																			})
														}
													}, this)
								}
							},
							scope : this
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							handler : function() {
								this.templateWindow.close()
							},
							scope : this
						} ]
			});
	this.templateWindow.show();
	Wtf.selectTempWin.superclass.constructor.call(this, config)
};
Wtf.extend(Wtf.selectTempWin, Wtf.Window, {
	onRender : function(A) {
		Wtf.selectTempWin.superclass.onRender.call(this, A);
		this.add(this.templateWindow)
	}
});
Wtf.DetailPanel = function(A) {
	A.id = A.id2 + "HRMSupdownCompo";
	A.panCommTitle = "<br><div><span id='gotoComments"
			+ A.modulename
			+ "' class='dpTitleHead'> <img src='images/comment12.gif' class='imgMidVA'/>  "
			+ WtfGlobal.getLocaleText("hrms.performance.comments")
			+ " :  </span><br></div>";
	A.newCommContentWithPerm = WtfGlobal
			.getLocaleText({
				key : "hrms.performance.commentedOn",
				params : [
						'<span style="color:#15428B;  !important;"> &nbsp; &nbsp; &nbsp; {addedby}</span> <span style="color:gray !important;">',
						"<i>{postedon}</i> </span>" ]
			})
			+ ": {comment}   <br><br>";
	A.noPerm = "<div style='margin:3px;color:#15428B;'> <div id='{msgDiv}' style='height:auto;display:block;overflow:auto; margin-left:10px;'>"
			+ WtfGlobal
					.getLocaleText("hrms.performance.Insufficientpermissionstoview")
			+ "</div></div><br><br>";
	A.selectValid = "<div style='margin:3px;height:90%;width:90%;'> <div id='{msgDiv}' style='height: auto;display:block;overflow:auto; margin-left:10px;'>"
			+ WtfGlobal
					.getLocaleText("hrms.common.Pleaseselectarecordtoseedetails")
			+ "</div></div>";
	A.Failed = "<div style='margin:3px;color:red;'> <div id='{msgDiv}' style='height:auto;display:block;overflow:auto; margin-left:10px;'>"
			+ WtfGlobal.getLocaleText("hrms.performance.FailedtoloadComments")
			+ "</div></div>";
	Wtf.DetailPanel.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.DetailPanel,
				Wtf.Panel,
				{
					layout : "fit",
					commentFailed : "<div style='margin:3px;height:20%;width:90%;'><div id='{msgDiv}' style='height: auto;display:block;overflow:auto; margin-left:10px;'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.FailedtoloadComments")
							+ "</div></div>",
					initialMsg : "<div style='margin:3px;height:90%;width:90%;'><div id='{msgDiv}' style='height: auto;display:block;overflow:auto; margin-left:10px;margin-top:20px'>"
							+ WtfGlobal
									.getLocaleText("hrms.common.Pleaseselectarecordtoseedetails")
							+ "</div></div>",
					noPerm_com : '<span style="color:#15428B; font-weight:bold; !important;"> '
							+ WtfGlobal
									.getLocaleText("hrms.performance.comments")
							+ " :  </span><br><br><div style='margin:3px;height:20%;width:20%;'><div id='{msgDiv}' style='height: auto;display:block;overflow:auto; margin-left:10px;'>"
							+ WtfGlobal
									.getLocaleText("hrms.performance.Insufficientpermissionstoview")
							+ "</div></div>",
					onRender : function(A) {
						Wtf.DetailPanel.superclass.onRender.call(this, A);
						this.toolItems = new Array();
						this.messagePanelContentTemplate = new Wtf.Template(
								this.initialMsg);
						this.toolItems
								.push(this.comment = new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.performance.AddComment"),
											id : "Comment" + this.id,
											pressed : false,
											disabled : true,
											scope : this,
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.performance.AddComments.tooltip")
											},
											iconCls : "pwndExport comment",
											handler : function() {
												this.addComment()
											}
										}));
						this.detailtoolbar = new Wtf.Toolbar({
							items : this.toolItems
						});
						this.north = {
							region : "north",
							border : false,
							height : 35,
							layout : "fit",
							html : this.panTitle
						};
						this.center = {
							region : "center",
							autoScroll : true,
							layout : "fit",
							border : false,
							id : this.id2 + "dloadpanelcenter",
							margins : "0 5 0 15",
							html : this.messagePanelContentTemplate
									.applyTemplate({
										msgDiv : "msgDiv_"
									})
						};
						this.dloadpanel = new Wtf.Panel(
								{
									id : this.id + "downloadpanel",
									closable : true,
									split : true,
									border : false,
									bbar : this.detailtoolbar,
									bodyStyle : "background:#FFFFFF;border: solid 4px #5b84ba;",
									layout : "border",
									items : [ this.center ]
								});
						this.add(this.dloadpanel);
						var B = this.grid.getSelectionModel();
						B.on("selectionchange", function() {
							var C = this.grid.getSelectionModel()
									.getSelections();
							if (C.length == 0) {
								this.comment.disable()
							} else {
								for ( var D = 0; D < C.length; D++) {
									if (C[D].get("gid") == undefined) {
										this.comment.disable()
									} else {
										this.comment.enable()
									}
								}
							}
						}, this)
					},
					addComment : function() {
						var C = this.grid.getSelectionModel().getSelections();
						var A = [];
						for ( var B = 0; B < C.length; B++) {
							A.push(C[B].get("gid"))
						}
						this.addcom = new Wtf.goalComment(
								{
									width : 390,
									modal : true,
									height : 250,
									title : WtfGlobal
											.getLocaleText("hrms.performance.goal.comments"),
									resizable : false,
									layout : "fit",
									note : WtfGlobal
											.getLocaleText("hrms.common.FillupthefollowingDetails"),
									read : false,
									blank : false,
									idX : this.id2,
									viewflag : false,
									applybutton : true,
									goalarr : A,
									ds : this.Store,
									cleargrid : this.grid
								});
						this.addcom.show()
					}
				});
Wtf.AddComment = function(A) {
	Wtf.apply(this, A);
	Wtf.AddComment.superclass.constructor
			.call(
					this,
					{
						title : WtfGlobal
								.getLocaleText("hrms.performance.AddComment"),
						closable : true,
						modal : true,
						iconCls : "pwnd favwinIcon",
						width : 500,
						height : 300,
						resizable : false,
						buttonAlign : "right",
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.AddComment"),
									scope : this,
									handler : function() {
										var B = "";
										var C = encodeURIComponent(WtfGlobal
												.HTMLStripper(this.Comment
														.getValue()));
										B += "{'leadid':'" + this.recid + "',";
										B += "'mapid':'" + this.mapid + "',";
										B += "'comment':'" + C + "'}";
										Wtf.Ajax.requestEx({
											url : Wtf.req.base + "crm.jsp",
											params : {
												jsondata : B,
												flag : 255
											}
										}, this, function(D) {
											this.close();
											WtfComMsgBox(600, 0);
											this.store.reload();
											getDocsAndCommentList(this.recid,
													"", 1, this.idX)
										}, function(D) {
											WtfComMsgBox(601, 1)
										})
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									scope : this,
									handler : function() {
										this.close()
									}
								} ],
						layout : "border",
						items : [
								{
									region : "north",
									height : 75,
									border : false,
									bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
									html : "<div style = 'width:100%;height:100%;position:relative;float:left;'><div style='float:left;height:100%;width:auto;position:relative;'><img src = images/createuser.png style = 'width:40px;height:52px;margin:5px 5px 5px 5px;'></img></div><div style='float:left;height:100%;width:60%;position:relative;'><div style='font-size:12px;font-style:bold;float:left;margin:15px 0px 0px 10px;width:100%;position:relative;'><b>"
											+ WtfGlobal
													.getLocaleText("hrms.common.Comment")
											+ "</b></div><div style='font-size:10px;float:left;margin:15px 0px 10px 10px;width:100%;position:relative;'>"
											+ WtfGlobal
													.getLocaleText("hrms.performance.AddComment")
											+ "</div></div></div>"
								},
								{
									region : "center",
									border : false,
									bodyStyle : "background:#f1f1f1;font-size : 10px;padding:20px 20px 20px 20px;",
									layout : "fit",
									items : [ {
										border : false,
										bodyStyle : "background:transparent;",
										layout : "fit",
										items : [ this.createCourseForm = new Wtf.form.FormPanel(
												{
													baseCls : "x-plain",
													border : false,
													bodyStyle : "font-size:10px;",
													lableWidth : 150,
													defaultType : "textfield",
													items : [ this.Comment = new Wtf.form.TextArea(
															{
																fieldLabel : WtfGlobal
																		.getLocaleText("hrms.common.Comment"),
																name : "Comment",
																maxlength : 1024,
																invalidText : WtfGlobal
																		.getLocaleText("hrms.common.invalid.comment"),
																allowBlank : false,
																validator : WtfGlobal.noBlankCheck,
																width : 300,
																height : 100
															}) ]
												}) ]
									} ]
								} ]
					})
};
Wtf.extend(Wtf.AddComment, Wtf.Window, {});
function getDocsAndCommentList(grid, Recid, valid, id) {
	var s = grid.getSelectionModel().getSelections();
	if (s.length == 1) {
		if (valid == 1) {
			var updownCompE = Wtf.getCmp(id + "HRMSupdownCompo");
			var downUpPanel = Wtf.getCmp(id + "dloadpanelcenter");
			var panTitleTpl = new Wtf.XTemplate("");
			panTitleTpl.overwrite(downUpPanel.body, {});
			Wtf.Ajax
					.requestEx(
							{
								url : "Performance/Goal/getComments.pf",
								params : {
									recid : Recid,
									flag : 210
								}
							},
							this,
							function(res) {
								var resp = eval("(" + res + ")");
								DataTpl = new Wtf.XTemplate(
										updownCompE.panCommTitle);
								DataTpl.append(downUpPanel.body, {});
								if (resp.commData) {
									var commData = resp.commData;
									if (commData.commList.length > 0) {
										DataTpl = new Wtf.XTemplate(
												updownCompE.newCommContentWithPerm);
										for ( var i2 = 0; i2 < commData.commList.length; i2++) {
											resp.commData.commList[i2].comment = unescape(commData.commList[i2].comment);
											DataTpl.append(downUpPanel.body,
													commData.commList[i2])
										}
									} else {
										var tpl = new Wtf.Template(
												"<div class='commentTemplate'>",
												"<div id='{msgDiv}' class='commentTemplate1'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.nocommenttoshow")
														+ "</div></div>");
										tpl.overwrite(Wtf.getCmp(id
												+ "dloadpanelcenter").body, "")
									}
								} else {
									DataTpl = new Wtf.XTemplate(
											updownCompE.noPerm);
									DataTpl.append(downUpPanel.body, {})
								}
							},
							function(res) {
								var tpl0 = new Wtf.XTemplate(updownCompE.Failed);
								tpl0.overwrite(downUpPanel.body, {})
							})
		} else {
			var tpl = new Wtf.Template(
					"<div class='commentTemplate'>",
					"<div id='{msgDiv}' class='commentTemplate1'>Please select a valid record to see details.</div></div>");
			tpl.overwrite(Wtf.getCmp(id + "dloadpanelcenter").body, "")
		}
	} else {
		var tpl1 = new Wtf.Template(
				"<div class='commentTemplate'>",
				"<div id='{msgDiv}' class='commentTemplate1'>"
						+ WtfGlobal
								.getLocaleText("hrms.common.pleaseselectonerecordtoseedetails")
						+ "</div></div>");
		tpl1.overwrite(Wtf.getCmp(id + "dloadpanelcenter").body, "")
	}
}
Wtf.grid.GroupSummary = function(A) {
	Wtf.apply(this, A)
};
Wtf
		.extend(
				Wtf.grid.GroupSummary,
				Wtf.util.Observable,
				{
					init : function(B) {
						this.grid = B;
						this.cm = B.getColumnModel();
						this.view = B.getView();
						var A = this.view;
						A.doGroupEnd = this.doGroupEnd.createDelegate(this);
						A.afterMethod("onColumnWidthUpdated", this.doWidth,
								this);
						A.afterMethod("onAllColumnWidthsUpdated",
								this.doAllWidths, this);
						A.afterMethod("onColumnHiddenUpdated", this.doHidden,
								this);
						A.afterMethod("onUpdate", this.doUpdate, this);
						A.afterMethod("onRemove", this.doRemove, this);
						if (!this.rowTpl) {
							this.rowTpl = new Wtf.Template(
									'<div class="x-grid3-summary-row" style="{tstyle}">',
									'<table class="x-grid3-summary-table" border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
									"<tbody><tr>{cells}</tr></tbody>",
									"</table></div>");
							this.rowTpl.disableFormats = true
						}
						this.rowTpl.compile();
						if (!this.cellTpl) {
							this.cellTpl = new Wtf.Template(
									'<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}">',
									'<div class="x-grid3-cell-inner x-grid3-col-{id}" unselectable="on">{value}</div>',
									"</td>");
							this.cellTpl.disableFormats = true
						}
						this.cellTpl.compile()
					},
					toggleSummaries : function(B) {
						var A = this.grid.getGridEl();
						if (A) {
							if (B === undefined) {
								B = A.hasClass("x-grid-hide-summary")
							}
							A[B ? "removeClass" : "addClass"]
									("x-grid-hide-summary")
						}
					},
					renderSummary : function(C, G) {
						G = G || this.view.getColumnData();
						var H = this.cm.config;
						var D = [], I, A = {}, B, J = G.length - 1;
						for ( var E = 0, F = G.length; E < F; E++) {
							I = G[E];
							B = H[E];
							A.id = I.id;
							A.style = I.style;
							A.css = E == 0 ? "x-grid3-cell-first "
									: (E == J ? "x-grid3-cell-last " : "");
							if (B.summaryType || B.summaryRenderer) {
								A.value = (B.summaryRenderer || I.renderer)(
										C.data[I.name], A, C)
							} else {
								A.value = ""
							}
							if (A.value == undefined || A.value === "") {
								A.value = "&#160;"
							}
							D[D.length] = this.cellTpl.apply(A)
						}
						return this.rowTpl
								.apply({
									tstyle : "width:"
											+ this.view.getTotalWidth() + ";",
									cells : D.join("")
								})
					},
					calculate : function(C, H) {
						var F = {}, A, J, I = this.cm.config, B;
						for ( var D = 0, K = C.length; D < K; D++) {
							A = C[D];
							for ( var E = 0, G = H.length; E < G; E++) {
								J = H[E];
								B = I[E];
								if (B.summaryType) {
									F[J.name] = Wtf.grid.GroupSummary.Calculations[B.summaryType]
											(F[J.name] || 0, A, J.name, F)
								}
							}
						}
						return F
					},
					doGroupEnd : function(A, D, B, F, C) {
						var E = this.calculate(D.rs, B);
						A.push("</div>", this.renderSummary({
							data : E
						}, B), "</div>")
					},
					doWidth : function(E, B, D) {
						var C = this.view.getGroups(), G;
						for ( var F = 0, A = C.length; F < A; F++) {
							G = C[F].childNodes[2];
							G.style.width = D;
							G.firstChild.style.width = D;
							G.firstChild.rows[0].childNodes[E].style.width = B
						}
					},
					doAllWidths : function(G, D) {
						var A = this.view.getGroups(), I, H, E = G.length;
						for ( var C = 0, F = A.length; C < F; C++) {
							I = A[C].childNodes[2];
							I.style.width = D;
							I.firstChild.style.width = D;
							H = I.firstChild.rows[0].childNodes;
							for ( var B = 0; B < E; B++) {
								H[B].style.width = G[B]
							}
						}
					},
					doHidden : function(D, G, C) {
						var B = this.view.getGroups(), F, H = G ? "none" : "";
						for ( var E = 0, A = B.length; E < A; E++) {
							F = B[E].childNodes[2];
							F.style.width = C;
							F.firstChild.style.width = C;
							F.firstChild.rows[0].childNodes[D].style.display = H
						}
					},
					refreshSummary : function(A) {
						return this.refreshSummaryById(this.view.getGroupId(A))
					},
					getSummaryNode : function(A) {
						var B = Wtf.fly(A, "_gsummary");
						if (B) {
							return B.down(".x-grid3-summary-row", true)
						}
						return null
					},
					refreshSummaryById : function(D) {
						var F = document.getElementById(D);
						if (!F) {
							return false
						}
						var B = [];
						this.grid.store.each(function(H) {
							if (H._groupId == D) {
								B[B.length] = H
							}
						});
						var C = this.view.getColumnData();
						var G = this.calculate(B, C);
						var A = this.renderSummary({
							data : G
						}, C);
						var E = this.getSummaryNode(D);
						if (E) {
							F.removeChild(E)
						}
						Wtf.DomHelper.append(F, A);
						return true
					},
					doUpdate : function(B, A) {
						this.refreshSummaryById(A._groupId)
					},
					doRemove : function(D, A, B, C) {
						if (!C) {
							this.refreshSummaryById(A._groupId)
						}
					},
					showSummaryMsg : function(A, D) {
						var B = this.view.getGroupId(A);
						var C = this.getSummaryNode(B);
						if (C) {
							C.innerHTML = '<div class="x-grid3-summary-msg">'
									+ D + "</div>"
						}
					}
				});
Wtf.grid.GroupSummary.Calculations = {
	"sum" : function(B, A, C) {
		return B + (A.data[C] || 0)
	},
	"count" : function(B, A, D, C) {
		return C[D + "count"] ? ++C[D + "count"] : (C[D + "count"] = 1)
	},
	"max" : function(C, B, E, D) {
		var C = B.data[E];
		var A = D[E + "max"] === undefined ? (D[E + "max"] = C) : D[E + "max"];
		return C > A ? (D[E + "max"] = C) : A
	},
	"min" : function(B, A, E, D) {
		var B = A.data[E];
		var C = D[E + "min"] === undefined ? (D[E + "min"] = B) : D[E + "min"];
		return B < C ? (D[E + "min"] = B) : C
	},
	"average" : function(B, A, E, D) {
		var F = D[E + "count"] ? ++D[E + "count"] : (D[E + "count"] = 1);
		var C = (D[E + "total"] = ((D[E + "total"] || 0) + (A.data[E] || 0)));
		return C === 0 ? 0 : C / F
	}
};
Wtf.grid.HybridSummary = Wtf.extend(Wtf.grid.GroupSummary, {
	calculate : function(B, D) {
		var A = this.view.getGroupField();
		var C = B[0].data[A];
		var E = this.getSummaryData(C);
		return E
				|| Wtf.grid.HybridSummary.superclass.calculate.call(this, B, D)
	},
	updateSummaryData : function(A, D, C) {
		var B = this.grid.store.reader.jsonData;
		if (!B.summaryData) {
			B.summaryData = {}
		}
		B.summaryData[A] = D;
		if (!C) {
			this.refreshSummary(A)
		}
	},
	getSummaryData : function(A) {
		var B = this.grid.store.reader.jsonData;
		if (B && B.summaryData) {
			return B.summaryData[A]
		}
		return null
	}
});
Wtf.passwin = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 430,
		height : 450,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.submit"),
			handler : this.sendpasswinSave,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.passwin.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.passwin,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.passwin.superclass.initComponent.call(this)
					},
					loadAllStores : function() {
					},
					onRender : function(A) {
						Wtf.passwin.superclass.onRender.call(this, A);
						Wtf.QuickTips.init();
						Wtf.form.Field.prototype.msgTarget = "side";
						this.currentpass = new Wtf.ux.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.CurrentPassword")
											+ "*",
									name : "currentpass",
									inputType : "password",
									width : 150,
									validator : WtfGlobal.noBlankCheck,
									allowBlank : false
								});
						this.newpass = new Wtf.ux.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.NewPassword")
									+ "*",
							name : "newpass",
							inputType : "password",
							width : 150,
							id : "extuserpass",
							minLength : 4,
							maxLength : 32
						});
						this.newpassret = new Wtf.ux.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.RetypeNewPassword")
											+ "*",
									name : "pass",
									inputType : "password",
									width : 150,
									vtype : "password",
									id : "cpwdextuser",
									initialPassField : "extuserpass"
								});
						this.passwinform = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									id : "passwinform",
									border : false,
									bodyStyle : "font-size:10px;padding:10px 20px;margin-top:3%",
									autoScroll : false,
									labelWidth : 150,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.currentpass, this.newpass,
											this.newpassret ]
								});
						this.headingType = WtfGlobal
								.getLocaleText("hrms.common.ChangePassword");
						this.passwinpanel = new Wtf.Panel(
								{
									frame : true,
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													cls : "panelstyleClass1",
													html : this.isview ? getTopHtml(
															this.headingType,
															"")
															: getTopHtml(
																	this.headingType,
																	WtfGlobal
																			.getLocaleText("hrms.common.FillupthefollowingDetails"))
												},
												{
													border : false,
													region : "center",
													cls : "panelstyleClass2",
													layout : "fit",
													items : [ this.passwinform ]
												} ]
									} ]
								});
						this.add(this.passwinpanel)
					},
					sendpasswinSave : function() {
						if (!this.passwinform.form.isValid()) {
							return
						} else {
							var B = encodeURI(hex_sha1(this.newpassret
									.getValue()));
							var A = encodeURI(hex_sha1(this.currentpass
									.getValue()));
							Wtf.Ajax
									.requestEx(
											{
												url : "ProfileHandler/changePassword.do",
												params : {
													mode : 23,
													changepassword : B,
													currentpassword : A,
													userid : this.profId
												}
											},
											this,
											function(C) {
												this.close();
												if ("Error in changing Password." == C.msg
														|| WtfGlobal
																.getLocaleText("hrms.common.ErrorinchangingPassword") == C.msg) {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	C.msg ], 2)
												} else {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	C.msg ], 1)
												}
											},
											function() {
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.common.ErrorPasswordChanging") ],
														1, 1)
											})
						}
					}
				});
Wtf.AppraisalReport = function(A) {
	Wtf.AppraisalReport.superclass.constructor.call(this, A);
	this.myfinalReport = this.myfinalReport ? true : false;
	this.reviewappraisal = this.reviewappraisal ? true : false
};
Wtf
		.extend(
				Wtf.AppraisalReport,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.AppraisalReport.superclass.initComponent.call(this,
								A)
					},
					onRender : function(A) {
						Wtf.AppraisalReport.superclass.onRender.call(this, A);
						this.callGrid()
					},
					callGrid : function() {
						this.apprec = new Wtf.data.Record.create([ {
							name : "appcycleid"
						}, {
							name : "appcycle"
						}, {
							name : "startdate"
						}, {
							name : "enddate"
						}, {
							name : "currentFlag"
						}, {
							name : "status"
						} ]);
						var A = false;
						if (this.myfinalReport) {
							A = true
						}
						this.appTypeStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisalcycle/getAppraisalcycleform.pf",
									baseParams : {
										flag : 168,
										grouper : "appraisalreport",
										employee : A,
										myreport : true
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.apprec)
								});
						this.appTypeStore.load();
						this.appTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "appcycleid",
									displayField : "appcycle",
									store : this.appTypeStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle"),
									width : 150,
									typeAhead : true
								});
						this.empRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "isquestionemp"
						} ]);
						this.empStore = new Wtf.data.Store(
								{
									url : "Performance/Appraisal/getUserForReviewerperAppCyc.pf",
									baseParams : {
										flag : 406,
										grouper : "appraisalreport",
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader1({
										root : "data"
									}, this.empRec)
								});
						this.empCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									mode : "local",
									valueField : "id",
									displayField : "name",
									store : this.empStore,
									emptyText : WtfGlobal
											.getLocaleText("hrms.performance.select.employee"),
									width : 150,
									typeAhead : true,
									listeners : {
										scope : this,
										select : function(E, D, C) {
											if (D.data.isquestionemp == "true") {
												this.question = true
											} else {
												this.question = false
											}
										}
									}
								});
						this.approveAppraisal = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.overall.approve.appraisal"),
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.performance.approve.appraisals.tooltip"),
									minWidth : 90,
									disabled : true,
									hidden : this.reviewappraisal ? false
											: true,
									scope : this,
									handler : function() {
										Wtf.MessageBox
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													msg : WtfGlobal
															.getLocaleText("hrms.performance.want.to.approve.appraisal")
															+ "<br><br><b>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.data.cannot.changed.later.msg")
															+ "</b></br></br>",
													buttons : Wtf.MessageBox.YESNO,
													icon : Wtf.MessageBox.QUESTION,
													scope : this,
													fn : function(C) {
														if (C == "yes") {
															this
																	.reviewAppraisalFun(
																			true,
																			360,
																			400)
														}
													}
												})
									}
								});
						var B = [];
						B
								.push(WtfGlobal
										.getLocaleText("hrms.performance.appraisal.cycle")
										+ ":");
						B.push(this.appTypeCombo);
						if (!this.myfinalReport) {
							B
									.push(WtfGlobal
											.getLocaleText("hrms.performance.select.employee")
											+ ":");
							B.push(this.empCmb)
						}
						if (this.reviewappraisal) {
							B.push("-");
							B.push(this.approveAppraisal)
						}
						B.push("-");
						this.exportPdf = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.performance.export.pdf.format"),
									scope : this,
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.performance.export.pdf.format.report.tooltip")
									},
									iconCls : "pwndExport exportpdf",
									handler : function() {
										this.Export2Pdf()
									}
								});
						this.printReport = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.print"),
									scope : this,
									iconCls : "pwndPrint printData",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.performance.print.appraisal.report")
									},
									handler : function() {
										this.printRep()
									}
								});
						B.push(this.exportPdf, "-", this.printReport);
						this.dsRec = new Wtf.data.Record.create([ {
							name : "totalappraisal"
						}, {
							name : "appraisalsubmitted"
						}, {
							name : "data"
						} ]);
						this.ds = new Wtf.data.Store(
								{
									url : "Performance/AnonymousAppraisal/getAppraisalReport.pf",
									baseParams : {
										flag : 405,
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader1({
										totalProperty : "totalCount",
										root : "data"
									}, this.dsRec)
								});
						this.ds1Rec = new Wtf.data.Record.create([ {
							name : "selfcomment"
						}, {
							name : "selfcompscore"
						}, {
							name : "comptename"
						}, {
							name : "compmanwght"
						}, {
							name : "comptdesc"
						}, {
							name : "comments"
						}, {
							name : "nominalRat"
						} ]);
						this.ds1 = new Wtf.data.Store(
								{
									url : "Performance/AnonymousAppraisal/getAppraisalReportforGrid.pf",
									baseParams : {
										flag : 408,
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader1({
										totalProperty : "totalCount",
										root : "data"
									}, this.ds1Rec)
								});
						this.goalArr = [
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.goals"),
									dataIndex : "gname",
									align : "center",
									sortable : true,
									renderer : function(C) {
										return WtfGlobal.commentRenderer(C)
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.common.assigned.by"),
									dataIndex : "assignedby",
									align : "center",
									sortable : true
								} ];
						this.goalArr
								.push(
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.appraiser.rating"),
											dataIndex : "gmanrat",
											align : "right",
											sortable : true,
											editor : this.mangoalRate,
											renderer : WtfGlobal.numericPrecisionRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.appraiser.comment"),
											dataIndex : "mangoalcomment",
											hidden : (!this.employee) ? false
													: true,
											sortable : true,
											editor : this.mangoalComment,
											renderer : function(C) {
												return WtfGlobal
														.commentRenderer(C)
											}
										});
						if (Wtf.cmpPref.selfapp) {
							this.goalArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.rating"),
												dataIndex : "gemprat",
												sortable : true,
												align : "right",
												editor : this.empgoalRate,
												renderer : WtfGlobal.numericPrecisionRenderer
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.comments"),
												dataIndex : "empgoalcomment",
												sortable : true,
												editor : this.empgoalComment,
												renderer : function(C) {
													return WtfGlobal
															.commentRenderer(C)
												}
											})
						}
						this.goalcolCM = new Wtf.grid.ColumnModel(this.goalArr);
						this.GoalRecord = new Wtf.data.Record.create([ {
							name : "gid"
						}, {
							name : "goalid"
						}, {
							name : "gname"
						}, {
							name : "gwth"
						}, {
							name : "gemprat"
						}, {
							name : "gmanrat"
						}, {
							name : "empgoalcomment"
						}, {
							name : "mangoalcomment"
						}, {
							name : "assignedby"
						}, {
							name : "goalapprid"
						} ]);
						this.dataReader = new Wtf.data.KwlJsonReader1({
							root : "data"
						}, this.GoalRecord);
						this.goalstore = new Wtf.data.Store(
								{
									url : "Performance/AnonymousAppraisal/getAppraisalReportGoalsforGrid.pf",
									baseParams : {
										flag : 408,
										reviewappraisal : this.reviewappraisal
									},
									reader : this.dataReader
								});
						this.templatePanel = new Wtf.appreportTemplate({
							layout : "fit",
							height : 205,
							border : false,
							id : this.id + "templatePanel"
						});
						this.competencyArr = [
								{
									header : WtfGlobal
											.getLocaleText("hrms.common.name"),
									dataIndex : "comptename",
									sortable : true,
									renderer : function(C) {
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;'>"
													+ C + "</pre>"
										}
										return "<div style='white-space:pre-wrap;'>"
												+ C + "</div>"
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.description"),
									dataIndex : "comptdesc",
									sortable : true,
									renderer : function(C) {
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;'>"
													+ C + "</pre>"
										}
										return "<div style='white-space:pre-wrap;'>"
												+ C + "</div>"
									}
								} ];
						if (Wtf.cmpPref.selfapp) {
							this.competencyArr
									.push(
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.appraisal.score"),
												dataIndex : "selfcompscore",
												align : "center",
												sortable : true
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.performance.self.appraisal.comments"),
												dataIndex : "selfcomment",
												sortable : true,
												renderer : function(C) {
													if (Wtf.isIE6 || Wtf.isIE7) {
														return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;'>"
																+ C + "</pre>"
													}
													return "<div style='white-space:pre-wrap;'>"
															+ C + "</div>"
												}
											})
						}
						this.competencyArr
								.push(
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.appraiser.competency.score"),
											dataIndex : "compmanwght",
											align : "center",
											renderer : function(G, E, C, F, H,
													D) {
												if (Wtf.cmpPref.modaverage) {
													return "<div>"
															+ G
															+ "</div><div style='font-weight:bold;'>["
															+ WtfGlobal
																	.getLocaleText("hrms.performance.mod.avg")
															+ ": "
															+ C
																	.get("nominalRat")
															+ "] </div>"
												} else {
													return "<div>"
															+ G
															+ "</div><div style='font-weight:bold;'>["
															+ WtfGlobal
																	.getLocaleText("hrms.performance.avg")
															+ ": "
															+ C
																	.get("nominalRat")
															+ "] </div>"
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.overall.appraiser.comments"),
											dataIndex : "comments",
											sortable : true,
											renderer : function(C) {
												if (Wtf.isIE6 || Wtf.isIE7) {
													return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;'>"
															+ C + "</pre>"
												}
												return "<div style='white-space:pre-wrap;'>"
														+ C + "</div>"
											}
										});
						this.competencycolCM = new Wtf.grid.ColumnModel(
								this.competencyArr);
						this.competencyGrid = new Wtf.grid.GridPanel(
								{
									region : "center",
									store : this.ds1,
									title : WtfGlobal
											.getLocaleText("hrms.performance.competencies"),
									cls : "gridWithUl",
									hidden : true,
									cm : this.competencycolCM,
									border : true,
									style : "padding:20px;background:white;",
									bbar : Wtf.cmpPref.modaverage ? [ "<b><span style='font-family:tahoma,arial,helvetica,sans-serif;font-size:10px;'>"
											+ WtfGlobal
													.getLocaleText("hrms.performance.mod.avg")
											+ " : "
											+ WtfGlobal
													.getLocaleText("hrms.performance.mode.average.ratings")
											+ "</span>" ]
											: null,
									frame : false,
									layout : "fit",
									autoHeight : true,
									autoScroll : true,
									split : true,
									viewConfig : {
										forceFit : true
									}
								});
						this.QuestionAnswerGrid();
						this.goalGrid = new Wtf.grid.GridPanel({
							store : this.goalstore,
							title : WtfGlobal
									.getLocaleText("hrms.performance.goals"),
							cm : this.goalcolCM,
							border : true,
							style : "padding:20px;white;",
							frame : false,
							layout : "fit",
							height : 400,
							autoScroll : true,
							split : true,
							viewConfig : {
								forceFit : true
							}
						});
						this.reportArr = [];
						this.reportArr.push(this.templatePanel);
						if (Wtf.cmpPref.goal && Wtf.cmpPref.competency) {
							this.reportArr.push(this.QuestionAnswerGrid,
									this.competencyGrid, this.goalGrid)
						} else {
							if (Wtf.cmpPref.goal && !Wtf.cmpPref.competency) {
								this.reportArr.push(this.goalGrid)
							} else {
								if (!Wtf.cmpPref.goal && Wtf.cmpPref.competency) {
									this.reportArr.push(
											this.QuestionAnswerGrid,
											this.competencyGrid)
								}
							}
						}
						this.reportpanel = new Wtf.Panel(
								{
									border : false,
									tbar : B,
									autoScroll : true,
									bodyStyle : "background-color:white;",
									items : this.reportArr,
									bbar : [ "<b><span style='font-family:tahoma,arial,helvetica,sans-serif;font-size:10px;'>"
											+ WtfGlobal
													.getLocaleText("hrms.performance.mod.avg.and.overall.competency.scores.appraisal.cycle")
											+ "</span>" ]
								});
						this.add(this.reportpanel);
						this.appTypeStore
								.on(
										"load",
										function() {
											if (this.appTypeStore.getCount() > 0) {
												var E = this.appTypeStore
														.findBy(
																this.findrecord,
																this);
												if (E != -1) {
													this.appTypeCombo
															.setValue(this.appTypeStore
																	.getAt(E)
																	.get(
																			"appcycleid"))
												}
												if (!this.myfinalReport) {
													this.empStore.baseParams = {
														flag : 406,
														reviewer : false,
														appcylid : this.appTypeCombo
																.getValue()
													};
													this.empStore.load()
												} else {
													var C;
													if (this.apptype !== undefined
															&& this.apptype != "") {
														this.appTypeCombo
																.setValue(this.apptype);
														C = this.appTypeStore
																.find(
																		"appcycleid",
																		this.apptype)
													} else {
														C = this.appTypeStore
																.findBy(
																		function(
																				F) {
																			if (F
																					.get("appcycleid") == this.appTypeCombo
																					.getValue()) {
																				return true
																			} else {
																				return false
																			}
																		}, this)
													}
													if (C != -1) {
														var D = this.appTypeStore
																.getAt(C);
														if (D.data.status == 1) {
															this.ds.baseParams = {
																flag : 407,
																appraisalcycid : this.appTypeCombo
																		.getValue(),
																reviewappraisal : this.reviewappraisal
															};
															this.ds.load();
															this.ds1.baseParams = {
																flag : 408,
																appraisalcycid : this.appTypeCombo
																		.getValue(),
																reviewappraisal : this.reviewappraisal
															};
															this.ds1.load();
															this.QuestionAnswerds.baseParams = {
																flag : 408,
																appraisalcycid : this.appTypeCombo
																		.getValue(),
																reviewappraisal : this.reviewappraisal
															};
															this.QuestionAnswerds
																	.load()
														} else {
															this.templatePanel.emptynotapprvTpl
																	.overwrite(Wtf
																			.getCmp(this.id
																					+ "templatePanelappraisaldetails").el.dom.firstChild);
															this.competencyGrid
																	.hide();
															this.QuestionAnswerGrid
																	.hide();
															this.reportpanel
																	.getBottomToolbar()
																	.setVisible(
																			false);
															this.goalGrid
																	.hide();
															this.exportPdf
																	.setDisabled(true);
															this.printReport
																	.setDisabled(true)
														}
													} else {
														this.templatePanel.emptyselctapprvTpl
																.overwrite(Wtf
																		.getCmp(this.id
																				+ "templatePanelappraisaldetails").el.dom.firstChild);
														this.competencyGrid
																.hide();
														this.QuestionAnswerGrid
																.hide();
														this.reportpanel
																.getBottomToolbar()
																.setVisible(
																		false);
														this.goalGrid.hide();
														this.exportPdf
																.setDisabled(true);
														this.printReport
																.setDisabled(true)
													}
												}
											} else {
												this.appTypeCombo.emptyText = WtfGlobal
														.getLocaleText("hrms.performance.no.appraisal.initiated");
												this.appTypeCombo.reset();
												this.templatePanel.emptynonappTpl
														.overwrite(Wtf
																.getCmp(this.id
																		+ "templatePanelappraisaldetails").el.dom.firstChild);
												this.competencyGrid.hide();
												this.QuestionAnswerGrid.hide();
												this.reportpanel
														.getBottomToolbar()
														.setVisible(false);
												this.goalGrid.hide();
												this.exportPdf
														.setDisabled(true);
												this.printReport
														.setDisabled(true)
											}
											this.reportpanel.syncSize()
										}, this);
						this.empStore
								.on(
										"load",
										function() {
											if (this.empStore.getCount() > 0) {
												this.empName = this.empStore
														.getAt(0).get("name");
												this.empCmb
														.setValue(this.empStore
																.getAt(0).get(
																		"id"));
												if (this.empStore.getAt(0).get(
														"isquestionemp") == "true") {
													this.question = true
												} else {
													this.question = false
												}
												this.ds.baseParams = {
													flag : 407,
													userid : this.myfinalReport ? ""
															: this.empCmb
																	.getValue(),
													appraisalcycid : this.appTypeCombo
															.getValue(),
													reviewappraisal : this.reviewappraisal
												};
												this.ds.load();
												this.ds1.baseParams = {
													flag : 408,
													userid : this.myfinalReport ? ""
															: this.empCmb
																	.getValue(),
													appraisalcycid : this.appTypeCombo
															.getValue(),
													reviewappraisal : this.reviewappraisal
												};
												this.ds1.load();
												this.QuestionAnswerds.baseParams = {
													flag : 408,
													userid : this.myfinalReport ? ""
															: this.empCmb
																	.getValue(),
													appraisalcycid : this.appTypeCombo
															.getValue(),
													reviewappraisal : this.reviewappraisal
												};
												this.QuestionAnswerds.load();
												if (Wtf.cmpPref.overallcomments) {
													this.templatePanel
															.setHeight(305)
												} else {
													this.templatePanel
															.setHeight(205)
												}
											} else {
														this.empCmb.emptyText = WtfGlobal
																.getLocaleText("hrms.performance.no.employee.current.appraisal"),
														this.empCmb.reset();
												this.templatePanel.emptynonempTpl
														.overwrite(Wtf
																.getCmp(this.id
																		+ "templatePanelappraisaldetails").el.dom.firstChild);
												this.competencyGrid.hide();
												this.QuestionAnswerGrid.hide();
												this.reportpanel
														.getBottomToolbar()
														.setVisible(false);
												this.goalGrid.hide();
												this.exportPdf
														.setDisabled(true);
												this.printReport
														.setDisabled(true)
											}
											this.reportpanel.syncSize()
										}, this);
						this.appTypeCombo
								.on(
										"select",
										function(D, C, E) {
											if (!this.myfinalReport) {
												this.empCmb.clearValue();
												this.empStore.baseParams = {
													flag : 406,
													reviewer : false,
													appcylid : this.appTypeCombo
															.getValue()
												};
												this.empStore.load()
											} else {
												if (C.data.status == 1) {
													this.ds.baseParams = {
														flag : 407,
														appraisalcycid : this.appTypeCombo
																.getValue(),
														reviewappraisal : this.reviewappraisal
													};
													this.ds.load();
													this.ds1.baseParams = {
														flag : 408,
														appraisalcycid : this.appTypeCombo
																.getValue(),
														reviewappraisal : this.reviewappraisal
													};
													this.ds1.load();
													this.QuestionAnswerds.baseParams = {
														flag : 408,
														appraisalcycid : this.appTypeCombo
																.getValue(),
														reviewappraisal : this.reviewappraisal
													};
													this.QuestionAnswerds
															.load()
												} else {
													this.templatePanel.emptynotapprvTpl
															.overwrite(Wtf
																	.getCmp(this.id
																			+ "templatePanelappraisaldetails").el.dom.firstChild);
													this.competencyGrid.hide();
													this.QuestionAnswerGrid
															.hide();
													this.reportpanel
															.getBottomToolbar()
															.setVisible(false);
													this.goalGrid.hide();
													this.exportPdf
															.setDisabled(true);
													this.printReport
															.setDisabled(true)
												}
											}
											this.reportpanel.syncSize()
										}, this);
						this.empCmb.on("select", function(E, D, C) {
							this.empName = D.get("name");
							this.ds.baseParams = {
								flag : 407,
								userid : this.empCmb.getValue(),
								appraisalcycid : this.appTypeCombo.getValue(),
								reviewappraisal : this.reviewappraisal
							};
							this.ds.load();
							this.ds1.baseParams = {
								flag : 408,
								userid : this.empCmb.getValue(),
								appraisalcycid : this.appTypeCombo.getValue(),
								reviewappraisal : this.reviewappraisal
							};
							this.ds1.load();
							this.QuestionAnswerds.baseParams = {
								flag : 408,
								userid : this.empCmb.getValue(),
								appraisalcycid : this.appTypeCombo.getValue(),
								reviewappraisal : this.reviewappraisal
							};
							this.QuestionAnswerds.load()
						}, this);
						this.ds
								.on(
										"load",
										function(D, C, E) {
											if (this.ds.getAt(0).data.data.length > 0) {
												this.templatePanel.progTpl
														.overwrite(
																Wtf
																		.getCmp(this.id
																				+ "templatePanelappraisaldetails").el.dom.firstChild,
																this.ds
																		.getAt(0).data.data);
												if (C[0].data.data[0].isquestionemp == "true") {
													this.question = true
												} else {
													this.question = false
												}
												if (this.question == undefined) {
													if (this.ds.getAt(0).data.data[0].isquestionemp == "true") {
														this.question = true
													} else {
														this.question = false
													}
												}
												if (this.question) {
													this.QuestionAnswerGrid
															.show();
													this.competencyGrid.hide();
													this.reportpanel
															.getBottomToolbar()
															.setVisible(false)
												} else {
													this.competencyGrid.show();
													this.reportpanel
															.getBottomToolbar()
															.setVisible(true);
													this.QuestionAnswerGrid
															.hide()
												}
												this.goalGrid.show();
												this.doLayout();
												this.approveAppraisal
														.setDisabled(false);
												this.exportPdf
														.setDisabled(false);
												this.printReport
														.setDisabled(false);
												this.goalstore
														.load({
															params : {
																empid : (this.myfinalReport) ? loginid
																		: this.empCmb
																				.getValue(),
																appcycleid : this.appTypeCombo
																		.getValue(),
																employee : (this.myfinalReport) ? true
																		: false
															}
														})
											} else {
												if (this.reviewappraisal) {
													if (this.ds.getAt(0).data.appraisalsubmitted == 0
															|| this.ds.getAt(0).data.appraisalsubmitted == "0") {
														this.templatePanel.emptyTpl
																.overwrite(Wtf
																		.getCmp(this.id
																				+ "templatePanelappraisaldetails").el.dom.firstChild)
													} else {
														this.templatePanel.emptyreviewTpl
																.overwrite(Wtf
																		.getCmp(this.id
																				+ "templatePanelappraisaldetails").el.dom.firstChild)
													}
												} else {
													if (Wtf.cmpPref.reviewappraisal) {
														this.templatePanel.emptyreportTpl
																.overwrite(Wtf
																		.getCmp(this.id
																				+ "templatePanelappraisaldetails").el.dom.firstChild)
													} else {
														if (this.ds.getAt(0).data.appraisalsubmitted == 0
																|| this.ds
																		.getAt(0).data.appraisalsubmitted == "0") {
															this.templatePanel.emptynonapprTpl
																	.overwrite(Wtf
																			.getCmp(this.id
																					+ "templatePanelappraisaldetails").el.dom.firstChild)
														} else {
															this.templatePanel.emptynonapprreportTpl
																	.overwrite(Wtf
																			.getCmp(this.id
																					+ "templatePanelappraisaldetails").el.dom.firstChild)
														}
													}
												}
												this.competencyGrid.hide();
												this.QuestionAnswerGrid.hide();
												this.reportpanel
														.getBottomToolbar()
														.setVisible(false);
												this.goalGrid.hide();
												this.doLayout();
												this.approveAppraisal
														.setDisabled(true);
												this.exportPdf
														.setDisabled(true);
												this.printReport
														.setDisabled(true)
											}
											this.reportpanel.syncSize()
										}, this);
						this.on("activate", function() {
							if (this.reportpanel != null) {
								this.reportpanel.doLayout()
							}
						}, this)
					},
					QuestionAnswerGrid : function() {
						this.QuestionAnswerRec = new Wtf.data.Record.create([ {
							name : "question"
						}, {
							name : "answer"
						}, {
							name : "employeeanswer"
						} ]);
						this.QuestionAnswerds = new Wtf.data.Store(
								{
									url : "Performance/AnonymousAppraisal/getQuestionAnswerGrid.pf",
									baseParams : {
										flag : 408,
										reviewappraisal : this.reviewappraisal
									},
									reader : new Wtf.data.KwlJsonReader1({
										totalProperty : "totalCount",
										root : "data"
									}, this.QuestionAnswerRec)
								});
						this.QuestionAnswerArr = [
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.question"),
									dataIndex : "question",
									sortable : true,
									renderer : function(A) {
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:14px arial, tahoma, helvetica, sans-serif;padding-left:15px'>"
													+ unescape(A) + "</pre>"
										}
										return "<div style='white-space:pre-wrap;font-size:1.3em;margin-left:15px;'>"
												+ unescape(A) + "</div>"
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.appraiser.response"),
									dataIndex : "answer",
									sortable : true,
									renderer : function(A) {
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:14px arial, tahoma, helvetica, sans-serif;padding-left:15px'>"
													+ unescape(A) + "</pre>"
										}
										return "<div style='white-space:pre-wrap;font-size:1.3em;margin-left:15px;'>"
												+ unescape(A) + "</div>"
									}
								},
								{
									header : WtfGlobal
											.getLocaleText("hrms.performance.self.response"),
									dataIndex : "employeeanswer",
									sortable : true,
									hidden : !Wtf.cmpPref.selfapp,
									renderer : function(A) {
										if (Wtf.isIE6 || Wtf.isIE7) {
											return "<pre style='word-wrap:break-word;font:14px arial, tahoma, helvetica, sans-serif;padding-left:15px'>"
													+ unescape(A) + "</pre>"
										}
										return "<div style='white-space:pre-wrap;font-size:1.3em;margin-left:15px;'>"
												+ unescape(A) + "</div>"
									}
								} ];
						this.QuestionAnswercolCM = new Wtf.grid.ColumnModel(
								this.QuestionAnswerArr);
						this.QuestionAnswerGrid = new Wtf.grid.GridPanel(
								{
									region : "center",
									store : this.QuestionAnswerds,
									title : WtfGlobal
											.getLocaleText("hrms.performance.qualitative.appraisal"),
									cls : "gridWithUl",
									cm : this.QuestionAnswercolCM,
									border : true,
									style : "padding:20px;background:white;",
									frame : false,
									layout : "fit",
									autoHeight : true,
									autoScroll : true,
									split : true,
									viewConfig : {
										forceFit : true
									}
								})
					},
					Export2Pdf : function() {
						var A = "Performance/exportAppraisalReportPDF/appraisalReportExport.pf?filename=AppraisalReport&filetype=pdf&reviewappraisal="
								+ this.reviewappraisal
								+ "&appraisalcycid="
								+ this.appTypeCombo.getValue()
								+ "&userid="
								+ this.empCmb.getValue()
								+ "&employee=false&self="
								+ Wtf.cmpPref.selfapp
								+ "&isPrint=" + false;
						Wtf.get("downloadframe").dom.src = A
					},
					printRep : function() {
						var A = "Performance/exportAppraisalReportPDF/appraisalReportExport.pf?filename=AppraisalReport&filetype=pdf&reviewappraisal="
								+ this.reviewappraisal
								+ "&appraisalcycid="
								+ this.appTypeCombo.getValue()
								+ "&userid="
								+ this.empCmb.getValue()
								+ "&employee=false&self="
								+ Wtf.cmpPref.selfapp
								+ "&isPrint=" + true;
						window.open(A, "mywindow",
								"menubar=1,resizable=1,scrollbars=1")
					},
					findrecord : function(A) {
						if (A.get("currentFlag") == "1") {
							return true
						} else {
							return false
						}
					},
					reviewAppraisalFun : function(reviewstatus, winheight,
							winwidth) {
						if (Wtf.cmpPref.approveappraisal) {
							this.salaryWin = new Wtf.appraisalAppWindow(
									{
										modal : true,
										title : WtfGlobal
												.getLocaleText("hrms.performance.overall.approve.appraisal"),
										closable : true,
										resizable : false,
										layout : "fit",
										flag : 171,
										width : winwidth,
										height : winheight,
										reviewstatus : reviewstatus,
										employeeid : this.empCmb.getValue(),
										appcycleid : this.appTypeCombo
												.getValue(),
										ds : this.ds,
										desig : this.ds.getAt(0).get("data")[0].designation,
										dept : this.ds.getAt(0).get("data")[0].dept
									});
							this.salaryWin.show()
						} else {
							Wtf.Ajax
									.requestEx(
											{
												url : "Performance/AnonymousAppraisal/reviewanonymousAppraisalReport.pf",
												params : {
													employeeid : this.empCmb
															.getValue(),
													appraisalcycleid : this.appTypeCombo
															.getValue(),
													reviewstatus : reviewstatus,
													appraisalids : this.appids
												}
											},
											this,
											function(res) {
												var resp = eval("(" + res + ")");
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																"" + resp.msg
																		+ "" ],
														0);
												this.ds.load()
											}, function() {
												calMsgBoxShow(27, 2)
											})
						}
					}
				});
Wtf.appreportTemplate = function(A) {
	Wtf.appreportTemplate.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.appreportTemplate,
				Wtf.Panel,
				{
					progTpl : new Wtf.XTemplate(
							'<tpl for="."><div  style ="padding:0px 8px;font-size:14px;padding-left:3%;" class="header" >'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.details")
									+ '</div><div style = "font-size:12px;color:black;height:100%;overflow:auto;float:left;padding-right:70px;margin-top:1%;padding-left:3%;"><table  class="templateTable"><tr><td align = "left" class="appraisalTemplate" style="padding-top:1px;"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.common.employee.name")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{empname} </td></tr><tr><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle.name")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{appcylename} </td></tr><tr style ="border-bottom:1px solid white;"><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.start.date")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{appcylestdate} </td></tr><tr style ="border-bottom:1px solid white;"><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.end.date")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{appcylendate} </td></tr><tr><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.total.no.of.appraisers")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{totalappraisal} </td></tr><tr><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.no.of.appraisals.submitted")
									+ '  </b></td><td>: </td><td class="appraisalTemplateData">{appraisalsubmitted} </td></tr><tpl if="isoverallcomment" ><tpl if="isselfappraisal" ><tr><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.overall.self.comments")
									+ ' </b></td><td>:&nbsp;</td><td class="appraisalTemplateData">{empcomment}</td></tr></tpl><tr><td align = "left" class="appraisalTemplate" style ="width:170px"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.overall.appraiser.comments")
									+ ' </b></td><td>:&nbsp;</td><td class="appraisalTemplateData"><div style="white-space-pre-wrap;">{mancom}</div></td></tr></tpl><tpl if="this.isQues(isquestionemp)"><tr><td align = "left" class="appraisalTemplate"><b>'
									+ WtfGlobal
											.getLocaleText("hrms.performance.overall.competency.score")
									+ '  </b></td><td>:&nbsp;</td><td class="appraisalTemplateData">{manavgwght} </td></tr></tpl></table></div></tpl>',
							{
								isQues : function(A) {
									return A == "false"
								}
							}),
					emptyTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.none.appraisers.submitted.appraisal")
									+ "</div>"),
					emptyreviewTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.selected.appraisal.approved")
									+ "</div>"),
					emptyreportTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.not.approved")
									+ "</div>"),
					emptynonapprreportTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.process.ongoing")
									+ "</div>"),
					emptynonapprTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.none.appraisers.submitted.appraisal")
									+ "</div>"),
					emptynonempTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.no.employee.appraisal.cycle")
									+ "</div>"),
					emptynonappTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.no.appraisal.initiated")
									+ "</div>"),
					emptynotapprvTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.appraisal.cycle.not.approved")
									+ "</div>"),
					emptyselctapprvTpl : new Wtf.Template(
							'<div class="grid-link-text">'
									+ WtfGlobal
											.getLocaleText("hrms.performance.select.appraisal.cycle.from.list")
									+ "</div>"),
					onRender : function(A) {
						Wtf.appreportTemplate.superclass.onRender.call(this, A);
						var B = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									id : this.id + "_innerPanel",
									bodyStyle : "background:transparent;",
									items : [ {
										border : false,
										layout : "border",
										bodyStyle : "background:transparent;",
										items : [ {
											autoScroll : true,
											region : "center",
											layout : "column",
											bodyStyle : "padding:8px 8px 8px 8px",
											border : false,
											items : [ {
												border : false,
												layout : "column",
												columnWidth : 1,
												id : "mainMod2_" + this.id,
												bodyStyle : "background:transparent;padding:8px;",
												items : [ this.myModule1 = new Wtf.Panel(
														{
															border : false,
															width : "100%",
															id : this.id
																	+ "appraisaldetails",
															autoLoad : false,
															bodyStyle : "background:transparent;"
														}) ]
											} ]
										} ]
									} ]
								});
						this.add(B)
					}
				});
Wtf.ux.ClosableTabPanel = function(A) {
	this.isClosable = true;
	Wtf.ux.ClosableTabPanel.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.ux.ClosableTabPanel,
				Wtf.Panel,
				{
					closeMsg : WtfGlobal
							.getLocaleText("hrms.common.data.filled.still.unsaved")
							+ "<br>"
							+ WtfGlobal
									.getLocaleText("hrms.common.exit.without.saving"),
					initComponent : function(A) {
						Wtf.ux.ClosableTabPanel.superclass.initComponent.call(
								this, A);
						this.on("closeTemplate", this.closeTemplate, this);
						this.on("beforeclose", this.askToClose, this)
					},
					askToClose : function() {
						if (this.closeWindow == true) {
							this.isClosable = true
						} else {
							if (Wtf.getCmp("templatehtmleditor"
									+ this.templateid) != undefined
									&& Wtf.getCmp("template_name_txt"
											+ this.templateid) != undefined
									&& Wtf.getCmp("template_subject"
											+ this.templateid) != undefined) {
								if (Wtf.getCmp(
										"templatehtmleditor" + this.templateid)
										.getValue().trim() != ""
										|| Wtf.getCmp(
												"template_name_txt"
														+ this.templateid)
												.getValue().trim() != ""
										|| Wtf.getCmp(
												"template_subject"
														+ this.templateid)
												.getValue().trim() != "") {
									this.isClosable = false
								}
							}
						}
						if (this.isClosable !== true) {
							Wtf.MessageBox.show({
								title : this.title,
								msg : this.closeMsg,
								buttons : Wtf.MessageBox.YESNO,
								animEl : "mb9",
								fn : function(A) {
									if (A != "yes") {
										return
									}
									this.ownerCt.remove(this)
								},
								scope : this,
								icon : Wtf.MessageBox.QUESTION
							})
						}
						return this.isClosable
					},
					closeTemplate : function() {
						this.ownerCt.remove(this)
					}
				});
Wtf.newEmailTemplate = function(A) {
	Wtf.apply(this, A);
	this.paramtypestore = new Wtf.data.SimpleStore(
			{
				fields : [ "id", "name", "group" ],
				data : [
						[
								"mailsender",
								WtfGlobal
										.getLocaleText("hrms.common.SenderYou"),
								"1" ],
						[
								"mailrecipient",
								WtfGlobal
										.getLocaleText("hrms.common.Recipient"),
								"2" ],
						[ "company",
								WtfGlobal.getLocaleText("hrms.common.Company"),
								"3" ],
						[ "other",
								WtfGlobal.getLocaleText("hrms.common.Other"),
								"4" ] ]
			});
	this.paramvaluestore = new Wtf.data.SimpleStore(
			{
				fields : [ "id", "name", "group" ],
				data : [
						[
								"fname",
								WtfGlobal
										.getLocaleText("hrms.common.FirstName"),
								"1" ],
						[
								"lname",
								WtfGlobal.getLocaleText("hrms.common.LastName"),
								"1" ],
						[ "phone",
								WtfGlobal.getLocaleText("hrms.common.PhoneNo"),
								"1" ],
						[ "email",
								WtfGlobal.getLocaleText("hrms.common.Email"),
								"1" ],
						[
								"currentyear",
								WtfGlobal
										.getLocaleText("hrms.common.Currentyear"),
								"4" ],
						[
								"cname",
								WtfGlobal
										.getLocaleText("hrms.common.SenderCompanyname"),
								"3" ],
						[
								"caddress",
								WtfGlobal
										.getLocaleText("hrms.common.SenderCompanyaddress"),
								"3" ],
						[
								"cmail",
								WtfGlobal
										.getLocaleText("hrms.common.SenderCompanyemail"),
								"3" ],
						[
								"rname",
								WtfGlobal
										.getLocaleText("hrms.common.RecipientCompanyname"),
								"3" ] ]
			});
	this.paramRecord = Wtf.data.Record.create([ {
		name : "type"
	} ]);
	this.paramStore = new Wtf.data.Store({
		url : "Common/Template/getParameterType.common",
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, this.paramRecord),
		baseParams : {
			type : "getTaxSlabs"
		}
	});
	this.paramStore.load();
	this.valueRecord = Wtf.data.Record.create([ {
		name : "id"
	}, {
		name : "ph"
	}, {
		name : "type"
	}, {
		name : "value"
	} ]);
	this.valueStore = new Wtf.data.Store({
		url : "Common/Template/getParameterTypeValuePair.common",
		reader : new Wtf.data.KwlJsonReader({
			root : "data"
		}, this.valueRecord),
		baseParams : {
			type : "getTaxSlabs"
		}
	});
	this.valueStore.load();
	this.editorTiny = new Wtf.form.HtmlEditor(
			{
				value : '<table class="headerTable" width="600" cellpadding="0" cellspacing="0"><tbody><tr><td style="border-top: 0px none rgb(0, 0, 0); border-bottom: 0px none rgb(255, 255, 255); padding: 0px; background-color: rgb(255, 255, 204); text-align: center;" class="headerTop" align="right"><div style="font-size: 10px; color: rgb(102, 51, 0); line-height: 200%; font-family: Verdana; text-decoration: none;" mc:edit="header" class="adminText"><span id="tpl-content-header" class="tpl-content">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Emailnotdisplayingcorrectly")
						+ ' <a class="adminText" href="*%7CARCHIVE%7C*">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Viewitinyourbrowser")
						+ '</a></span></div></td></tr><tr><td style="border-top: 0px none rgb(51, 51, 51); border-bottom: 0px none rgb(255, 255, 255); padding: 0px; background-color: rgb(255, 255, 255);" class="headerBar" align="left" valign="middle"><div style="color: rgb(51, 51, 51); font-size: 15px; font-family: Verdana; font-weight: normal; text-align: center;" class="headerBarText"><div id="defaultimage-header_image" class="default-edit-image"><div style="width: 600px;" class="default-text"><span id="tpl-content-header-image" class="tpl-content">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Emailnotdisplayingcorrectly")
						+ ' <a class="adminText" href="*%7CARCHIVE%7C*">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Viewitinyourbrowser")
						+ '</a></span></div></div></div></td></tr></tbody></table><table class="bodyTable" width="600" cellpadding="20" cellspacing="0"><tbody><tr><td style="padding: 20px; font-size: 12px; color: rgb(0, 0, 0); line-height: 150%; font-family: Verdana; width: 400px; background-color: rgb(255, 255, 255);" mc:edit="main" class="defaultText" align="left" valign="top"><span id="tpl-content-main" class="tpl-content"><span class="title">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.PrimaryHeading")
						+ "</span><br><p>"
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Latin1111")
						+ '</p><span class="subTitle">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Subheading")
						+ "</span><br><p>"
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Clickheretoaddyoursidecolumncopyandimages")
						+ '</p></span></td><td style="border-left: 1px dashed rgb(204, 204, 204); margin: 0px; padding: 20px; background-color: rgb(255, 255, 255); text-align: left; width: 200px;" class="sideColumn" align="left" valign="top"><div style="font-size: 11px; font-weight: normal; color: rgb(102, 102, 102); font-family: Arial; line-height: 150%;" mc:edit="sidecolumn" class="sideColumnText"><span id="tpl-content-sidecolumn" class="tpl-content"><span class="sideColumnTitle">'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Subheading")
						+ "</span><br>"
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Clickheretoaddyoursidecolumncopyandimages")
						+ '</span></div></td></tr><tr><td style="border-top: 0px none rgb(255, 255, 255); padding: 20px; background-color: rgb(204, 204, 204);" colspan="2" class="footerRow" align="left" valign="top"><div style="font-size: 10px; color: rgb(51, 51, 51); line-height: 100%; font-family: Verdana;" mc:edit="footer" class="footerText"><span id="tpl-content-footer" class="tpl-content"><br><br><br>'
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Ourmailingaddressis")
						+ ":<br>#company:cmail#<br>Copyright (C) #other:currentyear#  #company:cname# "
						+ WtfGlobal
								.getLocaleText("hrms.CampaignDetail.Allrightsreserved")
						+ '<br></span></div><div style="margin-top: 10px; text-align: right;"></div></td></tr></tbody></table>',
				plugins : [
						new Wtf.ux.form.HtmlEditor.insertImage({
							imageStoreURL : Wtf.req.base
									+ "getFiles.jsp?action=1&type=img",
							imageUploadURL : Wtf.req.base
									+ "getFiles.jsp?action=2&type=img"
						}), new Wtf.ux.form.HtmlEditor.HR({}),
						new Wtf.ux.form.HtmlEditor.SpecialCharacters({}) ]
			});
	Wtf.newEmailTemplate.superclass.constructor
			.call(
					this,
					{
						id : this.addNewDashboardCall ? "template_wiz_win_addnew_dash"
								: (this.dashboardCall == true ? "template_dash_win"
										+ this.templateid
										: "template_wiz_win" + this.templateid),
						border : false,
						closable : true,
						layout : "fit",
						iconCls : getTabIconCls(Wtf.etype.acc),
						bbar : [
								"->",
								new Wtf.Toolbar.Button(
										{
											text : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.SaveTemplate"),
											tooltip : {
												text : WtfGlobal
														.getLocaleText("hrms.CampaignDetail.SaveTemplate.tooltip")
											},
											scope : this,
											iconCls : "pwndCommon submitbuttonIcon",
											handler : this.saveTemplate
										}) ],
						items : {
							border : false,
							autoWidth : true,
							autoScroll : true,
							layout : "border",
							bodyStyle : "background-color:#FFFFFF;margin:5px 50px 5px 50px;",
							items : [
									{
										region : "north",
										height : 130,
										layout : "Column",
										border : false,
										items : [
												{
													columnWidth : 0.5,
													border : false,
													items : {
														xtype : "fieldset",
														title : WtfGlobal
																.getLocaleText("hrms.CampaignDetail.MetaData"),
														height : 120,
														defaults : {
															xtype : "textfield",
															width : 280
														},
														items : [
																this.tempname = new Wtf.form.TextField(
																		{
																			fieldLabel : WtfGlobal
																					.getLocaleText("hrms.CampaignDetail.TemplateName")
																					+ "*",
																			id : this.addNewDashboardCall ? "template_name_txt_dash_addnew"
																					: (this.dashboardCall == true ? "template_name_txt_dash"
																							+ this.templateid
																							: "template_name_txt"
																									+ this.templateid),
																			maxLength : 255,
																			allowBlank : false,
																			validator : WtfGlobal.noBlankCheck,
																			name : "template_name"
																		}),
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.performance.description"),
																	maxLength : 1024,
																	id : this.addNewDashboardCall ? "template_desc_dash_addnew"
																			: (this.dashboardCall == true ? "template_desc_dash"
																					+ this.templateid
																					: "template_desc"
																							+ this.templateid),
																	name : "template_desc"
																},
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.CampaignDetail.Subject")
																			+ "*",
																	id : this.addNewDashboardCall ? "template_subject_dash_addnew"
																			: (this.dashboardCall == true ? "template_subject_dash"
																					+ this.templateid
																					: "template_subject"
																							+ this.templateid),
																	allowBlank : false,
																	validator : WtfGlobal.noBlankCheck,
																	maxLength : 255,
																	name : "template_subject"
																} ]
													}
												},
												{
													columnWidth : 0.5,
													border : false,
													items : {
														xtype : "fieldset",
														title : WtfGlobal
																.getLocaleText("hrms.CampaignDetail.ParameterConfiguration"),
														height : 120,
														items : [
																this.param1Combo = new Wtf.form.ComboBox(
																		{
																			fieldLabel : WtfGlobal
																					.getLocaleText("hrms.CampaignDetail.ParameterType"),
																			store : this.paramStore,
																			name : "combovalue",
																			displayField : "type",
																			hiddenName : "param_type",
																			mode : "local",
																			triggerAction : "all",
																			id : this.addNewDashboardCall ? "param_type_combo_dash_addnew"
																					: (this.dashboardCall == true ? "param_type_combo_dash"
																							+ this.templateid
																							: "param_type_combo"
																									+ this.templateid)
																		}),
																this.param2Combo = new Wtf.form.ComboBox(
																		{
																			xtype : "combo",
																			fieldLabel : WtfGlobal
																					.getLocaleText("hrms.CampaignDetail.ParameterValue"),
																			name : "param_value",
																			store : this.valueStore,
																			mode : "local",
																			displayField : "value",
																			valueField : "ph",
																			id : this.addNewDashboardCall ? "param_value_combo_dash_addnew"
																					: (this.dashboardCall == true ? "param_value_combo_dash"
																							+ this.templateid
																							: "param_value_combo"
																									+ this.templateid),
																			triggerAction : "all",
																			hiddenName : "param_value"
																		}),
																{
																	xtype : "button",
																	border : false,
																	minWidth : 80,
																	text : WtfGlobal
																			.getLocaleText("hrms.CampaignDetail.Insert"),
																	scope : this,
																	handler : function() {
																		var D = "";
																		var B = "";
																		if (this.addNewDashboardCall) {
																			D = Wtf
																					.getCmp(
																							"param_type_combo_dash_addnew")
																					.getValue();
																			B = Wtf
																					.getCmp(
																							"param_value_combo_dash_addnew")
																					.getValue()
																		} else {
																			if (this.dashboardCall) {
																				D = Wtf
																						.getCmp(
																								"param_type_combo_dash"
																										+ this.templateid)
																						.getValue();
																				B = Wtf
																						.getCmp(
																								"param_value_combo_dash"
																										+ this.templateid)
																						.getValue()
																			} else {
																				D = Wtf
																						.getCmp(
																								"param_type_combo"
																										+ this.templateid)
																						.getValue();
																				B = Wtf
																						.getCmp(
																								"param_value_combo"
																										+ this.templateid)
																						.getValue()
																			}
																		}
																		var C = "";
																		this.isClosable = false;
																		if (D
																				.trim() == ""
																				|| B
																						.trim() == "") {
																			this.isClosable = true;
																			WtfComMsgBox(
																					950,
																					0);
																			return true
																		}
																		C = " #"
																				+ D
																				+ ":"
																				+ B
																				+ "# ";
																		this.editorTiny
																				.insertAtCursor(C)
																	}
																} ]
													}
												} ]
									},
									{
										region : "center",
										layout : "fit",
										xtype : "fieldset",
										title : WtfGlobal
												.getLocaleText("hrms.common.Template"),
										bodyStyle : "background-color:#FFFFFF;margin-bottom:5px;",
										border : false,
										items : [ this.editorTiny ]
									} ]
						}
					});
	this.param1Combo.on("select", function() {
		this.param2Combo.clearValue()
	}, this);
	this.param2Combo.on("expand", function(B, D) {
		var C = this.param1Combo.getValue();
		this.valueStore.filter("type", C)
	}, this)
};
Wtf
		.extend(
				Wtf.newEmailTemplate,
				Wtf.ux.ClosableTabPanel,
				{
					isClosable : true,
					closeWindow : false,
					initComponent : function(A) {
						this.addEvents({
							"onsuccess" : true
						});
						Wtf.newEmailTemplate.superclass.initComponent.call(
								this, A)
					},
					onRender : function(A) {
						Wtf.newEmailTemplate.superclass.onRender.call(this, A);
						if (this.templateid) {
							if (this.dashboardCall) {
								Wtf.getCmp(
										"template_name_txt_dash"
												+ this.templateid).setValue(
										this.tname);
								Wtf.getCmp(
										"template_desc_dash" + this.templateid)
										.setValue(this.tdesc);
								Wtf.getCmp(
										"template_subject_dash"
												+ this.templateid).setValue(
										this.tsubject)
							} else {
								Wtf.getCmp(
										"template_name_txt" + this.templateid)
										.setValue(this.tname);
								Wtf.getCmp("template_desc" + this.templateid)
										.setValue(this.tdesc);
								Wtf
										.getCmp(
												"template_subject"
														+ this.templateid)
										.setValue(this.tsubject)
							}
							this.getTemplateBody()
						}
					},
					getTemplateBody : function() {
						Wtf.Ajax.requestEx({
							url : "Common/Template/getTemplateContent.common",
							params : {
								flag : 27,
								templateid : this.templateid
							}
						}, this, function(B, A) {
							if (B.success) {
								this.editorTiny.setValue(unescape(B.data.html))
							}
						}, function(B, A) {
						})
					},
					saveTemplate : function() {
						this.isClosable = false;
						var B = "";
						var C = "";
						var A = "";
						if (this.addNewDashboardCall) {
							B = Wtf.getCmp("template_name_txt_dash_addnew")
									.getValue();
							C = Wtf.getCmp("template_subject_dash_addnew")
									.getValue();
							A = Wtf.getCmp("template_desc_dash_addnew")
									.getValue()
						} else {
							if (this.dashboardCall) {
								B = Wtf.getCmp(
										"template_name_txt_dash"
												+ this.templateid).getValue();
								C = Wtf.getCmp(
										"template_subject_dash"
												+ this.templateid).getValue();
								A = Wtf.getCmp(
										"template_desc_dash" + this.templateid)
										.getValue()
							} else {
								B = Wtf.getCmp(
										"template_name_txt" + this.templateid)
										.getValue();
								C = Wtf.getCmp(
										"template_subject" + this.templateid)
										.getValue();
								A = Wtf.getCmp(
										"template_desc" + this.templateid)
										.getValue()
							}
						}
						if (B.trim() == "" || C.trim() == "") {
							if (this.dashboardCall) {
								if (B.trim() == "") {
									Wtf
											.getCmp(
													"template_name_txt_dash"
															+ this.templateid)
											.markInvalid(
													WtfGlobal
															.getLocaleText("hrms.common.Thisfieldismandatory"))
								}
								if (C.trim() == "") {
									Wtf
											.getCmp(
													"template_subject_dash"
															+ this.templateid)
											.markInvalid(
													WtfGlobal
															.getLocaleText("hrms.common.Thisfieldismandatory"))
								}
							} else {
								if (B.trim() == "") {
									Wtf
											.getCmp(
													"template_name_txt_dash_addnew")
											.markInvalid(
													WtfGlobal
															.getLocaleText("hrms.common.Thisfieldismandatory"))
								}
								if (C.trim() == "") {
									Wtf
											.getCmp(
													"template_subject_dash_addnew")
											.markInvalid(
													WtfGlobal
															.getLocaleText("hrms.common.Thisfieldismandatory"))
								}
							}
							return false
						} else {
							Wtf
									.commonWaitMsgBox(WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SavingTemplate"));
							Wtf.Ajax.requestEx({
								url : "Common/Template/saveTemplate.common",
								params : {
									tname : B,
									tsub : C,
									tdesc : A,
									tbody : this.editorTiny.getValue(),
									tplaintext : this.editorTiny.getValue(),
									tid : this.templateid,
									flag : 2,
									mode : this.templateid ? 1 : 0
								}
							}, this, function(D) {
								if (D.value == "success") {
									Wtf.updateProgress();
									if (this.templateid == undefined) {
										calMsgBoxShow(214, 0, false, 350)
									} else {
										calMsgBoxShow(215, 0, false, 350)
									}
									if (this.store) {
										this.store.load()
									}
									this.isClosable = true;
									this.closeWindow = true;
									this.fireEvent("closeTemplate");
									if (this.mailTemplate != undefined) {
										this.mailTemplate.load()
									}
								}
							}, function() {
								Wtf.updateProgress();
								if (this.templateid == undefined) {
									calMsgBoxShow(216, 0, false, 350)
								} else {
									calMsgBoxShow(217, 0, false, 350)
								}
							});
							return true
						}
					}
				});
Wtf.ChartNode = function(A) {
	Wtf.ChartNode.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.ChartNode,
				Wtf.Component,
				{
					bodyStyle : "",
					blankString : String.fromCharCode(160),
					blockId : "block_",
					detailsIcon : "details_icon",
					editIcon : "edit_icon",
					handleclass : " handle",
					idprefix : "tree_",
					mainDivStyle : "block",
					mapIcon : "map_icon",
					nodeClass : "blocknode",
					nodeid : "",
					parentid : "",
					treeclass : "tree",
					unmapIcon : "unmap_icon",
					initComponent : function() {
						Wtf.ChartNode.superclass.initComponent.call(this);
						this.addEvents({
							"dblclick" : true
						})
					},
					onRender : function(A) {
						Wtf.ChartNode.superclass.onRender.call(this, A);
						this.elDom = Wtf.DomHelper
								.append(
										this.renderTo,
										{
											tag : "div",
											id : this.idprefix + this.nodeid,
											cls : this.treeclass,
											children : [ {
												tag : "div",
												id : "node_" + this.nodeid,
												cls : this.nodeClass,
												children : [
														{
															tag : "div",
															cls : "leftlink",
															html : this.blankString
														},
														{
															tag : "div",
															cls : "rightlink",
															html : this.blankString
														},
														{
															tag : "div",
															id : this.blockId
																	+ this.nodeid,
															cls : this.mainDivStyle,
															children : [
																	{
																		tag : "div",
																		cls : "blocktop "
																				+ this.handleclass,
																		children : [ {
																			tag : "span",
																			id : "name_"
																					+ this.handleclass,
																			html : '<div wtf:qtip="'
																					+ this.nodeNameTip
																					+ "\"wtf:qtitle='"
																					+ WtfGlobal
																							.getLocaleText("hrms.common.node.title")
																					+ "'>"
																					+ this.nodeName
																					+ "</div>"
																		} ]
																	},
																	{
																		tag : "div",
																		cls : "blockbottom",
																		children : [
																				{
																					tag : "span",
																					id : "desc_"
																							+ this.nodeid,
																					html : '<div wtf:qtip="'
																							+ this.nodeDesignationTip
																							+ "\"wtf:qtitle='"
																							+ WtfGlobal
																									.getLocaleText("hrms.common.node.role.title")
																							+ "'>"
																							+ this.nodeDesignation
																							+ "</div>"
																				},
																				{
																					tag : "a",
																					title : WtfGlobal
																							.getLocaleText("hrms.common.EditUser"),
																					cls : this.detailsIcon,
																					children : [ {
																						tag : "span",
																						html : ""
																					} ]
																				},
																				{
																					tag : "a",
																					title : WtfGlobal
																							.getLocaleText("hrms.common.map.node"),
																					cls : this.mapIcon,
																					children : [ {
																						tag : "span",
																						html : ""
																					} ]
																				},
																				{
																					tag : "a",
																					title : WtfGlobal
																							.getLocaleText("hrms.common.edit.parent"),
																					cls : this.editIcon,
																					children : [ {
																						tag : "span",
																						html : ""
																					} ]
																				},
																				{
																					tag : "a",
																					title : WtfGlobal
																							.getLocaleText("hrms.common.unmap.node"),
																					cls : this.unmapIcon,
																					children : [ {
																						tag : "span",
																						html : ""
																					} ]
																				} ]
																	} ]
														},
														{
															tag : "div",
															cls : "bottomlink",
															html : this.blankString
														} ]
											} ]
										}, true);
						this.elDom.on("dblclick", this.onDblClick, this);
						this.elDom.on("click", this.onClick, this)
					},
					onClick : function(D, C, A) {
						if (D) {
							var B = D.target.className;
							switch (B) {
							case "details_icon":
								this.fireEvent("editUserClicked", this, D);
								break;
							case "map_icon":
								this.fireEvent("mapClicked", this, D);
								break;
							case "edit_icon":
								this.fireEvent("editClicked", this, D);
								break;
							case "unmap_icon":
								this.fireEvent("unmapClicked", this, D);
								break
							}
						}
					},
					onDblClick : function(A) {
						if (A) {
							this.fireEvent("unMappedNodeDblClick", this, A,
									true)
						}
					}
				});
Wtf.reg("ChartNode", Wtf.ChartNode);
Wtf.UnmappedContainer = function(A) {
	Wtf.apply(this, A);
	this.selectedUnMappedNode = "";
	Wtf.UnmappedContainer.superclass.constructor.call(this)
};
Wtf
		.extend(
				Wtf.UnmappedContainer,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.UnmappedContainer.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						Wtf.UnmappedContainer.superclass.onRender.call(this, A);
						this.unmappedRec = Wtf.data.Record.create([ {
							name : "projid"
						}, {
							name : "userid"
						}, {
							name : "image"
						}, {
							name : "fname"
						}, {
							name : "lname"
						}, {
							name : "designation"
						}, {
							name : "role"
						} ]);
						this.unMappedNodeStore = new Wtf.data.Store({
							url : "OrganizationChart/getUnmappedUsers.common",
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.unmappedRec)
						});
						this.unMappedNodeStore.on("load",
								this.renderUnmappedNodes, this);
						this.unMappedNodeStore.load({
							params : {
								action : 1
							}
						})
					},
					reloadUnmappedContainer : function() {
						this.body.dom.innerHTML = "";
						this.unMappedNodeStore.reload()
					},
					renderUnmappedNodes : function(F, E, B) {
						var H = "";
						var A = "";
						var D = E.length;
						if (D > 0) {
							for ( var C = 0; C < D; C++) {
								H = E[C].data.fname + " " + E[C].data.lname;
								var I = Wtf.util.Format.ellipsis(H, 20);
								if (Wtf.isIE6 || Wtf.isIE7) {
									I = Wtf.util.Format.ellipsis(H, 10)
								}
								A = E[C].data.role != "" ? E[C].data.role : "-";
								var G = Wtf.util.Format.ellipsis(A, 13);
								var J = new Wtf.ChartNode({
									autoscroll : true,
									blankString : "",
									blockId : "blockUnMapped_",
									nodeid : E[C].data.userid,
									layout : "fit",
									mainDivStyle : " blockUnMapped ",
									nodeClass : "blocknodeUnmapped",
									nodeName : I,
									nodeNameTip : H,
									nodeDesignation : G,
									nodeDesignationTip : A,
									projid : this.projid,
									renderTo : this.body.id
								});
								J.on("unMappedNodeDblClick", function(N, M, K) {
									var L = Wtf.getCmp(this.projid
											+ "unmappedContainer");
									L.selectedUnMappedNode = N.nodeid;
									L.addTo(N.nodeName)
								});
								J.on("mapClicked", function(N, M, K) {
									var L = Wtf.getCmp(this.projid
											+ "unmappedContainer");
									L.selectedUnMappedNode = N.nodeid;
									L.addTo(N.nodeName)
								});
								this.makeUnmappedDraggable(E[C].data.userid)
							}
							this.doLayout()
						}
					},
					addTo : function(B) {
						var C = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.cmodel = new Wtf.grid.ColumnModel(
								[
										C,
										{
											header : "",
											width : 30,
											dataIndex : "image",
											renderer : this.pic
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.FirstName"),
											dataIndex : "fname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.LastName"),
											dataIndex : "lname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.roles"),
											width : 70,
											dataIndex : "role"
										} ]);
						var A = Wtf.getCmp(this.projid + "chartContainer").mappedNodeStore;
						this.UnmapGrid = new Wtf.grid.GridPanel(
								{
									ds : A,
									cm : this.cmodel,
									sm : C,
									autoScroll : true,
									layout : "fit",
									height : 300,
									viewConfig : {
										forceFit : true
									},
									border : false,
									autoWidth : true,
									loadMask : {
										msg : WtfGlobal
												.getLocaleText("hrms.Dashboard.Loading")
									}
								});
						this.addToWindow = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.common.map.node"),
									modal : true,
									layout : "border",
									height : 500,
									resizable : false,
									width : 550,
									iconCls : "pwndCommon iconwin",
									items : [
											{
												region : "north",
												height : 90,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText({
																	key : "hrms.common.map.node.params",
																	params : [ B ]
																}),
														WtfGlobal
																.getLocaleText({
																	key : "hrms.common.select.parent.node.1",
																	params : [ B ]
																})
																+ " <br>"
																+ WtfGlobal
																		.getLocaleText("hrms.common.click.map.node.2"))
											},
											{
												region : "center",
												layout : "fit",
												border : false,
												bodyStyle : "background:#f1f1f1;font-size:10px;",
												items : [ this.UnmapGrid ]
											} ],
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.map.node"),
												scope : this,
												handler : this.addUserTo
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : this.cancelAddTo
											} ]
								});
						this.addToWindow.show()
					},
					pic : function(A) {
						if (A == "") {
							A = "images/defaultuser.png"
						}
						return "<img src= " + A
								+ ' height= "20px" width= "20px"></img>'
					},
					cancelAddTo : function() {
						if (this.addToWindow) {
							this.addToWindow.close()
						}
					},
					addUserTo : function() {
						if (this.UnmapGrid.selModel.selections.length < 1) {
							Wtf.MessageBox
									.alert(
											WtfGlobal
													.getLocaleText("hrms.common.error"),
											WtfGlobal
													.getLocaleText("hrms.common.select.node.add.unmapped.node"))
						} else {
							var A = this.UnmapGrid.selModel.selections.items[0].data;
							var C = parseFloat(A.level) + 1;
							var B = this.unMappedNodeStore.query("userid",
									this.selectedUnMappedNode);
							this.insertNewNode(B.items[0].data.userid,
									A.nodeid, C)
						}
					},
					insertNewNode : function(userid, parentid, level) {
						Wtf.Ajax
								.requestEx(
										{
											method : "GET",
											url : "OrganizationChart/insertNode.common",
											params : ({
												action : 2,
												userid : userid,
												fromId : parentid,
												level : level
											})
										},
										this,
										function(result, req) {
											var data = eval("(" + result.data
													+ ")");
											if (!data.success) {
												if (data.msg) {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															data.msg ])
												} else {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															WtfGlobal
																	.getLocaleText("hrms.common.error.occurred.inserting.node") ])
												}
												var node = Wtf.get("node_"
														+ parentid);
												node
														.removeClass("chartDragClass")
											} else {
												ResponseAlert([
														WtfGlobal
																.getLocaleText("hrms.common.success"),
														WtfGlobal
																.getLocaleText("hrms.common.node.inserted.successfully") ]);
												this.reloadUnmappedContainer();
												var chartContainer = Wtf
														.getCmp(this.projid
																+ "chartContainer");
												chartContainer
														.reloadChartContainer()
											}
											if (this.addToWindow) {
												this.addToWindow.close()
											}
										},
										function(result, req) {
											ResponseAlert([
													WtfGlobal
															.getLocaleText("hrms.common.error"),
													WtfGlobal
															.getLocaleText("hrms.common.error.occurred.connecting.server") ]);
											if (this.addToWindow) {
												this.addToWindow.close()
											}
										})
					},
					makeUnmappedDraggable : function(B) {
						var A = "blockUnMapped_" + B;
						var C = Wtf.get(A);
						C.dd = new Wtf.ChartDDProxy(A, "group")
					}
				});
Wtf.ChartContainer = function(A) {
	Wtf.apply(this, A);
	this.mappedNodeStore = null;
	this.selectedMappedNode = "";
	this.selectedMappedNodeParent = "";
	this.isSelected = false;
	Wtf.ChartContainer.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.ChartContainer,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.ChartContainer.superclass.initComponent.call(this,
								A)
					},
					orgchartPublishHandler : function(A) {
						this.mappedNodeStore.reload()
					},
					onRender : function(A) {
						Wtf.ChartContainer.superclass.onRender.call(this, A);
						this.mappedRec = Wtf.data.Record.create([ {
							name : "projid"
						}, {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "emailid"
						}, {
							name : "contactno"
						}, {
							name : "nodeid"
						}, {
							name : "level"
						}, {
							name : "fromuid"
						}, {
							name : "fname"
						}, {
							name : "lname"
						}, {
							name : "image"
						}, {
							name : "xpos"
						}, {
							name : "ypos"
						}, {
							name : "designation"
						}, {
							name : "role"
						}, {
							name : "designationid"
						}, {
							name : "roleid"
						}, {
							name : "accno"
						}, {
							name : "department"
						}, {
							name : "employeeid"
						}, {
							name : "address"
						}, {
							name : "isleaf"
						} ]);
						this.mappedNodeStore = new Wtf.data.Store({
							url : "OrganizationChart/getMappedUsers.common",
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.mappedRec)
						});
						this.mappedNodeStore.on("load", this.renderChartNodes,
								this);
						calMsgBoxShow(202, 4, true);
						this.mappedNodeStore.load({
							params : {
								action : 3,
								pid : this.projid
							}
						})
					},
					editUserC : function(A) {
						this.editUserWindow = new Wtf.common.CreateUser({
							isEdit : true,
							record : A
						});
						this.editUserWindow.on("close", this.setSelectedFalse,
								this);
						this.editUserWindow.on("save", this.genSuccessResponse,
								this);
						this.editUserWindow.on("notsave",
								this.genFailureResponse, this)
					},
					setSelectedFalse : function() {
						var A = Wtf.getCmp(this.projid + "chartContainer");
						A.isSelected = false
					},
					genSuccessResponse : function(A) {
						if (A.roleflag != undefined) {
							WtfComMsgBox([
									WtfGlobal
											.getLocaleText("hrms.administration.organization.chart"),
									A.msg ])
						} else {
							ResponseAlert([
									WtfGlobal
											.getLocaleText("hrms.administration.organization.chart"),
									A.msg ])
						}
						if (A.success == true) {
							this.reloadChartContainer()
						}
					},
					genFailureResponse : function(A) {
						var B = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						if (A.msg) {
							B = A.msg
						}
						ResponseAlert([
								WtfGlobal
										.getLocaleText("hrms.common.permission"),
								B ])
					},
					reloadChartContainer : function() {
						calMsgBoxShow(202, 4, true);
						this.body.dom.innerHTML = "";
						this.mappedNodeStore.reload()
					},
					renderChartNodes : function(I, H, C) {
						Wtf.updateProgress();
						var D = H.length;
						if (D > 0) {
							var L = H[0].data.fname + " " + H[0].data.lname;
							var M = Wtf.util.Format.ellipsis(L, 20);
							if (Wtf.isIE6 || Wtf.isIE7) {
								M = Wtf.util.Format.ellipsis(L, 10)
							}
							var B = H[0].data.role != "" ? H[0].data.role : "-";
							var K = Wtf.util.Format.ellipsis(B, 13);
							var G = H[0].data.nodeid;
							var J = new Wtf.ChartNode({
								editIcon : "",
								mapIcon : "",
								nodeid : G,
								projid : this.projid,
								nodeName : M,
								nodeNameTip : L,
								nodeDesignation : K,
								nodeDesignationTip : B,
								autoscroll : true,
								layout : "fit",
								handleclass : "",
								renderTo : this.body.id,
								unmapIcon : ""
							});
							this.makeDraggable(G);
							J.on("editUserClicked", function(R, Q, O) {
								var P = Wtf.getCmp(this.projid
										+ "chartContainer");
								if (!P.isSelected) {
									P.selectedMappedNode = R.nodeid;
									P.selectedMappedNodeParent = R.parentid;
									P.editUserProfile();
									P.isSelected = true
								}
							});
							for ( var A = 1; A < D; A++) {
								L = H[A].data.fname + " " + H[A].data.lname;
								M = Wtf.util.Format.ellipsis(L, 20);
								if (Wtf.isIE6 || Wtf.isIE7) {
									M = Wtf.util.Format.ellipsis(L, 10)
								}
								B = H[A].data.role != "" ? H[A].data.role : "-";
								var K = Wtf.util.Format.ellipsis(B, 13);
								Wtf
										.each(
												H[A].data.fromuid,
												function(P, O) {
													J = new Wtf.ChartNode(
															{
																autoscroll : true,
																layout : "fit",
																mainDivStyle : "block"
																		+ (O > 0 ? " dullnode "
																				: ""),
																nodeid : H[A].data.nodeid,
																idprefix : "tree_"
																		+ (O > 0 ? O
																				: ""),
																nodeName : M,
																nodeNameTip : L,
																nodeDesignation : K,
																nodeDesignationTip : B,
																parentid : H[A].data.fromuid,
																projid : this.projid,
																renderTo : this.body.id
															});
													var Q = "tree_" + P;
													Wtf.get(Q).appendChild(
															J.elDom.id);
													if (O == 0) {
														J
																.on(
																		"editUserClicked",
																		function(
																				U,
																				T,
																				R) {
																			var S = Wtf
																					.getCmp(this.projid
																							+ "chartContainer");
																			if (!S.isSelected) {
																				S.selectedMappedNode = U.nodeid;
																				S.selectedMappedNodeParent = U.parentid;
																				S
																						.editUserProfile();
																				S.isSelected = true
																			}
																		});
														J
																.on(
																		"editClicked",
																		function(
																				X,
																				W,
																				R) {
																			var V = Wtf
																					.getCmp(this.projid
																							+ "chartContainer");
																			var U = V.mappedNodeStore
																					.query(
																							"nodeid",
																							X.nodeid);
																			if (U.items[0].data.level != 0) {
																				if (!V.isSelected) {
																					V.selectedMappedNode = X.nodeid;
																					V.selectedMappedNodeParent = X.parentid;
																					var Y = U.items[0].data.fname;
																					var S = U.items[0].data.lname;
																					var T = Y
																							+ " "
																							+ S;
																					T = T
																							.trim();
																					V
																							.editTo(T);
																					V.isSelected = true
																				}
																			} else {
																				ResponseAlert([
																						WtfGlobal
																								.getLocaleText("hrms.common.error"),
																						WtfGlobal
																								.getLocaleText("hrms.common.not.sufficient.priviledges.edit.root.node") ])
																			}
																		});
														J
																.on(
																		"unmapClicked",
																		function(
																				V,
																				U,
																				R) {
																			var T = Wtf
																					.getCmp(this.projid
																							+ "chartContainer");
																			if (!T.isSelected) {
																				T.isSelected = true;
																				var S = T.mappedNodeStore
																						.query(
																								"nodeid",
																								V.nodeid);
																				if (S.items[0].data.level != 0) {
																					Wtf.MessageBox
																							.confirm(
																									WtfGlobal
																											.getLocaleText("hrms.common.confirm"),
																									WtfGlobal
																											.getLocaleText("hrms.common.unmap.node"),
																									function(
																											W) {
																										if (W == "yes") {
																											T.isSelected = false;
																											T
																													.unmapNode(V.nodeid)
																										} else {
																											if (W == "no") {
																												T.isSelected = false
																											}
																										}
																									},
																									this)
																				} else {
																					ResponseAlert([
																							WtfGlobal
																									.getLocaleText("hrms.common.error"),
																							WtfGlobal
																									.getLocaleText("hrms.common.not.sufficient.priviledges.unmap.root.node") ])
																				}
																			}
																		})
													}
												}, this);
								this.makeDraggable(H[A].data.nodeid)
							}
							var F = Wtf.get("tree_" + G).dom;
							for ( var N = F.childNodes.length - 1; N > 0; N--) {
								if (F.childNodes[N].id.indexOf("tree_") >= 0) {
									this.renderLinks(F)
								}
							}
							if (F.firstChild.className.indexOf("child") >= 0) {
								F.firstChild.className = F.firstChild.className
										.split("child")[0]
							}
							var E = Wtf.get("desc_" + G).dom.nextSibling;
							E.style.marginLeft = "40px";
							this.doLayout()
						}
					},
					renderLinks : function(D) {
						var B = " child";
						var A = "";
						D.className = "tree block" + this.childrenLength(D);
						for ( var C = D.childNodes.length - 1; C > 0; C--) {
							if (D.childNodes[C].id.indexOf("tree_") >= 0) {
								this.renderLinks(D.childNodes[C])
							}
						}
						var E = this.firstNode(D.parentNode);
						if (E && E.nextSibling) {
							if (E.id == D.id) {
								B = " sib_left"
							} else {
								if (this.lastNode(D.parentNode).id == D.id) {
									B = " sib_right"
								} else {
									B = " sib_middle"
								}
							}
						}
						if (!this.firstNode(D)) {
							A = " no_bottomlink"
						}
						D.firstChild.className = " blocknode" + B + A
					},
					firstNode : function(B) {
						for ( var A = 0; A < B.childNodes.length; A++) {
							if (B.childNodes[A].id.indexOf("tree_") >= 0) {
								return B.childNodes[A]
							}
						}
						return 0
					},
					lastNode : function(C) {
						var B = "";
						for ( var A = 0; A < C.childNodes.length; A++) {
							if (C.childNodes[A].id.indexOf("tree_") >= 0) {
								B = C.childNodes[A]
							}
						}
						return B
					},
					childrenLength : function(B) {
						var C = 0;
						for ( var A = 0; A < B.childNodes.length; A++) {
							if (B.childNodes[A].id.indexOf("tree_") >= 0) {
								C += this.childrenLength(B.childNodes[A])
							}
						}
						if (C == 0) {
							C++
						}
						return C
					},
					editUserProfile : function() {
						var B = this.mappedNodeStore.query("nodeid",
								this.selectedMappedNode).items[0].data;
						var C = this.mappedRec;
						var A = new C({
							"image" : B["image"],
							"userid" : B["userid"],
							"employeeid" : B["employeeid"],
							"accno" : B["accno"],
							"username" : B["username"],
							"fname" : B["fname"],
							"lname" : B["lname"],
							"emailid" : B["emailid"],
							"contactno" : B["contactno"],
							"address" : B["address"],
							"designation" : B["designation"],
							"designationid" : B["designationid"],
							"department" : B["department"],
							"role" : B["role"],
							"roleid" : B["roleid"]
						});
						this.editUserC(A)
					},
					editTo : function(A) {
						var B = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.cmodel = new Wtf.grid.ColumnModel(
								[
										B,
										{
											header : "",
											width : 30,
											dataIndex : "image",
											hidden : true,
											renderer : function(C) {
												if (!C || C == "") {
													C = Wtf.DEFAULT_USER_URL
												}
												return String
														.format(
																"<img src='{0}' style='height:18px;width:18px;vertical-align:text-top;'/>",
																C)
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.FirstName"),
											dataIndex : "fname",
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ C
														+ "\"wtf:qtitle='"
														+ WtfGlobal
																.getLocaleText("hrms.common.FirstName")
														+ "'>" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.LastName"),
											dataIndex : "lname",
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ C
														+ "\"wtf:qtitle='"
														+ WtfGlobal
																.getLocaleText("hrms.common.LastName")
														+ "'>" + C + "</div>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.roles"),
											width : 70,
											dataIndex : "role",
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ C
														+ "\"wtf:qtitle='"
														+ WtfGlobal
																.getLocaleText("hrms.common.roles")
														+ "'>" + C + "</div>"
											}
										} ]);
						this.mappedGridStore = new Wtf.data.Store(
								{
									url : "OrganizationChart/getGridMappedUsers.common",
									reader : new Wtf.data.KwlJsonReader({
										root : "data"
									}, this.mappedRec)
								});
						this.mappedGridStore.load({
							params : {
								action : 5,
								pid : this.projid,
								nodeid : this.selectedMappedNode,
								parentid : this.selectedMappedNodeParent
							}
						});
						this.MapGrid = new Wtf.grid.GridPanel(
								{
									ds : this.mappedGridStore,
									cm : this.cmodel,
									sm : B,
									autoScroll : true,
									layout : "fit",
									height : 300,
									viewConfig : {
										forceFit : true
									},
									border : false,
									autoWidth : true,
									loadMask : {
										msg : WtfGlobal
												.getLocaleText("hrms.Dashboard.Loading")
									}
								});
						this.editToWindow = new Wtf.Window(
								{
									resizable : false,
									scope : this,
									title : WtfGlobal
											.getLocaleText("hrms.common.edit.parent"),
									modal : true,
									layout : "border",
									height : 500,
									width : 550,
									projid : this.projid,
									iconCls : "pwndCommon iconwin",
									items : [
											{
												region : "north",
												height : 90,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText({
																	key : "hrms.common.edit.parent.for",
																	params : [ A ]
																}),
														WtfGlobal
																.getLocaleText({
																	key : "hrms.common.select.parent.node.1",
																	params : [ A ]
																})
																+ " <br>"
																+ WtfGlobal
																		.getLocaleText("hrms.common.click.edit.parent.button.2"))
											},
											{
												region : "center",
												layout : "fit",
												border : false,
												bodyStyle : "background:#f1f1f1;font-size:10px;",
												items : [ this.MapGrid ]
											} ],
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.edit.parent"),
												scope : this,
												handler : this.editUserTo
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : this.cancelEditTo
											} ]
								});
						this.editToWindow.show();
						this.editToWindow.on("close", function() {
							var C = Wtf.getCmp(this.projid + "chartContainer");
							C.isSelected = false
						})
					},
					pic : function(A) {
						if (A == "") {
							A = "images/defaultuser.png"
						}
						return "<img src= " + A
								+ ' height= "20px" width= "20px"></img>'
					},
					cancelEditTo : function() {
						this.isSelected = false;
						if (this.editToWindow) {
							this.editToWindow.close()
						}
					},
					editUserTo : function() {
						if (this.MapGrid.selModel.selections.length < 1) {
							ResponseAlert([
									WtfGlobal
											.getLocaleText("hrms.common.Alert"),
									WtfGlobal
											.getLocaleText("hrms.common.select.node.edit.parent") ])
						} else {
							var A = this.MapGrid.selModel.selections.items[0].data;
							var B = parseFloat(A.level) + 1;
							this.updateNode(this.selectedMappedNode, A.nodeid,
									B);
							this.isSelected = false
						}
					},
					updateNode : function(nodeId, parentId, level) {
						Wtf.commonWaitMsgBox(WtfGlobal
								.getLocaleText("hrms.common.Savingdata"));
						Wtf.Ajax
								.requestEx(
										{
											method : "GET",
											url : "OrganizationChart/updateNode.common",
											params : ({
												action : 6,
												refid : this.projid,
												nodeid : nodeId,
												fromId : parentId,
												level : level
											})
										},
										this,
										function(result, req) {
											var data = eval("(" + result.data
													+ ")");
											this.reloadChartContainer();
											Wtf.updateProgress();
											if (!data.success) {
												if (data.msg) {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															data.msg ])
												} else {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															WtfGlobal
																	.getLocaleText("hrms.common.error.occurred.editing.node") ])
												}
											} else {
												ResponseAlert([
														WtfGlobal
																.getLocaleText("hrms.common.success"),
														WtfGlobal
																.getLocaleText("hrms.common.node.edited.successfully") ])
											}
											if (this.editToWindow) {
												this.editToWindow.close()
											}
										},
										function(result, req) {
											if (this.editToWindow) {
												this.editToWindow.close()
											}
											ResponseAlert([
													WtfGlobal
															.getLocaleText("hrms.common.error"),
													WtfGlobal
															.getLocaleText("hrms.common.error.occurred.connecting.server") ])
										})
					},
					unmapNode : function(nodeId) {
						calMsgBoxShow(202, 4, true);
						Wtf.Ajax
								.requestEx(
										{
											method : "GET",
											url : "OrganizationChart/deleteNode.common",
											params : ({
												action : 7,
												nodeId : nodeId
											})
										},
										this,
										function(result, req) {
											var data = eval("(" + result.data
													+ ")");
											if (!data.success) {
												if (data.msg) {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															data.msg ])
												} else {
													ResponseAlert([
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															WtfGlobal
																	.getLocaleText("hrms.common.error.occurred.deleting.node") ])
												}
											} else {
												ResponseAlert([
														WtfGlobal
																.getLocaleText("hrms.common.success"),
														WtfGlobal
																.getLocaleText("hrms.common.node.deleted.successfully") ]);
												this.reloadChartContainer();
												var unmappedContainer = Wtf
														.getCmp(this.projid
																+ "unmappedContainer");
												unmappedContainer
														.reloadUnmappedContainer()
											}
										},
										function(result, req) {
											ResponseAlert([
													WtfGlobal
															.getLocaleText("hrms.common.error"),
													WtfGlobal
															.getLocaleText("hrms.common.error.occurred.connecting.server") ])
										})
					},
					makeDraggable : function(C) {
						var A = "block_" + C;
						var B = Wtf.get(A);
						B.dd = new Wtf.ChartDDProxy(A, "group")
					}
				});
Wtf.ChartDDProxy = function(C, A, B) {
	if (C) {
		this.init(C, A, B);
		this.initFrame()
	}
};
Wtf
		.extend(
				Wtf.ChartDDProxy,
				Wtf.dd.DDProxy,
				{
					startDrag : function(B, G) {
						var A = Wtf.get(this.getDragEl());
						var E = Wtf.get(this.getEl());
						var C = false;
						if (E.id.indexOf("block_") >= 0) {
							var F = Wtf.getCmp(companyid + "chartContainer");
							var D = F.mappedNodeStore.query("nodeid", E.id
									.split("block_")[1]);
							if (D.items[0].data.level == 0) {
								C = true
							}
						}
						if (!C) {
							A.applyStyles({
								border : "",
								"z-index" : 2000,
								height : 17,
								backgroundColor : E.dom.style.backgroundColor,
								color : E.dom.style.color
							});
							A.update(E.dom.innerHTML);
							A.addClass(E.dom.className + " dd-proxy")
						}
					},
					onDragOver : function(F, A) {
						var B = true;
						var E = Wtf.get(A);
						this.lastTarget = E;
						if (E.id.indexOf("block_") >= 0) {
							var C = Wtf.get("node_" + E.id.split("block_")[1]);
							if (this.id.indexOf("block_") >= 0) {
								var D = Wtf.get("tree_"
										+ this.id.split("block_")[1]);
								if (D.query("div#" + E.id).length > 0) {
									B = false
								}
							}
							if (B) {
								C.addClass("chartDragClass")
							}
						}
					},
					onDragOut : function(F, A) {
						var E = true;
						var D = Wtf.get(A);
						this.lastTarget = null;
						if (D.id.indexOf("block_") >= 0) {
							var B = Wtf.get("node_" + D.id.split("block_")[1]);
							if (this.id.indexOf("block_") >= 0) {
								var C = Wtf.get("tree_"
										+ this.id.split("block_")[1]);
								if (C.query("div#" + D.id).length > 0) {
									E = false
								}
							}
							if (E) {
								B.removeClass("chartDragClass")
							}
						}
					},
					endDrag : function(J) {
						var G = Wtf.getCmp(companyid + "chartContainer");
						var F = Wtf.get(this.getDragEl());
						var E = Wtf.get(this.getEl());
						var P = Wtf.get(this.lastTarget);
						var H = false;
						if (E.id.indexOf("block_") >= 0) {
							var C = G.mappedNodeStore.query("nodeid", E.id
									.split("block_")[1]);
							if (C.items[0].data.level == 0) {
								H = true
							}
						}
						if (P && P.id.indexOf("block_") >= 0 && !H) {
							if ("function" === typeof this.config.fn) {
								this.config.fn.apply(this.config.scope
										|| window,
										[ this, this.config.dragData ])
							}
							if (this.id.indexOf("block_") >= 0) {
								var M = Wtf.get("tree_"
										+ this.id.split("block_")[1]);
								P = (P.id);
								if (this.lastTarget) {
									var L = Wtf.get("node_"
											+ this.lastTarget.id
													.split("block_")[1]);
									L.removeClass("chartDragClass")
								}
								if (M.query("div#" + P).length == 0
										&& C.items[0].data.fromuid != P
												.split("block_")[1]) {
									var N = P.split("block_")[1];
									var B = this.id.split("block_")[1];
									var K = G.mappedNodeStore
											.query("nodeid", N);
									var A = K.items[0].data.level + 1;
									G.updateNode(B, N, A)
								} else {
									Wtf.MessageBox
											.alert(
													WtfGlobal
															.getLocaleText("hrms.common.error"),
													WtfGlobal
															.getLocaleText("hrms.common.node.cannot.appended.parent.child.node"));
									J.stopEvent()
								}
							} else {
								P = (P.id);
								var O = Wtf.getCmp(companyid
										+ "unmappedContainer");
								var D = P.split("block_")[1];
								var I = this.id.split("blockUnMapped_")[1];
								K = G.mappedNodeStore.query("nodeid", D);
								A = K.items[0].data.level + 1;
								O.insertNewNode(I, D, A)
							}
						} else {
							J.stopEvent()
						}
					}
				});
Wtf.reg("ChartDragPlugin", Wtf.ChartDDProxy)