Wtf.TempEmpMaster = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side", A.layout = "fit";
	Wtf.TempEmpMaster.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.TempEmpMaster,
				Wtf.Panel,
				{
					id : "PayrollManagementTempEmpMaster",
					showhide : function(C, D, E) {
						C.setVisible(D);
						C.container.up("div.x-form-item").dom.style.display = E;
						var B = C.el.findParent("div.x-form-item", 4, true);
						var A = B.first("label.x-form-item-label");
						A.dom.style.display = E
					},
					onRender : function(A) {
						Wtf.TempEmpMaster.superclass.onRender.call(this, A);
						this.quickSearchEmpField
								.on(
										"render",
										function() {
											this.quickSearchEmpField.el.dom.onkeyup = this.onKeyUpEvent
													.createDelegate(this)
										}, this)
					},
					initComponent : function(config) {
						Wtf.TempEmpMaster.superclass.initComponent.call(this,
								config);
						this.lastlimitoption = 15;
						this.cnamedata = [
								[ WtfGlobal.getLocaleText("hrms.January") ],
								[ WtfGlobal.getLocaleText("hrms.February") ],
								[ WtfGlobal.getLocaleText("hrms.March") ],
								[ WtfGlobal.getLocaleText("hrms.April") ],
								[ WtfGlobal.getLocaleText("hrms.May") ],
								[ WtfGlobal.getLocaleText("hrms.June") ],
								[ WtfGlobal.getLocaleText("hrms.July") ],
								[ WtfGlobal.getLocaleText("hrms.August") ],
								[ WtfGlobal.getLocaleText("hrms.September") ],
								[ WtfGlobal.getLocaleText("hrms.October") ],
								[ WtfGlobal.getLocaleText("hrms.November") ],
								[ WtfGlobal.getLocaleText("hrms.December") ] ];
						this.monthcombostore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "cname"
							} ]
						});
						this.monthcombostore.loadData(this.cnamedata);
						this.MonthName = new Wtf.form.ComboBox(
								{
									store : this.monthcombostore,
									displayField : "cname",
									mode : "local",
									scope : this,
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.CName.Select"),
									selectOnFocus : true,
									width : 120,
									minWidth : 110,
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(MonthName, rec, i) {
											this.month = this.monthcombostore
													.getAt(i).get("cname")
										}
									}
								});
						this.usersRecG = new Wtf.data.Record.create([ {
							name : "TempID"
						}, {
							name : "id"
						}, {
							name : "GroupName"
						}, {
							name : "TempName"
						}, {
							name : "payinterval"
						}, {
							name : "effdate"
						} ]);
						this.groupuserds = new Wtf.data.GroupingStore({
							url : "Payroll/Template/getPayProcessData.py",
							baseParams : {
								PayProc : "get"
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.usersRecG),
							autoLoad : false,
							sortInfo : {
								field : "TempName",
								direction : "DSC"
							},
							groupField : "GroupName"
						});
						this.paycyclerec = new Wtf.data.Record.create([ {
							name : "TempID"
						}, {
							name : "paycyclestart"
						}, {
							name : "paycycleend"
						}, {
							name : "paycycleactualend"
						}, {
							name : "paycycleshowstart"
						}, {
							name : "paycycleshowend"
						}, {
							name : "paycycletemplate"
						} ]);
						this.groupuserds.on("load", function(a, b, c) {
							this.lastlimitoption = c.params.limit
						}, this);
						this.emptempds = new Wtf.data.GroupingStore({
							url : "Payroll/Template/getuserpaycycle.py",
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.paycyclerec)
						});
						this.on("render", function() {
							this.groupuserds.load({
								params : {
									start : 0,
									limit : 15
								}
							})
						});
						this.rowNo = new Wtf.grid.RowNumberer();
						this.paycyclesm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true
						});
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel(
								{
									singleSelect : true,
									scope : this,
									listeners : {
										scope : this,
										selectionchange : function(sm, index,
												record) {
											if (this.selectionModel.getCount() == 0) {
												if (this.emptempdriven
														.getValue()) {
													this.emptempds.removeAll();
													this.payintervalgrid
															.getView().emptyText = WtfGlobal
															.emptyGridRenderer(WtfGlobal
																	.getLocaleText("hrms.common.SelecttheTemplate"));
													this.payintervalgrid
															.getView()
															.refresh();
													this.quickSearchEmpField
															.disable();
													this.dateComp.disable()
												} else {
													this.emptempds.removeAll();
													this.payintervalgrid
															.getView().emptyText = WtfGlobal
															.emptyGridRenderer(WtfGlobal
																	.getLocaleText("hrms.common.SelecttheEmployee"));
													this.payintervalgrid
															.getView()
															.refresh()
												}
												return
											}
											var grid = sm.grid;
											var cell = grid.view
													.getHeaderCell(1);
											var hd = Wtf.fly(cell).child(
													".x-grid3-hd-checker");
											if (sm.getCount() === grid
													.getStore().getCount()) {
												hd
														.addClass("x-grid3-hd-checker-on")
											} else {
												hd
														.removeClass("x-grid3-hd-checker-on")
											}
										}
									}
								});
						this.gridcm = new Wtf.grid.ColumnModel(
								[
										this.rowNo,
										this.selectionModel,
										{
											id : "GroupName",
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payrolltemplates"),
											width : 10,
											sortable : true,
											hidden : true,
											dataIndex : "GroupName"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payrolltemplates"),
											width : 10,
											sortable : true,
											dataIndex : "TempName"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payinterval"),
											width : 10,
											sortable : true,
											dataIndex : "payinterval",
											renderer : function(val) {
												if (val == 1) {
													return WtfGlobal
															.getLocaleText("hrms.payroll.onceamonth")
												} else {
													if (val == 3) {
														return WtfGlobal
																.getLocaleText("hrms.payroll.twiceamonth")
													} else {
														if (val == 2) {
															return WtfGlobal
																	.getLocaleText("hrms.payroll.onceaweek")
														}
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.PayDate"),
											width : 10,
											sortable : true,
											dataIndex : "effdate",
											renderer : function(val, meta, rec) {
												if (rec.get("payinterval") == 3) {
													if (val == 1) {
														return WtfGlobal
																.getLocaleText("hrms.Sunday")
													} else {
														if (val == 2) {
															return WtfGlobal
																	.getLocaleText("hrms.Monday")
														} else {
															if (val == 3) {
																return WtfGlobal
																		.getLocaleText("hrms.Tuesday")
															} else {
																if (val == 4) {
																	return WtfGlobal
																			.getLocaleText("hrms.Wednesday")
																} else {
																	if (val == 5) {
																		return WtfGlobal
																				.getLocaleText("hrms.Thursday")
																	} else {
																		if (val == 6) {
																			return WtfGlobal
																					.getLocaleText("hrms.Friday")
																		} else {
																			if (val == 7) {
																				return WtfGlobal
																						.getLocaleText("hrms.Saturday")
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													return val
												}
											}
										} ], this);
						this.paycyclecm = new Wtf.grid.ColumnModel(
								[
										this.rowNo,
										this.selectionModel,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.PayCycleStart"),
											sortable : false,
											dataIndex : "paycycleshowstart"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.PayCycleEnd"),
											sortable : false,
											dataIndex : "paycycleshowend"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Template"),
											sortable : false,
											dataIndex : "paycycletemplate"
										} ], this);
						var tbartempbtns = [];
						this.grouptempgrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									loadMask : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.search"),
									searchField : "GroupName",
									serverSideSearch : true,
									view : new Wtf.grid.GroupingView(
											{
												forceFit : true,
												showGroupName : false,
												groupTextTpl : "{text}",
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.payroll.NoTemplateaddedtillnow"))
											}),
									store : this.groupuserds,
									cm : this.gridcm,
									scope : this,
									border : true,
									sm : this.selectionModel
								});
						this.selectionModel.on("selectionchange",
								this.calculatepaycycle, this);
						this.payintervalgrid = new Wtf.grid.GridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									loadMask : true,
									view : new Wtf.grid.GroupingView(
											{
												forceFit : true,
												showGroupName : false,
												groupTextTpl : "{text}",
												emptyText : WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.payroll.Notemplateassignedtothisemployee"))
											}),
									store : this.emptempds,
									cm : this.paycyclecm,
									scope : this,
									border : true,
									sm : this.paycyclesm,
									tbar : tbartempbtns
								});
						this.paycyclesm.on("selectionchange",
								this.getemployees, this);
						var emptemprec = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "id"
						} ]);
						this.emptempdriven = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.TemplateDriven"),
									id : "tempdriven" + this.id,
									bodyStyle : "float:left",
									checked : true,
									name : "emptemp"
								});
						this.empdriven = new Wtf.form.Radio(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.EmployeeDriven"),
									id : "empdriven" + this.id,
									bodyStyle : "float:left",
									name : "emptemp"
								});
						this.quickSearchEmpField = new Wtf.form.TextField(
								{
									anchor : "99%",
									width : 150,
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg")
								});
								this.timer = new Wtf.util.DelayedTask(
										this.onKeyUpEvent),
								this.empdriven
										.on(
												"check",
												function(a, b) {
													this.empgrid.emptext = "";
													this.empgrid.quickSearchTF
															.setValue("");
													if (b) {
														this.getemployeelist();
														this.quickSearchEmpField
																.disable();
														this.dateComp.disable();
														this.grouptempgrid
																.getView().emptyText = WtfGlobal
																.emptyGridRenderer(WtfGlobal
																		.getLocaleText("hrms.payroll.NoEmployeeaddedtillnow"));
														this.paycyclecm
																.setHidden(4,
																		false)
													}
												}, this);
						this.emptempdriven
								.on(
										"check",
										function(a, b) {
											this.grouptempgrid.emptext = "";
											this.grouptempgrid.quickSearchTF
													.setValue("");
											if (b) {
												this.getTemplatelist();
												this.extrausergrid.hide();
												Wtf
														.getCmp(
																"gridcontainerpanel")
														.doLayout();
												Wtf.getCmp("as").doLayout();
												this.quickSearchEmpField
														.enable();
												this.dateComp.enable();
												this.grouptempgrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.payroll.NoTemplateaddedtillnow"));
												this.paycyclecm.setHidden(4,
														true)
											}
										}, this);
						this.empdriven
								.on(
										"check",
										function(a, b) {
											if (this.empdriven.rendered
													&& this.emptempdriven.rendered) {
												this.empdriven.onClick();
												this.emptempdriven.onClick();
												this.emptempds.removeAll();
												this.payintervalgrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.payroll.SelecttheEmployee"));
												this.payintervalgrid.getView()
														.refresh()
											}
										}, this);
						this.emptempdriven
								.on(
										"check",
										function(a, b) {
											if (this.emptempdriven.rendered
													&& this.empdriven.rendered) {
												this.emptempdriven.onClick();
												this.empdriven.onClick();
												this.emptempds.removeAll();
												this.payintervalgrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer(WtfGlobal
																.getLocaleText("hrms.payroll.SelecttheTemplate"));
												this.payintervalgrid.getView()
														.refresh();
												this.quickSearchEmpField
														.disable();
												this.dateComp.disable()
											}
										}, this);
						this.emptempfield = new Wtf.Panel({
							frame : false,
							border : false,
							layout : "column",
							items : [ {
								frame : false,
								columnWidth : 0.5,
								border : false,
								layout : "form",
								items : [ this.emptempdriven ]
							}, {
								frame : false,
								border : false,
								columnWidth : 0.5,
								layout : "form",
								items : [ this.empdriven ]
							} ]
						});
						var intervalrec = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "id"
						} ]);
						var intervalreader = new Wtf.data.ArrayReader({},
								intervalrec);
						var intervaldata = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.onceamonth"),
										1 ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.onceaweek"),
										3 ] ];
						var intervalStore = new Wtf.data.Store({
							reader : intervalreader,
							data : intervaldata
						});
						this.payintervalCombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.PaymentInterval"),
									mode : "local",
									displayField : "name",
									valueField : "id",
									allowBlank : false,
									name : "payinterval",
									typeAhead : true,
									hiddenName : "payinterval",
									triggerAction : "all",
									store : intervalStore,
									listeners : {
										scope : this,
										select : function() {
											if (this.payintervalCombo
													.getValue() == 1) {
												this.showhide(this.datepicker,
														true, "block");
												this.showhide(this.daypicker,
														false, "none")
											} else {
												if (this.payintervalCombo
														.getValue() == 3) {
													this.showhide(
															this.datepicker,
															false, "none");
													this.showhide(
															this.daypicker,
															true, "block")
												}
											}
										}
									}
								});
						this.datestore = new Wtf.data.SimpleStore({
							fields : [ "id", "name" ],
							data : [ [ "1", "1st" ], [ "2", "2nd" ],
									[ "3", "3rd" ], [ "4", "4th" ],
									[ "5", "5th" ], [ "6", "6th" ],
									[ "7", "7th" ], [ "8", "8th" ],
									[ "9", "9th" ], [ "10", "10th" ],
									[ "11", "11th" ], [ "12", "12th" ],
									[ "13", "13th" ], [ "14", "14th" ],
									[ "15", "15th" ], [ "16", "16th" ],
									[ "17", "17th" ], [ "18", "18th" ],
									[ "19", "19th" ], [ "20", "20th" ],
									[ "21", "21th" ], [ "22", "22th" ],
									[ "23", "23th" ], [ "24", "24th" ],
									[ "25", "25th" ], [ "26", "26th" ],
									[ "27", "27th" ], [ "28", "28th" ],
									[ "29", "29th" ], [ "30", "30th" ],
									[ "31", "31th" ] ]
						});
						this.daystore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.Sunday") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.Monday") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.Tuesday") ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.Wednesday") ],
											[
													"5",
													WtfGlobal
															.getLocaleText("hrms.Thursday") ],
											[
													"6",
													WtfGlobal
															.getLocaleText("hrms.Friday") ],
											[
													"7",
													WtfGlobal
															.getLocaleText("hrms.Saturday") ] ]
								});
						this.datepicker = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.payroll.Date"),
							store : this.datestore,
							name : "date",
							displayField : "name",
							valueField : "id",
							mode : "local",
							triggerAction : "all",
							hidden : true,
							hideLabel : true
						});
						this.daypicker = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.day"),
							store : this.daystore,
							name : "date",
							displayField : "name",
							valueField : "id",
							mode : "local",
							triggerAction : "all",
							hidden : true,
							hideLabel : true
						});
						this.filternorth = new Wtf.Panel({
							layout : "form",
							labelWidth : 120,
							bodyStyle : "padding:10px;",
							border : false,
							items : [ this.emptempfield, this.datepicker,
									this.daypicker ]
						});
						this.filterpanel = new Wtf.Panel({
							region : "west",
							width : 400,
							layout : "border",
							bodyStyle : "background-color: rgb(241, 241, 241)",
							border : false,
							items : [ {
								region : "north",
								layout : "fit",
								border : false,
								height : 40,
								items : this.filternorth
							}, {
								region : "center",
								layout : "fit",
								border : false,
								items : this.grouptempgrid
							}, {
								region : "south",
								layout : "fit",
								border : false,
								split : true,
								height : 350,
								items : this.payintervalgrid
							} ]
						});
						this.interjobRecord = Wtf.data.Record.create([ {
							name : "EName"
						}, {
							name : "Wage"
						}, {
							name : "AccNo"
						}, {
							name : "Tax"
						}, {
							name : "Deduc"
						}, {
							name : "Salary"
						}, {
							name : "FixedSal"
						}, {
							name : "empid"
						}, {
							name : "design"
						}, {
							name : "tempid"
						}, {
							name : "showborder"
						}, {
							name : "generated"
						}, {
							name : "paycycleend"
						}, {
							name : "mappingid"
						}, {
							name : "salaryGenerated"
						} ]);
						this.empstore = new Wtf.data.Store({
							scope : this,
							id : "empStore",
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.interjobRecord),
							url : "Emp/getEmpListPerGroupid.py"
						});
						this.emptempstore = new Wtf.data.Store({
							scope : this,
							id : "emptempStore",
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.interjobRecord)
						});
						this.empstore
								.on(
										"load",
										function() {
											WtfGlobal.closeProgressbar();
											var paysetComp = Wtf
													.getCmp("gridcontainerpanel");
											if (this.empdriven.getValue()) {
												this.emptempstore.removeAll();
												this.extrausergrid.show();
												paysetComp.doLayout();
												Wtf.getCmp("as").doLayout();
												for ( var i = 0; i < this.empstore.data.length; i++) {
													if (this.empstore.getAt(i).data.empid == this.selectedEmp) {
													} else {
														this.emptempstore
																.add(this.empstore
																		.getAt(i));
														this.empstore
																.remove(this.empstore
																		.getAt(i));
														i--
													}
												}
											}
										}, this);
						this.empstore.on("loadexception", function() {
							WtfGlobal.closeProgressbar()
						}, this);
						this.empsm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false,
							scope : this,
							listeners : {
								scope : this,
								rowselect : function(sm2, index, record) {
									this.TempId = this.empstore.getAt(index)
											.get("tempid");
									this.ename = this.empstore.getAt(index)
											.get("EName");
									this.accno = this.empstore.getAt(index)
											.get("AccNo");
									this.salary = this.empstore.getAt(index)
											.get("Wage");
									this.tax = this.empstore.getAt(index).get(
											"Tax");
									this.empid = this.empstore.getAt(index)
											.get("empid");
									this.deduc = this.empstore.getAt(index)
											.get("Deduc");
									this.currency = this.empstore.getAt(index)
											.get("tempid");
									this.fixedsal = this.empstore.getAt(index)
											.get("FixedSal");
									this.design = this.empstore.getAt(index)
											.get("design");
									this.selectedEmpGrid = this.empgrid
								},
								rowdeselect : function(selectionmodal, index,
										record) {
								},
								selectionchange : function(sm, index, record) {
									var grid = sm.grid;
									var cell = grid.view.getHeaderCell(0);
									var hd = Wtf.fly(cell).child(
											".x-grid3-hd-checker");
									if (sm.getCount() === grid.getStore()
											.getCount()) {
										hd.addClass("x-grid3-hd-checker-on")
									} else {
										hd.removeClass("x-grid3-hd-checker-on")
									}
								}
							}
						});
						this.emptempsm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false,
							scope : this,
							listeners : {
								scope : this,
								rowselect : function(sm2, index, record) {
									this.TempId = this.emptempstore
											.getAt(index).get("tempid");
									this.ename = this.emptempstore.getAt(index)
											.get("EName");
									this.accno = this.emptempstore.getAt(index)
											.get("AccNo");
									this.salary = this.emptempstore
											.getAt(index).get("Wage");
									this.tax = this.emptempstore.getAt(index)
											.get("Tax");
									this.empid = this.emptempstore.getAt(index)
											.get("empid");
									this.deduc = this.emptempstore.getAt(index)
											.get("Deduc");
									this.currency = this.emptempstore.getAt(
											index).get("tempid");
									this.fixedsal = this.emptempstore.getAt(
											index).get("FixedSal");
									this.design = this.emptempstore
											.getAt(index).get("design");
									this.selectedEmpGrid = this.extrausergrid
								},
								rowdeselect : function(selectionmodal, index,
										record) {
								},
								selectionchange : function(sm, index, record) {
									var grid = sm.grid;
									var cell = grid.view.getHeaderCell(0);
									var hd = Wtf.fly(cell).child(
											".x-grid3-hd-checker");
									if (sm.getCount() === grid.getStore()
											.getCount()) {
										hd.addClass("x-grid3-hd-checker-on")
									} else {
										hd.removeClass("x-grid3-hd-checker-on")
									}
								}
							}
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.empsm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "EName",
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Earnings"),
											dataIndex : "Wage",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(val) {
												if (val != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			val)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Deductions"),
											dataIndex : "Deduc",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(val) {
												if (val != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			val)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Taxes"),
											dataIndex : "Tax",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(val) {
												if (val != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			val)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.netpay"),
											dataIndex : "Salary",
											scope : this,
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(val) {
												if (val != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			val)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											width : 7,
											align : "center",
											renderer : function(val, cell, row,
													rowIndex, colIndex, ds) {
												return "<div style='width:30px;' class='pwndCommon deletecolIcon' >&nbsp;</div>"
											}
										} ]);
						this.fromdateempG = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getFirstDateOfMonth(),
							maxValue : new Date().clearTime(true)
						});
						this.todateempG = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							disabled : true,
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getLastDateOfMonth()
						});
						this.dateComp = new Wtf.form.DateField({
							width : 155,
							emptyText : WtfGlobal
									.getLocaleText("hrms.payroll.SelectDate")
						});
						tbartempbtns.push(this.quickSearchEmpField, "-",
								this.dateComp);
						this.fromdateempG.on("change", function() {
							var myDate = new Date();
							myDate = this.fromdateempG.getValue();
							this.todateempG.setValue(myDate.add(Date.MONTH, +0)
									.getLastDateOfMonth())
						}, this);
						this.mypdf = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.DownloadPayslip"),
									scope : this,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.DownloadPayslip.tooltip2"),
									handler : function() {
										var rec = this.selectedEmpGrid
												.getSelectionModel()
												.getSelections();
										var docname = rec[0].get("EName") + "_"
												+ this.paycyclestart + "";
										this.exportReport(1, "pdf", docname,
												rec[0].get("empid"),
												companyName, rec);
										this.empid = null
									}
								});
						this.myprint = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip"),
									scope : this,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip.tooltip"),
									handler : function() {
										var rec = this.selectedEmpGrid
												.getSelectionModel()
												.getSelections();
										var docname = rec[0].get("EName") + "_"
												+ this.paycyclestart + "";
										this.exportReport(1, "print", docname,
												rec[0].get("empid"),
												companyName, rec);
										this.empid = null
									}
								});
						this.empsaldetails = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.SalaryDetails"),
									scope : this,
									minWidth : 90,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.reportbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.SalaryDetails.tooltip2"),
									handler : function() {
										this.arr = this.empgrid.getSelections();
										this.arrExtraUser = this.extrausergrid
												.getSelections();
										this.arr1 = this.payintervalgrid
												.getSelections();
										if (this.arr.length == 0
												&& this.arrExtraUser.length == 0) {
											calMsgBoxShow(21, 0)
										} else {
											if (this.arr.length == 0) {
												var arr = this.arrExtraUser
											} else {
												var arr = this.arr
											}
											this.TempId = arr[0].get("tempid");
											this.showBorder = arr[0]
													.get("showborder");
											this.ename = arr[0].get("EName");
											this.accno = arr[0].get("AccNo");
											this.salary = arr[0].get("Wage");
											this.tax = arr[0].get("Tax");
											this.empid = arr[0].get("empid");
											this.deduc = arr[0].get("Deduc");
											this.currency = arr[0]
													.get("tempid");
											this.fixedsal = arr[0]
													.get("FixedSal");
											this.design = arr[0].get("design");
											var generated = arr[0]
													.get("generated");
											this.mainTabId = Wtf.getCmp("as");
											var sdate = new Date(
													this.arr1[0]
															.get(
																	"paycyclestart")
															.replace(
																	new RegExp(
																			"-",
																			"g"),
																	"/"));
											var edate = new Date(
													this.arr1[0]
															.get("paycycleend")
															.replace(
																	new RegExp(
																			"-",
																			"g"),
																	"/"));
											this.payslip = Wtf
													.getCmp(this.empid
															+ "payslipTab"
															+ sdate);
											if (this.payslip == null) {
												this.payslip = new Wtf.EmpPayslip(
														{
															layout : "fit",
															title : WtfGlobal
																	.getLocaleText({
																		key : "hrms.payroll.employeespayslip",
																		params : [ arr[0]
																				.get("EName") ]
																	}),
															closable : true,
															border : false,
															iconCls : getTabIconCls(Wtf.etype.hrmsreport),
															id : this.empid
																	+ "payslipTab"
																	+ sdate,
															TempId : this.TempId,
															showBorder : this.showBorder,
															ename : this.ename,
															mappingid : arr[0]
																	.get("mappingid"),
															accno : this.accno,
															salary : this.salary,
															tax : this.tax,
															empid : this.empid,
															deduc : this.deduc,
															cursymbol : this.currency,
															fixedsal : this.fixedsal,
															generated : generated,
															netSalary : arr[0]
																	.get("Salary"),
															salaryGenerated : arr[0]
																	.get("salaryGenerated"),
															design : this.design,
															stdate1 : this.fromdateempG
																	.getValue(),
															enddate1 : this.todateempG
																	.getValue(),
															fromdateempG : this.fromdateempG,
															todateempG : this.todateempG,
															emptempstore : this.emptempstore,
															empstore : this.empstore,
															stdate : new Date(
																	this.arr1[0]
																			.get(
																					"paycyclestart")
																			.replace(
																					new RegExp(
																							"-",
																							"g"),
																					"/")),
															enddate : new Date(
																	this.arr1[0]
																			.get(
																					"paycycleend")
																			.replace(
																					new RegExp(
																							"-",
																							"g"),
																					"/")),
															paycyclestart : this.paycyclestart,
															paycycleend : (arr[0]
																	.get("paycycleend") == "") ? this.paycycleend
																	: arr[0]
																			.get("paycycleend"),
															ischanged : (arr[0]
																	.get("paycycleend") == "") ? 0
																	: 1,
															arr : arr
														});
												this.mainTabId
														.add(this.payslip);
												this.payslip.on("gridload",
														function() {
															calMsgBoxShow(202,
																	4, true);
															this.empstore
																	.load()
														}, this)
											}
											this.mainTabId
													.setActiveTab(this.payslip);
											this.mainTabId.doLayout()
										}
									}
								});
						var empbtns = [];
						empbtns.push("->", "-", this.myprint, "-", this.mypdf,
								"-", this.empsaldetails);
						var tbarempbtns = [];
						var genSalaryText = WtfGlobal
								.getLocaleText("hrms.payroll.GenerateSalary");
						if (Wtf.cmpPref.approvesalary != undefined
								&& Wtf.cmpPref.approvesalary === true) {
							genSalaryText = WtfGlobal
									.getLocaleText("hrms.payroll.send.for.authorization")
						}
						tbarempbtns
								.push(
										"->",
										this.gensalbtn = new Wtf.Button(
												{
													text : genSalaryText,
													tooltip : WtfGlobal
															.getLocaleText("hrms.payroll.GenerateSalary.tooltip"),
													scope : this,
													minWidth : 100,
													disabled : true,
													iconCls : getButtonIconCls(Wtf.btype.assignbutton),
													handler : function() {
														this.arr = this.empgrid
																.getSelectionModel()
																.getSelections();
														this.extraarr = this.extrausergrid
																.getSelectionModel()
																.getSelections();
														if (isStandAlone
																|| !isEleaveIntegration) {
															this
																	.getUnpaidleaves()
														} else {
															calMsgBoxShow(202,
																	4, true);
															var json = new Array();
															for ( var i = 0; i < this.arr.length; i++) {
																var data = {};
																data["userid"] = this.arr[i].data.empid;
																data["fromDate"] = this.paycyclestart;
																data["toDate"] = this.paycycleend;
																json.push(data)
															}
															for ( var i = 0; i < this.extraarr.length; i++) {
																var data = {};
																data["userid"] = this.extraarr[i].data.empid;
																data["fromDate"] = this.paycyclestart;
																data["toDate"] = this.paycycleend;
																json.push(data)
															}
															Wtf.Ajax
																	.requestEx(
																			{
																				url : "Emp/getLeavesFromEleaves.py",
																				scope : this,
																				method : "post",
																				params : {
																					jsondata : Wtf
																							.encode(json)
																				}
																			},
																			this,
																			function(
																					request) {
																				var req = eval("("
																						+ request
																						+ ")");
																				this
																						.getUnpaidleaves(req);
																				WtfGlobal
																						.closeProgressbar()
																			},
																			function(
																					response) {
																				WtfGlobal
																						.closeProgressbar()
																			})
														}
													}
												}));
						this.extrausergrid = new Wtf.grid.GridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									id : "incometaxgridpanel",
									region : "south",
									height : 250,
									loadMask : true,
									displayInfo : true,
									searchField : "rate",
									viewConfig : {
										forceFit : true
									},
									store : this.emptempstore,
									cm : this.cm,
									border : true,
									sm : this.emptempsm,
									tbar : [ WtfGlobal
											.getLocaleText("hrms.payroll.OthersEmployeefortheselectedpaycycle") ]
								});
						this.empgrid = new Wtf.KwlGridPanel(
								{
									border : true,
									region : "center",
									store : this.empstore,
									cm : this.cm,
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									loadMask : true,
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "EName",
									serverSideSearch : true,
									paging : false,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.SelectthePayCycle"))
									},
									sm : this.empsm,
									width : 700,
									tbar : tbarempbtns
								});
						this.gridcontainerpanel = new Wtf.Panel({
							region : "center",
							layout : "border",
							id : "gridcontainerpanel",
							bbar : empbtns,
							items : [ this.empgrid, this.extrausergrid ]
						});
						this.extrausergrid.hide();
						this.empsm.on("selectionchange", function() {
							this.customEnableDisable(empbtns, this.empgrid,
									[ 6 ], []);
							this.customEnableDisable(tbarempbtns, this.empgrid,
									[], [ 1 ]);
							if (this.empsm.hasSelection()) {
								var rec = this.empsm.getSelections();
								var rec1 = this.emptempsm.getSelections();
								if ((rec.length + rec1.length) > 1) {
									this.mypdf.disable();
									this.myprint.disable()
								} else {
									if (rec[0].get("generated") == "1") {
										this.mypdf.enable();
										this.myprint.enable()
									} else {
										this.mypdf.disable();
										this.myprint.disable()
									}
								}
							} else {
								this.mypdf.disable();
								this.myprint.disable()
							}
						}, this);
						this.emptempsm.on("selectionchange", function() {
							this.customEnableDisable(empbtns,
									this.extrausergrid, [ 6 ], []);
							this.customEnableDisable(tbarempbtns,
									this.extrausergrid, [], [ 1 ]);
							if (this.emptempsm.hasSelection()) {
								var rec1 = this.empsm.getSelections();
								var rec = this.emptempsm.getSelections();
								if ((rec.length + rec1.length) > 1) {
									this.mypdf.disable();
									this.myprint.disable()
								} else {
									if (rec[0].get("generated") == "1") {
										this.mypdf.enable();
										this.myprint.enable()
									} else {
										this.mypdf.disable();
										this.myprint.disable()
									}
								}
							} else {
								this.mypdf.disable();
								this.myprint.disable()
							}
						}, this);
						this.empgrid.on("cellclick", this.deletePayslip, this);
						this.extrausergrid.on("cellclick", this.deletePayslip,
								this);
						this.MainDataEntryPanelT = new Wtf.Panel(
								{
									title : this.tempName,
									border : false,
									layout : "border",
									bodyStyle : "background:white",
									scope : this,
									items : [ this.filterpanel,
											this.gridcontainerpanel ]
								});
						this.add(this.MainDataEntryPanelT);
						this.doLayout();
						this.on("activate", function(tp, tab) {
							this.doLayout()
						});
						this.fromdateempG
								.on(
										"change",
										function() {
											var select = this.grouptempgrid
													.getSelectionModel();
											if (select.hasSelection()) {
												calMsgBoxShow(202, 4, true);
												var rec = select
														.getSelections();
												this.tempids = [];
												for (i = 0; i < this.templates.length; i++) {
													this.tempids
															.push(this.templates[i]
																	.get("TempID"))
												}
												this.empstore.baseParams = {
													groupid : this.tempids,
													stdate : this.fromdateempG
															.getRawValue(),
													enddate : this.todateempG
															.getRawValue()
												};
												this.empstore.load()
											}
										}, this);
						this.dateComp.on("change", function() {
							this.calculatepaycycle()
						}, this)
					},
					customEnableDisable : function(B, E, A, D) {
						var F = !(this.extrausergrid.getSelectionModel()
								.hasSelection() || this.empgrid
								.getSelectionModel().hasSelection());
						var G = ((this.extrausergrid.getSelectionModel()
								.getCount() + this.empgrid.getSelectionModel()
								.getCount()) != 1);
						for ( var C = 0; C < D.length; C++) {
							B[D[C]].setDisabled(F)
						}
						for (C = 0; C < A.length; C++) {
							B[A[C]].setDisabled(G)
						}
					},
					onKeyUpEvent : function(A) {
						if (this.quickSearchEmpField.getValue() != "") {
							this.timer.cancel();
							this.timer.delay(1000, this.onKeyUpHandler, this)
						}
					},
					onKeyUpHandler : function() {
						var A = this.emptempds.getAt(0).data.paycyclestart;
						var B = this.grouptempgrid.getSelectionModel()
								.getSelections();
						Wtf.Ajax
								.requestEx(
										{
											url : "Emp/getEmpCycle.py",
											scope : this,
											method : "post",
											params : {
												cyclestartdate : A,
												cycleenddate : A,
												ss : this.quickSearchEmpField
														.getValue(),
												groupid : B[0].get("TempID")
											}
										},
										this,
										function(F) {
											var G = F.effdate;
											if (G != "") {
												var C = new Date(G.replace(
														new RegExp("-", "g"),
														"/"));
												for ( var D = this.emptempds.data.length - 1; D >= 0; D--) {
													var E = new Date(
															this.emptempds
																	.getAt(D).data.paycyclestart
																	.replace(
																			new RegExp(
																					"-",
																					"g"),
																			"/"));
													if (C <= E) {
														this.paycyclesm
																.selectRow(D);
														break
													}
												}
											}
										}, function(C) {
										})
					},
					getempsalaries : function() {
						if (this.arr.length == 0 && this.extraarr.length == 0) {
							calMsgBoxShow(19, 0)
						} else {
							this.jsondata = "";
							var B = 0;
							for (i = 0; i < this.arr.length; i++) {
								var C = this.paycycleend;
								var A = 0;
								if (this.arr[i].get("paycycleend") != null
										&& this.arr[i].get("paycycleend") != undefined
										&& this.arr[i].get("paycycleend") != "") {
									C = this.arr[i].get("paycycleend");
									A = 1
								}
								this.jsondata += "{'EName':'"
										+ this.arr[i].get("EName") + "',";
								this.jsondata += "'AccNo':'"
										+ this.arr[i].get("AccNo") + "',";
								this.jsondata += "'Wage':'"
										+ this.arr[i].get("Wage") + "',";
								this.jsondata += "'FixedSal':'"
										+ this.arr[i].get("FixedSal") + "',";
								this.jsondata += "'Tax':'"
										+ this.arr[i].get("Tax") + "',";
								this.jsondata += "'Deduc':'"
										+ this.arr[i].get("Deduc") + "',";
								this.jsondata += "'mappingid':'"
										+ this.arr[i].get("mappingid") + "',";
								this.jsondata += "'empid':'"
										+ this.arr[i].get("empid") + "',";
								this.jsondata += "'design':'"
										+ this.arr[i].get("design") + "',";
								this.jsondata += "'paycyclestart':'"
										+ this.paycyclestart + "',";
								this.jsondata += "'paycycleend':'" + C + "',";
								this.jsondata += "'ischanged':'" + A + "',";
								this.jsondata += "'template':'"
										+ this.arr[i].get("tempid") + "'},";
								if (this.arr[i].get("Salary") < 0) {
									B = 1;
									break
								}
							}
							for (i = 0; i < this.extraarr.length; i++) {
								C = this.paycycleend;
								A = 0;
								if (this.extraarr[i].get("paycycleend") != null
										&& this.extraarr[i].get("paycycleend") != undefined
										&& this.extraarr[i].get("paycycleend") != "") {
									C = this.extraarr[i].get("paycycleend");
									A = 1
								}
								this.jsondata += "{'EName':'"
										+ this.extraarr[i].get("EName") + "',";
								this.jsondata += "'AccNo':'"
										+ this.extraarr[i].get("AccNo") + "',";
								this.jsondata += "'Wage':'"
										+ this.extraarr[i].get("Wage") + "',";
								this.jsondata += "'FixedSal':'"
										+ this.extraarr[i].get("FixedSal")
										+ "',";
								this.jsondata += "'Tax':'"
										+ this.extraarr[i].get("Tax") + "',";
								this.jsondata += "'Deduc':'"
										+ this.extraarr[i].get("Deduc") + "',";
								this.jsondata += "'mappingid':'"
										+ this.extraarr[i].get("mappingid")
										+ "',";
								this.jsondata += "'empid':'"
										+ this.extraarr[i].get("empid") + "',";
								this.jsondata += "'design':'"
										+ this.extraarr[i].get("design") + "',";
								this.jsondata += "'paycyclestart':'"
										+ this.paycyclestart + "',";
								this.jsondata += "'paycycleend':'" + C + "',";
								this.jsondata += "'ischanged':'" + A + "',";
								this.jsondata += "'template':'"
										+ this.extraarr[i].get("tempid")
										+ "'},";
								if (this.extraarr[i].get("Salary") < 0) {
									B = 1;
									break
								}
							}
							this.trmLen1 = this.jsondata.length - 1;
							this.jsondata = this.jsondata.substr(0,
									this.trmLen1);
							if (B == 0) {
								calMsgBoxShow(202, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : "Emp/setPayrollforTemp.py",
													scope : this,
													method : "post",
													params : {
														save : "true",
														saveType : "PayHistoryforTemp",
														jsondata : this.jsondata,
														TempId : this.TempId,
														stdate : this.fromdateempG
																.getRawValue(),
														enddate : this.todateempG
																.getRawValue(),
														action : 1,
														paycyclestart : this.paycyclestart,
														paycycleend : this.paycycleend
													}
												},
												this,
												function(D) {
													var E = D.value.toString();
													if (E == "success") {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		D.msg
																				.toString() ],
																0, false, 250);
														this.emptempstore
																.removeAll();
														this.extrausergrid.selModel
																.clearSelections();
														this.empstore.load()
													} else {
														if (E == "failure") {
															Wtf.MessageBox
																	.alert(
																			WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			D.msg
																					.toString())
														}
													}
												}, function(D) {
												})
							} else {
								calMsgBoxShow(157, 0)
							}
						}
					},
					getemployeelist : function() {
						this.groupuserds.proxy.conn.url = "Payroll/Template/getuserlist.py";
						this.grouptempgrid.getColumnModel().setHidden(4, true);
						this.grouptempgrid.getColumnModel().setHidden(5, true);
						this.grouptempgrid
								.getColumnModel()
								.setColumnHeader(
										3,
										WtfGlobal
												.getLocaleText("hrms.common.employee.name"));
						this.groupuserds.reload({
							params : {
								start : 0,
								limit : this.lastlimitoption
							}
						})
					},
					getTemplatelist : function() {
						this.groupuserds.proxy.conn.url = "Payroll/Template/getPayProcessData.py";
						this.grouptempgrid.getColumnModel().setHidden(4, false);
						this.grouptempgrid.getColumnModel().setHidden(5, false);
						this.grouptempgrid
								.getColumnModel()
								.setColumnHeader(
										3,
										WtfGlobal
												.getLocaleText("hrms.payroll.payrolltemplates"));
						this.groupuserds.reload({
							params : {
								start : 0,
								limit : this.lastlimitoption
							}
						})
					},
					calculatepaycycle : function() {
						if (this.emptempdriven.getValue()
								&& this.selectionModel.getCount() > 0) {
							this.quickSearchEmpField.enable();
							this.dateComp.enable()
						}
						this.payintervalgrid.selModel.clearSelections();
						this.empstore.removeAll();
						this.emptempstore.removeAll();
						this.payintervalgrid.getView().emptyText = WtfGlobal
								.emptyGridRenderer(WtfGlobal
										.getLocaleText("hrms.payroll.Notemplateassignedtothisemployee"));
						if (this.selectionModel.getSelections().length > 0) {
							if (this.emptempdriven.getValue()) {
								var A = this.selectionModel.getSelected();
								this.emptempds.reload({
									params : {
										templateid : A.get("TempID"),
										isTemplateDriven : true
									}
								})
							} else {
								if (this.empdriven.getValue()) {
									var A = this.selectionModel.getSelected();
									this.selectedEmp = A.get("id");
									this.emptempds.reload({
										params : {
											userid : A.get("id")
										}
									})
								}
							}
						}
					},
					getemployees : function() {
						if (this.grouptempgrid.selModel.getCount() > 0) {
							if (this.payintervalgrid.selModel.getCount() > 0) {
								this.empgrid.getView().emptyText = WtfGlobal
										.emptyGridRenderer(WtfGlobal
												.getLocaleText("hrms.payroll.Noemployeeassignedfortheselectedtemplateforthisduration"));
								this.templates = this.payintervalgrid.selModel
										.getSelections();
								this.tempids = [];
								for (i = 0; i < this.templates.length; i++) {
									this.tempids.push(this.templates[i]
											.get("TempID"))
								}
								this.paycyclestart = "";
								this.paycycleend = "";
								if (this.paycyclesm.getCount() > 0) {
									var A = this.paycyclesm.getSelected();
									this.paycyclestart = A.get("paycyclestart");
									this.paycycleend = A.get("paycycleend");
									this.paycycleactualend = A
											.get("paycycleactualend")
								}
								if (this.paycyclestart != ""
										&& this.paycycleend != "") {
									this.empstore.removeAll();
									this.emptempstore.removeAll();
									this.empstore.baseParams = {
										groupid : this.tempids,
										stdate : this.fromdateempG
												.getRawValue(),
										enddate : this.todateempG.getRawValue(),
										paycyclestart : this.paycyclestart,
										paycycleend : this.paycycleend
									};
									this.empstore.load()
								}
							} else {
								this.empstore.removeAll();
								this.emptempstore.removeAll();
								this.empgrid.getView().emptyText = WtfGlobal
										.emptyGridRenderer(WtfGlobal
												.getLocaleText("hrms.payroll.SelectthePayCycle"));
								this.empgrid.getView().refresh()
							}
						} else {
							this.empgrid.getView().emptyText = WtfGlobal
									.emptyGridRenderer(WtfGlobal
											.getLocaleText("hrms.payroll.SelectthePayCycle"));
							this.empgrid.getView().refresh()
						}
					},
					exportReport : function(J, I, A, D, H, E) {
						var K = this.paycycleend;
						if (E[0].get("paycycleend") != null
								&& E[0].get("paycycleend") != undefined
								&& E[0].get("paycycleend") != "") {
							K = E[0].get("paycycleend")
						}
						var F = "";
						var C = '{"data": []}';
						if (J == 1) {
							C = '{"data": ["No","From", "To", "Duration", "Reason", "Type Of Leave", "Paid", "LPW", "Employee Signature", "Approver Signature", "Balance"]}'
						}
						var G = "";
						if (I == "print") {
							G = "Payroll/Date/Salary/printHTML.py?"
						} else {
							G = "Payroll/Date/Salary/exportPDF.py?"
						}
						var B = G + "&flag=" + J + "&colHeader=" + C
								+ "&userIDs=" + F + "&reportname=" + A
								+ "&exporttype=" + I + "&empid=" + D
								+ "&cname=" + H + "&showborder="
								+ E[0].get("showborder") + "&stdate="
								+ this.paycyclestart
								+ "&flagpdf=datewise&cdomain=" + subDomain
								+ "&enddate=" + K;
						setDldUrl(B, I)
					},
					deletePayslip : function(gd, ri, ci, e) {
						if (ci == 6) {
							var rec = gd.getSelectionModel().getSelections();
							var created = rec[0].get("generated");
							var paycycleend = (rec[0].get("paycycleend") == "") ? this.paycycleend
									: rec[0].get("paycycleend");
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.payroll.Areyousureyouwanttodeletethesalarydetailsoftheemployee"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(button) {
											if (button == "no") {
												return
											} else {
												var empid = new Array();
												empid.push(rec[0].get("empid"));
												Wtf.Ajax
														.requestEx(
																{
																	url : "Emp/deletePayslipDetails.py",
																	method : "post",
																	params : {
																		empid : Wtf
																				.encode(empid),
																		enddate : (this.empdriven
																				.getValue()) ? this.paycycleactualend
																				: this.paycycleend,
																		startdate : this.paycyclestart
																	}
																},
																this,
																function(
																		response) {
																	var res = eval("("
																			+ response
																			+ ")");
																	var msg = res.msg;
																	if ((res.msg == "No salary details found for this duration." || res.msg == WtfGlobal
																			.getLocaleText("hrms.payroll.Nosalarydetailsfoundforthisduration"))
																			&& created == "1"
																			&& !this.empdriven
																					.getValue()) {
																		msg = WtfGlobal
																				.getLocaleText("hrms.payroll.PleasedeletepayslipfromEmployeeDriven")
																	}
																	Wtf.Msg
																			.show({
																				title : WtfGlobal
																						.getLocaleText("hrms.common.success"),
																				msg : ""
																						+ msg
																						+ "",
																				scope : this,
																				width : 300,
																				buttons : Wtf.Msg.OK,
																				fn : function(
																						btn,
																						value) {
																					this.mypdf
																							.disable();
																					this.myprint
																							.disable();
																					calMsgBoxShow(
																							202,
																							4,
																							true);
																					this.emptempstore
																							.removeAll();
																					this.extrausergrid.selModel
																							.clearSelections();
																					this.empstore
																							.load()
																				},
																				animEl : "elId",
																				icon : Wtf.MessageBox.INFO
																			})
																},
																function(req,
																		res) {
																	calMsgBoxShow(
																			27,
																			1)
																})
											}
										}
									})
						}
					},
					getUnpaidleaves : function(E) {
						var G = WtfGlobal
								.getLocaleText("hrms.payroll.PayCycleenddatedoesnotmatchwiththeselctedPaycycle")
								+ ".<br><ol>";
						var F = false;
						var D = 1;
						for ( var C = 0; C < this.arr.length; C++) {
							if (this.arr[C].get("paycycleend") != null
									&& this.arr[C].get("paycycleend") != undefined
									&& this.arr[C].get("paycycleend") != "") {
								F = true;
								G += "<li><b>"
										+ D
										+ ". "
										+ this.arr[C].get("EName")
										+ "</b>: "
										+ WtfGlobal
												.getLocaleText({
													key : "hrms.payroll.Paycyclextoy",
													params : [
															this.paycyclestart,
															this.arr[C]
																	.get("paycycleend") ]
												}) + "</li>";
								D++
							}
						}
						for (C = 0; C < this.extraarr.length; C++) {
							if (this.extraarr[C].get("paycycleend") != null
									&& this.extraarr[C].get("paycycleend") != undefined
									&& this.extraarr[C].get("paycycleend") != "") {
								F = true;
								G += "<li><b>"
										+ D
										+ ". "
										+ this.extraarr[C].get("EName")
										+ "</b>:"
										+ WtfGlobal
												.getLocaleText({
													key : "hrms.payroll.Paycyclextoy",
													params : [
															this.paycyclestart,
															this.extraarr[C]
																	.get("paycycleend") ]
												}) + "</li>";
								D++
							}
						}
						G += WtfGlobal
								.getLocaleText("hrms.common.Doyouwanttocontinue")
								+ "</ol>";
						var C = 0;
						for (; C < this.arr.length; C++) {
							if (E != undefined && E.data != undefined
									&& E.data[C] != undefined
									&& E.data[C] != "") {
								this.arr[C].data.unpaidleave = E.data[C].unpaidleave
							} else {
								this.arr[C].data.unpaidleave = 0
							}
						}
						for ( var B = 0; B < this.extraarr.length; B++) {
							if (E != undefined && E.data != undefined
									&& E.data[C + B] != undefined
									&& E.data[C + B] != "") {
								this.extraarr[B].data.unpaidleave = E.data[C
										+ B].unpaidleave
							} else {
								this.extraarr[B].data.unpaidleave = 0
							}
						}
						if (F) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.alert"),
										msg : G,
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										width : 600,
										fn : function(I) {
											if (I == "no") {
												return
											} else {
												var H = new Wtf.leavem.LeaveAdjustWindow(
														{
															title : WtfGlobal
																	.getLocaleText("hrms.payroll.Unpaidleaves"),
															height : 400,
															width : 450,
															modal : true,
															resizable : false,
															paycycleend : this.paycycleend,
															emptempstore : this.emptempstore,
															empstore : this.empstore,
															paycyclestart : this.paycyclestart,
															TempId : this.TempId,
															fromdateempG : this.fromdateempG,
															todateempG : this.todateempG,
															layout : "fit",
															iconCls : getTabIconCls(Wtf.etype.iconwin),
															bodyStyle : "background-color: #f1f1f1;",
															arr : this.arr,
															extraarr : this.extraarr
														});
												H.show()
											}
										}
									})
						} else {
							var A = new Wtf.leavem.LeaveAdjustWindow(
									{
										title : WtfGlobal
												.getLocaleText("hrms.payroll.Unpaidleaves"),
										height : 400,
										width : 450,
										modal : true,
										resizable : false,
										paycycleend : this.paycycleend,
										emptempstore : this.emptempstore,
										empstore : this.empstore,
										paycyclestart : this.paycyclestart,
										TempId : this.TempId,
										fromdateempG : this.fromdateempG,
										todateempG : this.todateempG,
										layout : "fit",
										iconCls : getTabIconCls(Wtf.etype.iconwin),
										bodyStyle : "background-color: #f1f1f1;",
										arr : this.arr,
										extraarr : this.extraarr
									});
							A.show()
						}
					}
				});
Wtf.leavem.LeaveAdjustWindow = function(A) {
	Wtf.apply(this, A);
	Wtf.leavem.LeaveAdjustWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.leavem.LeaveAdjustWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.leavem.LeaveAdjustWindow.superclass.initComponent
								.call(this)
					},
					onRender : function(B) {
						Wtf.leavem.LeaveAdjustWindow.superclass.onRender.call(
								this, B);
						this.createLeavetypeAdjGrid();
						var A = Array();
						this.adjLeavesPanel = new Wtf.Panel(
								{
									frame : true,
									border : false,
									scope : this,
									layout : "fit",
									items : [ {
										border : false,
										layout : "border",
										items : [
												{
													region : "north",
													height : 80,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText("hrms.payroll.Unpaidleaves"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.Fillthenoofunpaidleavesforrespectiveusers"))
												},
												{
													border : false,
													region : "center",
													bodyStyle : "background:#f1f1f1;font-size:10px;",
													layout : "fit",
													items : [ this.typeGrid ]
												} ]
									} ],
									buttonAlign : "right",
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												handler : function() {
													if (this.empSalaryDetails != undefined
															&& this.empSalaryDetails != "") {
														this.empSalaryDetails
																.genpayslipchk(
																		1,
																		this.LeavetypeAdjStore
																				.getAt(0).data.leaveAdj)
													} else {
														this.getempsalaries()
													}
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												handler : function() {
													this.close()
												},
												scope : this
											} ]
								});
						this.add(this.adjLeavesPanel)
					},
					getempsalaries : function() {
						var E = Wtf.cmpPref.approvesalary ? 2 : 3;
						if (this.arr.length == 0 && this.extraarr.length == 0) {
							calMsgBoxShow(19, 0)
						} else {
							this.jsondata = "";
							var D = 0;
							for ( var B = 0; B < this.arr.length; B++) {
								var F = this.paycycleend;
								var A = 0;
								if (this.arr[B].get("paycycleend") != null
										&& this.arr[B].get("paycycleend") != undefined
										&& this.arr[B].get("paycycleend") != "") {
									F = this.arr[B].get("paycycleend");
									A = 1
								}
								this.jsondata += "{'EName':'"
										+ this.arr[B].get("EName") + "',";
								this.jsondata += "'AccNo':'"
										+ this.arr[B].get("AccNo") + "',";
								this.jsondata += "'Wage':'"
										+ this.arr[B].get("Wage") + "',";
								this.jsondata += "'FixedSal':'"
										+ this.arr[B].get("FixedSal") + "',";
								this.jsondata += "'Tax':'"
										+ this.arr[B].get("Tax") + "',";
								this.jsondata += "'Deduc':'"
										+ this.arr[B].get("Deduc") + "',";
								this.jsondata += "'mappingid':'"
										+ this.arr[B].get("mappingid") + "',";
								this.jsondata += "'empid':'"
										+ this.arr[B].get("empid") + "',";
								this.jsondata += "'design':'"
										+ this.arr[B].get("design") + "',";
								this.jsondata += "'netSalary':'"
										+ this.arr[B].get("Salary") + "',";
								this.jsondata += "'salaryGenerated':'"
										+ this.arr[B].get("salaryGenerated")
										+ "',";
								this.jsondata += "'salarystatus':'" + E + "',";
								this.jsondata += "'paycyclestart':'"
										+ this.paycyclestart + "',";
								this.jsondata += "'paycycleend':'" + F + "',";
								this.jsondata += "'ischanged':'" + A + "',";
								if (this.arr[B].get("tempinterval") == "1") {
									if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 30) {
										D = 1;
										break
									}
								} else {
									if (this.arr[B].get("tempinterval") == "2") {
										if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 15) {
											D = 1;
											break
										}
									} else {
										if (this.arr[B].get("tempinterval") == "3") {
											if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 7) {
												D = 1;
												break
											}
										}
									}
								}
								this.jsondata += "'unpaidleaves':'"
										+ this.LeavetypeAdjStore.getAt(B).data.leaveAdj
										+ "',";
								this.jsondata += "'template':'"
										+ this.arr[B].get("tempid") + "'},";
								if (this.arr[B].get("Salary") < 0) {
									D = 1;
									break
								}
							}
							var C = this.arr.length;
							for (B = 0; B < this.extraarr.length; B++) {
								F = this.paycycleend;
								A = 0;
								if (this.extraarr[B].get("paycycleend") != null
										&& this.extraarr[B].get("paycycleend") != undefined
										&& this.extraarr[B].get("paycycleend") != "") {
									F = this.extraarr[B].get("paycycleend");
									A = 1
								}
								this.jsondata += "{'EName':'"
										+ this.extraarr[B].get("EName") + "',";
								this.jsondata += "'AccNo':'"
										+ this.extraarr[B].get("AccNo") + "',";
								this.jsondata += "'Wage':'"
										+ this.extraarr[B].get("Wage") + "',";
								this.jsondata += "'FixedSal':'"
										+ this.extraarr[B].get("FixedSal")
										+ "',";
								this.jsondata += "'Tax':'"
										+ this.extraarr[B].get("Tax") + "',";
								this.jsondata += "'Deduc':'"
										+ this.extraarr[B].get("Deduc") + "',";
								this.jsondata += "'mappingid':'"
										+ this.extraarr[B].get("mappingid")
										+ "',";
								this.jsondata += "'empid':'"
										+ this.extraarr[B].get("empid") + "',";
								this.jsondata += "'design':'"
										+ this.extraarr[B].get("design") + "',";
								this.jsondata += "'paycyclestart':'"
										+ this.paycyclestart + "',";
								this.jsondata += "'paycycleend':'" + F + "',";
								this.jsondata += "'ischanged':'" + A + "',";
								if (this.extraarr[B].get("tempinterval") == "1") {
									if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 30
											|| this.LeavetypeAdjStore.getAt(B).data.leaveAdj < 0) {
										D = 1;
										break
									}
								} else {
									if (this.extraarr[B].get("tempinterval") == "2") {
										if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 15) {
											D = 1;
											break
										}
									} else {
										if (this.extraarr[B]
												.get("tempinterval") == "3") {
											if (this.LeavetypeAdjStore.getAt(B).data.leaveAdj > 7) {
												D = 1;
												break
											}
										}
									}
								}
								this.jsondata += "'unpaidleaves':'"
										+ this.LeavetypeAdjStore.getAt(C + B).data.leaveAdj
										+ "',";
								this.jsondata += "'template':'"
										+ this.extraarr[B].get("tempid")
										+ "'},";
								if (this.extraarr[B].get("Salary") < 0) {
									D = 1;
									break
								}
							}
							this.trmLen1 = this.jsondata.length - 1;
							this.jsondata = this.jsondata.substr(0,
									this.trmLen1);
							if (D == 0) {
								calMsgBoxShow(202, 4, true);
								Wtf.Ajax
										.requestEx(
												{
													url : "Emp/setPayrollforTemp.py",
													scope : this,
													method : "post",
													params : {
														save : "true",
														saveType : "PayHistoryforTemp",
														jsondata : this.jsondata,
														TempId : this.TempId,
														stdate : this.fromdateempG
																.getRawValue(),
														enddate : this.todateempG
																.getRawValue(),
														action : 1,
														paycyclestart : this.paycyclestart,
														paycycleend : this.paycycleend
													}
												},
												this,
												function(G) {
													var H = G.value.toString();
													if (H == "success") {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		G.msg
																				.toString() ],
																0, false, 250);
														this.emptempstore
																.removeAll();
														Wtf
																.getCmp("incometaxgridpanel").selModel
																.clearSelections();
														this.empstore.load()
													} else {
														if (H == "failure") {
															Wtf.MessageBox
																	.alert(
																			WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			G.msg
																					.toString())
														}
													}
													this.close()
												}, function(G) {
												})
							} else {
								calMsgBoxShow(157, 0)
							}
						}
					},
					createLeavetypeAdjGrid : function() {
						this.createLeavetypeAdjStore(this.leavetypeid,
								this.leavetype, this.leaveadj);
						this.LeavetypeAdjStore = new Wtf.data.SimpleStore({
							fields : [ "ename", "leaveAdj" ],
							data : this.storeData
						});
						this.cm = new Wtf.grid.ColumnModel(
								[
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "ename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Unpaidleaves"),
											dataIndex : "leaveAdj",
											align : "right",
											editor : new Wtf.form.NumberField({
												allowBlank : false,
												maxValue : 30,
												allowNegative : false
											})
										} ]);
						this.LeavetypeAdjStore.on("load", function() {
							Wtf.MsgClose()
						}, this);
						this.LeavetypeAdjStore.on("beforeload", function() {
							msgBoxShow(35, 4, 5, true)
						}, this);
						this.LeavetypeAdjStore.on("loadexception", function() {
							Wtf.MsgClose()
						}, this);
						this.sm2 = new Wtf.grid.RowSelectionModel({
							width : 25,
							singleSelect : true
						});
						this.typeGrid = new Wtf.grid.EditorGridPanel({
							store : this.LeavetypeAdjStore,
							cm : this.cm,
							sm : this.sm2,
							loadMask : true,
							layout : "fit",
							viewConfig : {
								forceFit : true
							},
							clicksToEdit : 1
						})
					},
					createLeavetypeAdjStore : function(F, E, B) {
						var A = new Array();
						for ( var C = 0; C < this.arr.length; C++) {
							var D = new Array();
							D.push(this.arr[C].data.EName);
							D.push(this.arr[C].data.unpaidleave);
							A.push(D)
						}
						for ( var C = 0; C < this.extraarr.length; C++) {
							D = new Array();
							D.push(this.extraarr[C].data.EName);
							D.push(this.extraarr[C].data.unpaidleave);
							A.push(D)
						}
						this.storeData = A
					},
					submitLeaveAdj : function(B, A) {
						var E = false;
						var D = "{'root': [";
						for ( var C = 0; C < this.LeavetypeAdjStore.getCount(); C++) {
							var F = this.LeavetypeAdjStore.getAt(C);
							if (F.dirty) {
								E = true;
								D += this.getJsonFromRecord(F) + ","
							}
						}
						if (E) {
							D = D.substr(0, D.length - 1)
						}
						D += "]}";
						Wtf.Ajax
								.requestEx(
										{
											method : "POST",
											url : Wtf.req.leavejsp
													+ "leavemanager.jsp?",
											params : {
												flag : 23,
												jsondata : D,
												userid : this.userid
											}
										},
										this,
										function(G, H) {
											this.gridstore.reload();
											this.close();
											msgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.success"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.Leaveadjustmentisdonesuccessfully") ],
													1, 1)
										},
										function(G, H) {
											msgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.error"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.Problemoccuredwhileconnectingtoserver") ],
													0, 1);
											this.close()
										})
					},
					getJsonFromRecord : function(A) {
						var B = '{"id":"' + A.data["id"] + '", "leavetype":"'
								+ A.data["leavetype"] + '", "leaveadj": "'
								+ A.data["leaveAdj"] + '"}';
						return B
					}
				});
Wtf.GenSalaryReport = function(A) {
	Wtf.GenSalaryReport.superclass.constructor.call(this, A);
	A.autoScroll = false;
	this.addEvents({
		"announce" : true
	})
};
Wtf
		.extend(
				Wtf.GenSalaryReport,
				Wtf.Panel,
				{
					onRender : function(C) {
						Wtf.GenSalaryReport.superclass.onRender.call(this, C);
						this.maxUsers = 0;
						this.costPerUser = 0;
						this.count = 0;
						this.cnamedata = [
								[ WtfGlobal.getLocaleText("hrms.January"), "1" ],
								[ WtfGlobal.getLocaleText("hrms.February"), "2" ],
								[ WtfGlobal.getLocaleText("hrms.March"), "3" ],
								[ WtfGlobal.getLocaleText("hrms.April"), "4" ],
								[ WtfGlobal.getLocaleText("hrms.May"), "5" ],
								[ WtfGlobal.getLocaleText("hrms.June"), "6" ],
								[ WtfGlobal.getLocaleText("hrms.July"), "7" ],
								[ WtfGlobal.getLocaleText("hrms.August"), "8" ],
								[ WtfGlobal.getLocaleText("hrms.September"),
										"9" ],
								[ WtfGlobal.getLocaleText("hrms.October"), "10" ],
								[ WtfGlobal.getLocaleText("hrms.November"),
										"11" ],
								[ WtfGlobal.getLocaleText("hrms.December"),
										"12" ] ];
						this.combostore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "cname"
							}, {
								name : "mid"
							} ]
						});
						this.combostore.loadData(this.cnamedata);
						this.TaxName = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Customer.Name"),
									store : this.combostore,
									displayField : "cname",
									mode : "local",
									scope : this,
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.CName.Select"),
									selectOnFocus : true,
									width : 120,
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(E, F, D) {
											this.month = this.combostore.getAt(
													D).get("cname")
										}
									}
								});
						this.fromdaterep = new Wtf.form.DateField({
							width : 155,
							id : "fromdaterep",
							scope : this,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, -1)
									.getFirstDateOfMonth()
						});
						this.todaterep = new Wtf.form.DateField({
							width : 155,
							readOnly : true,
							id : "todaterep",
							scope : this,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +1)
									.getLastDateOfMonth()
						});
						this.usersRecS = new Wtf.data.Record.create([ {
							name : "EName"
						}, {
							name : "Wage"
						}, {
							name : "AccNo"
						}, {
							name : "month"
						}, {
							name : "Tax"
						}, {
							name : "Deduc"
						}, {
							name : "Salary"
						}, {
							name : "FixedSal"
						}, {
							name : "empid"
						}, {
							name : "design"
						}, {
							name : "tempid"
						}, {
							name : "tempname"
						}, {
							name : "stdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						} ]);
						this.userstore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.usersRecS),
							url : Wtf.req.base + "PayrollHandler.jsp"
						});
						var B = this.fromdaterep.getValue().format("m/d/Y");
						var A = this.todaterep.getValue().format("m/d/Y");
						calMsgBoxShow(202, 4, true);
						this.userstore.baseParams = {
							type : "ReportPerMonth",
							stdate : B,
							enddate : A
						};
						this.userstore.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.userstore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.rowNo = new Wtf.grid.RowNumberer();
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.gridcmodel = new Wtf.grid.ColumnModel(
								[
										this.rowNo,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "EName",
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Month"),
											dataIndex : "month",
											align : "center",
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "stdate",
											pdfwidth : 60,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											pdfwidth : 60,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Earning"),
											dataIndex : "Wage",
											sortable : true,
											align : "right",
											pdfwidth : 60,
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Taxes"),
											dataIndex : "Tax",
											sortable : true,
											pdfwidth : 60,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Deductions"),
											dataIndex : "Deduc",
											sortable : true,
											pdfwidth : 65,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right"">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.netpay"),
											dataIndex : "Salary",
											scope : this,
											pdfwidth : 60,
											align : "right",
											sortable : true,
											groupable : true,
											summaryType : "sum",
											summaryRenderer : WtfGlobal.currencySummaryRenderer,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right"">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Template"),
											dataIndex : "tempname",
											pdfwidth : 60,
											align : "center",
											sortable : true,
											groupable : true
										} ], this);
						this.summary = new Wtf.ux.grid.GridSummary();
						this.salusergrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									autoScroll : false,
									stripeRows : true,
									plugins : [ this.summary ],
									searchLabel : " ",
									searchLabelSeparator : " ",
									displayInfo : true,
									loadMask : true,
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "EName",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.nosaltillnow"))
									},
									store : this.userstore,
									cm : this.gridcmodel,
									region : "west",
									scope : this,
									width : 400,
									id : "salusergrid",
									sm : new Wtf.grid.CheckboxSelectionModel({
										singleSelect : false,
										scope : this,
										listeners : {
											scope : this,
											rowselect : function(G, E, D) {
												var F = this.salusergrid
														.getSelectionModel()
														.getSelected().data;
												this.ename = F.EName;
												this.salary = F.Wage;
												this.fixedsal = F.FixedSal;
												this.tax = F.Tax;
												this.deduc = F.Deduc;
												this.empid = F.empid;
												this.design = F.design;
												this.TempId = F.tempid
											},
											rowdeselect : function(F, E, D) {
											}
										}
									}),
									tbar : [
											"-",
											new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.reset"),
														scope : this,
														iconCls : "pwndRefresh",
														handler : function() {
															this.userstore
																	.load({
																		params : {
																			start : 0,
																			limit : this.salusergrid.pag.pageSize
																		}
																	});
															Wtf
																	.getCmp(
																			"Quick"
																					+ this.salusergrid.id)
																	.setValue(
																			"")
														}
													}),
											"-",
											WtfGlobal
													.getLocaleText("hrms.common.start.date")
													+ ":",
											this.fromdaterep,
											"-",
											WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											this.todaterep,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.GenerateSalaryReport"),
												tooltip : WtfGlobal
														.getLocaleText("hrms.payroll.GenerateSalaryReport.tooltip"),
												minWidth : 100,
												scope : this,
												iconCls : getButtonIconCls(Wtf.btype.reportbutton),
												handler : function() {
													var E = this.fromdaterep
															.getValue().format(
																	"m/d/Y");
													var D = this.todaterep
															.getValue().format(
																	"m/d/Y");
													this.userstore.removeAll();
													this.userstore.baseParams = {
														type : "ReportPerMonth",
														stdate : E,
														enddate : D
													};
													calMsgBoxShow(202, 4, true);
													this.userstore
															.load({
																scope : this,
																params : {
																	start : 0,
																	limit : this.salusergrid.pag.pageSize
																}
															});
													this.userstore
															.on(
																	"load",
																	function() {
																		WtfGlobal
																				.closeProgressbar()
																	}, this)
												}
											},
											"-",
											this.expBtn = new Wtf.exportButton(
													{
														obj : this,
														menuItem : {
															csv : true,
															pdf : true,
															rowPdf : true
														},
														get : 4,
														url : "export.jsp",
														filename : WtfGlobal
																.HTMLStripper(this.title)
													}) ]
								});
						this.grid = this.salusergrid;
						this.UsergridPanel2 = new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.salusergrid ]
						});
						this.innerpanel2 = new Wtf.Panel({
							layout : "fit",
							cls : "backcolor",
							border : false,
							items : [ this.UsergridPanel2 ]
						});
						this.add(this.innerpanel2)
					}
				});
Wtf.ApproveSalaryList = function(A) {
	Wtf.ApproveSalaryList.superclass.constructor.call(this, A);
	A.autoScroll = false;
	this.addEvents({
		"announce" : true
	})
};
Wtf
		.extend(
				Wtf.ApproveSalaryList,
				Wtf.Panel,
				{
					onRender : function(C) {
						Wtf.ApproveSalaryList.superclass.onRender.call(this, C);
						this.salaryType = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "value" ],
									data : [
											[
													"0",
													WtfGlobal
															.getLocaleText("hrms.common.All") ],
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.Unauthorized") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.recruitment.pending") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.payroll.Authorized") ] ]
								});
						this.salaryTypeCombo = new Wtf.form.ComboBox({
							mode : "local",
							triggerAction : "all",
							typeAhead : true,
							width : 110,
							editable : false,
							store : this.salaryType,
							displayField : "value",
							valueField : "id",
							allowBlank : false,
							msgTarget : "side"
						});
						this.salaryTypeCombo.setValue("0");
						this.usersRecS = new Wtf.data.Record.create([ {
							name : "EName"
						}, {
							name : "Wage"
						}, {
							name : "AccNo"
						}, {
							name : "month"
						}, {
							name : "Tax"
						}, {
							name : "Deduc"
						}, {
							name : "Salary"
						}, {
							name : "FixedSal"
						}, {
							name : "empid"
						}, {
							name : "design"
						}, {
							name : "tempid"
						}, {
							name : "tempname"
						}, {
							name : "historyid"
						}, {
							name : "salarystatus"
						}, {
							name : "stdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						} ]);
						this.fromdate = new Wtf.form.DateField({
							width : 105,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getFirstDateOfMonth()
						});
						this.todate = new Wtf.form.DateField({
							width : 105,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							disabled : true,
							format : "m/d/Y",
							value : new Date().add(Date.MONTH, +0)
									.getLastDateOfMonth()
						});
						this.fromdate.on("change", function() {
							var E = new Date();
							E = this.fromdate.getValue();
							this.todate.setValue(E.add(Date.MONTH, +0)
									.getLastDateOfMonth())
						}, this);
						this.userstore = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.usersRecS),
							url : Wtf.req.base + "PayrollHandler.jsp"
						});
						var B = this.fromdate.getValue().format("m/d/Y");
						var A = this.todate.getValue().format("m/d/Y");
						calMsgBoxShow(202, 4, true);
						this.userstore.baseParams = {
							type : "GenerateSalaryList",
							stdate : B,
							enddate : A,
							salaryStatus : 0
						};
						this.userstore.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.userstore.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.rowNo = new Wtf.grid.RowNumberer();
						this.gridcmodel = new Wtf.grid.ColumnModel(
								[
										this.rowNo,
										this.selectionModel,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "EName",
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Month"),
											dataIndex : "month",
											align : "center",
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "stdate",
											pdfwidth : 60,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											pdfwidth : 60,
											align : "center",
											renderer : WtfGlobal.onlyDateRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Earning"),
											dataIndex : "Wage",
											sortable : true,
											align : "right",
											pdfwidth : 60,
											groupable : true,
											renderer : function(E) {
												if (E != null) {
													return ('<div align="right">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			E)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Taxes"),
											dataIndex : "Tax",
											sortable : true,
											pdfwidth : 60,
											align : "right",
											groupable : true,
											renderer : function(E) {
												if (E != null) {
													return ('<div align="right">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			E)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Deductions"),
											dataIndex : "Deduc",
											sortable : true,
											pdfwidth : 65,
											align : "right",
											groupable : true,
											renderer : function(E) {
												if (E != null) {
													return ('<div align="right"">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			E)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.netpay"),
											dataIndex : "Salary",
											scope : this,
											pdfwidth : 60,
											align : "right",
											sortable : true,
											groupable : true,
											summaryType : "sum",
											summaryRenderer : WtfGlobal.currencySummaryRenderer,
											renderer : function(E) {
												if (E != null) {
													return ('<div align="right"">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			E)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Template"),
											dataIndex : "tempname",
											pdfwidth : 60,
											align : "center",
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.SalaryStatus"),
											dataIndex : "salarystatus",
											sortable : true,
											pdfwidth : 60,
											groupable : true,
											renderer : function(E) {
												if (E != null) {
													if (E == 1) {
														return "<span style='color:red !important;'>"
																+ WtfGlobal
																		.getLocaleText("hrms.payroll.Unauthorized")
																+ "</span>"
													} else {
														if (E == 2) {
															return "<span style='color:blue !important;'>"
																	+ WtfGlobal
																			.getLocaleText("hrms.recruitment.pending")
																	+ "</span>"
														} else {
															if (E == 3) {
																return "<span style='color:green !important;'>"
																		+ WtfGlobal
																				.getLocaleText("hrms.payroll.Authorized")
																		+ "</span>"
															}
														}
													}
												}
											}
										} ], this);
						this.expBtn = new Wtf.exportButton({
							obj : this,
							menuItem : {
								csv : true,
								pdf : true,
								rowPdf : true
							},
							get : 5,
							url : "export.jsp",
							filename : WtfGlobal.HTMLStripper(this.title)
						});
						var D = [];
						this.gensalbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.Dashboard.AuthorizeSalary"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.Dashboard.AuthorizeSalary.tooltip"),
									scope : this,
									minWidth : 100,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									handler : function() {
										this.generateSalary(3)
									}
								});
						D.push("-");
						D.push(this.gensalbtn);
						this.unauthsalbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.UnauthorizeSalary"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.UnauthorizeSalary.tooltip"),
									scope : this,
									minWidth : 100,
									disabled : true,
									iconCls : "pwndCommon cancelbuttonIcon",
									handler : function() {
										this.generateSalary(1)
									}
								});
						D.push("-");
						D.push(this.unauthsalbtn);
						if (userroleid == 1) {
							this.confunauthsalbtn = new Wtf.Button(
									{
										text : WtfGlobal
												.getLocaleText("hrms.payroll.ConfirmUnauthorization"),
										tooltip : WtfGlobal
												.getLocaleText("hrms.payroll.ConfirmUnauthorization.tooltip"),
										scope : this,
										minWidth : 100,
										disabled : true,
										iconCls : "pwndCommon deletebuttonIcon",
										handler : function() {
											var E = this.salusergrid
													.getSelectionModel()
													.getSelections();
											this.deletePayslip(E)
										}
									});
							D.push("-");
							D.push(this.confunauthsalbtn)
						}
						D.push("-");
						D.push(WtfGlobal
								.getLocaleText("hrms.common.select.status")
								+ ":");
						D.push(this.salaryTypeCombo);
						D.push("->");
						D.push(WtfGlobal
								.getLocaleText("hrms.common.start.date")
								+ ":");
						D.push(this.fromdate);
						D.push("-");
						D.push(WtfGlobal.getLocaleText("hrms.common.end.date")
								+ ":");
						D.push(this.todate);
						this.filterBtn = new Wtf.Toolbar.Button(
								{
									iconCls : "pwndExport filter",
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.Selectadateandgeneratealistofgeneratedsalariesinthatmonth"),
									disabled : false,
									scope : this,
									handler : this.getHistoryList
								});
						D.push("-");
						D.push(this.filterBtn);
						this.resetbtn = new Wtf.Toolbar.Button({
							scope : this,
							iconCls : "pwndRefresh",
							handler : function() {
								this.userstore.load({
									params : {
										start : 0,
										limit : this.salusergrid.pag.pageSize
									}
								});
								Wtf.getCmp("Quick" + this.salusergrid.id)
										.setValue("")
							}
						});
						D.push("-");
						D.push(this.resetbtn);
						this.salDetails = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.SalaryDetails"),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.SalaryDetails.tooltip"),
									scope : this,
									minWidth : 100,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.reportbutton),
									handler : this.getSalaryDetails
								});
						this.summary = new Wtf.ux.grid.GridSummary();
						this.salusergrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									autoScroll : false,
									stripeRows : true,
									plugins : [ this.summary ],
									searchLabel : " ",
									searchLabelSeparator : " ",
									displayInfo : true,
									loadMask : true,
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "EName",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.nosaltillnow"))
									},
									store : this.userstore,
									cm : this.gridcmodel,
									region : "west",
									scope : this,
									width : 400,
									sm : new Wtf.grid.CheckboxSelectionModel(
											{
												singleSelect : false,
												scope : this,
												listeners : {
													scope : this,
													rowselect : function(H, F,
															E) {
														var G = this.salusergrid
																.getSelectionModel()
																.getSelected().data;
														this.ename = G.EName;
														this.salary = G.Wage;
														this.fixedsal = G.FixedSal;
														this.tax = G.Tax;
														this.deduc = G.Deduc;
														this.empid = G.empid;
														this.design = G.design;
														this.TempId = G.tempid;
														this
																.generateSalButtonEnableDisable()
													},
													rowdeselect : function(G,
															F, E) {
														this
																.generateSalButtonEnableDisable()
													}
												}
											}),
									bbar : [ this.salDetails, "-", this.expBtn ],
									tbar : D
								});
						this.grid = this.salusergrid;
						this.UsergridPanel2 = new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.salusergrid ]
						});
						this.innerpanel2 = new Wtf.Panel({
							layout : "fit",
							cls : "backcolor",
							border : false,
							items : [ this.UsergridPanel2 ]
						});
						this.add(this.innerpanel2);
						this.salaryTypeCombo.on("select", function() {
							this.getHistoryList()
						}, this)
					},
					generateSalButtonEnableDisable : function() {
						var C = this.salusergrid.getSelectionModel()
								.getSelections();
						this.gensalbtn.enable();
						this.unauthsalbtn.enable();
						if (this.confunauthsalbtn != undefined) {
							this.confunauthsalbtn.enable()
						}
						for ( var B = 0; B < C.length; B++) {
							var A = C[B].data.salarystatus;
							if (A == 1 || A == 3) {
								this.gensalbtn.disable();
								this.unauthsalbtn.disable();
								break
							}
						}
						for ( var B = 0; B < C.length; B++) {
							var A = C[B].data.salarystatus;
							if (A == 2 || A == 3) {
								if (this.confunauthsalbtn != undefined) {
									this.confunauthsalbtn.disable()
								}
								break
							}
						}
						if (C.length == 1) {
							this.salDetails.enable()
						} else {
							if (C.length == 0) {
								this.gensalbtn.disable();
								this.unauthsalbtn.disable();
								if (this.confunauthsalbtn != undefined) {
									this.confunauthsalbtn.disable()
								}
								this.salDetails.disable()
							} else {
								this.salDetails.disable()
							}
						}
					},
					generateSalary : function(F) {
						var E = this.salusergrid.getSelectionModel()
								.getSelections();
						var C = "";
						for ( var A = 0; A < E.length; A++) {
							var B = E[A].data.historyid;
							C += B + ","
						}
						C = C.substring(0, (C.length - 1));
						var D = "";
						if (F == 3) {
							D = "authorize"
						} else {
							if (F == 1) {
								D = "unauthorize"
							}
						}
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : D == "authorize" ? WtfGlobal
											.getLocaleText("hrms.payroll.Areyousureyouauthorizesalaryselectedrecord")
											: WtfGlobal
													.getLocaleText("hrms.payroll.AreyousureyouUnauthorizesalaryselectedrecord"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(G) {
										if (G == "no") {
											return
										} else {
											Wtf.Ajax
													.requestEx(
															{
																url : "Emp/generateApprovedSalary.py",
																scope : this,
																method : "post",
																params : {
																	historyids : C,
																	mode : F
																}
															},
															this,
															function(H) {
																Wtf.notify
																		.msg(
																				WtfGlobal
																						.getLocaleText("hrms.common.success"),
																				D == "authorize" ? WtfGlobal
																						.getLocaleText("hrms.payroll.Salaryauthorizedsuccessfully")
																						: WtfGlobal
																								.getLocaleText("hrms.payroll.SalaryUnauthorizedsuccessfully"));
																this
																		.getHistoryList()
															}, function(H) {
															})
										}
									}
								})
					},
					getHistoryList : function() {
						var B = this.fromdate.getValue().format("m/d/Y");
						var A = this.todate.getValue().format("m/d/Y");
						this.userstore.removeAll();
						this.userstore.baseParams = {
							type : "GenerateSalaryList",
							stdate : B,
							enddate : A,
							salaryStatus : this.salaryTypeCombo.getValue()
						};
						calMsgBoxShow(202, 4, true);
						this.userstore.load({
							scope : this,
							params : {
								start : 0,
								limit : this.salusergrid.pag.pageSize
							}
						});
						this.userstore.on("load", function() {
							WtfGlobal.closeProgressbar();
							this.generateSalButtonEnableDisable()
						}, this)
					},
					getSalaryDetails : function() {
						var B = this.salusergrid.getSelectionModel()
								.getSelections();
						var A = B[0].get("stdate").format("F");
						if (B.length > 0) {
							this.mainTabId = Wtf.getCmp("as");
							this.payslip = Wtf.getCmp(this.id + "payslipTab"
									+ B[0].get("stdate"));
							if (this.payslip == null) {
								this.payslip = new Wtf.EmpPayslip(
										{
											layout : "fit",
											scope : this,
											closable : true,
											iconCls : getTabIconCls(Wtf.etype.hrmsreport),
											border : false,
											id : this.id + "payslipTab"
													+ B[0].get("stdate"),
											TempId : B[0].get("tempid"),
											title : WtfGlobal
													.getLocaleText({
														key : "hrms.payroll.SalaryDetailsofmonth",
														params : [ A ]
													}),
											ename : B[0].get("EName"),
											accno : B[0].get("AccNo"),
											salary : B[0].get("Salary"),
											tax : B[0].get("Tax"),
											empid : B[0].get("empid"),
											deduc : B[0].get("Deduc"),
											cursymbol : this.currency,
											fixedsal : B[0].get("FixedSal"),
											design : B[0].get("design"),
											flag : "employee",
											histid : B[0].get("historyid"),
											stdate : B[0].get("stdate"),
											enddate : B[0].get("enddate")
										});
								this.mainTabId.add(this.payslip)
							}
							this.mainTabId.setActiveTab(this.payslip);
							this.mainTabId.doLayout()
						} else {
							calMsgBoxShow(42, 0)
						}
					},
					deletePayslip : function(rec) {
						var st = rec[0].get("stdate").format("m/d/Y");
						var end = rec[0].get("enddate").format("m/d/Y");
						var empid = new Array();
						for ( var i = 0; i < rec.length; i++) {
							empid.push(rec[i].get("empid"))
						}
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : WtfGlobal
											.getLocaleText("hrms.payroll.Areyousureyouwanttodeletethesalarydetailsoftheemployee"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(button) {
										if (button == "no") {
											return
										} else {
											Wtf.Ajax
													.requestEx(
															{
																url : "Emp/deletePayslipDetails.py",
																method : "post",
																params : {
																	empid : Wtf
																			.encode(empid),
																	enddate : end,
																	startdate : st
																}
															},
															this,
															function(response) {
																var res = eval("("
																		+ response
																		+ ")");
																var msg = res.msg;
																this
																		.getHistoryList();
																Wtf.notify
																		.msg(
																				"Success",
																				msg)
															}, function(req,
																	res) {
																calMsgBoxShow(
																		27, 1)
															})
										}
									}
								})
					}
				});
function showIcon(B) {
	var A = Wtf.get(B);
	if (A) {
		A.dom.style.display = "block"
	}
}
function hideIcon(B) {
	var A = Wtf.get(B);
	if (A) {
		A.dom.style.display = "none"
	}
}
function openAdvanceSearchTab(A, B) {
	switch (A) {
	case 1:
		employeemnt(B);
		break;
	case 2:
		AddJobs2(B);
		break;
	case 3:
		allapps(undefined, B, A);
		break;
	case 4:
		allapps(undefined, B, A);
		break;
	case 5:
		allapps(undefined, B, A);
		break;
	case 6:
		allapps(undefined, B, A);
		break
	}
}
function deleteAdvanceSearch(searchId) {
	Wtf.MessageBox
			.show({
				title : WtfGlobal.getLocaleText("hrms.common.confirm"),
				msg : WtfGlobal
						.getLocaleText("hrms.manager.delete.selected.search")
						+ "<br><br><b>"
						+ WtfGlobal
								.getLocaleText("hrms.Messages.DateCannotbeRetrive"),
				buttons : Wtf.MessageBox.OKCANCEL,
				animEl : "upbtn",
				icon : Wtf.MessageBox.QUESTION,
				scope : this,
				fn : function(bt) {
					if (bt == "ok") {
						Wtf.Ajax
								.requestEx(
										{
											url : "Common/deleteSavedSearch.common",
											params : {
												searchid : searchId
											}
										},
										this,
										function(response) {
											var res = eval("(" + response + ")");
											if (res.success
													&& res.success == true) {
												reloadSavedSeaches();
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																WtfGlobal
																		.getLocaleText("hrms.manager.search.deleted.successfully") ],
														0)
											} else {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.manager.search.not.deleted") ],
														0)
											}
										}, function(response) {
										})
					}
				}
			})
}
function callLink1() {
	var A = Wtf.getCmp("link1");
	if (A == null) {
		A = new Wtf.Panel({
			id : "link1",
			border : false,
			layout : "fit",
			title : "Link 1",
			closable : true
		});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	A.doLayout()
}
function callLink2() {
	var A = Wtf.getCmp("link2");
	if (A == null) {
		A = new Wtf.Panel({
			id : "link2",
			border : false,
			layout : "fit",
			title : "Link 2",
			closable : true
		});
		Wtf.getCmp("as").add(A)
	}
	Wtf.getCmp("as").setActiveTab(A);
	A.doLayout()
}
Wtf.AddPayrollTemplate = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side";
	A.layout = "fit";
	A.closable = true;
	Wtf.AddPayrollTemplate.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.AddPayrollTemplate,
				Wtf.Panel,
				{
					showhide : function(C, D, E) {
						C.setVisible(D);
						C.container.up("div.x-form-item").dom.style.display = E;
						var B = C.el.findParent("div.x-form-item", 4, true);
						var A = B.first("label.x-form-item-label");
						A.dom.style.display = E
					},
					initComponent : function(C) {
						Wtf.AddPayrollTemplate.superclass.initComponent.call(
								this, C);
						var D = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "id"
						} ]);
						var B = new Wtf.data.ArrayReader({}, D);
						var A = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.onceamonth"),
										1 ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.twiceamonth"),
										2 ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.onceaweek"),
										3 ] ];
						var E = new Wtf.data.Store({
							reader : B,
							data : A
						});
						this.check = new Wtf.form.Checkbox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.payroll.ShowBorder"),
							name : "borderCheckBox",
							checked : this.editMode ? this.showBorder : true
						});
						this.payintervalCombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.PaymentInterval")
											+ "*",
									mode : "local",
									displayField : "name",
									valueField : "id",
									allowBlank : false,
									disabled : (this.edit == 1) ? true : false,
									name : "payinterval",
									typeAhead : true,
									hiddenName : "payinterval",
									triggerAction : "all",
									store : E,
									forceSelection : true,
									listeners : {
										scope : this,
										change : function() {
											this.payintervalComboChange()
										},
										select : function() {
											this.payintervalComboChange()
										}
									}
								});
						this.payintervalCombo.on("select", function(G, H, F) {
							this.assignedUsersPanel.setpayinterval(H.get("id"))
						}, this);
						this.monthlydata = [ [ "1", "1st" ], [ "2", "2nd" ],
								[ "3", "3rd" ], [ "4", "4th" ], [ "5", "5th" ],
								[ "6", "6th" ], [ "7", "7th" ], [ "8", "8th" ],
								[ "9", "9th" ], [ "10", "10th" ],
								[ "11", "11th" ], [ "12", "12th" ],
								[ "13", "13th" ], [ "14", "14th" ],
								[ "15", "15th" ], [ "16", "16th" ],
								[ "17", "17th" ], [ "18", "18th" ],
								[ "19", "19th" ], [ "20", "20th" ],
								[ "21", "21th" ], [ "22", "22th" ],
								[ "23", "23th" ], [ "24", "24th" ],
								[ "25", "25th" ], [ "26", "26th" ],
								[ "27", "27th" ], [ "28", "28th" ],
								[ "29", "29th" ], [ "30", "30th" ],
								[ "31", "31th" ] ];
						this.bimonthlydata = [ [ "1", "1st" ], [ "16", "16th" ] ];
						this.datestore = new Wtf.data.SimpleStore({
							fields : [ "id", "name" ],
							data : this.monthlydata
						});
						this.daystore = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.timesheet.sunday") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.timesheet.monday") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.timesheet.tuesday") ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.timesheet.wednesday") ],
											[
													"5",
													WtfGlobal
															.getLocaleText("hrms.timesheet.thursday") ],
											[
													"6",
													WtfGlobal
															.getLocaleText("hrms.timesheet.friday") ],
											[
													"7",
													WtfGlobal
															.getLocaleText("hrms.timesheet.saturday") ] ]
								});
						this.datepicker = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.payroll.Date")
									+ "*",
							store : this.datestore,
							name : "date",
							displayField : "name",
							valueField : "id",
							mode : "local",
							triggerAction : "all",
							disabled : (this.edit == 1) ? true : false,
							forceSelection : true
						});
						this.datepicker.on("select", function(G, H, F) {
							this.assignedUsersPanel.seteffdate(H.get("id"))
						}, this);
						this.daypicker = new Wtf.form.ComboBox({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Day")
									+ "*",
							store : this.daystore,
							name : "date",
							displayField : "name",
							valueField : "id",
							mode : "local",
							triggerAction : "all",
							hidden : true,
							hideLabel : true,
							disabled : (this.edit == 1) ? true : false,
							forceSelection : true
						});
						this.daypicker.on("select", function(G, H, F) {
							this.assignedUsersPanel.seteffdate(H.get("id"))
						}, this);
						this.designcombo = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.AddtoDesignation")
											+ "*",
									labelWidth : 200,
									scope : this,
									allowBlank : false,
									store : Wtf.desigStore,
									triggerAction : "all",
									disabled : (this.edit == 1) ? true : false,
									typeAhead : true,
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.Selectdesignation"),
									displayField : "name",
									valueField : "id",
									hiddenName : "id",
									name : "categoryname",
									mode : "local",
									forceSelection : true,
									width : 200,
									addNewFn : this.addDesignation
											.createDelegate(this),
									plugins : [ new Wtf.common.comboAddNew({
										handler : function() {
											if (!this.isDesgDisabled) {
												WtfGlobal.showmasterWindow(1,
														Wtf.desigStore, "Add");
												this.designcombo.collapse()
											}
										},
										scope : this
									}) ],
									listeners : {
										scope : this,
										select : function(H, F, G) {
											new Wtf.form.Hidden({
												id : this.id + this.globname
														+ "GlobalGroupId",
												value : F.get("id"),
												readOnly : true
											})
										}
									}
								});
						this.designcombo.on("disable", function() {
							this.isDesgDisabled = true
						}, this);
						this.tempformPanel = new Wtf.form.FormPanel(
								{
									border : false,
									frame : false,
									bodyStyle : "background-color:#FFFFFF;padding:20px 20px 20px 20px;",
									region : "north",
									scope : this,
									style : "height:15%",
									items : [ {
										xtype : "panel",
										frame : false,
										border : false,
										layout : "column",
										items : [
												{
													columnWidth : 0.33,
													frame : false,
													border : false,
													layout : "form",
													items : [
															this.tempname = new Wtf.form.TextField(
																	{
																		fieldLabel : WtfGlobal
																				.getLocaleText("hrms.CampaignDetail.TemplateName")
																				+ "*",
																		allowBlank : false,
																		validator : WtfGlobal.noBlankCheck,
																		scope : this,
																		maxLength : 50
																	}),
															this.check ]
												},
												{
													xtype : "panel",
													columnWidth : 0.25,
													border : false,
													hidden : true,
													bodyStyle : "padding-left:10px;",
													layout : "form",
													items : [ this.startrange = new Wtf.form.NumberField(
															{
																fieldLabel : WtfGlobal
																		.getLocaleText("hrms.payroll.salary.range.month")
																		+ ' (<span align="right" style="font-family:Lucida Sans Unicode;">'
																		+ WtfGlobal
																				.getCurrencySymbol()
																		+ "</span>)",
																allowBlank : false,
																allowNegative : false,
																value : 0,
																id : this.id
																		+ "salarystartrange",
																maxLength : 10,
																scope : this
															}) ]
												},
												{
													xtype : "panel",
													columnWidth : 0.15,
													border : false,
													hidden : true,
													layout : "form",
													items : [ this.endrange = new Wtf.form.NumberField(
															{
																allowBlank : false,
																maxLength : 10,
																value : 0,
																allowNegative : false,
																scope : this,
																vtype : "range",
																initialPassField : this.id
																		+ "salarystartrange",
																hideLabel : true
															}) ]
												},
												{
													columnWidth : 0.33,
													frame : false,
													border : false,
													layout : "form",
													items : [ this.designcombo ]
												},
												{
													columnWidth : 0.33,
													frame : false,
													border : false,
													layout : "form",
													items : [
															this.payintervalCombo,
															this.datepicker,
															this.daypicker ]
												} ]
									} ]
								});
						if (this.editMode) {
							this.tempname.setValue(this.templatename)
						}
						this.wageentryform = new Wtf.WageEntryForm({
							inv : this.endrange.getValue(),
							paramstore : "0",
							bodyStyle : "padding:10px;background-color:white",
							region : "center",
							parentId : this.id,
							id : this.id + "addwage"
						});
						this.empcontribform = new Wtf.EmployerContributionForm(
								{
									inv : this.endrange.getValue(),
									paramstore : "0",
									bodyStyle : "padding:10px;background-color:white",
									region : "south",
									parentId : this.id,
									height : 250,
									id : this.id + "addempcontrib"
								});
						this.taxentryform = new Wtf.WageTaxDeducWin({
							paramstore : "0",
							bodyStyle : "padding:10px;background-color:white",
							region : "south",
							parentId : this.id,
							height : 250,
							id : this.id + "addtax"
						});
						this.deductionentryform = new Wtf.DeducEntryForm({
							paramstore : "0",
							bodyStyle : "padding:10px;background-color:white",
							region : "center",
							parentId : this.id,
							id : this.id + "adddeduc"
						});
						this.assignedUsersPanel = new Wtf.userPayCycleGrid({
							region : "east",
							width : "33%",
							bodyStyle : "padding:10px;background-color:white",
							border : false,
							templateid : this.templateid
						});
						this.SecondPanelA = new Wtf.Panel({
							layout : "border",
							region : "center",
							border : false,
							scope : this,
							style : "height:88%",
							items : [
									new Wtf.Panel({
										border : false,
										split : false,
										width : "34%",
										layout : "border",
										region : "west",
										items : [ this.wageentryform,
												this.empcontribform ]
									}),
									new Wtf.Panel({
										border : false,
										split : true,
										width : "33%",
										layout : "border",
										region : "center",
										items : [ this.deductionentryform,
												this.taxentryform ]
									}), this.assignedUsersPanel ]
						});
						this.designcombo.on("select", function(G, H, F) {
							this.assignedUsersPanel.setDesignationId(H
									.get("id"))
						}, this);
						this.MainDataEntryPanelA = new Wtf.Panel(
								{
									layout : "border",
									bodyStyle : "background:#FFFFFF",
									scope : this,
									border : false,
									autoScroll : true,
									items : [ this.tempformPanel,
											this.SecondPanelA ],
									bbar : [
											"->",
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.SaveandClose"),
												scope : this,
												id : "editTemp1",
												iconCls : "pwndCommon submitnexitbuttonIcon",
												minWidth : 40,
												handler : function() {
													this.saveTemplateA(true)
												}
											},
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Save"),
												scope : this,
												id : "editTemp",
												iconCls : getButtonIconCls(Wtf.btype.submitbutton),
												minWidth : 40,
												handler : function() {
													this.saveTemplateA(false)
												}
											} ]
								});
						this.add(this.MainDataEntryPanelA);
						this.doLayout();
						this.on("activate", function(G, F) {
							this.doLayout()
						});
						if (this.editMode) {
							new Wtf.form.Hidden({
								id : "GlobalCompanyName1",
								value : "companyid",
								readOnly : true
							});
							if (this.deductionentryform.storededuc.getCount() > 0) {
								this.deductionentryform.storededuc.removeAll()
							}
							this.deductionentryform.storededucforgrid.proxy.conn.url = "Payroll/Deduction/getDeductionData.py?cname=aa&TempId="
									+ this.templateid;
							this.deductionentryform.storededucforgrid.load({
								params : {
									type : "TDeduction"
								}
							});
							if (this.taxentryform.storetax.getCount() > 0) {
								this.taxentryform.storetax.removeAll()
							}
							this.taxentryform.storetaxforgrid.proxy.conn.url = "Payroll/Tax/getTaxData.py?cname=aa&TempId="
									+ this.templateid;
							this.taxentryform.storetaxforgrid.load({
								params : {
									type : "TTax"
								}
							});
							if (this.wageentryform.storewage.getCount() > 0) {
								this.wageentryform.storewage.removeAll()
							}
							this.wageentryform.storewageforgrid.proxy.conn.url = "Payroll/Wage/getWagesData.py?cname=aa&TempId="
									+ this.templateid;
							this.wageentryform.storewageforgrid.load({
								params : {
									type : "TWages"
								}
							});
							if (this.empcontribform.storewage.getCount() > 0) {
								this.empcontribform.storewage.removeAll()
							}
							this.empcontribform.storewageforgrid.proxy.conn.url = "Payroll/EmpContrib/getEmployerContribData.py?cname=aa&TempId="
									+ this.templateid;
							this.empcontribform.storewageforgrid.load({
								params : {
									type : "TEC"
								}
							});
							this.doLayout();
							this.wageentryform.grid.on("validateedit",
									function(F) {
										Wtf.getCmp("editTemp").enable();
										Wtf.getCmp("editTemp1").enable()
									}, this);
							this.taxentryform.grid.on("validateedit", function(
									F) {
								Wtf.getCmp("editTemp").enable();
								Wtf.getCmp("editTemp1").enable()
							}, this);
							this.deductionentryform.DeductionGridPanel.on(
									"validateedit", function(F) {
										Wtf.getCmp("editTemp").enable();
										Wtf.getCmp("editTemp").enable()
									}, this)
						}
						this.saveTemplateA = function(N) {
							if (this.payintervalCombo.getValue() == 1
									|| this.payintervalCombo.getValue() == 2) {
								if (this.datepicker.getValue() == "") {
									calMsgBoxShow(5, 0);
									return
								}
							} else {
								if (this.daypicker.getValue() == "") {
									calMsgBoxShow(5, 0);
									return
								}
							}
							if (this.tempformPanel.form.isValid()) {
								var O = this.assignedUsersPanel
										.getRecordsJSON();
								var H = this.wageentryform.grid.getStore()
										.getCount() - 1;
								var J = this.taxentryform.grid.getStore()
										.getCount() - 1;
								var G = this.deductionentryform.DeductionGridPanel
										.getStore().getCount() - 1;
								var L = this.empcontribform.grid.getStore()
										.getCount() - 1;
								if (H > 0) {
									if (parseFloat(this.startrange.getValue()) <= parseFloat(this.endrange
											.getValue())) {
										var M = this.calcTotalAmountA(
												this.wageentryform.grid
														.getStore(), "cash",
												"rate",
												parseFloat(this.endrange
														.getValue()));
										var K = this
												.calcTotalAmountA(
														this.deductionentryform.DeductionGridPanel
																.getStore(),
														"cash",
														"rate",
														parseFloat(this.endrange
																.getValue()));
										var I = this.calcTotalAmountA(
												this.taxentryform.grid
														.getStore(), "cash",
												"rate",
												parseFloat(this.endrange
														.getValue()));
										this.frmdta = "{TName:'"
												+ this.tempname.getValue()
												+ "',";
										this.frmdta += "RStart:'"
												+ this.startrange.getValue()
												+ "',";
										this.frmdta += "REnd:'"
												+ this.endrange.getValue()
												+ "',";
										this.frmdta += "payInterval:'"
												+ this.payintervalCombo
														.getValue() + "',";
										if (this.payintervalCombo.getValue() == 1) {
											this.frmdta += "effdate:'"
													+ this.datepicker
															.getValue() + "',"
										} else {
											if (this.payintervalCombo
													.getValue() == 3) {
												this.frmdta += "effdate:'"
														+ this.daypicker
																.getValue()
														+ "',"
											} else {
												if (this.payintervalCombo
														.getValue() == 2) {
													this.frmdta += "effdate:'"
															+ this.datepicker
																	.getValue()
															+ "',"
												}
											}
										}
										this.frmdta += "showborder:'"
												+ this.check.getValue() + "',";
										this.frmdta += "GId:'"
												+ this.designcombo.getValue()
												+ "'}";
										this.saveTemplateData = "{TaxDataADD:[";
										for (i = 0; i < J; i++) {
											if (i > 0) {
												this.saveTemplateData += ","
											}
											this.saveTemplateData += "{TaxId:'"
													+ this.taxentryform.grid
															.getStore()
															.getAt(i).get("id")
													+ "',TaxRate:'"
													+ this.taxentryform.grid
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData += "]}";
										this.saveTemplateData1 = "{WageDataADD:[";
										for (i = 0; i < H; i++) {
											if (i > 0) {
												this.saveTemplateData1 += ","
											}
											if (this.wageentryform.grid
													.getStore().getAt(i).get(
															"id") == -1) {
												calMsgBoxShow(28, 0);
												return
											}
											this.saveTemplateData1 += "{WageId:'"
													+ this.wageentryform.grid
															.getStore()
															.getAt(i).get("id")
													+ "',WageRate:'"
													+ this.wageentryform.grid
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData1 += "]}";
										this.saveTemplateData2 = "{DeducDataADD:[";
										for (i = 0; i < G; i++) {
											if (i > 0) {
												this.saveTemplateData2 += ","
											}
											if (this.deductionentryform.DeductionGridPanel
													.getStore().getAt(i).get(
															"id") == -1) {
												calMsgBoxShow(28, 0);
												return
											}
											this.saveTemplateData2 += "{DeducId:'"
													+ this.deductionentryform.DeductionGridPanel
															.getStore()
															.getAt(i).get("id")
													+ "',DeducRate:'"
													+ this.deductionentryform.DeductionGridPanel
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData2 += "]}";
										this.saveTemplateData3 = "{ECDataADD:[";
										for (i = 0; i < L; i++) {
											if (i > 0) {
												this.saveTemplateData3 += ","
											}
											if (this.empcontribform.grid
													.getStore().getAt(i).get(
															"id") == -1) {
												calMsgBoxShow(28, 0);
												return
											}
											this.saveTemplateData3 += "{Id:'"
													+ this.empcontribform.grid
															.getStore()
															.getAt(i).get("id")
													+ "',ECRate:'"
													+ this.empcontribform.grid
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData3 += "]}";
										var P = this.assignedUsersPanel
												.getDeleteMappingIdsJSON();
										var F = "";
										if (this.edit == 1) {
											F = "Payroll/Template/updateTemplateData.py"
										} else {
											F = "Payroll/Template/setTemplateData.py"
										}
										Wtf.MessageBox
												.confirm(
														WtfGlobal
																.getLocaleText("hrms.common.confirm"),
														WtfGlobal
																.getLocaleText("hrms.common.want.to.save.changes"),
														function(Q) {
															if (Q == "yes") {
																Wtf.Ajax
																		.requestEx(
																				{
																					url : F,
																					method : "post",
																					params : {
																						save : "true",
																						saveType : "templatedata",
																						formdata : this.frmdta,
																						taxdata : this.saveTemplateData,
																						wagedata : this.saveTemplateData1,
																						deducdata : this.saveTemplateData2,
																						ecdata : this.saveTemplateData3,
																						assignedEmployees : O,
																						torp : 1,
																						tempid : this.templateid,
																						tempname : this.tempname
																								.getValue(),
																						templatename : this.templatename,
																						deleteMappingIds : Wtf
																								.encode(P)
																					}
																				},
																				this,
																				function(
																						R) {
																					if (R.value == "success") {
																						msgFlag = 0;
																						calMsgBoxShow(
																								1,
																								0);
																						this.groupGridStore
																								.reload();
																						if (N) {
																							Wtf
																									.getCmp(
																											"as")
																									.remove(
																											this.id,
																											true)
																						}
																					} else {
																						if (R.value == "Exist") {
																							calMsgBoxShow(
																									2,
																									0)
																						}
																					}
																				},
																				function(
																						R) {
																				})
															} else {
																return
															}
														}, this)
									} else {
										calMsgBoxShow(3, 0)
									}
								} else {
									calMsgBoxShow(
											[
													WtfGlobal
															.getLocaleText("hrms.common.warning"),
													WtfGlobal
															.getLocaleText("hrms.payroll.Pleaseinsertearnings") ],
											0)
								}
							} else {
								calMsgBoxShow(5, 0)
							}
						};
						this.wageentryform.storewage.on("load", function() {
							if (!Wtf.StoreMgr.containsKey("desig")) {
								Wtf.desigStore.load();
								Wtf.StoreMgr.add("desig", Wtf.desigStore);
								Wtf.desigStore.on("load", function() {
									this.onloadfunc()
								}, this)
							} else {
								this.onloadfunc()
							}
						}, this)
					},
					onloadfunc : function() {
						if (this.editMode) {
							this.k = 0;
							for (this.k = 0; this.k < Wtf.desigStore.getCount(); this.k++) {
								if (Wtf.desigStore.getAt(this.k).get("name") == this.group) {
									new Wtf.form.Hidden({
										id : "GlobalGroupId",
										value : Wtf.desigStore.getAt(this.k)
												.get("id"),
										readOnly : true
									})
								}
							}
							this.designcombo.setValue(this.group);
							if (this.payinterval != "") {
								this.payintervalCombo
										.setValue(this.payinterval);
								this.payintervalCombo.fireEvent("change");
								if (this.payintervalCombo.getValue() == 1) {
									this.datepicker.setValue(this.effdate)
								} else {
									if (this.payintervalCombo.getValue() == 3) {
										this.daypicker.setValue(this.effdate)
									} else {
										this.datepicker.setValue(this.effdate)
									}
								}
							}
							this.assignedUsersPanel
									.setDesignationId(this.group);
							this.assignedUsersPanel
									.setpayinterval(this.payinterval);
							this.assignedUsersPanel.seteffdate(this.effdate)
						}
					},
					calcTotalAmount : function(A, F, E, D) {
						var C = 0;
						for ( var B = 0; B < A.length; B++) {
							var H = A[B];
							var G = H.data[F] * 1;
							if (H.data[E] == "1") {
								G = (D / 100) * G
							}
							C += G
						}
						return C
					},
					calcTotalAmountA : function(A, F, E, D) {
						var C = 0;
						for ( var B = 0; B < A.getCount(); B++) {
							var H = A.getAt(B);
							var G = H.data[F] * 1;
							if (H.data[E] == "1") {
								G = (D / 100) * G
							}
							C += G
						}
						return C
					},
					convertToPercent : function(A, F, E, D) {
						var C = 0;
						for ( var B = 0; B < A.getCount(); B++) {
							var H = A.getAt(B);
							var G = 0;
							if (H.data[E] == "0") {
								G = (H.data[F] / D) * 100;
								H.data[F] = G
							}
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					},
					setDesignation : function() {
						if (Wtf.desigStore.getCount() > 0) {
							this.designcombo.setValue(Wtf.desigStore.getAt(
									Wtf.desigStore.getCount() - 1).get("id"))
						}
					},
					payintervalComboChange : function() {
						if (this.payintervalCombo.getValue() == 1) {
							this.showhide(this.datepicker, true, "block");
							this.showhide(this.daypicker, false, "none");
							this.datepicker.setValue("");
							this.datestore.removeAll();
							this.datestore.loadData(this.monthlydata)
						} else {
							if (this.payintervalCombo.getValue() == 3) {
								this.showhide(this.datepicker, false, "none");
								this.showhide(this.daypicker, true, "block")
							} else {
								if (this.payintervalCombo.getValue() == 2) {
									this.showhide(this.datepicker, true,
											"block");
									this
											.showhide(this.daypicker, false,
													"none");
									this.datepicker.setValue("");
									this.datestore.removeAll();
									this.datestore.loadData(this.bimonthlydata)
								}
							}
						}
					}
				});
Wtf.WageEntryForm = function(A) {
	A.border = false;
	A.layout = "fit";
	Wtf.WageEntryForm.superclass.constructor.call(this, A);
	Wtf.apply(this, A)
};
Wtf
		.extend(
				Wtf.WageEntryForm,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.WageEntryForm.superclass.initComponent
								.call(this, A);
						this.earncomp = 0;
						this.deduccomp = 0;
						this.netcomp = 0;
						this.fieldswage = [ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "code"
						}, {
							name : "id"
						}, {
							name : "assigned"
						}, {
							name : "rate"
						}, {
							name : "amount"
						}, {
							name : "depwage"
						}, {
							name : "depwageid"
						}, {
							name : "computeon"
						}, {
							name : "expr"
						}, {
							name : "comp"
						} ];
						this.expander = new Wtf.grid.RowExpander(
								{
									tpl : new Wtf.XTemplate(
											"<p>&nbsp;&nbsp;&nbsp;&nbsp;<b>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.compute.on")
													+ ":</b> {[this.f(values)]}</p>",
											{
												f : function(K) {
													var E = K.computeon;
													var I = Wtf.getCmp(this.id);
													if (E == "0") {
														return WtfGlobal
																.getLocaleText("hrms.payroll.currentdeductions")
													} else {
														if (E == "1") {
															return WtfGlobal
																	.getLocaleText("hrms.payroll.currentearnings")
														} else {
															if (E == "2") {
																return WtfGlobal
																		.getLocaleText("hrms.payroll.netsalary")
															} else {
																if (E == "3") {
																	var B = "";
																	var M = K.expr
																			.split("(add)");
																	I.storewage
																			.clearFilter(true);
																	for ( var F = 0; F < M.length; F++) {
																		var L = M[F]
																				.split("(sub)");
																		for ( var G = 0; G < L.length; G++) {
																			var H = L[G]
																					.split("*");
																			var D = 1;
																			var J;
																			if (H.length > 1) {
																				D = H[0];
																				J = H[1]
																			} else {
																				J = H[0]
																			}
																			if (J == -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * <b>"
																						+ WtfGlobal
																								.getLocaleText("hrms.payroll.template.basic")
																						+ "</b>"
																			}
																			var C = I.storewage
																					.find(
																							"id",
																							J);
																			if (C > -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * "
																						+ I.storewage
																								.getAt(
																										C)
																								.get(
																										"type")
																			}
																		}
																	}
																	return B
																} else {
																	return "N/A"
																}
															}
														}
													}
												}
											}, this)
								});
						this.wcheckboxselection = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this,
									singleSelect : false
								});
						this.fieldswage = Wtf.data.Record
								.create(this.fieldswage);
						this.readerwage = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.fieldswage);
						this.storewage = new Wtf.data.Store({
							url : "Payroll/Wage/getWageMaster.py",
							method : "GET",
							reader : this.readerwage
						});
						this.storewageforgrid = new Wtf.data.Store({
							url : "Payroll/Wage/getDefualtWages.py",
							method : "GET",
							reader : this.readerwage
						});
						this.storewageforgrid.load({
							params : {
								type : "getDefualtWages",
								start : 0,
								grouper : "addpayroll",
								limit : 15
							}
						});
						this.storewageforgrid.on("load", function() {
							var B = this.storewageforgrid.query("computeon",
									"1");
							this.earncomp = B.length;
							this.addemptyrec()
						}, this);
						this.ratenumberfield = new Wtf.form.NumberField({
							allowNegative : false,
							decimalPrecision : 2
						});
						this.Wtypecombo = new Wtf.form.ComboBox(
								{
									store : this.storewage,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.WageTypeName"),
									displayField : "type",
									mode : "local",
									valueField : "type",
									forceSelection : true,
									scope : this,
									width : 180,
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(C, D, B) {
											this.insertrate = this.grid
													.getSelectionModel()
													.getSelected();
											this.insertrateRate = D.get("cash");
											this.insertrateCode = D.get("code");
											this.insertrateId = D.get("id");
											this.insertratetype = D.get("type");
											this.insertrateratetype = D
													.get("rate");
											this.insertratedepwage = D
													.get("depwage");
											this.insertratedepwageid = D
													.get("depwageid");
											this.insertratecomputeon = D
													.get("computeon");
											this.insertrateexpr = D.get("expr")
										}
									}
								});
						this.Wtypecombo.on("expand", function(B, C) {
							this.storewage.filter("comp", "wage")
						}, this);
						this.cmwage = new Wtf.grid.ColumnModel(
								[
										this.expander,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.WageType"),
											dataIndex : "type",
											editor : this.Wtypecombo,
											width : 200
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.code"),
											dataIndex : "code"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.value"),
											dataIndex : "cash",
											renderer : function(F, E, B, G, D,
													C) {
												if (B.data.rate == "1") {
													return ('<div align="right">'
															+ parseFloat(F)
																	.toFixed(2) + " %</div>")
												} else {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.payrollcurrencyRenderer(F) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.percent.of"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											renderer : this.rendererfun
													.createDelegate(this)
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											dataIndex : "",
											width : 35,
											renderer : this.deleteRenderer
													.createDelegate(this)
										} ]);
						this.storewage.load({
							params : {
								allflag : "true",
								type : "Wages",
								cname : "aa",
								deduc : "true",
								empcont : "true",
								grouper : "addpayroll",
								start : 0,
								limit : 15
							}
						});
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							scope : this
						});
						this.gridrowselection = function() {
						};
						this.grid = new Wtf.grid.EditorGridPanel(
								{
									store : this.storewageforgrid,
									stripeRows : true,
									id : this.id + "addwagegrid",
									scope : this,
									sm : this.wcheckboxselection,
									height : 440,
									clicksToEdit : 1,
									title : WtfGlobal
											.getLocaleText("hrms.common.Earnings"),
									plugins : this.expander,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.Nowageassignedforcurrentsalarytemplate"))
									},
									cm : this.cmwage
								});
						this.grid
								.on(
										"validateedit",
										function(D) {
											this.currentedit = D.record;
											if (this.grid.getStore().find(
													"type", D.value) == -1) {
												if (this.insertratecomputeon == "0") {
													var C = this.id
															.split("addwage");
													if (C.length > 0) {
														var B = Wtf.getCmp(C[0]
																+ "adddeduc");
														if (B != null) {
															if (B.earncomp > 0
																	|| B.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinDeductionWageyoucannotincludeDeductiondependentcomponentinWage"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																this.deduccomp++;
																this
																		.insertcomp(D.column)
															}
														}
													}
												} else {
													if (this.insertratecomputeon == "1") {
														if (this.earncomp > 0
																|| this.netcomp > 0) {
															Wtf.MessageBox
																	.show({
																		title : WtfGlobal
																				.getLocaleText("hrms.payroll.Operationnotpermitted"),
																		msg : WtfGlobal
																				.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																		buttons : Wtf.MessageBox.OK,
																		animEl : "mb9",
																		scope : this,
																		icon : Wtf.MessageBox.INFO
																	});
															this.cancel = true;
															return false
														} else {
															this.earncomp++;
															this
																	.insertcomp(D.column)
														}
													} else {
														if (this.insertratecomputeon == "2") {
															if (this.earncomp > 0
																	|| this.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																var C = this.id
																		.split("addwage");
																if (C.length > 0) {
																	var B = Wtf
																			.getCmp(C[0]
																					+ "adddeduc");
																	if (B != null) {
																		if (B.earncomp > 0
																				|| B.netcomp > 0) {
																			Wtf.MessageBox
																					.show({
																						title : WtfGlobal
																								.getLocaleText("hrms.payroll.Operationnotpermitted"),
																						msg : WtfGlobal
																								.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinDeductionWageyoucannotincludeDeductiondependentcomponentinWage"),
																						buttons : Wtf.MessageBox.OK,
																						animEl : "mb9",
																						scope : this,
																						icon : Wtf.MessageBox.INFO
																					});
																			this.cancel = true;
																			return false
																		} else {
																			this.netcomp++;
																			this
																					.insertcomp(D.column)
																		}
																	}
																}
															}
														} else {
															if (this.insertratecomputeon == "3") {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.SomeDependenceSureYouWanttoContinue"),
																			buttons : Wtf.MessageBox.YESNO,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO,
																			fn : function(
																					E,
																					F) {
																				if (E == "yes") {
																					this
																							.insertcomp(D.column);
																					this.storewage
																							.clearFilter(true);
																					this
																							.getdep(this.insertrateexpr);
																					this.storewage
																							.filter(
																									"comp",
																									"wage")
																				} else {
																					this.grid
																							.getStore()
																							.remove(
																									D.record);
																					this.cancel = true;
																					return false
																				}
																			}
																		});
																this.grid
																		.getView()
																		.refresh()
															} else {
																this
																		.insertcomp(D.column)
															}
														}
													}
												}
											} else {
												this.cancel = true;
												return false
											}
											if (D.record.data.rate == "1") {
												if (D.record.data.cash > 100) {
													return false
												}
											}
										}, this);
						this.grid.on("afteredit", function(B) {
							if (B.row == this.grid.getStore().getCount() - 1) {
								this.addemptyrec();
								this.grid.getSelectionModel().selectAll();
								this.grid.getSelectionModel().deselectRow(
										this.grid.getStore().getCount() - 1)
							}
						}, this);
						this.add(this.grid);
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.storewage.on("load", function() {
							if (this.edittemp == "yes") {
								for (this.i = 0; this.i < this.grid.getStore()
										.getCount() - 1; this.i++) {
									this.rec = this.grid.getStore().getAt(
											this.i);
									if (this.rec.get("assigned") == "1") {
										this.wcheckboxselection.selectRow(
												this.i, true)
									}
								}
							}
						}, this);
						if (this.edittemp == "yes") {
							this.storewageforgrid.on("load", function() {
								var B = this.storewageforgrid.query(
										"computeon", "1");
								var D = this.storewageforgrid.query(
										"computeon", "2");
								var C = this.storewageforgrid.query(
										"computeon", "0");
								this.earncomp = B.length;
								this.netcomp = D.length;
								this.deduccomp = C.length;
								this.grid.getSelectionModel().selectAll();
								this.grid.getSelectionModel().deselectRow(
										this.grid.getStore().getCount() - 1)
							}, this)
						}
						this.grid
								.on(
										"click",
										function(F) {
											if (F.target.className == "pwndCommon gridCancel") {
												var E = this.grid
														.getSelectionModel()
														.getSelected();
												if (this.grid
														.getSelectionModel()
														.getSelections().length > 0) {
													if (this.grid.getStore()
															.indexOf(E) != this.grid
															.getStore()
															.getCount() - 1) {
														for ( var G = 0; G < this.grid
																.getStore().data.length - 1; G++) {
															var B = this.grid
																	.getStore()
																	.getAt(G).data.expr;
															if (B
																	.indexOf(E.data.id) != -1) {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.warning"),
																				WtfGlobal
																						.getLocaleText("hrms.payroll.CannotdeletedSomeothercomponentsaredependsonthisemployercontribution") ],
																		2);
																return
															}
														}
														var D = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).taxentryform1.storetaxforgrid
																: Wtf
																		.getCmp(this.parentId).taxentryform.storetaxforgrid;
														var C = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).deductionentryform1.storededucforgrid
																: Wtf
																		.getCmp(this.parentId).deductionentryform.storededucforgrid;
														for (G = 0; G < C.data.length; G++) {
															var B = C.getAt(G).data.expr;
															if (B != undefined) {
																if (B
																		.indexOf(E.data.id) != -1) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					"Cannot deleted.Some other components are depends on this wage." ],
																			2);
																	return
																}
															}
														}
														this.grid
																.getStore()
																.remove(
																		this.grid
																				.getSelectionModel()
																				.getSelected());
														if (E.get("computeon") == 0) {
															this.deduccomp--
														}
														if (E.get("computeon") == 1) {
															this.earncomp--
														}
														if (E.get("computeon") == 2) {
															this.netcomp--
														}
														Wtf.getCmp("editTemp")
																.enable()
													}
												}
											}
										}, this);
						this.record = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "code"
						} ]);
						if (this.paramstore != 1) {
							this.addemptyrec()
						}
					},
					rendererfun : function(F, L, K, P, G, O, I) {
						if (K.get("rate") == 0) {
							return "-"
						}
						if (F == "0") {
							return WtfGlobal
									.getLocaleText("hrms.payroll.currentdeductions")
						} else {
							if (F == "1") {
								return WtfGlobal
										.getLocaleText("hrms.payroll.currentearnings")
							} else {
								if (F == "2") {
									return WtfGlobal
											.getLocaleText("hrms.payroll.netsalary")
								} else {
									if (F == "3") {
										var A = "";
										var N = K.get("expr").split("(add)");
										this.storewage.clearFilter(true);
										for ( var E = 0; E < N.length; E++) {
											var M = N[E].split("(sub)");
											for ( var D = 0; D < M.length; D++) {
												var H = M[D].split("*");
												var C = 1;
												var J;
												if (H.length > 1) {
													C = H[0];
													J = H[1]
												} else {
													J = H[0]
												}
												if (J == -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * <b>"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.template.basic")
															+ "</b>"
												}
												var B = this.storewage.find(
														"id", J);
												if (B > -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * "
															+ this.storewage
																	.getAt(B)
																	.get("type")
												}
											}
										}
										return A
									}
								}
							}
						}
					},
					insertcomp : function(A) {
						this.insertrate = this.currentedit;
						if (A == 1) {
							this.insertrate.beginEdit();
							this.insertrate.set("cash", this.insertrateRate);
							this.insertrate.set("code", this.insertrateCode);
							this.insertrate.set("id", this.insertrateId);
							this.insertrate
									.set("rate", this.insertrateratetype);
							this.insertrate.set("depwage",
									this.insertratedepwage);
							this.insertrate.set("type", this.insertratetype);
							this.insertrate.set("depwageid",
									this.insertratedepwageid);
							this.insertrate.set("computeon",
									this.insertratecomputeon);
							this.insertrate.set("expr", this.insertrateexpr);
							this.insertrate.endEdit()
						}
					},
					getdep : function(M) {
						var L = M.split("(add)");
						for ( var B = 0; B < L.length; B++) {
							var K = L[B].split("(sub)");
							for ( var C = 0; C < K.length; C++) {
								var E = K[C].split("*");
								var F;
								if (E.length > 1) {
									F = E[1]
								} else {
									F = E[0]
								}
								var G = this.grid.getStore().find("id", F);
								if (G == -1 && K[C] != "") {
									var A = this.storewage.find("id", F);
									if (A > -1) {
										var D;
										var H;
										var J = this.storewage.getAt(A);
										if (J.get("comp") == "wage") {
											this.grid.getStore().insert(0, J)
										} else {
											if (J.get("comp") == "empcontrib") {
												D = this.id.split("addwage");
												if (D.length > 0) {
													var I = Wtf.getCmp(D[0]
															+ "addempcontrib");
													if (I != null) {
														H = I.storewageforgrid
																.find("id", F);
														if (H == -1) {
															I.addrecord(J)
														}
													}
												}
											} else {
												D = this.id.split("addwage");
												if (D.length > 0) {
													var N = Wtf.getCmp(D[0]
															+ "adddeduc");
													if (N != null) {
														H = N.storededucforgrid
																.find("id", F);
														if (H == -1) {
															N.addrecord(J)
														}
													}
												}
											}
										}
										if (J.get("computeon") == "3") {
											this.getdep(J.get("expr"))
										}
									}
								}
							}
						}
					},
					addemptyrec : function() {
						this.grid.getStore().add(new this.record({
							type : "",
							cash : "",
							id : "-1",
							code : ""
						}))
					},
					deleteRenderer : function(B, A, D, C) {
						if (D.data.id != "-1") {
							return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.common.DeleteRecord")
									+ "></div></div>"
						}
					},
					addrecord : function(A) {
						this.grid.getStore().insert(0, A)
					}
				});
Wtf.EmployerContributionForm = function(A) {
	A.border = false;
	A.layout = "fit";
	Wtf.EmployerContributionForm.superclass.constructor.call(this, A);
	Wtf.apply(this, A)
};
Wtf
		.extend(
				Wtf.EmployerContributionForm,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.EmployerContributionForm.superclass.initComponent
								.call(this, A);
						this.earncomp = 0;
						this.deduccomp = 0;
						this.netcomp = 0;
						this.fieldswage = [ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "code"
						}, {
							name : "id"
						}, {
							name : "assigned"
						}, {
							name : "rate"
						}, {
							name : "amount"
						}, {
							name : "computeon"
						}, {
							name : "expr"
						}, {
							name : "comp"
						} ];
						this.expander = new Wtf.grid.RowExpander(
								{
									tpl : new Wtf.XTemplate(
											"<p>&nbsp;&nbsp;&nbsp;&nbsp;<b>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.compute.on")
													+ ":</b> {[this.f(values)]}</p>",
											{
												f : function(K) {
													var E = K.computeon;
													var I = Wtf.getCmp(this.id);
													if (E == "0") {
														return WtfGlobal
																.getLocaleText("hrms.payroll.currentdeductions")
													} else {
														if (E == "1") {
															return WtfGlobal
																	.getLocaleText("hrms.payroll.currentearnings")
														} else {
															if (E == "2") {
																return WtfGlobal
																		.getLocaleText("hrms.payroll.netsalary")
															} else {
																if (E == "3") {
																	var B = "";
																	var M = K.expr
																			.split("(add)");
																	I.storewage
																			.clearFilter(true);
																	for ( var F = 0; F < M.length; F++) {
																		var L = M[F]
																				.split("(sub)");
																		for ( var G = 0; G < L.length; G++) {
																			var H = L[G]
																					.split("*");
																			var D = 1;
																			var J;
																			if (H.length > 1) {
																				D = H[0];
																				J = H[1]
																			} else {
																				J = H[0]
																			}
																			if (J == -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * <b>"
																						+ WtfGlobal
																								.getLocaleText("hrms.payroll.template.basic")
																						+ "</b>"
																			}
																			var C = I.storewage
																					.find(
																							"id",
																							J);
																			if (C > -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * "
																						+ I.storewage
																								.getAt(
																										C)
																								.get(
																										"type")
																			}
																		}
																	}
																	return B
																} else {
																	return "N/A"
																}
															}
														}
													}
												}
											}, this)
								});
						this.wcheckboxselection = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this,
									singleSelect : false
								});
						this.fieldswage = Wtf.data.Record
								.create(this.fieldswage);
						this.readerwage = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.fieldswage);
						this.storewage = new Wtf.data.Store({
							url : "Payroll/EmpContrib/getEmpContribMaster.py",
							method : "GET",
							reader : this.readerwage
						});
						this.storewageforgrid = new Wtf.data.Store({
							url : "Payroll/EmpContrib/getDefaultEmpContrib.py",
							method : "GET",
							reader : this.readerwage
						});
						this.storewageforgrid.load({
							params : {
								type : "getDefaultEmpContrib",
								start : 0,
								grouper : "addpayroll",
								limit : 15
							}
						});
						this.storewageforgrid.on("load", function() {
							var B = this.storewageforgrid.query("computeon",
									"1");
							this.earncomp = B.length;
							this.addemptyrec()
						}, this);
						this.ratenumberfield = new Wtf.form.NumberField({
							allowNegative : false,
							decimalPrecision : 2
						});
						this.Wtypecombo = new Wtf.form.ComboBox(
								{
									store : this.storewage,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.EmployerContributionTypeName"),
									displayField : "type",
									mode : "local",
									valueField : "type",
									forceSelection : true,
									scope : this,
									width : 180,
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(C, D, B) {
											this.insertrate = this.grid
													.getSelectionModel()
													.getSelected();
											this.insertrateRate = D.get("cash");
											this.insertrateCode = D.get("code");
											this.insertrateId = D.get("id");
											this.insertratetype = D.get("type");
											this.insertrateratetype = D
													.get("rate");
											this.insertratecomputeon = D
													.get("computeon");
											this.insertrateexpr = D.get("expr")
										}
									}
								});
						this.Wtypecombo.on("expand", function(B, C) {
							this.storewage.filter("comp", "empcontrib")
						}, this);
						this.cmwage = new Wtf.grid.ColumnModel(
								[
										this.expander,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.EmployerContributionType"),
											dataIndex : "type",
											editor : this.Wtypecombo,
											width : 200
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.code"),
											dataIndex : "code"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.value"),
											dataIndex : "cash",
											renderer : function(F, E, B, G, D,
													C) {
												if (B.data.rate == "1") {
													return ('<div align="right">'
															+ parseFloat(F)
																	.toFixed(2) + " %</div>")
												} else {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.payrollcurrencyRenderer(F) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.percent.of"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											renderer : this.rendererfun
													.createDelegate(this)
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											dataIndex : "",
											width : 35,
											renderer : this.deleteRenderer
													.createDelegate(this)
										} ]);
						this.storewage.load({
							params : {
								allflag : "true",
								type : "EmpContrib",
								cname : "aa",
								deduction : "true",
								wage : "true",
								grouper : "addpayroll",
								start : 0,
								limit : 15
							}
						});
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							scope : this
						});
						this.gridrowselection = function() {
						};
						this.grid = new Wtf.grid.EditorGridPanel(
								{
									store : this.storewageforgrid,
									stripeRows : true,
									id : this.id + "addempcontrigrid",
									scope : this,
									sm : this.wcheckboxselection,
									height : 440,
									clicksToEdit : 1,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.EmployerContribution"),
									plugins : this.expander,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.Noemployercontributionassignedforcurrentsalarytemplate"))
									},
									cm : this.cmwage
								});
						this.grid
								.on(
										"validateedit",
										function(D) {
											this.currentedit = D.record;
											if (this.grid.getStore().find(
													"type", D.value) == -1) {
												if (this.insertratecomputeon == "0") {
													var C = this.id
															.split("addempcontrib");
													if (C.length > 0) {
														var B = Wtf.getCmp(C[0]
																+ "adddeduc");
														if (B != null) {
															if (B.earncomp > 0
																	|| B.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinDeductionWageyoucannotincludeDeductiondependentcomponentinWage"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																this.deduccomp++;
																this
																		.insertcomp(D.column)
															}
														}
													}
												} else {
													if (this.insertratecomputeon == "1") {
														if (this.earncomp > 0
																|| this.netcomp > 0) {
															Wtf.MessageBox
																	.show({
																		title : WtfGlobal
																				.getLocaleText("hrms.payroll.Operationnotpermitted"),
																		msg : WtfGlobal
																				.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																		buttons : Wtf.MessageBox.OK,
																		animEl : "mb9",
																		scope : this,
																		icon : Wtf.MessageBox.INFO
																	});
															this.cancel = true;
															return false
														} else {
															this.earncomp++;
															this
																	.insertcomp(D.column)
														}
													} else {
														if (this.insertratecomputeon == "2") {
															if (this.earncomp > 0
																	|| this.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																var C = this.id
																		.split("addempcontrib");
																if (C.length > 0) {
																	var B = Wtf
																			.getCmp(C[0]
																					+ "adddeduc");
																	if (B != null) {
																		if (B.earncomp > 0
																				|| B.netcomp > 0) {
																			Wtf.MessageBox
																					.show({
																						title : WtfGlobal
																								.getLocaleText("hrms.payroll.Operationnotpermitted"),
																						msg : WtfGlobal
																								.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinDeductionWageyoucannotincludeDeductiondependentcomponentinWage"),
																						buttons : Wtf.MessageBox.OK,
																						animEl : "mb9",
																						scope : this,
																						icon : Wtf.MessageBox.INFO
																					});
																			this.cancel = true;
																			return false
																		} else {
																			this.netcomp++;
																			this
																					.insertcomp(D.column)
																		}
																	}
																}
															}
														} else {
															if (this.insertratecomputeon == "3") {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.SomeDependenceSureYouWanttoContinue"),
																			buttons : Wtf.MessageBox.YESNO,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO,
																			fn : function(
																					E,
																					F) {
																				if (E == "yes") {
																					this
																							.insertcomp(D.column);
																					this.storewage
																							.clearFilter(true);
																					this
																							.getdep(this.insertrateexpr);
																					this.storewage
																							.filter(
																									"comp",
																									"empcontrib")
																				} else {
																					this.grid
																							.getStore()
																							.remove(
																									D.record);
																					this.cancel = true;
																					return false
																				}
																			}
																		});
																this.grid
																		.getView()
																		.refresh()
															} else {
																this
																		.insertcomp(D.column)
															}
														}
													}
												}
											} else {
												this.cancel = true;
												return false
											}
											if (D.record.data.rate == "1") {
												if (D.record.data.cash > 100) {
													return false
												}
											}
										}, this);
						this.grid.on("afteredit", function(B) {
							if (B.row == this.grid.getStore().getCount() - 1) {
								this.addemptyrec();
								this.grid.getSelectionModel().selectAll();
								this.grid.getSelectionModel().deselectRow(
										this.grid.getStore().getCount() - 1)
							}
						}, this);
						this.add(this.grid);
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.storewage.on("load", function() {
							if (this.edittemp == "yes") {
								for (this.i = 0; this.i < this.grid.getStore()
										.getCount() - 1; this.i++) {
									this.rec = this.grid.getStore().getAt(
											this.i);
									if (this.rec.get("assigned") == "1") {
										this.wcheckboxselection.selectRow(
												this.i, true)
									}
								}
							}
						}, this);
						if (this.edittemp == "yes") {
							this.storewageforgrid.on("load", function() {
								var B = this.storewageforgrid.query(
										"computeon", "1");
								var D = this.storewageforgrid.query(
										"computeon", "2");
								var C = this.storewageforgrid.query(
										"computeon", "0");
								this.earncomp = B.length;
								this.netcomp = D.length;
								this.deduccomp = C.length;
								this.grid.getSelectionModel().selectAll();
								this.grid.getSelectionModel().deselectRow(
										this.grid.getStore().getCount() - 1)
							}, this)
						}
						this.grid
								.on(
										"click",
										function(F) {
											if (F.target.className == "pwndCommon gridCancel") {
												var E = this.grid
														.getSelectionModel()
														.getSelected();
												if (this.grid
														.getSelectionModel()
														.getSelections().length > 0) {
													if (this.grid.getStore()
															.indexOf(E) != this.grid
															.getStore()
															.getCount() - 1) {
														for ( var G = 0; G < this.grid
																.getStore().data.length - 1; G++) {
															var B = this.grid
																	.getStore()
																	.getAt(G).data.expr;
															if (B
																	.indexOf(E.data.id) != -1) {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.warning"),
																				WtfGlobal
																						.getLocaleText("hrms.payroll.CannotdeletedSomeothercomponentsaredependsonthisemployercontribution") ],
																		2);
																return
															}
														}
														var D = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).taxentryform1.storetaxforgrid
																: Wtf
																		.getCmp(this.parentId).taxentryform.storetaxforgrid;
														var C = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).deductionentryform1.storededucforgrid
																: Wtf
																		.getCmp(this.parentId).deductionentryform.storededucforgrid;
														for (G = 0; G < C.data.length; G++) {
															var B = C.getAt(G).data.expr;
															if (B != undefined) {
																if (B
																		.indexOf(E.data.id) != -1) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.CannotdeletedSomeothercomponentsaredependsonthisemployercontribution") ],
																			2);
																	return
																}
															}
														}
														this.grid
																.getStore()
																.remove(
																		this.grid
																				.getSelectionModel()
																				.getSelected());
														if (E.get("computeon") == 0) {
															this.deduccomp--
														}
														if (E.get("computeon") == 1) {
															this.earncomp--
														}
														if (E.get("computeon") == 2) {
															this.netcomp--
														}
														Wtf.getCmp("editTemp")
																.enable()
													}
												}
											}
										}, this);
						this.record = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "code"
						} ]);
						if (this.paramstore != 1) {
							this.addemptyrec()
						}
					},
					rendererfun : function(F, L, K, P, G, O, I) {
						if (K.get("rate") == 0) {
							return "-"
						}
						if (F == "0") {
							return WtfGlobal
									.getLocaleText("hrms.payroll.currentdeductions")
						} else {
							if (F == "1") {
								return WtfGlobal
										.getLocaleText("hrms.payroll.currentearnings")
							} else {
								if (F == "2") {
									return WtfGlobal
											.getLocaleText("hrms.payroll.netsalary")
								} else {
									if (F == "3") {
										var A = "";
										var N = K.get("expr").split("(add)");
										this.storewage.clearFilter(true);
										for ( var E = 0; E < N.length; E++) {
											var M = N[E].split("(sub)");
											for ( var D = 0; D < M.length; D++) {
												var H = M[D].split("*");
												var C = 1;
												var J;
												if (H.length > 1) {
													C = H[0];
													J = H[1]
												} else {
													J = H[0]
												}
												if (J == -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * <b>"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.template.basic")
															+ "</b>"
												}
												var B = this.storewage.find(
														"id", J);
												if (B > -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * "
															+ this.storewage
																	.getAt(B)
																	.get("type")
												}
											}
										}
										return A
									}
								}
							}
						}
					},
					insertcomp : function(A) {
						this.insertrate = this.currentedit;
						if (A == 1) {
							this.insertrate.beginEdit();
							this.insertrate.set("cash", this.insertrateRate);
							this.insertrate.set("code", this.insertrateCode);
							this.insertrate.set("id", this.insertrateId);
							this.insertrate
									.set("rate", this.insertrateratetype);
							this.insertrate.set("depwage",
									this.insertratedepwage);
							this.insertrate.set("type", this.insertratetype);
							this.insertrate.set("depwageid",
									this.insertratedepwageid);
							this.insertrate.set("computeon",
									this.insertratecomputeon);
							this.insertrate.set("expr", this.insertrateexpr);
							this.insertrate.endEdit()
						}
					},
					getdep : function(M) {
						var L = M.split("(add)");
						for ( var B = 0; B < L.length; B++) {
							var K = L[B].split("(sub)");
							for ( var C = 0; C < K.length; C++) {
								var E = K[C].split("*");
								var G;
								if (E.length > 1) {
									G = E[1]
								} else {
									G = E[0]
								}
								var H = this.grid.getStore().find("id", G);
								if (H == -1 && K[C] != "") {
									var A = this.storewage.find("id", G);
									if (A > -1) {
										var D;
										var I;
										var J = this.storewage.getAt(A);
										if (J.get("comp") == "empcontrib") {
											this.grid.getStore().insert(0, J)
										} else {
											if (J.get("comp") == "wage") {
												D = this.id
														.split("addempcontrib");
												if (D.length > 0) {
													var F = Wtf.getCmp(D[0]
															+ "addwage");
													if (F != null) {
														I = F.storewageforgrid
																.find("id", G);
														if (I == -1) {
															F.addrecord(J)
														}
													}
												}
											} else {
												D = this.id
														.split("addempcontrib");
												if (D.length > 0) {
													var N = Wtf.getCmp(D[0]
															+ "adddeduc");
													if (N != null) {
														I = N.storededucforgrid
																.find("id", G);
														if (I == -1) {
															N.addrecord(J)
														}
													}
												}
											}
										}
										if (J.get("computeon") == "3") {
											this.getdep(J.get("expr"))
										}
									}
								}
							}
						}
					},
					addemptyrec : function() {
						this.grid.getStore().add(new this.record({
							type : "",
							cash : "",
							id : "-1",
							code : ""
						}))
					},
					deleteRenderer : function(B, A, D, C) {
						if (D.data.id != "-1") {
							return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.common.DeleteRecord")
									+ "></div></div>"
						}
					},
					addrecord : function(A) {
						this.grid.getStore().insert(0, A)
					}
				});
Wtf.PayrollGroupTemplate = function(A) {
	A.border = false;
	A.activeTab = 0;
	A.enableTabScroll = true;
	Wtf.PayrollGroupTemplate.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.PayrollGroupTemplate,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.PayrollGroupTemplate.superclass.initComponent.call(
								this, A);
						this.xg = Wtf.grid;
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false,
							scope : this
						});
						this.gridfields = [ {
							name : "GroupName"
						}, {
							name : "NosDeduc"
						}, {
							name : "NosTax"
						}, {
							name : "NosWage"
						}, {
							name : "TempName"
						}, {
							name : "TempRange"
						}, {
							name : "TempID"
						}, {
							name : "GroupId"
						}, {
							name : "showborder"
						}, {
							name : "payinterval"
						}, {
							name : "effdate"
						}, {
							name : "basic"
						} ];
						this.cmGroupGrid = new Wtf.grid.ColumnModel(
								[
										this.sm,
										new Wtf.grid.RowNumberer(),
										{
											id : "GroupName",
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											sortable : true,
											hidden : true,
											dataIndex : "GroupName"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payrolltemplates"),
											sortable : true,
											hideable : false,
											dataIndex : "TempName"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.noofassignedwages"),
											align : "right",
											dataIndex : "NosWage",
											renderer : WtfGlobal.numericRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.noofassignedtaxes"),
											align : "right",
											dataIndex : "NosTax",
											renderer : WtfGlobal.numericRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.noofassigneddeductions"),
											align : "right",
											dataIndex : "NosDeduc",
											renderer : WtfGlobal.numericRenderer
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.payinterval"),
											dataIndex : "payinterval",
											renderer : function(D) {
												var C = " - ";
												switch (D) {
												case 1:
													C = WtfGlobal
															.getLocaleText("hrms.payroll.onceamonth");
													break;
												case 2:
													C = WtfGlobal
															.getLocaleText("hrms.payroll.twiceamonth");
													break;
												case 3:
													C = WtfGlobal
															.getLocaleText("hrms.payroll.onceaweek");
													break
												}
												return C
											}
										} ]);
						this.reader = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.gridfields);
						this.groupGridStore = new Wtf.data.GroupingStore({
							reader : this.reader,
							url : "Payroll/Template/getPayProcessData.py",
							sortInfo : {
								field : "TempName",
								direction : "DSC"
							},
							groupField : "GroupName"
						});
						this.groupGridStore.baseParams = {
							PayProc : "get"
						};
						this.groupGridStore.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.editbtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.generatepayroll"),
									minWidth : 110,
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.generatepayroll.tooltip"),
									scope : this,
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									disabled : true,
									handler : this.generatePayroll
								});
						this.assinEmp = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.assignemployee"),
									minWidth : 110,
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.assignemployee.tooltip"),
									scope : this,
									iconCls : "pwndCommon profile2buttonIcon",
									disabled : true,
									handler : this.assignEmp
								});
						var B = [];
						B
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.groupGridStore
																.load({
																	params : {
																		start : 0,
																		limit : this.Payrollgrid.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.Payrollgrid.id)
																.setValue("")
													}
												}),
										"-",
										this.addpaytemp = new Wtf.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.payroll.addpayrolltemplate"),
													scope : this,
													tooltip : WtfGlobal
															.getLocaleText("hrms.payroll.addpayrolltemplate.tooltip"),
													minWidth : 125,
													iconCls : getButtonIconCls(Wtf.btype.addbutton),
													handler : this.addtemplate
												}),
										"-",
										this.editviewtempbtn = new Wtf.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.payroll.Template.Details"),
													minWidth : 110,
													tooltip : WtfGlobal
															.getLocaleText("hrms.payroll.Template.Details.Tooltip"),
													scope : this,
													iconCls : getButtonIconCls(Wtf.btype.reportbutton),
													disabled : true,
													handler : this.tempDetails
												}),
										"-",
										this.deleteTempbtn = new Wtf.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.delete"),
													tooltip : WtfGlobal
															.getLocaleText("hrms.payroll.delete.tooltip1"),
													minWidth : 60,
													scope : this,
													iconCls : getButtonIconCls(Wtf.btype.deletebutton),
													disabled : true,
													handler : this.deleteTemp
												}));
						this.Payrollgrid = new Wtf.KwlGridPanel(
								{
									border : false,
									cm : this.cmGroupGrid,
									store : this.groupGridStore,
									width : 700,
									height : 450,
									scope : this,
									loadMask : true,
									sm : this.sm,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.payroll.searchbydesignationtemplate"),
									searchField : "GroupName",
									serverSideSearch : true,
									displayInfo : true,
									view : new Wtf.grid.GroupingView({
										forceFit : true,
										showGroupName : false,
										groupTextTpl : "{text}"
									}),
									tbar : B
								});
						this.add(this.Payrollgrid);
						this.doLayout();
						calMsgBoxShow(202, 4, true);
						this.groupGridStore
								.on(
										"load",
										function() {
											if (this.groupGridStore.getCount() == 0) {
												this.Payrollgrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addTemplate(\""
																+ this.id
																+ "\")'>"
																+ WtfGlobal
																		.getLocaleText("hrms.payroll.addtemplategrid.default")
																+ "</a>");
												this.Payrollgrid.getView()
														.refresh()
											}
											if (msgFlag == 1) {
												WtfGlobal.closeProgressbar()
											}
										}, this);
						this.sm.on("selectionchange", function() {
							WtfGlobal.enableDisableBtnArr(B, this.Payrollgrid,
									[ 5 ], [ 7 ])
						}, this)
					},
					addtemplate : function(D, C, B, A) {
						if (A == 1) {
							this.addpay = Wtf.getCmp("EditPayTemplate"
									+ B.TempID)
						} else {
							this.addpay = Wtf.getCmp("AddPayTemplate")
						}
						if (!this.addpay) {
							this.addpay = new Wtf.AddPayrollTemplate(
									{
										scope : this,
										title : (A == 1) ? WtfGlobal
												.getLocaleText({
													key : "hrms.payroll.Edit.Template",
													params : [ B.TempName ]
												})
												: WtfGlobal
														.getLocaleText("hrms.payroll.Add.Template"),
										globname : "addtemp",
										iconCls : "pwndCommon templatetabIcon",
										id : (A == 1) ? "EditPayTemplate"
												+ B.TempID : "AddPayTemplate",
										groupGridStore : this.groupGridStore,
										editMode : B ? true : false,
										templateid : B ? B.TempID : "",
										templatename : B ? B.TempName : "",
										showBorder : B ? B.showborder : "",
										range : B ? B.TempRange : "",
										group : B ? B.GroupId : "",
										payinterval : B ? B.payinterval : "",
										effdate : B ? B.effdate : "",
										basicval : B ? B.basic : "",
										edit : A
									});
							mainPanel.add(this.addpay);
							this.addpay.on("render", function() {
								this.addpay.tempname.focus(true, 100)
							}, this);
							this.doLayout()
						}
						mainPanel.setActiveTab(this.addpay);
						mainPanel.doLayout()
					},
					generatePayroll : function() {
						var recData = this.Payrollgrid.getSelectionModel()
								.getSelected().data;
						if (this.Payrollgrid.getSelectionModel().getSelected() != null) {
							Wtf.Ajax
									.requestEx(
											{
												url : Wtf.req.base
														+ "PayrollHandler.jsp",
												scope : this,
												params : {
													type : "CPaytemp",
													TempId : recData.TempID
												}
											},
											this,
											function(req) {
												if (req.responseText == "fail") {
												} else {
													this.resp = eval("("
															+ req.responseText
															+ ")");
													if (this.generatepay == null) {
														this.generatepay = new Wtf.GeneratePayroll(
																{
																	scope : this,
																	border : false,
																	iconCls : "pwndCommon profile2buttonIcon",
																	TempId : recData.TempID,
																	ttotal : req.Tax.TaxTotal,
																	taxcash : req.Tax.cashtotal,
																	wtotal : req.Wages.WageTotal,
																	wagecash : req.Wages.cashtotal,
																	dtotal : req.Deduction.DeducTotal,
																	deduccash : req.Deduction.cashtotal,
																	tempName : recData.TempName,
																	nostax : recData.NosTax,
																	noswage : recData.NosWage,
																	nosdeduc : recData.NosDeduc,
																	currency : req.curval,
																	title : "Payroll of_"
																			+ recData.TempName,
																	groupGridStore : this.groupGridStore
																});
														this
																.add(this.generatepay);
														this.doLayout();
														this.generatepay
																.on(
																		"beforedestroy",
																		function(
																				comp) {
																			this.generatepay = null
																		}, this)
													}
													this.editbtn.disable();
													this.editviewtempbtn
															.disable();
													this.deleteTempbtn
															.disable();
													this.assinEmp.disable();
													this.Payrollgrid
															.getSelectionModel()
															.clearSelections();
													this
															.setActiveTab(this.generatepay);
													this.doLayout()
												}
											}, function(req) {
											})
						} else {
							this.editbtn.disable();
							this.editviewtempbtn.disable();
							this.deleteTempbtn.disable();
							this.assinEmp.disable();
							this.Payrollgrid.getSelectionModel()
									.clearSelections()
						}
					},
					tempDetails : function(C, B) {
						var A = this.Payrollgrid.getSelectionModel()
								.getSelected().data;
						this.addtemplate(C, B, A, 1)
					},
					deleteTemp : function() {
						var A = this.Payrollgrid.getSelectionModel()
								.getSelected().data;
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : deleteMsgBox("record"),
									buttons : Wtf.MessageBox.YESNO,
									icon : Wtf.MessageBox.QUESTION,
									scope : this,
									buttons : Wtf.MessageBox.YESNO,
									icon : Wtf.MessageBox.QUESTION,
									animEl : "elId",
									fn : function(C) {
										if (C == "yes") {
											var D = this.Payrollgrid
													.getSelectionModel()
													.getSelections();
											var E = [];
											this.Payrollgrid
													.getSelectionModel()
													.clearSelections();
											for ( var B = 0; B < D.length; B++) {
												E.push(D[B].get("TempID"));
												var F = this.groupGridStore
														.indexOf(D[B]);
												WtfGlobal.highLightRow(
														this.Payrollgrid,
														"FF0000", 5, F)
											}
											calMsgBoxShow(201, 4, true);
											Wtf.Ajax
													.requestEx(
															{
																url : "Payroll/Template/deleteTemplateData.py",
																method : "post",
																params : {
																	dele : true,
																	delType : "template",
																	tempid : E
																}
															},
															this,
															function(H, G) {
																if (H.value
																		.toString() == "success") {
																	calMsgBoxShow(
																			22,
																			0);
																	var I = {
																		start : 0,
																		limit : 15
																	};
																	WtfGlobal
																			.delaytasks(
																					this.groupGridStore,
																					I);
																	this.editbtn
																			.disable();
																	this.editviewtempbtn
																			.disable();
																	this.deleteTempbtn
																			.disable();
																	this.assinEmp
																			.disable();
																	this.Payrollgrid
																			.doLayout()
																} else {
																	if (H.value
																			.toString() == "assign") {
																		Wtf.Msg
																				.show({
																					title : WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					msg : WtfGlobal
																							.getLocaleText({
																								key : "hrms.payroll.delete.template.warning",
																								params : [ H.templates
																										.toString() ]
																							}),
																					scope : this,
																					width : 260,
																					buttons : Wtf.Msg.OK,
																					animEl : "elId",
																					icon : Wtf.MessageBox.WARNING
																				});
																		this.editbtn
																				.disable();
																		this.editviewtempbtn
																				.disable();
																		this.deleteTempbtn
																				.disable();
																		this.assinEmp
																				.disable()
																	}
																}
															},
															function(H, G) {
																this.groupGridStore
																		.reload();
																this.Payrollgrid
																		.doLayout()
															})
										}
									}
								})
					},
					assignEmp : function() {
						var A = this.Payrollgrid.getSelectionModel()
								.getSelected().data;
						if (this.assEmpTT == null) {
							this.add(this.assEmpTT = new Wtf.AssignEmployeeFT({
								title : WtfGlobal.getLocaleText({
									key : "hrms.payroll.assignemployeeabc",
									params : [ A.TempName ]
								}),
								scope : this,
								iconCls : getTabIconCls(Wtf.etype.hrmsmygoals),
								closable : true,
								TempId : A.TempID,
								Gname : A.GroupName,
								Srange : A.TempRange,
								TempName : A.TempName,
								groupstore : this.groupGridStore
							}));
							this.assEmpTT.on("beforedestroy", function() {
								this.assEmpTT = null
							}, this)
						}
						this.Payrollgrid.getSelectionModel().clearSelections();
						this.editbtn.disable();
						this.editviewtempbtn.disable();
						this.deleteTempbtn.disable();
						this.assinEmp.disable();
						this.setActiveTab(this.assEmpTT);
						this.doLayout()
					}
				});
function addTemplate(A) {
	Wtf.getCmp(A).addtemplate()
}
Wtf.DeducEntryForm = function(A) {
	A.border = false;
	A.layout = "fit";
	Wtf.DeducEntryForm.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.DeducEntryForm,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.DeducEntryForm.superclass.initComponent.call(this,
								A);
						this.earncomp = 0;
						this.deduccomp = 0;
						this.netcomp = 0;
						this.amtcomp = 0;
						this.fieldsdeduc = [ {
							name : "type"
						}, {
							name : "code"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "rate"
						}, {
							name : "assigned"
						}, {
							name : "amount"
						}, {
							name : "depwage"
						}, {
							name : "depwageid"
						}, {
							name : "computeon"
						}, {
							name : "expr"
						}, {
							name : "comp"
						} ];
						this.expander = new Wtf.grid.RowExpander(
								{
									tpl : new Wtf.XTemplate(
											"<p>&nbsp;&nbsp;&nbsp;&nbsp;<b>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.compute.on")
													+ ":</b> {[this.f(values)]}</p>",
											{
												f : function(K) {
													var E = K.computeon;
													var I = Wtf.getCmp(this.id);
													if (E == "0") {
														return WtfGlobal
																.getLocaleText("hrms.payroll.currentdeductions")
													} else {
														if (E == "1") {
															return WtfGlobal
																	.getLocaleText("hrms.payroll.currentearnings")
														} else {
															if (E == "2") {
																return WtfGlobal
																		.getLocaleText("hrms.payroll.netsalary")
															} else {
																if (E == "3") {
																	var B = "";
																	var M = K.expr
																			.split("(add)");
																	I.storededuc
																			.clearFilter(true);
																	for ( var F = 0; F < M.length; F++) {
																		var L = M[F]
																				.split("(sub)");
																		for ( var G = 0; G < L.length; G++) {
																			var H = L[G]
																					.split("*");
																			var D = 1;
																			var J;
																			if (H.length > 1) {
																				D = H[0];
																				J = H[1]
																			} else {
																				J = H[0]
																			}
																			if (J == -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * <b>"
																						+ WtfGlobal
																								.getLocaleText("hrms.payroll.template.basic")
																						+ "</b>"
																			}
																			var C = I.storededuc
																					.find(
																							"id",
																							J);
																			if (C > -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * "
																						+ I.storededuc
																								.getAt(
																										C)
																								.get(
																										"type")
																			}
																		}
																	}
																	return B
																} else {
																	return WtfGlobal
																			.getLocaleText("hrms.common.n.a")
																}
															}
														}
													}
												}
											}, this)
								});
						this.fieldsdeduc = Wtf.data.Record
								.create(this.fieldsdeduc);
						this.readerdeduc = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.fieldsdeduc);
						this.storededuc = new Wtf.data.Store({
							url : "Payroll/Deduction/getDeductionMaster.py",
							method : "GET",
							reader : this.readerdeduc
						});
						this.storededucforgrid = new Wtf.data.Store({
							url : "Payroll/Deduction/getDefualtDeduction.py",
							method : "GET",
							reader : this.readerdeduc
						});
						this.storededucforgrid.load({
							params : {
								type : "getDefualtDeduction",
								start : 0,
								grouper : "addpayroll",
								limit : 15
							}
						});
						this.storededucforgrid.on("load", function() {
							var B = this.storededucforgrid.query("computeon",
									"2");
							this.deduccomp = B.length;
							this.addemptyrec()
						}, this);
						this.Dtypecombo = new Wtf.form.ComboBox(
								{
									store : this.storededuc,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.DeductionTypeName"),
									displayField : "type",
									mode : "local",
									forceSelection : true,
									valueField : "type",
									scope : this,
									width : 180,
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(C, D, B) {
											this.insertrate = this.DeductionGridPanel
													.getSelectionModel()
													.getSelected();
											this.insertrateRate = D.get("cash");
											this.insertrateCode = D.get("code");
											this.insertrateId = D.get("id");
											this.insertratetype = D.get("type");
											this.insertrateratetype = D
													.get("rate");
											this.insertratedepwage = D
													.get("depwage");
											this.insertratedepwageid = D
													.get("depwageid");
											this.insertratecomputeon = D
													.get("computeon");
											this.insertrateexpr = D.get("expr")
										}
									}
								});
						this.Dtypecombo.on("expand", function(B, C) {
							this.storededuc.filter("comp", "deduc")
						}, this);
						this.text = new Wtf.form.NumberField({
							allowNegative : false
						});
						this.checkboxselmodel = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this
								});
						this.cmdeduc = new Wtf.grid.ColumnModel(
								[
										this.expander,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.DeductionType"),
											dataIndex : "type",
											width : 200,
											editor : this.Dtypecombo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.code"),
											dataIndex : "code"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.value"),
											dataIndex : "cash",
											renderer : function(F, E, B, G, D,
													C) {
												if (B.data.rate == "1") {
													return ('<div align="right">'
															+ parseFloat(F)
																	.toFixed(2) + " %</div>")
												} else {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.payrollcurrencyRenderer(F) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.percent.of"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											renderer : this.rendererfun
													.createDelegate(this)
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											dataIndex : "",
											width : 35,
											renderer : function(D, C, B) {
												if (B.data.id != "-1") {
													return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.common.DeleteRecord")
															+ "></div></div>"
												}
											}
										} ]);
						this.storededuc1 = new Wtf.data.Store({
							url : Wtf.req.base + "PayrollHandler.jsp",
							method : "GET"
						});
						this.storededuc.load({
							params : {
								allflag : "true",
								type : "Deduction",
								cname : "aa",
								empcont : "true",
								grouper : "addpayroll",
								wage : "true"
							}
						});
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							scope : this
						});
						this.DeductionGridPanel = new Wtf.grid.EditorGridPanel(
								{
									scope : this,
									clicksToEdit : 1,
									displayField : "type",
									store : this.storededucforgrid,
									cm : this.cmdeduc,
									sm : this.checkboxselmodel,
									stripeRows : true,
									id : this.id + "adddeducgrid",
									listeners : {
										scope : this,
										cellclick : function(B, C, E, D) {
											if (C == B.getStore().getCount() - 1) {
											}
										}
									},
									autoScroll : true,
									title : WtfGlobal
											.getLocaleText("hrms.common.Deductions"),
									plugins : this.expander,
									height : 440,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.Nowageassignedforcurrentsalarytemplate"))
									}
								});
						this.add(this.DeductionGridPanel);
						this.DeductionGridPanel
								.on(
										"validateedit",
										function(E) {
											this.currentedit = E.record;
											var D = this.DeductionGridPanel
													.getStore()
													.findBy(
															function(F) {
																if (F.data.type == E.value) {
																	return true
																}
															}, this);
											if (D == -1) {
												if (this.insertrateratetype == "0") {
													this.amtcomp++
												}
												if (this.insertratecomputeon == "0") {
													if (this.amtcomp == 0) {
														Wtf.MessageBox
																.show({
																	title : WtfGlobal
																			.getLocaleText("hrms.payroll.Operationnotpermitted"),
																	msg : WtfGlobal
																			.getLocaleText("hrms.payroll.Pleaseselectatleastonefixeddeductioncomponentfirst"),
																	buttons : Wtf.MessageBox.OK,
																	animEl : "mb9",
																	scope : this,
																	icon : Wtf.MessageBox.INFO
																});
														this.cancel = true;
														return false
													} else {
														if (this.deduccomp > 0
																|| this.netcomp > 0) {
															Wtf.MessageBox
																	.show({
																		title : WtfGlobal
																				.getLocaleText("hrms.payroll.Operationnotpermitted"),
																		msg : WtfGlobal
																				.getLocaleText("hrms.payroll.YoucannotincludetwocomponentsontypeCurrentEarning"),
																		buttons : Wtf.MessageBox.OK,
																		animEl : "mb9",
																		scope : this,
																		icon : Wtf.MessageBox.INFO
																	});
															this.cancel = true;
															return false
														} else {
															this.deduccomp++;
															this
																	.insertcomp(E.column)
														}
													}
												} else {
													if (this.insertratecomputeon == "1") {
														var C = this.id
																.split("adddeduc");
														if (C.length > 0) {
															var B = Wtf
																	.getCmp(C[0]
																			+ "addwage");
															if (B != null) {
																if (B.deduccomp > 0
																		|| B.netcomp > 0) {
																	Wtf.MessageBox
																			.show({
																				title : WtfGlobal
																						.getLocaleText("hrms.payroll.Operationnotpermitted"),
																				msg : WtfGlobal
																						.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinWageDeductionyoucannotincludeWagedependentcomponentinDeduction"),
																				buttons : Wtf.MessageBox.OK,
																				animEl : "mb9",
																				scope : this,
																				icon : Wtf.MessageBox.INFO
																			});
																	this.cancel = true;
																	return false
																} else {
																	this.earncomp++;
																	this
																			.insertcomp(E.column);
																	this.amtcomp++
																}
															}
														}
													} else {
														if (this.insertratecomputeon == "2") {
															if (this.deduccomp > 0
																	|| this.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																var C = this.id
																		.split("adddeduc");
																if (C.length > 0) {
																	var B = Wtf
																			.getCmp(C[0]
																					+ "addwage");
																	if (B != null) {
																		if (B.deduccomp > 0
																				|| B.netcomp > 0) {
																			Wtf.MessageBox
																					.show({
																						title : WtfGlobal
																								.getLocaleText("hrms.payroll.Operationnotpermitted"),
																						msg : WtfGlobal
																								.getLocaleText("hrms.payroll.AsyouhaveincludedcomponentinWageDeductionyoucannotincludeWagedependentcomponentinDeduction"),
																						buttons : Wtf.MessageBox.OK,
																						animEl : "mb9",
																						scope : this,
																						icon : Wtf.MessageBox.INFO
																					});
																			this.cancel = true;
																			return false
																		} else {
																			this.netcomp++;
																			this
																					.insertcomp(E.column)
																		}
																	}
																}
															}
															this.amtcomp++
														} else {
															if (this.insertratecomputeon == "3") {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.SomeDependenceSureYouWanttoContinue"),
																			buttons : Wtf.MessageBox.YESNO,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO,
																			fn : function(
																					F,
																					G) {
																				if (F == "yes") {
																					this
																							.insertcomp(E.column);
																					this.storededuc
																							.clearFilter(true);
																					this
																							.getdep(this.insertrateexpr);
																					this.storededuc
																							.filter(
																									"comp",
																									"deduc")
																				} else {
																					this.DeductionGridPanel
																							.getStore()
																							.remove(
																									E.record);
																					this.cancel = true;
																					return false
																				}
																			}
																		});
																this.amtcomp++
															} else {
																this
																		.insertcomp(E.column)
															}
														}
													}
												}
											} else {
												this.cancel = true;
												return false
											}
											if (E.record.data.rate == "1") {
												if (E.record.data.cash > 100) {
													return false
												}
											}
										}, this);
						this.DeductionGridPanel
								.on(
										"afteredit",
										function(B) {
											if (B.row == this.DeductionGridPanel
													.getStore().getCount() - 1) {
												this.addemptyrec();
												this.DeductionGridPanel
														.getSelectionModel()
														.selectAll();
												this.DeductionGridPanel
														.getSelectionModel()
														.deselectRow(
																this.DeductionGridPanel
																		.getStore()
																		.getCount() - 1)
											}
										}, this);
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.storededuc
								.on(
										"load",
										function() {
											if (this.edittemp == "yes") {
												for (this.i = 0; this.i < this.DeductionGridPanel
														.getStore().getCount() - 1; this.i++) {
													this.rec = this.DeductionGridPanel
															.getStore().getAt(
																	this.i);
													if (this.rec
															.get("assigned") == "1") {
														this.checkboxselmodel
																.selectRow(
																		this.i,
																		true)
													}
												}
											}
										}, this);
						if (this.edittemp == "yes") {
							this.storededucforgrid
									.on(
											"load",
											function() {
												var B = this.storewageforgrid
														.query("computeon", "1");
												var D = this.storewageforgrid
														.query("computeon", "2");
												var C = this.storewageforgrid
														.query("computeon", "0");
												this.earncomp = B.length;
												this.netcomp = D.length;
												this.deduccomp = C.length;
												this.DeductionGridPanel
														.getSelectionModel()
														.selectAll();
												this.DeductionGridPanel
														.getSelectionModel()
														.deselectRow(
																this.DeductionGridPanel
																		.getStore()
																		.getCount() - 1)
											}, this)
						}
						this.DeductionGridPanel
								.on(
										"click",
										function(F) {
											if (F.target.className == "pwndCommon gridCancel") {
												var E = this.DeductionGridPanel
														.getSelectionModel()
														.getSelected();
												if (this.DeductionGridPanel
														.getSelectionModel()
														.getSelections().length > 0) {
													if (this.DeductionGridPanel
															.getStore()
															.indexOf(E) != this.DeductionGridPanel
															.getStore()
															.getCount() - 1) {
														for ( var G = 0; G < this.DeductionGridPanel
																.getStore().data.length; G++) {
															var B = this.DeductionGridPanel
																	.getStore()
																	.getAt(G).data.expr;
															if (B != undefined) {
																if (B
																		.indexOf(E.data.id) != -1) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.CannotdeletedSomeothercomponentsaredependsonthiswage") ],
																			2);
																	return
																}
															}
														}
														var D = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).taxentryform1.storetaxforgrid
																: Wtf
																		.getCmp(this.parentId).taxentryform.storetaxforgrid;
														var C = (this.edittemp == "yes") ? Wtf
																.getCmp(this.parentId).deductionentryform1.storededuc
																: Wtf
																		.getCmp(this.parentId).deductionentryform.storededuc;
														for (G = 0; G < C.data.length; G++) {
															var B = C.getAt(G).data.expr;
															if (B
																	.indexOf(E.data.id) != -1) {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.warning"),
																				WtfGlobal
																						.getLocaleText("hrms.payroll.CannotdeletedSomeothercomponentsaredependsonthiswage") ],
																		2);
																return
															}
														}
														this.DeductionGridPanel
																.getStore()
																.remove(
																		this.DeductionGridPanel
																				.getSelectionModel()
																				.getSelected());
														if (E.get("rate") == 0) {
															this.amtcomp--
														}
														if (E.get("computeon") == 0) {
															this.deduccomp--
														} else {
															if (E
																	.get("computeon") == 1) {
																this.earncomp--;
																this.amtcomp--
															} else {
																if (E
																		.get("computeon") == 2) {
																	this.netcomp--;
																	this.amtcomp--
																} else {
																	if (E
																			.get("computeon") == 3) {
																		this.amtcomp--
																	} else {
																		Wtf
																				.getCmp(
																						"editTemp")
																				.enable()
																	}
																}
															}
														}
													}
												}
											}
										}, this);
						this.record = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "code"
						} ])
					},
					addemptyrec : function() {
						this.DeductionGridPanel.getStore().add(
								new this.record({
									type : "",
									cash : "",
									id : "-1",
									code : ""
								}))
					},
					rendererfun : function(F, K, J, O, G, N) {
						if (J.get("rate") == 0) {
							return "-"
						}
						if (F == "0") {
							return WtfGlobal
									.getLocaleText("hrms.payroll.currentdeductions")
						} else {
							if (F == "1") {
								return WtfGlobal
										.getLocaleText("hrms.payroll.currentearnings")
							} else {
								if (F == "2") {
									return WtfGlobal
											.getLocaleText("hrms.payroll.netsalary")
								} else {
									if (F == "3") {
										var A = "";
										var M = J.get("expr").split("(add)");
										this.storededuc.clearFilter(true);
										for ( var E = 0; E < M.length; E++) {
											var L = M[E].split("(sub)");
											for ( var D = 0; D < L.length; D++) {
												var H = L[D].split("*");
												var C = 1;
												var I;
												if (H.length > 1) {
													C = H[0];
													I = H[1]
												} else {
													I = H[0]
												}
												if (I == -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * <b>"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.template.basic")
															+ "</b>"
												}
												var B = this.storededuc.find(
														"id", I);
												if (B > -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * "
															+ this.storededuc
																	.getAt(B)
																	.get("type")
												}
											}
										}
										this.storededuc.filter("comp", "deduc");
										return A
									}
								}
							}
						}
					},
					insertcomp : function(A) {
						this.insertrate = this.currentedit;
						if (A == 1) {
							this.insertrate.beginEdit();
							this.insertrate.set("cash", this.insertrateRate);
							this.insertrate.set("code", this.insertrateCode);
							this.insertrate.set("id", this.insertrateId);
							this.insertrate
									.set("rate", this.insertrateratetype);
							this.insertrate.set("depwage",
									this.insertratedepwage);
							this.insertrate.set("type", this.insertratetype);
							this.insertrate.set("depwageid",
									this.insertratedepwageid);
							this.insertrate.set("computeon",
									this.insertratecomputeon);
							this.insertrate.set("expr", this.insertrateexpr);
							this.insertrate.endEdit()
						}
					},
					getdep : function(N) {
						var M = N.split("(add)");
						for ( var B = 0; B < M.length; B++) {
							var L = M[B].split("(sub)");
							for ( var C = 0; C < L.length; C++) {
								var E = L[C].split("*");
								var G;
								if (E.length > 1) {
									G = E[1]
								} else {
									G = E[0]
								}
								var H = this.DeductionGridPanel.getStore()
										.find("id", G);
								if (H == -1 && L[C] != "") {
									var A = this.storededuc.find("id", G);
									if (A > -1) {
										var I;
										var D;
										var K = this.storededuc.getAt(A);
										if (K.get("comp") == "deduc") {
											this.DeductionGridPanel.getStore()
													.insert(0, K)
										} else {
											if (K.get("comp") == "wage") {
												D = this.id.split("adddeduc");
												if (D.length > 0) {
													var F = Wtf.getCmp(D[0]
															+ "addwage");
													if (F != null) {
														I = F.storewageforgrid
																.find("id", G);
														if (I == -1) {
															F.addrecord(K)
														}
													}
												}
											} else {
												D = this.id.split("adddeduc");
												if (D.length > 0) {
													var J = Wtf.getCmp(D[0]
															+ "addempcontrib");
													if (J != null) {
														I = J.storewageforgrid
																.find("id", G);
														if (I == -1) {
															J.addrecord(K)
														}
													}
												}
											}
										}
										if (K.get("computeon") == "3") {
											this.getdep(K.get("expr"))
										}
									}
								}
							}
						}
					},
					addrecord : function(A) {
						this.DeductionGridPanel.getStore().insert(0, A)
					}
				});
Wtf.ApproveReportsWin = function(A) {
	Wtf.apply(this, A);
	this.save = true;
	Wtf.ApproveReportsWin.superclass.constructor.call(this, {
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			id : "btnsave",
			handler : function() {
				this.saveAuthorizeStatus()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	})
};
Wtf
		.extend(
				Wtf.ApproveReportsWin,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.ApproveReportsWin.superclass.initComponent
								.call(this);
						this.GetNorthPanel();
						this.GetCenterPanel();
						this.GetSouthPanel();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							items : [ this.northPanel, this.reportGrid,
									this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 75,
									border : false,
									bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(
											WtfGlobal
													.getLocaleText("hrms.common.authorize.statutory.information"),
											WtfGlobal
													.getLocaleText("hrms.common.authorize.statutory.information.selected.employee"),
											"images/assign-manager.gif")
								})
					},
					GetCenterPanel : function() {
						var B = [
								[
										"1",
										Wtf.Malaysian_StatutoryForm_AmanahSahamNasional ],
								[ "2", Wtf.Malaysian_StatutoryForm_CP39 ],
								[ "3", Wtf.Malaysian_StatutoryForm_CP39A ],
								[ "4", Wtf.Malaysian_StatutoryForm_CP21 ],
								[ "5", Wtf.Malaysian_StatutoryForm_HRDLevy ],
								[ "6", Wtf.Malaysian_StatutoryForm_PCB2 ],
								[ "7", Wtf.Malaysian_StatutoryForm_TabungHaji ],
								[ "8", Wtf.Malaysian_StatutoryForm_TP1 ],
								[ "9", Wtf.Malaysian_StatutoryForm_TP2 ],
								[ "10", Wtf.Malaysian_StatutoryForm_TP3 ],
								[ "11", Wtf.Malaysian_StatutoryForm_EA ] ];
						var A = new Wtf.data.SimpleStore({
							fields : [ {
								name : "id"
							}, {
								name : "name"
							} ]
						});
						A.loadData(B);
						this.sm2 = new Wtf.grid.CheckboxSelectionModel();
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.statutory.form"),
											dataIndex : "name"
										} ]);
						this.reportGrid = new Wtf.grid.GridPanel({
							region : "center",
							id : this.id + "authorize_statutory_form_win",
							store : A,
							cm : this.cm,
							loadMask : true,
							displayInfo : true,
							sm : this.sm2,
							enableColumnHide : false,
							trackMouseOver : true,
							clicksToEdit : 1,
							autoScroll : true,
							stripeRows : true,
							searchLabel : " ",
							searchLabelSeparator : " ",
							viewConfig : {
								forceFit : true
							}
						})
					},
					GetSouthPanel : function() {
						var B = [
								[
										"0",
										WtfGlobal
												.getLocaleText("hrms.recruitment.pending") ],
								[
										"1",
										WtfGlobal
												.getLocaleText("hrms.common.authorize") ],
								[
										"2",
										WtfGlobal
												.getLocaleText("hrms.common.unauthorize") ] ];
						var A = new Wtf.data.SimpleStore({
							fields : [ {
								name : "id"
							}, {
								name : "name"
							} ]
						});
						A.loadData(B);
						this.actionStoreCmb = new Wtf.form.ComboBox({
							triggerAction : "all",
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.action"),
							hiddenName : "action",
							mode : "local",
							valueField : "id",
							displayField : "name",
							store : A,
							width : 150,
							typeAhead : true,
							value : 0
						});
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "south",
									height : 55,
									border : false,
									bodyStyle : "background-color:#f1f1f1;padding:35px 55px 45px 145px",
									items : [ this.actionStoreCmb ]
								})
					},
					saveAuthorizeStatus : function() {
						var C = [];
						var E = this.reportGrid.getSelectionModel();
						if (E.getCount() < 1) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.common.select.form.perform.action") ],
									0);
							return
						}
						var A = [];
						var D = E.getSelections();
						for ( var B = 0; B < D.length; B++) {
							A.push(D[B].get("id"))
						}
						for ( var B = 0; B < this.emparr.length; B++) {
							C.push(this.emparr[B].get("userid"))
						}
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.common.save.data.selected.employee"),
										function(F) {
											if (F != "yes") {
												return
											}
											Wtf
													.commonWaitMsgBox(WtfGlobal
															.getLocaleText("hrms.common.Savingdata"));
											Wtf.Ajax
													.requestEx(
															{
																url : "Payroll/MalaysianStatutoryForm/authorizeStatutoryFormsData.py",
																params : {
																	empids : C,
																	formarr : A,
																	month : this.month,
																	year : this.year,
																	action : this.actionStoreCmb
																			.getValue()
																}
															},
															this,
															function(G, H) {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.success"),
																				WtfGlobal
																						.getLocaleText("hrms.Messages.calMsgBoxShow133") ],
																		0, 0);
																this.close();
																this.grid
																		.getStore()
																		.reload()
															}, function() {
																calMsgBoxShow(
																		27, 1)
															})
										}, this)
					}
				});
Wtf.authorizeStatusWin = function(A) {
	Wtf.apply(this, A);
	Wtf.authorizeStatusWin.superclass.constructor.call(this, {
		buttonAlign : "right",
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Close"),
			scope : this,
			handler : function() {
				this.close()
			}
		} ]
	})
};
Wtf
		.extend(
				Wtf.authorizeStatusWin,
				Wtf.Window,
				{
					group_id : "",
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(B) {
						Wtf.authorizeStatusWin.superclass.onRender
								.call(this, B);
						this.availablesm = new Wtf.grid.CheckboxSelectionModel(
								{
									singleSelect : true
								});
						this.availablecm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.availablesm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.UserName"),
											dataIndex : "username"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname"
										} ]);
						this.availablegrid = new Wtf.grid.EditorGridPanel({
							height : 100,
							store : this.empGDS,
							cm : this.availablecm,
							border : false,
							id : this.id + "compavailablegrid",
							sm : this.availablesm,
							autoScroll : true,
							searchField : "code",
							serverSideSearch : true,
							searchEmptyText : WtfGlobal
									.getLocaleText("hrms.payroll.search.code"),
							viewConfig : {
								forceFit : true,
								autoFill : true
							}
						});
						this.selectedRec = new Wtf.data.Record.create([ {
							"name" : "formName"
						}, {
							"name" : "status"
						} ]);
						var A = "Payroll/MalaysianStatutoryForm/getStatusForStatutoryForms.py";
						var C = new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.selectedRec);
						this.selectedds = new Wtf.data.Store({
							url : A,
							baseParams : {
								month : this.month,
								year : this.year
							},
							reader : C,
							autoLoad : false
						});
						this.selectedcm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.statutory.form"),
											dataIndex : "formName",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "status",
											renderer : function(D) {
												return Wtf
														.getStatutoryFormAuthorizeRenderer(D)
											}
										} ]);
						this.selectedgrid = new Wtf.grid.EditorGridPanel(
								{
									height : 100,
									store : this.selectedds,
									cm : this.selectedcm,
									autoScroll : true,
									border : false,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.recruitment.job.grid.msg"))
									}
								});
						this.assignTeamPanel = new Wtf.Panel(
								{
									layout : "border",
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												cls : "formstyleClass",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.payroll.view.statutory.form.status"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.employee.view.statutory.form.status"),
														"images/assign-manager.gif")
											},
											{
												region : "center",
												border : false,
												layout : "fit",
												items : [ {
													border : false,
													bodyStyle : "background:transparent;",
													layout : "border",
													items : [
															{
																region : "west",
																border : true,
																width : 350,
																layout : "fit",
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.common.Employees"),
																	border : true,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.availablegrid
																} ]
															},
															{
																region : "center",
																layout : "fit",
																border : true,
																items : [ {
																	xtype : "KWLListPanel",
																	title : WtfGlobal
																			.getLocaleText("hrms.payroll.statutory.forms.status"),
																	border : true,
																	paging : false,
																	layout : "fit",
																	autoLoad : false,
																	items : this.selectedgrid
																} ]
															} ]
												} ]
											} ]
								});
						this.add(this.assignTeamPanel);
						this.availablesm.on("rowselect", function(F, E, D) {
							this.selectedds.load({
								params : {
									userid : D.data.userid
								}
							})
						}, this)
					}
				});
Wtf.UnautorizeSalaryWin = function(A) {
	Wtf.apply(this, A);
	this.save = true;
	Wtf.UnautorizeSalaryWin.superclass.constructor.call(this, {
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			id : "btnsave",
			handler : function() {
				this.saveAuthorizeStatus()
			},
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	})
};
Wtf
		.extend(
				Wtf.UnautorizeSalaryWin,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.UnautorizeSalaryWin.superclass.initComponent
								.call(this);
						this.GetNorthPanel();
						this.GetCenterPanel();
						this.GetSouthPanel();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							items : [ this.northPanel, this.reportGrid,
									this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 75,
									border : false,
									bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(
											WtfGlobal
													.getLocaleText("hrms.payroll.unauthorize.payroll"),
											WtfGlobal
													.getLocaleText("hrms.payroll.unauthorize.payroll.selected.employee"),
											"images/assign-manager.gif")
								})
					},
					GetCenterPanel : function() {
						this.sm2 = new Wtf.grid.CheckboxSelectionModel();
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											dataIndex : "payhistoryid",
											hidden : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.resource"),
											dataIndex : "employeeid"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname"
										} ]);
						this.reportGrid = new Wtf.grid.GridPanel({
							region : "center",
							id : this.id + "authorize_statutory_form_win",
							store : this.empGDS,
							cm : this.cm,
							loadMask : true,
							displayInfo : true,
							sm : this.sm2,
							enableColumnHide : false,
							trackMouseOver : true,
							clicksToEdit : 1,
							autoScroll : true,
							stripeRows : true,
							searchLabel : " ",
							searchLabelSeparator : " ",
							viewConfig : {
								forceFit : true
							}
						})
					},
					GetSouthPanel : function() {
						this.comment = new Wtf.ux.TextArea({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Comment"),
							scope : this,
							width : 200,
							maxLength : 255,
							name : "unauthorize_comment"
						});
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "south",
									height : 100,
									border : false,
									bodyStyle : "background-color:#f1f1f1;padding:15px 55px 45px 155px",
									items : [ this.comment ]
								})
					},
					saveAuthorizeStatus : function() {
						var historyid = [];
						if (!this.AddEditForm.form.isValid()) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.payroll.enter.valid.comment") ],
									0);
							return
						}
						var sel = this.sm2.selections;
						if (sel.length == 0) {
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.payroll.select.record.authorized.salary") ],
									0);
							return
						}
						var htmlString = WtfGlobal
								.getLocaleText("hrms.payroll.unauthorize.selected.employee.salary");
						for ( var i = 0; i < sel.length; i++) {
							if (sel.items[i].get("status") == 2
									|| sel.items[i].get("status") == 3) {
								historyid
										.push(sel.items[i].get("payhistoryid"))
							}
						}
						var comment = this.comment.getValue();
						comment = WtfGlobal.replaceAll(comment, "'", "&#39;");
						comment = WtfGlobal.replaceAll(comment, '"', "&#34;");
						comment = WtfGlobal.replaceAll(comment, "\\\\", "\\\\");
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										htmlString,
										function(btn) {
											if (btn != "yes") {
												return
											}
											calMsgBoxShow(200, 4, true);
											Wtf.Ajax
													.requestEx(
															{
																url : "Payroll/Date/updatePayrollHistory.py",
																params : {
																	historyid : historyid,
																	statusid : 4,
																	comment : comment
																}
															},
															this,
															function(response) {
																var res = eval("("
																		+ response
																		+ ")");
																if (res.success == true) {
																	Wtf.notify
																			.msg(
																					WtfGlobal
																							.getLocaleText("hrms.common.success"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.salary.unauthorized.successfully"));
																	this.grid
																			.getStore()
																			.reload();
																	this
																			.close()
																} else {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.error"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.some.error.while.unauthorizing") ],
																			2)
																}
															},
															function() {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.error"),
																				WtfGlobal
																						.getLocaleText("hrms.payroll.some.error.while.unauthorizing") ],
																		2)
															})
										}, this)
					}
				});
Wtf.MalaysianUserIncomeTaxForm = function(A) {
	Wtf.apply(this, A);
	Wtf.MalaysianUserIncomeTaxForm.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.MalaysianUserIncomeTaxForm,
				Wtf.Panel,
				{
					layout : "fit",
					closable : false,
					initComponent : function() {
						Wtf.MalaysianUserIncomeTaxForm.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						var D = [];
						var H = this.getUserInformationFieldSet();
						var I = this.getCurrentEmployerFieldSet();
						var B = this.getPreviousEmployerFieldSet();
						D.push(H);
						D.push(I);
						D.push(B);
						var E = this.getComponent(this.compulsoryDeductions,
								"(Compulsory Deductions)", 0);
						var F = this.getComponent(this.optionalDeductions,
								"Optional Deductions", 1);
						var G = this.getComponent(this.allowanceDeductions,
								"(Allowance Deductions)", 0);
						for ( var C = 0; C < E.length; C++) {
							D.push(E[C])
						}
						for ( var C = 0; C < F.length; C++) {
							D.push(F[C])
						}
						for ( var C = 0; C < G.length; C++) {
							D.push(G[C])
						}
						this.deductionFormPanel = new Wtf.form.FormPanel(
								{
									labelWidth : 600,
									autoScroll : true,
									baseParams : {
										userid : this.userid,
										year : this.year
									},
									url : "Payroll/MalaysianIncomeTax/saveUserIncomeTaxInformation.py",
									border : true,
									bodyBorder : false,
									style : "padding-left:20px; padding-top:20px",
									id : "deductionFormPanel" + this.usrid,
									items : D
								});
						this.mainPanel = new Wtf.Panel(
								{
									layout : "fit",
									border : false,
									scope : this,
									items : [ this.deductionFormPanel ],
									bbar : [
											"->",
											{
												id : "Submit" + this.usrid,
												iconCls : getButtonIconCls(Wtf.btype.submitbutton),
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												handler : this.submit
														.createDelegate(this)
											} ]
								});
						this.add(this.mainPanel);
						Wtf.MalaysianUserIncomeTaxForm.superclass.onRender
								.call(this, A)
					},
					submit : function() {
						if (this.deductionFormPanel.form.isValid()) {
							this.deductionFormPanel
									.getForm()
									.submit(
											{
												waitMsg : WtfGlobal
														.getLocaleText("hrms.payroll.saving.incometax.information"),
												success : function() {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.user.incometax.saved.successfully"))
												},
												failure : function(B, A) {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.error.saving.user.incometax"))
												},
												scope : this
											})
						} else {
							ResponseAlert(152)
						}
					},
					getComponent : function(E, A, K) {
						var L = [];
						var G;
						var F = [];
						var J = [];
						var H = [];
						for ( var D = 0; D < E.length; D++) {
							if (E[D].parent.length == 0) {
								if (E[D].datatype == 1) {
									G = new Wtf.form.NumberField(
											{
												fieldLabel : E[D].name
														+ WtfGlobal
																.addLabelHelp(E[D].description),
												name : E[D].id,
												maxLength : 10,
												allowNegative : false,
												scope : this,
												id : E[D].id + this.usrid,
												value : E[D].value
											});
									F.push(G)
								} else {
									if (E[D].datatype == 2) {
										G = new Wtf.form.Checkbox(
												{
													fieldLabel : E[D].name
															+ WtfGlobal
																	.addLabelHelp(E[D].description),
													name : E[D].id,
													id : E[D].id + this.usrid,
													checked : E[D].uniquecode == 3 ? true
															: E[D].value
												});
										J.push(G)
									}
								}
							} else {
								var M = [];
								for ( var C = 0; C < E[D].parent.length; C++) {
									if (E[D].parent[C].datatype == 1) {
										var B = 10;
										if (E[D].parent[C].uniquecode > 5
												&& E[D].parent[C].uniquecode < 11) {
											B = 2
										}
										M
												.push(new Wtf.form.NumberField(
														{
															fieldLabel : E[D].parent[C].name
																	+ WtfGlobal
																			.addLabelHelp(E[D].parent[C].description),
															name : E[D].parent[C].id,
															maxLength : B,
															allowNegative : false,
															scope : this,
															id : E[D].parent[C].id
																	+ this.usrid,
															value : E[D].parent[C].value
														}))
									} else {
										if (E[D].parent[C].datatype == 2) {
											M
													.push(new Wtf.form.Checkbox(
															{
																fieldLabel : E[D].parent[C].name
																		+ WtfGlobal
																				.addLabelHelp(E[D].parent[C].description),
																name : E[D].parent[C].id,
																id : E[D].parent[C].id
																		+ this.usrid,
																checked : E[D].parent[C].uniquecode == 3 ? true
																		: E[D].parent[C].value
															}))
										}
									}
								}
								G = new Wtf.form.FieldSet(
										{
											title : E[D].name + " " + A,
											style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
											width : "95%",
											autoHeight : true,
											items : M
										});
								H.push(G)
							}
						}
						var I = [];
						for ( var D = 0; D < J.length; D++) {
							I.push(J[D])
						}
						for ( var D = 0; D < F.length; D++) {
							I.push(F[D])
						}
						for ( var D = 0; D < H.length; D++) {
							L.push(H[D])
						}
						if (I.length > 0) {
							G = new Wtf.form.FieldSet(
									{
										title : K == 0 ? ("Other Details " + A)
												: A,
										style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
										width : "95%",
										autoHeight : true,
										items : I
									});
							L.push(G)
						}
						return L
					},
					getUserInformationFieldSet : function() {
						var A = [];
						this.empStatus = new Wtf.data.SimpleStore(
								{
									id : "empStatus",
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.resident") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.non.resident") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.payroll.returning.expert.program") ],
											[
													"4",
													WtfGlobal
															.getLocaleText("hrms.payroll.knowledge.worker") ] ]
								});
						this.empStatusCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.status")
											+ "*",
									hiddenName : "empstatus",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.empStatus,
									width : 230,
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.empstatus
											: "",
									allowBlank : false
								});
						A.push(this.empStatusCombo);
						this.categoryStore = new Wtf.data.SimpleStore(
								{
									id : "categoryStore",
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Single") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.married.spouse.not.working") ],
											[
													"3",
													WtfGlobal
															.getLocaleText("hrms.payroll.married.spouse.working") ] ]
								});
						this.categoryCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.category")
											+ "*",
									hiddenName : "category",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.categoryStore,
									width : 230,
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.category
											: "",
									allowBlank : false
								});
						A.push(this.categoryCombo);
						var B = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.common.user.information"),
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "95%",
									autoHeight : true,
									items : A
								});
						return B
					},
					getCurrentEmployerFieldSet : function() {
						var B = [];
						var F = new Wtf.form.Checkbox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.epf")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.check.to.allow.deduction.epf")),
									scope : this,
									name : "current_epf",
									checked : this.userdata != undefined ? this.userdata.epf
											: false
								});
						B.push(F);
						var E = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.life.insurance")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.total.deduction.life.insurance.epf.6000.year")),
									scope : this,
									name : "current_lic",
									value : this.userdata != undefined ? this.userdata.lic
											: 0
								});
						B.push(E);
						var A = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.zakat.fees.levy.paid")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.enter.amount.deducted.for.zakat")),
									scope : this,
									name : "current_zakat",
									value : this.userdata != undefined ? this.userdata.zakat
											: 0
								});
						B.push(A);
						var D = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.benefits.in.kind")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.employee.include.bik.living.accommodation.tp2.form.employer")),
									scope : this,
									name : "current_bik",
									value : this.userdata != undefined ? this.userdata.bik
											: 0
								});
						B.push(D);
						var C = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.payroll.current.employer"),
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "95%",
									autoHeight : true,
									items : B
								});
						return C
					},
					getPreviousEmployerFieldSet : function() {
						var B = [];
						var G = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.net.accumulated.remuneration")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.remuneration.previous.employer.tp3.form")),
									scope : this,
									name : "previous_earning",
									value : this.userdata != undefined ? this.userdata.prevearning
											: 0
								});
						B.push(G);
						var F = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.accumulated.mtd.paid")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.mtd.deduction.previous.employement.current.year")),
									scope : this,
									name : "previous_income_tax",
									value : this.userdata != undefined ? this.userdata.previncometax
											: 0
								});
						B.push(F);
						var D = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.accumulated.epf")
											+ " "
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.epf.deduction.previous.employment.current.year")),
									scope : this,
									name : "previous_epf",
									value : this.userdata != undefined ? this.userdata.prevepf
											: 0
								});
						B.push(D);
						var A = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.accumulated.life.insurance")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.life.insurance.previous.employment.current.year")),
									scope : this,
									name : "previous_lic",
									value : this.userdata != undefined ? this.userdata.prevlic
											: 0
								});
						B.push(A);
						var E = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.total.accumulated.zakat.fees.levy.paid")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.zakat.previous.employment.current.year")),
									scope : this,
									name : "previous_zakat",
									value : this.userdata != undefined ? this.userdata.prevzakat
											: 0
								});
						B.push(E);
						var H = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.accumulated.other.deduction")
											+ WtfGlobal
													.addLabelHelp(WtfGlobal
															.getLocaleText("hrms.payroll.net.accumulated.other.deductions.previous.employment.current.year")),
									scope : this,
									name : "previous_otherdeduction",
									value : this.userdata != undefined ? this.userdata.prevotherdeduction
											: 0
								});
						B.push(H);
						var C = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.common.PreviousEmployer"),
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "95%",
									autoHeight : true,
									items : B
								});
						return C
					}
				});
Wtf.getStatutoryFormAuthorizeRenderer = function(A) {
	if (A != null) {
		if (A == 0) {
			return WtfGlobal.getLocaleText("hrms.recruitment.pending")
		} else {
			if (A == 1) {
				return "<span style='color:green !important;'>"
						+ WtfGlobal.getLocaleText("hrms.payroll.Authorized")
						+ "</span>"
			} else {
				if (A == 2) {
					return "<span style='color:red !important;'>"
							+ WtfGlobal
									.getLocaleText("hrms.payroll.Unauthorized")
							+ "</span>"
				}
			}
		}
	} else {
		if (A == undefined) {
			return WtfGlobal.getLocaleText("hrms.recruitment.pending")
		}
	}
};
Wtf.Malaysian_StatutoryForm_AmanahSahamNasional = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.amanah.saham.nasional");
Wtf.Malaysian_StatutoryForm_TabungHaji = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.tabung.haji");
Wtf.Malaysian_StatutoryForm_CP21 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.cukai.pendapatan21");
Wtf.Malaysian_StatutoryForm_HRDLevy = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.hrd.levy");
Wtf.Malaysian_StatutoryForm_CP39 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.cp39");
Wtf.Malaysian_StatutoryForm_CP39A = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.cp39a");
Wtf.Malaysian_StatutoryForm_PCB2 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.pcb2");
Wtf.Malaysian_StatutoryForm_TP1 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.tp1");
Wtf.Malaysian_StatutoryForm_TP2 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.tp2");
Wtf.Malaysian_StatutoryForm_TP3 = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.tp3");
Wtf.Malaysian_StatutoryForm_EA = WtfGlobal
		.getLocaleText("hrms.payroll.malaysian.statutory.ea");
Wtf.MalaysianPayrollUser = function(A) {
	Wtf.apply(this, A);
	Wtf.MalaysianPayrollUser.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.MalaysianPayrollUser,
				Wtf.Panel,
				{
					initComponent : function() {
						Wtf.MalaysianPayrollUser.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						this.empGrid();
						this.pan = new Wtf.Panel({
							id : "membergridpanel" + this.id,
							autoLoad : false,
							autoScroll : true,
							paging : false,
							layout : "fit",
							items : [ this.allempGrid ]
						});
						this.add(this.pan);
						Wtf.MalaysianPayrollUser.superclass.onRender.call(this,
								A)
					},
					empGrid : function() {
						var B = this.getTopToolbarButtons();
						var A = this.getBottomToolbarButtons();
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false
						});
						this.record = Wtf.data.Record.create([ {
							name : "userid"
						}, {
							name : "username"
						}, {
							name : "designation"
						}, {
							name : "designationid"
						}, {
							name : "department"
						}, {
							name : "departmentname"
						}, {
							name : "firstname"
						}, {
							name : "lastname"
						}, {
							name : "image"
						}, {
							name : "emailid"
						}, {
							name : "lastlogin",
							type : "date"
						}, {
							name : "aboutuser"
						}, {
							name : "address"
						}, {
							name : "contactnumber"
						}, {
							name : "manager"
						}, {
							name : "managerid"
						}, {
							name : "salary"
						}, {
							name : "roleid",
							mapping : "role"
						}, {
							name : "accno"
						}, {
							name : "rolename"
						}, {
							name : "employeeid"
						}, {
							name : "status"
						}, {
							name : "fullname"
						}, {
							name : "reviewer"
						}, {
							name : "reviewerid"
						}, {
							name : "templateid"
						}, {
							name : "frequency"
						}, {
							name : "companyFormStatus"
						}, {
							name : "cp21Status"
						}, {
							name : "tp1Status"
						}, {
							name : "tp2Status"
						}, {
							name : "tp3Status"
						}, {
							name : "pcb2Status"
						}, {
							name : "eaStatus"
						} ]);
						this.empGDS = new Wtf.data.Store(
								{
									reader : new Wtf.data.KwlJsonReader({
										root : "data",
										totalProperty : "count"
									}, this.record),
									url : "Payroll/MalaysianStatutoryForm/getUserListForMalaysia.py",
									baseParams : {
										mode : 114
									}
								});
						this.empGDS.on("beforeload", function(C, D) {
							D.params = D.params || {};
							D.params.month = this.monthCmb.getValue();
							D.params.year = this.yearCmb.getValue()
						}, this);
						calMsgBoxShow(202, 4, true);
						this.empGDS.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.empGDS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm2,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.id"),
											dataIndex : "employeeid",
											autoWidth : true,
											pdfwidth : 50,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.UserName"),
											dataIndex : "username",
											pdfwidth : 60,
											autoWidth : true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "fullname",
											autoWidth : true,
											pdfwidth : 100,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.department"),
											dataIndex : "departmentname",
											autoWidth : true,
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											dataIndex : "designation",
											autoWidth : true,
											pdfwidth : 60,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EmailAddress"),
											dataIndex : "emailid",
											autoSize : true,
											sortable : true,
											pdfwidth : 100,
											renderer : WtfGlobal.renderEmailTo,
											groupable : true
										} ]);
						this.allempGrid = new Wtf.KwlGridPanel({
							border : false,
							id : this.id + "qualifiedgr",
							store : this.empGDS,
							cm : this.cm,
							sm : this.sm2,
							loadMask : true,
							displayInfo : true,
							enableColumnHide : false,
							trackMouseOver : true,
							clicksToEdit : 1,
							stripeRows : true,
							searchLabel : " ",
							searchLabelSeparator : " ",
							searchEmptyText : WtfGlobal
									.getLocaleText("hrms.admin.grid.search"),
							searchField : "fullname",
							tbar : B,
							bbar : A,
							serverSideSearch : true,
							viewConfig : {
								forceFit : true
							}
						});
						this.sm2.on("selectionchange", function() {
							var C = this.allempGrid.getSelectionModel()
									.getCount();
							if (C == 1) {
								this.taxDeclaration.setDisabled(false);
								this.statutoryFomrDetails.setDisabled(false)
							} else {
								this.taxDeclaration.setDisabled(true);
								this.statutoryFomrDetails.setDisabled(true)
							}
						}, this)
					},
					getBottomToolbarButtons : function() {
						var A = [];
						this.authorizebtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.authorize"),
									scope : this,
									iconCls : "pwndHRMS authorizeComponentIcon",
									handler : function() {
										var C = this.allempGrid
												.getSelectionModel();
										var B = C.getSelections();
										if (C.getCount() < 1) {
											calMsgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.Alert"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.select.employee.authorize.unauthorize.data") ],
													0);
											return
										}
										this.compWindow = new Wtf.ApproveReportsWin(
												{
													iconCls : getButtonIconCls(Wtf.btype.winicon),
													layout : "fit",
													closable : true,
													width : 600,
													title : WtfGlobal
															.getLocaleText("hrms.common.authorize"),
													height : 500,
													border : false,
													modal : true,
													id : "assign_authorize_window",
													scope : this,
													emparr : B,
													grid : this.allempGrid,
													month : this.monthCmb
															.getValue(),
													year : this.yearCmb
															.getValue()
												});
										this.compWindow.show()
									}
								});
						A.push("-");
						A.push(this.authorizebtn);
						this.authorizeViewbtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.view.authorize.status"),
									scope : this,
									iconCls : "pwndHRMS viewbuttonIcon",
									handler : function() {
										var C = this.allempGrid
												.getSelectionModel();
										var B = C.getSelections();
										if (C.getCount() < 1) {
											calMsgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.Alert"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.select.employee.authorize.unauthorize.data") ],
													0);
											return
										}
										this.empSelected = new Wtf.data.Store(
												this.allempGrid.getStore().initialConfig);
										this.empSelected.add(B);
										this.compStatusWindow = new Wtf.authorizeStatusWin(
												{
													iconCls : getButtonIconCls(Wtf.btype.winicon),
													layout : "fit",
													closable : true,
													width : 760,
													title : WtfGlobal
															.getLocaleText("hrms.payroll.view.statutory.form.status"),
													height : 600,
													border : false,
													empGDS : this.empSelected,
													modal : true,
													scope : this,
													plain : true,
													allempGrid : this.allempGrid,
													month : this.monthCmb
															.getValue(),
													year : this.yearCmb
															.getValue()
												});
										this.compStatusWindow.show()
									}
								});
						A.push("-");
						A.push(this.authorizeViewbtn);
						return A
					},
					getTopToolbarButtons : function() {
						var A = [];
						this.resetbtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.reset"),
									scope : this,
									iconCls : "pwndRefresh",
									handler : function() {
										this.empGDS
												.load({
													params : {
														start : 0,
														limit : this.allempGrid.pag.pageSize
													}
												});
										Wtf
												.getCmp(
														"Quick"
																+ this.allempGrid.id)
												.setValue("")
									}
								});
						A.push("-");
						A.push(this.resetbtn);
						this.taxDeclaration = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.employee.tax.declaration"),
									scope : this,
									disabled : true,
									iconCls : "pwndHRMS incometaxuserformIcon",
									handler : function() {
										var C = this.allempGrid
												.getSelectionModel()
												.getSelected().data;
										payrollData(
												Wtf
														.getCmp("payrollUserListtabpanel"),
												C.userid, C.fullname, this)
									}
								});
						A.push("-");
						A.push(this.taxDeclaration);
						this.statutoryFomrDetails = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.employee.statutory.forms.details"),
									scope : this,
									disabled : true,
									iconCls : "pwndHRMS incometaxformIcon",
									handler : function() {
										var C = this.allempGrid
												.getSelectionModel()
												.getSelected().data;
										payrollUserData(
												Wtf
														.getCmp("payrollUserListtabpanel"),
												C.userid, C.fullname, this)
									}
								});
						A.push("-");
						A.push(this.statutoryFomrDetails);
						this.companyStatutoryFomrDetails = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.company.statutory.forms.details"),
									scope : this,
									iconCls : "pwndHRMS incometaxformIcon",
									handler : function() {
										statutoryFormCompanyDetails(
												Wtf
														.getCmp("payrollUserListtabpanel"),
												this)
									}
								});
						A.push("-");
						A.push(this.companyStatutoryFomrDetails);
						var B = [];
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_AmanahSahamNasional,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												if (this.empGDS.data.items.length > 0
														&& !this.empGDS.data.items[0].data.companyFormStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
															0);
													return
												}
												var C = "Payroll/MalaysianStatutoryForm/getAmanahSahamNasional.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_TabungHaji,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												if (this.empGDS.data.items.length > 0
														&& !this.empGDS.data.items[0].data.companyFormStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
															0);
													return
												}
												var C = "Payroll/MalaysianStatutoryForm/getTabungHaji.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_CP21,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.cp21Status) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.cp21.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.cp21Status) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.cp21.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getCP21.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&userid="
																				+ D.userid
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_TP1,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.tp1Status) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.tp1.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.tp1Status) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.tp1.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getTP1.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&userid="
																				+ D.userid
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_TP2,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.tp2Status) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.tp2.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.tp2Status) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.tp2.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getTP2.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&userid="
																				+ D.userid
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_TP3,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.tp3Status) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.tp3.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.tp3Status) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.tp3.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getTP3.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&userid="
																				+ D.userid
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_HRDLevy,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												if (this.empGDS.data.items.length > 0
														&& !this.empGDS.data.items[0].data.companyFormStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
															0);
													return
												}
												var C = "Payroll/MalaysianStatutoryForm/getHRDLevy.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_CP39,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												if (this.empGDS.data.items.length > 0
														&& !this.empGDS.data.items[0].data.companyFormStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
															0);
													return
												}
												var C = "Payroll/MalaysianStatutoryForm/getCP39.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&frequency=0&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_CP39A,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												if (this.empGDS.data.items.length > 0
														&& !this.empGDS.data.items[0].data.companyFormStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
															0);
													return
												}
												var C = "Payroll/MalaysianStatutoryForm/getCP39A.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&frequency=0&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_PCB2,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.pcb2Status) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.pcb.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.pcb2Status) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.pcb.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getPCB2PDF.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&frequency=0&userid="
																				+ D.userid
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						B
								.push(new Wtf.Action(
										{
											text : Wtf.Malaysian_StatutoryForm_EA,
											iconCls : "pwndCommon reportbuttonIcon",
											scope : this,
											handler : function() {
												var E = this.allempGrid
														.getSelectionModel()
														.getSelections();
												if (E.length > 1) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.single.record.generate.form") ],
															0);
													return
												}
												if (E.length == 0) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.select.record.to.generate.form") ],
															0);
													return
												}
												if (E.length == 1
														&& !E[0].data.companyFormStatus
														&& !E[0].data.eaStatus) {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.fill.company.ea.statutory.form.month") ],
															0);
													return
												} else {
													if (E.length == 1
															&& !E[0].data.companyFormStatus) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.Alert"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.fill.company.statutory.form.month") ],
																0);
														return
													} else {
														if (E.length == 1
																&& !E[0].data.eaStatus) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.Alert"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.fill.ea.statutory.form.month") ],
																	0);
															return
														}
													}
												}
												var D = this.allempGrid
														.getSelectionModel()
														.getSelected().data;
												var C = "Payroll/MalaysianStatutoryForm/getEA.py?"
														+ Wtf
																.urlEncode(Wtf
																		.urlDecode("companyname="
																				+ companyName
																				+ "&userid="
																				+ D.userid
																				+ "&month="
																				+ this.monthCmb
																						.getValue()
																				+ "&year="
																				+ this.yearCmb
																						.getValue()
																				+ "&frequency=0"));
												Wtf.get("downloadframe").dom.src = C
											}
										}));
						this.report = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.statutory.forms"),
									scope : this,
									iconCls : "pwndCommon reportbuttonIcon",
									menu : B
								});
						A.push("-");
						A.push(this.report);
						this.bankFile = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.mtd.text.file"),
									scope : this,
									iconCls : "pwndHRMS textFileIcon",
									handler : function() {
										var C = "Payroll/BankInterfaceFile/getMTDDataPayrollReport.py?"
												+ Wtf
														.urlEncode(Wtf
																.urlDecode("year="
																		+ this.yearCmb
																				.getValue()
																		+ "&month="
																		+ this.monthCmb
																				.getValue()
																		+ "&frequency=0"));
										Wtf.get("downloadframe").dom.src = C
									}
								});
						A.push("-");
						A.push(this.bankFile);
						this.monthCmb = new Wtf.form.ComboBox({
							triggerAction : "all",
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Month"),
							hiddenName : "month",
							forceSelection : true,
							mode : "local",
							valueField : "id",
							displayField : "name",
							store : Wtf.monthStore0,
							width : 80,
							typeAhead : true,
							value : new Date().getMonth()
						});
						this.monthCmb.on("select", function() {
							this.empGDS.reload()
						}, this);
						A.push("-");
						A.push(this.monthCmb);
						this.yearCmb = new Wtf.form.ComboBox({
							triggerAction : "all",
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.Year"),
							hiddenName : "year",
							mode : "local",
							valueField : "id",
							displayField : "name",
							forceSelection : true,
							store : Wtf.yearStore,
							width : 80,
							typeAhead : true,
							value : new Date().getFullYear()
						});
						this.yearCmb.on("select", function() {
							this.empGDS.reload()
						}, this);
						A.push("-");
						A.push(this.yearCmb);
						return A
					}
				});
Wtf.MalaysianUserIncomeTax = function(A) {
	Wtf.apply(this, A);
	Wtf.MalaysianUserIncomeTax.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.MalaysianUserIncomeTax,
				Wtf.Panel,
				{
					layout : "fit",
					closable : false,
					initComponent : function() {
						Wtf.MalaysianUserIncomeTax.superclass.initComponent
								.call(this)
					},
					onRender : function(A) {
						var H = this.getTopToolbar();
						var G = this.getAmanahSahamNasional();
						var C = this.getTabungHaji();
						var F = this.getCP21();
						var B = this.getHRDLevy();
						var D = this.getPCB2();
						var E = new Wtf.Panel(
								{
									layout : "column",
									bodyBorder : false,
									border : false,
									items : [
											{
												columnWidth : 0.32,
												bodyBorder : false,
												border : false,
												layout : "form",
												style : "padding-top:10px; padding-rigth:1px; padding-bottom:1px; padding-left:10px;",
												items : [ G, F ]
											},
											{
												columnWidth : 0.32,
												layout : "form",
												style : "padding-top:10px; padding-rigth:10px; padding-bottom:10px; padding-left:10px;",
												bodyBorder : false,
												border : false,
												items : [ C, D, this.getTP1(),
														this.getTP2(),
														this.getTP3() ]
											},
											{
												columnWidth : 0.33,
												bodyBorder : false,
												layout : "form",
												style : "padding-top:10px; padding-rigth:10px; padding-bottom:10px; padding-left:10px;",
												border : false,
												items : [ B, this.getCP39(),
														this.getCP39A(),
														this.getEA() ]
											} ]
								});
						this.formPanel = new Wtf.form.FormPanel(
								{
									autoWidth : true,
									autoScroll : true,
									baseParams : {
										userid : this.userid,
										year : this.year
									},
									url : "Payroll/MalaysianStatutoryForm/saveUserFormInformation.py",
									border : true,
									bodyBorder : false,
									id : "formPanel",
									items : [ E ]
								});
						this.mainPanel = new Wtf.Panel(
								{
									layout : "fit",
									border : false,
									tbar : H,
									scope : this,
									items : [ this.formPanel ],
									bbar : [
											"->",
											{
												id : "Submit",
												iconCls : getButtonIconCls(Wtf.btype.submitbutton),
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												handler : this.submit
														.createDelegate(this)
											} ]
								});
						this.add(this.mainPanel);
						this.decMonthCmb.on("select", function(J, I, K) {
							this.reloadData()
						}, this);
						this.decYearCmb.on("select", function(J, I, K) {
							this.reloadData()
						}, this);
						Wtf.MalaysianUserIncomeTax.superclass.onRender.call(
								this, A)
					},
					reloadData : function() {
						calMsgBoxShow(202, 4, true);
						Wtf.Ajax
								.requestEx(
										{
											url : "Payroll/MalaysianStatutoryForm/getUserStatutoryFormInformation.py",
											params : {
												year : this.year,
												userID : this.userid,
												declarationMonth : this.decMonthCmb
														.getValue(),
												declarationYear : this.decYearCmb
														.getValue()
											}
										},
										this,
										function(response) {
											var userdata = eval("(" + response
													+ ")");
											this
													.setAmanahSahamNasional(userdata.data.userdata);
											this
													.setTabungHaji(userdata.data.userdata);
											this
													.setCP21(userdata.data.userdata);
											this
													.setHRDLevy(userdata.data.userdata);
											this
													.setPCB2(userdata.data.userdata);
											this.setTP1(userdata.data.userdata);
											this.setTP2(userdata.data.userdata);
											this.setTP3(userdata.data.userdata);
											this
													.setCP39(userdata.data.userdata);
											this
													.setCP39A(userdata.data.userdata);
											this.setEA(userdata.data.userdata);
											WtfGlobal.closeProgressbar()
										}, function(response) {
										})
					},
					submit : function() {
						if (this.formPanel.form.isValid()) {
							this.formPanel
									.getForm()
									.submit(
											{
												params : {
													declarationMonth : this.decMonthCmb
															.getValue(),
													declarationYear : this.decYearCmb
															.getValue()
												},
												waitTitle : WtfGlobal
														.getLocaleText("hrms.common.PleaseWait"),
												waitMsg : WtfGlobal
														.getLocaleText("hrms.common.saving.information"),
												success : function() {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.common.user.information.saved.successfully"));
													this.ownerCt.remove(this);
													if (this.statutoryForm != undefined) {
														this.statutoryForm.empGDS
																.reload()
													}
												},
												failure : function(B, A) {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.common.error.saving.user.information"))
												},
												scope : this
											})
						} else {
						}
					},
					getTopToolbar : function() {
						var A = [];
						this.decMonthCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Month"),
									hiddenName : "month",
									forceSelection : true,
									mode : "local",
									valueField : "id",
									displayField : "name",
									store : Wtf.monthStore0,
									width : 80,
									typeAhead : true,
									value : this.statutoryForm != undefined ? this.statutoryForm.monthCmb
											.getValue()
											: new Date().getMonth()
								});
						A.push("-");
						A.push(WtfGlobal
								.getLocaleText("hrms.payroll.select.month")
								+ ": ");
						A.push(this.decMonthCmb);
						this.decYearCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Year"),
									hiddenName : "year",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : Wtf.yearStore,
									width : 80,
									typeAhead : true,
									value : this.statutoryForm != undefined ? this.statutoryForm.yearCmb
											.getValue()
											: new Date().getFullYear()
								});
						A.push("-");
						A.push(WtfGlobal
								.getLocaleText("hrms.payroll.select.year")
								+ ": ");
						A.push(this.decYearCmb);
						return A
					},
					getFieldSet : function(A, D, B) {
						var C = new Wtf.form.FieldSet({
							title : "" + D + " ("
									+ Wtf.getStatutoryFormAuthorizeRenderer(B)
									+ ")",
							cls : B == 1 ? "formFieldSet disableFieldSet"
									: "formFieldSet",
							width : "90%",
							autoHeight : true,
							disabled : B == 1 ? true : false,
							items : A
						});
						return C
					},
					getAmanahSahamNasional : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.asnauthorize
								: 0;
						this.amnid = new Wtf.form.Hidden(
								{
									name : "amnid",
									id : "amnid",
									value : this.userdata != undefined ? this.userdata.asnid
											: ""
								});
						A.push(this.amnid);
						this.amnStatus = new Wtf.form.Hidden({
							name : "asnauthorize",
							id : "asnauthorize",
							value : B
						});
						A.push(this.amnStatus);
						this.amnicNumber = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.ic.no"),
									scope : this,
									name : "asnicno",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.asnicno
											: ""
								});
						A.push(this.amnicNumber);
						this.amnaccno = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.AccountNumber"),
									scope : this,
									maxLength : 10,
									name : "asnaccno",
									value : this.userdata != undefined ? this.userdata.asnaccno
											: ""
								});
						A.push(this.amnaccno);
						this.amnamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Amount"),
									scope : this,
									maxLength : 10,
									name : "asnamount",
									value : this.userdata != undefined ? this.userdata.asnamount
											: 0
								});
						A.push(this.amnamount);
						this.compASN = this
								.getFieldSet(
										A,
										Wtf.Malaysian_StatutoryForm_AmanahSahamNasional,
										B);
						return this.compASN
					},
					setAmanahSahamNasional : function(A) {
						if (A != undefined) {
							this.amnid.setValue(A.asnid);
							this.amnStatus.setValue(A.asnauthorize);
							this.amnicNumber.setValue(A.asnicno);
							this.amnaccno.setValue(A.asnaccno);
							this.amnamount.setValue(A.asnamount);
							this.compASN
									.setTitle(Wtf.Malaysian_StatutoryForm_AmanahSahamNasional
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.asnauthorize)
											+ ")");
							if (A.asnauthorize == 1) {
								this.compASN.disable()
							} else {
								this.compASN.enable()
							}
						}
					},
					setTabungHaji : function(A) {
						if (A != undefined) {
							this.tabunghajiid.setValue(A.tabunghajiid);
							this.tabunghajiStatus
									.setValue(A.tabunghajiauthorize);
							this.tabunghajiicno.setValue(A.tabunghajiicno);
							this.tabunghajiaccno.setValue(A.tabunghajiaccno);
							this.tabunghajiamount.setValue(A.tabunghajiamount);
							this.compTabungHaji
									.setTitle(Wtf.Malaysian_StatutoryForm_TabungHaji
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.tabunghajiauthorize)
											+ ")");
							if (A.tabunghajiauthorize == 1) {
								this.compTabungHaji.disable()
							} else {
								this.compTabungHaji.enable()
							}
						}
					},
					getTabungHaji : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.tabunghajiauthorize
								: 0;
						this.tabunghajiid = new Wtf.form.Hidden(
								{
									name : "tabunghajiid",
									id : "tabunghajiid",
									value : this.userdata != undefined ? this.userdata.tabunghajiid
											: ""
								});
						A.push(this.tabunghajiid);
						this.tabunghajiStatus = new Wtf.form.Hidden({
							name : "tabunghajiauthorize",
							id : "tabunghajiauthorize",
							value : B
						});
						A.push(this.tabunghajiStatus);
						this.tabunghajiicno = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.ic.no"),
									scope : this,
									maxLength : 10,
									name : "tabunghajiicno",
									value : this.userdata != undefined ? this.userdata.tabunghajiicno
											: ""
								});
						A.push(this.tabunghajiicno);
						this.tabunghajiaccno = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.AccountNumber"),
									scope : this,
									maxLength : 10,
									name : "tabunghajiaccno",
									value : this.userdata != undefined ? this.userdata.tabunghajiaccno
											: ""
								});
						A.push(this.tabunghajiaccno);
						this.tabunghajiamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Amount"),
									scope : this,
									maxLength : 10,
									name : "tabunghajiamount",
									value : this.userdata != undefined ? this.userdata.tabunghajiamount
											: ""
								});
						A.push(this.tabunghajiamount);
						this.compTabungHaji = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_TabungHaji, B);
						return this.compTabungHaji
					},
					setCP21 : function(A) {
						if (A != undefined) {
							this.CP21amnid.setValue(A.cp21id);
							this.CP21Status.setValue(A.cp21authorize);
							this.CP21empfilerefno.setValue(A.empfilerefno);
							this.CP21expectedDateToLeave
									.setValue(A.datetoleave);
							this.CP21pasportno.setValue(A.passportno);
							this.CP21natureOfEmploymentCombo
									.setValue(A.natureofemployment);
							this.CP21departureReason
									.setValue(A.departurereason);
							this.CP21correspondenceAddress
									.setValue(A.correspondenceaddress);
							this.CP21dateofReturn.setValue(A.dateofreturn);
							this.CP21amount.setValue(A.dueamount);
							this.CP21dateofform.setValue(A.dateofform);
							this.CP21salaryFrom.setValue(A.salaryfrom);
							this.CP21salaryTo.setValue(A.salaryto);
							this.CP21salaryamount.setValue(A.salaryamount);
							this.CP21leavePayFrom.setValue(A.leavepayfrom);
							this.CP21leavePayTo.setValue(A.leavepayto);
							this.CP21leavepayamount.setValue(A.leavepayamount);
							this.CP21bonusFrom.setValue(A.bonusfrom);
							this.CP21bonusTo.setValue(A.bonusto);
							this.CP21bonusamount.setValue(A.bonusamount);
							this.CP21gratuityFrom.setValue(A.gratuityfrom);
							this.CP21gratuityTo.setValue(A.gratuityto);
							this.CP21gratuityamount.setValue(A.gratuityamount);
							this.CP21allowanceFrom.setValue(A.allowancefrom);
							this.CP21allowanceTo.setValue(A.allowanceto);
							this.CP21allowanceamount
									.setValue(A.allowanceamount);
							this.CP21pensionFrom.setValue(A.pensionfrom);
							this.CP21pensionTo.setValue(A.pensionto);
							this.CP21pensionamount.setValue(A.pensionamount);
							this.CP21residenceFrom.setValue(A.residencefrom);
							this.CP21residenceTo.setValue(A.residenceto);
							this.CP21residenceamount
									.setValue(A.residenceamount);
							this.CP21allowanceinkindFrom
									.setValue(A.allowanceinkindfrom);
							this.CP21allowanceinkindTo
									.setValue(A.allowanceinkindto);
							this.CP21allowanceinkindamount
									.setValue(A.allowanceinkindamount);
							this.CP21pfFrom.setValue(A.pffrom);
							this.CP21pfTo.setValue(A.pfto);
							this.CP21pfamount.setValue(A.pfamount);
							this.CP21natureOfPaymentCombo
									.setValue(A.natureofpayment);
							this.CP21dateofPayment.setValue(A.dateofpayment);
							this.CP21amounttobepaid.setValue(A.amounttobepaid);
							this.compCP21
									.setTitle(Wtf.Malaysian_StatutoryForm_CP21
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.cp21authorize)
											+ ")");
							if (A.cp21authorize == 1) {
								this.compCP21.disable()
							} else {
								this.compCP21.enable()
							}
						}
					},
					getCP21 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.cp21authorize
								: 0;
						this.CP21amnid = new Wtf.form.Hidden(
								{
									name : "cp21id",
									id : "cp21id",
									value : this.userdata != undefined ? this.userdata.cp21id
											: ""
								});
						A.push(this.CP21amnid);
						this.CP21Status = new Wtf.form.Hidden({
							name : "cp21authorize",
							id : "cp21authorize",
							value : B
						});
						A.push(this.CP21Status);
						this.CP21empfilerefno = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.employee.file.reference.no"),
									scope : this,
									width : 200,
									maxLength : 50,
									name : "empfilerefno",
									value : this.userdata != undefined ? this.userdata.empfilerefno
											: ""
								});
						A.push(this.CP21empfilerefno);
						this.CP21expectedDateToLeave = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.expected.date.to.leave"),
									format : "Y-m-d",
									name : "datetoleave",
									width : 200,
									value : this.userdata != undefined ? this.userdata.datetoleave
											: ""
								});
						A.push(this.CP21expectedDateToLeave);
						this.CP21pasportno = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.identity.card.passport.no"),
									scope : this,
									width : 200,
									maxLength : 50,
									name : "passportno",
									value : this.userdata != undefined ? this.userdata.passportno
											: ""
								});
						A.push(this.CP21pasportno);
						this.natureOfEmployment = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "name" ],
									data : [
											[
													"0",
													WtfGlobal
															.getLocaleText("hrms.common.none") ],
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.common.Permanent") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.common.ad.hoc") ] ]
								});
						this.CP21natureOfEmploymentCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.nature.of.employment"),
									hiddenName : "natureofemployment",
									name : "natureofemployment",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.natureOfEmployment,
									width : 200,
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.natureofemployment
											: ""
								});
						A.push(this.CP21natureOfEmploymentCombo);
						this.CP21departureReason = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.reason.for.departure"),
									scope : this,
									maxLength : 50,
									width : 200,
									name : "departurereason",
									value : this.userdata != undefined ? this.userdata.departurereason
											: ""
								});
						A.push(this.CP21departureReason);
						this.CP21correspondenceAddress = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.correspondence.address"),
									scope : this,
									maxLength : 50,
									width : 200,
									name : "correspondenceaddress",
									value : this.userdata != undefined ? this.userdata.correspondenceaddress
											: ""
								});
						A.push(this.CP21correspondenceAddress);
						this.CP21dateofReturn = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.probable.date.return"),
									format : "Y-m-d",
									name : "dateofreturn",
									width : 200,
									value : this.userdata != undefined ? this.userdata.dateofreturn
											: ""
								});
						A.push(this.CP21dateofReturn);
						this.CP21amount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.amount.due.to.employee"),
									scope : this,
									maxLength : 10,
									name : "dueamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.dueamount
											: ""
								});
						A.push(this.CP21amount);
						this.CP21dateofform = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Date"),
									format : "Y-m-d",
									name : "dateofform",
									width : 200,
									value : this.userdata != undefined ? this.userdata.dateofform
											: ""
								});
						A.push(this.CP21dateofform);
						var D = [];
						this.CP21salaryFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.salary.fees.wages.overtime.payfrom"),
									format : "Y-m-d",
									name : "salaryfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.salaryfrom
											: ""
								});
						D.push(this.CP21salaryFrom);
						this.CP21salaryTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.salary.fees.wages.overtime.payto"),
									format : "Y-m-d",
									name : "salaryto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.salaryto
											: ""
								});
						D.push(this.CP21salaryTo);
						this.CP21salaryamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.salary.fees.wages.overtime.pay.amount"),
									scope : this,
									maxLength : 10,
									name : "salaryamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.salaryamount
											: ""
								});
						D.push(this.CP21salaryamount);
						this.CP21leavePayFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.leave.payfrom"),
									format : "Y-m-d",
									name : "leavepayfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.leavepayfrom
											: ""
								});
						D.push(this.CP21leavePayFrom);
						this.CP21leavePayTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.leave.pay.to"),
									format : "Y-m-d",
									name : "leavepayto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.leavepayto
											: ""
								});
						D.push(this.CP21leavePayTo);
						this.CP21leavepayamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.leave.pay.amount"),
									scope : this,
									maxLength : 10,
									name : "leavepayamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.leavepayamount
											: ""
								});
						D.push(this.CP21leavepayamount);
						this.CP21bonusFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.commission.bonus.from"),
									format : "Y-m-d",
									name : "bonusfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.bonusfrom
											: ""
								});
						D.push(this.CP21bonusFrom);
						this.CP21bonusTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.commission.bonus.to"),
									format : "Y-m-d",
									name : "bonusto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.bonusto
											: ""
								});
						D.push(this.CP21bonusTo);
						this.CP21bonusamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.commission.bonus.amount"),
									scope : this,
									maxLength : 10,
									name : "bonusamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.bonusamount
											: ""
								});
						D.push(this.CP21bonusamount);
						this.CP21gratuityFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.gratuity.from"),
									format : "Y-m-d",
									name : "gratuityfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.gratuityfrom
											: ""
								});
						D.push(this.CP21gratuityFrom);
						this.CP21gratuityTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.gratuity.to"),
									format : "Y-m-d",
									name : "gratuityto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.gratuityto
											: ""
								});
						D.push(this.CP21gratuityTo);
						this.CP21gratuityamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.gratuity.amount"),
									scope : this,
									maxLength : 10,
									name : "gratuityamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.gratuityamount
											: ""
								});
						D.push(this.CP21gratuityamount);
						this.CP21allowanceFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.from"),
									format : "Y-m-d",
									name : "allowancefrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowancefrom
											: ""
								});
						D.push(this.CP21allowanceFrom);
						this.CP21allowanceTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.to"),
									format : "Y-m-d",
									name : "allowanceto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowanceto
											: ""
								});
						D.push(this.CP21allowanceTo);
						this.CP21allowanceamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.amount"),
									scope : this,
									maxLength : 10,
									name : "allowanceamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowanceamount
											: ""
								});
						D.push(this.CP21allowanceamount);
						this.CP21pensionFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.pension.from"),
									format : "Y-m-d",
									name : "pensionfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pensionfrom
											: ""
								});
						D.push(this.CP21pensionFrom);
						this.CP21pensionTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.pension.to"),
									format : "Y-m-d",
									name : "pensionto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pensionto
											: ""
								});
						D.push(this.CP21pensionTo);
						this.CP21pensionamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.pension.amount"),
									scope : this,
									maxLength : 10,
									name : "pensionamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pensionamount
											: ""
								});
						D.push(this.CP21pensionamount);
						this.CP21residenceFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.residence.provided.by.employer.from"),
									format : "Y-m-d",
									name : "residencefrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.residencefrom
											: ""
								});
						D.push(this.CP21residenceFrom);
						this.CP21residenceTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.residence.provided.by.employer.to"),
									format : "Y-m-d",
									name : "residenceto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.residenceto
											: ""
								});
						D.push(this.CP21residenceTo);
						this.CP21residenceamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.residence.provided.by.employer.amount"),
									scope : this,
									maxLength : 10,
									name : "residenceamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.residenceamount
											: ""
								});
						D.push(this.CP21residenceamount);
						this.CP21allowanceinkindFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.kind.from"),
									format : "Y-m-d",
									name : "allowanceinkindfrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowanceinkindfrom
											: ""
								});
						D.push(this.CP21allowanceinkindFrom);
						this.CP21allowanceinkindTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.kind.to"),
									format : "Y-m-d",
									name : "allowanceinkindto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowanceinkindto
											: ""
								});
						D.push(this.CP21allowanceinkindTo);
						this.CP21allowanceinkindamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.allowance.kind.amount"),
									scope : this,
									maxLength : 10,
									name : "allowanceinkindamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.allowanceinkindamount
											: ""
								});
						D.push(this.CP21allowanceinkindamount);
						this.CP21pfFrom = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.provident.fund.from"),
									format : "Y-m-d",
									name : "pffrom",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pffrom
											: ""
								});
						D.push(this.CP21pfFrom);
						this.CP21pfTo = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.provident.fund.to"),
									format : "Y-m-d",
									name : "pfto",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pfto
											: ""
								});
						D.push(this.CP21pfTo);
						this.CP21pfamount = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.provident.fund.amount"),
									scope : this,
									maxLength : 10,
									name : "pfamount",
									width : 200,
									value : this.userdata != undefined ? this.userdata.pfamount
											: ""
								});
						D.push(this.CP21pfamount);
						var C = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.payroll.emoluments.approved.provident.fund"),
									style : "padding-left:20px; padding-top:10px; align:center;",
									width : "90%",
									autoHeight : true,
									items : D
								});
						A.push(C);
						var E = [];
						this.natureOfPayment = new Wtf.data.SimpleStore(
								{
									fields : [ "id", "name" ],
									data : [
											[
													"0",
													WtfGlobal
															.getLocaleText("hrms.common.none") ],
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.cash") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.cheque") ] ]
								});
						this.CP21natureOfPaymentCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.nature.of.payment"),
									hiddenName : "natureofpayment",
									name : "natureofpayment",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.natureOfPayment,
									width : 200,
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.natureofpayment
											: ""
								});
						E.push(this.CP21natureOfPaymentCombo);
						this.CP21dateofPayment = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.date.of.payment"),
									format : "Y-m-d",
									name : "dateofpayment",
									width : 200,
									value : this.userdata != undefined ? this.userdata.dateofpayment
											: ""
								});
						E.push(this.CP21dateofPayment);
						this.CP21amounttobepaid = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.amount.to.be.paid"),
									scope : this,
									maxLength : 10,
									name : "amounttobepaid",
									width : 200,
									value : this.userdata != undefined ? this.userdata.amounttobepaid
											: ""
								});
						E.push(this.CP21amounttobepaid);
						this.CP21otheramount = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.payroll.other.amount.due.to.employee"),
									style : "padding-left:20px; padding-top:10px; align:center;",
									width : "90%",
									autoHeight : true,
									items : E
								});
						A.push(this.CP21otheramount);
						this.compCP21 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_CP21, B);
						return this.compCP21
					},
					getHRDLevy : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.HRDLevyauthorize
								: 0;
						this.HRDLevyid = new Wtf.form.Hidden(
								{
									name : "HRDLevyid",
									id : "HRDLevyid",
									value : this.userdata != undefined ? this.userdata.HRDLevyid
											: ""
								});
						A.push(this.HRDLevyid);
						this.HRDLevyStatus = new Wtf.form.Hidden({
							name : "HRDLevyauthorize",
							id : "HRDLevyauthorize",
							value : B
						});
						A.push(this.HRDLevyStatus);
						this.HRDbasesalary = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.base.salary"),
									scope : this,
									name : "HRDLevybasesalary",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.HRDLevybasesalary
											: ""
								});
						A.push(this.HRDbasesalary);
						this.HRDothers = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.others"),
									scope : this,
									name : "HRDLevyothers",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.HRDLevyothers
											: ""
								});
						A.push(this.HRDothers);
						this.HRDnetsalary = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.netsalary"),
									scope : this,
									maxLength : 10,
									name : "HRDLevynetsalary",
									value : this.userdata != undefined ? this.userdata.HRDLevynetsalary
											: ""
								});
						A.push(this.HRDnetsalary);
						this.HRDhrdlevy = new Wtf.form.NumberField(
								{
									fieldLabel : Wtf.Malaysian_StatutoryForm_HRDLevy,
									scope : this,
									maxLength : 10,
									name : "HRDLevyhrdlevy",
									value : this.userdata != undefined ? this.userdata.HRDLevyhrdlevy
											: ""
								});
						A.push(this.HRDhrdlevy);
						this.compHRDLevy = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_HRDLevy, B);
						return this.compHRDLevy
					},
					setHRDLevy : function(A) {
						if (A != undefined) {
							this.HRDLevyid.setValue(A.HRDLevyid);
							this.HRDLevyStatus.setValue(A.HRDLevyauthorize);
							this.HRDbasesalary.setValue(A.HRDLevybasesalary);
							this.HRDothers.setValue(A.HRDLevyothers);
							this.HRDnetsalary.setValue(A.HRDLevynetsalary);
							this.HRDhrdlevy.setValue(A.HRDLevyhrdlevy);
							this.compHRDLevy
									.setTitle(Wtf.Malaysian_StatutoryForm_HRDLevy
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.HRDLevyauthorize)
											+ ")");
							if (A.HRDLevyauthorize == 1) {
								this.compHRDLevy.disable()
							} else {
								this.compHRDLevy.enable()
							}
						}
					},
					setPCB2 : function(A) {
						if (A != undefined) {
							this.idForPCB2.setValue(A.idForPCB2);
							this.PCB2Status.setValue(A.pcb2authorize);
							this.deductionAmountCP38ForPCB2
									.setValue(A.deductionAmountCP38ForPCB2);
							this.taxResitPCBForPCB2
									.setValue(A.taxResitPCBForPCB2);
							this.taxResitPCBDateForPCB2
									.setValue(A.taxResitPCBDateForPCB2);
							this.taxResitCP38ForPCB2
									.setValue(A.taxResitCP38ForPCB2);
							this.taxResitCP38DateForPCB2
									.setValue(A.taxResitCP38DateForPCB2);
							this.newIdentificationNumberForPCB2
									.setValue(A.newIdentificationNumberForPCB2);
							this.incomeTaxFileNumberForPCB2
									.setValue(A.incomeTaxFileNumberForPCB2);
							this.compPCB2
									.setTitle(Wtf.Malaysian_StatutoryForm_PCB2
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.pcb2authorize)
											+ ")");
							if (A.pcb2authorize == 1) {
								this.compPCB2.disable()
							} else {
								this.compPCB2.enable()
							}
						}
					},
					getPCB2 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.pcb2authorize
								: 0;
						this.idForPCB2 = new Wtf.form.Hidden(
								{
									name : "idForPCB2",
									value : this.userdata != undefined ? this.userdata.idForPCB2
											: ""
								});
						A.push(this.idForPCB2);
						this.PCB2Status = new Wtf.form.Hidden({
							name : "pcb2authorize",
							id : "pcb2authorize",
							value : B
						});
						A.push(this.PCB2Status);
						this.deductionAmountCP38ForPCB2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cp38.deduction.amount"),
									scope : this,
									maxLength : 10,
									width : 150,
									name : "deductionAmountCP38ForPCB2",
									value : this.userdata != undefined ? this.userdata.deductionAmountCP38ForPCB2
											: ""
								});
						A.push(this.deductionAmountCP38ForPCB2);
						this.taxResitPCBForPCB2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.pcb.tax.receipt.no"),
									scope : this,
									maxLength : 50,
									width : 150,
									name : "taxResitPCBForPCB2",
									value : this.userdata != undefined ? this.userdata.taxResitPCBForPCB2
											: ""
								});
						A.push(this.taxResitPCBForPCB2);
						this.taxResitPCBDateForPCB2 = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.pcb.tax.receipt.date"),
									scope : this,
									width : 150,
									format : "Y-m-d",
									name : "taxResitPCBDateForPCB2",
									value : this.userdata != undefined ? this.userdata.taxResitPCBDateForPCB2
											: ""
								});
						A.push(this.taxResitPCBDateForPCB2);
						this.taxResitCP38ForPCB2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cp38.tax.receipt.no"),
									scope : this,
									maxLength : 50,
									width : 150,
									name : "taxResitCP38ForPCB2",
									value : this.userdata != undefined ? this.userdata.taxResitCP38ForPCB2
											: ""
								});
						A.push(this.taxResitCP38ForPCB2);
						this.taxResitCP38DateForPCB2 = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cp38.tax.receipt.date"),
									scope : this,
									format : "Y-m-d",
									width : 150,
									name : "taxResitCP38DateForPCB2",
									value : this.userdata != undefined ? this.userdata.taxResitCP38DateForPCB2
											: ""
								});
						A.push(this.taxResitCP38DateForPCB2);
						this.newIdentificationNumberForPCB2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									maxLength : 50,
									width : 150,
									name : "newIdentificationNumberForPCB2",
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForPCB2
											: ""
								});
						A.push(this.newIdentificationNumberForPCB2);
						this.incomeTaxFileNumberForPCB2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.file.number"),
									scope : this,
									maxLength : 50,
									width : 150,
									name : "incomeTaxFileNumberForPCB2",
									value : this.userdata != undefined ? this.userdata.incomeTaxFileNumberForPCB2
											: ""
								});
						A.push(this.incomeTaxFileNumberForPCB2);
						this.compPCB2 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_PCB2, B);
						return this.compPCB2
					},
					setTP2 : function(A) {
						if (A != undefined) {
							this.idForTP2.setValue(A.idForTP2);
							this.TP2Status.setValue(A.tp2authorize);
							this.oldIdentificationNumberForTP2
									.setValue(A.oldIdentificationNumberForTP2);
							this.newIdentificationNumberForTP2
									.setValue(A.newIdentificationNumberForTP2);
							this.passportNumberForTP2
									.setValue(A.passportNumberForTP2);
							this.armyOrPoliceNumberForTP2
									.setValue(A.armyOrPoliceNumberForTP2);
							this.incomeTaxLHDNNumberForTP2
									.setValue(A.incomeTaxLHDNNumberForTP2);
							this.carForTP2.setValue(A.carForTP2);
							this.driverForTP2.setValue(A.driverForTP2);
							this.householdItemsForTP2
									.setValue(A.householdItemsForTP2);
							this.entertainmentForTP2
									.setValue(A.entertainmentForTP2);
							this.gardenerForTP2.setValue(A.gardenerForTP2);
							this.maidForTP2.setValue(A.maidForTP2);
							this.holidayAllowanceForTP2
									.setValue(A.holidayAllowanceForTP2);
							this.membershipForTP2.setValue(A.membershipForTP2);
							this.compTP2
									.setTitle(Wtf.Malaysian_StatutoryForm_TP2
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.tp2authorize)
											+ ")");
							if (A.tp2authorize == 1) {
								this.compTP2.disable()
							} else {
								this.compTP2.enable()
							}
						}
					},
					setTP1 : function(A) {
						if (A != undefined) {
							this.idForTP1.setValue(A.idForTP1);
							this.TP1Status.setValue(A.tp1authorize);
							this.oldIdentificationNumberForTP1
									.setValue(A.oldIdentificationNumberForTP1);
							this.newIdentificationNumberForTP1
									.setValue(A.newIdentificationNumberForTP1);
							this.passportNumberForTP1
									.setValue(A.passportNumberForTP1);
							this.armyOrPoliceNumberForTP1
									.setValue(A.armyOrPoliceNumberForTP1);
							this.incomeTaxNumberForTP2
									.setValue(A.incomeTaxNumberForTP2);
							this.compTP1
									.setTitle(Wtf.Malaysian_StatutoryForm_TP1
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.tp1authorize)
											+ ")");
							if (A.tp1authorize == 1) {
								this.compTP1.disable()
							} else {
								this.compTP1.enable()
							}
						}
					},
					getTP1 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.tp1authorize
								: 0;
						this.idForTP1 = new Wtf.form.Hidden(
								{
									name : "idForTP1",
									value : this.userdata != undefined ? this.userdata.idForTP1
											: ""
								});
						A.push(this.idForTP1);
						this.TP1Status = new Wtf.form.Hidden({
							name : "tp1authorize",
							id : "tp1authorize",
							value : B
						});
						A.push(this.TP1Status);
						this.oldIdentificationNumberForTP1 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									name : "oldIdentificationNumberForTP1",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForTP1
											: ""
								});
						A.push(this.oldIdentificationNumberForTP1);
						this.newIdentificationNumberForTP1 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									maxLength : 50,
									name : "newIdentificationNumberForTP1",
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForTP1
											: ""
								});
						A.push(this.newIdentificationNumberForTP1);
						this.passportNumberForTP1 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.passport.number"),
									scope : this,
									maxLength : 50,
									name : "passportNumberForTP1",
									value : this.userdata != undefined ? this.userdata.passportNumberForTP1
											: ""
								});
						A.push(this.passportNumberForTP1);
						this.armyOrPoliceNumberForTP1 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.army.police.number"),
									scope : this,
									name : "armyOrPoliceNumberForTP1",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.armyOrPoliceNumberForTP1
											: ""
								});
						A.push(this.armyOrPoliceNumberForTP1);
						this.incomeTaxNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.number"),
									scope : this,
									name : "incomeTaxNumberForTP1",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.incomeTaxNumberForTP1
											: ""
								});
						A.push(this.incomeTaxNumberForTP2);
						this.compTP1 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_TP1, B);
						return this.compTP1
					},
					getTP2 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.tp2authorize
								: 0;
						this.idForTP2 = new Wtf.form.Hidden(
								{
									name : "idForTP2",
									value : this.userdata != undefined ? this.userdata.idForTP2
											: ""
								});
						A.push(this.idForTP2);
						this.TP2Status = new Wtf.form.Hidden({
							name : "tp2authorize",
							id : "tp2authorize",
							value : B
						});
						A.push(this.TP2Status);
						this.oldIdentificationNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									name : "oldIdentificationNumberForTP2",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForTP2
											: ""
								});
						A.push(this.oldIdentificationNumberForTP2);
						this.newIdentificationNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									maxLength : 50,
									name : "newIdentificationNumberForTP2",
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForTP2
											: ""
								});
						A.push(this.newIdentificationNumberForTP2);
						this.passportNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.passport.number"),
									scope : this,
									maxLength : 50,
									name : "passportNumberForTP2",
									value : this.userdata != undefined ? this.userdata.passportNumberForTP2
											: ""
								});
						A.push(this.passportNumberForTP2);
						this.armyOrPoliceNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.army.police.number"),
									scope : this,
									name : "armyOrPoliceNumberForTP2",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.armyOrPoliceNumberForTP2
											: ""
								});
						A.push(this.armyOrPoliceNumberForTP2);
						this.incomeTaxLHDNNumberForTP2 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.lhdn.number"),
									scope : this,
									name : "incomeTaxLHDNNumberForTP2",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.incomeTaxLHDNNumberForTP2
											: ""
								});
						A.push(this.incomeTaxLHDNNumberForTP2);
						this.carForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.car"),
									scope : this,
									name : "carForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.carForTP2
											: ""
								});
						A.push(this.carForTP2);
						this.driverForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.driver"),
									scope : this,
									name : "driverForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.driverForTP2
											: ""
								});
						A.push(this.driverForTP2);
						this.householdItemsForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.household.items"),
									scope : this,
									name : "householdItemsForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.householdItemsForTP2
											: ""
								});
						A.push(this.householdItemsForTP2);
						this.entertainmentForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.entertainment"),
									scope : this,
									name : "entertainmentForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.entertainmentForTP2
											: ""
								});
						A.push(this.entertainmentForTP2);
						this.gardenerForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.gardener"),
									scope : this,
									name : "gardenerForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.gardenerForTP2
											: ""
								});
						A.push(this.gardenerForTP2);
						this.maidForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.maid"),
									scope : this,
									name : "maidForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.maidForTP2
											: ""
								});
						A.push(this.maidForTP2);
						this.holidayAllowanceForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.holiday.allowance"),
									scope : this,
									name : "holidayAllowanceForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.holidayAllowanceForTP2
											: ""
								});
						A.push(this.holidayAllowanceForTP2);
						this.membershipForTP2 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.membership"),
									scope : this,
									name : "membershipForTP2",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.membershipForTP2
											: ""
								});
						A.push(this.membershipForTP2);
						this.compTP2 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_TP2, B);
						return this.compTP2
					},
					setTP3 : function(A) {
						if (A != undefined) {
							this.idForTP3.setValue(A.idForTP3);
							this.TP3Status.setValue(A.tp3authorize);
							this.previousEmployer1ForTP3
									.setValue(A.previousEmployer1ForTP3);
							this.employerReferenceNo1ForTP3
									.setValue(A.employerReferenceNo1ForTP3);
							this.previousEmployer2ForTP3
									.setValue(A.previousEmployer2ForTP3);
							this.employerReferenceNo2ForTP3
									.setValue(A.employerReferenceNo2ForTP3);
							this.oldIdentificationNumberForTP3
									.setValue(A.oldIdentificationNumberForTP3);
							this.newIdentificationNumberForTP3
									.setValue(A.newIdentificationNumberForTP3);
							this.armyOrPoliceNumberForTP3
									.setValue(A.armyOrPoliceNumberForTP3);
							this.passportNumberForTP3
									.setValue(A.passportNumberForTP3);
							this.incomeTaxFileNumberForTP3
									.setValue(A.incomeTaxFileNumberForTP3);
							this.freeSampleProductOnDiscountForTP3
									.setValue(A.freeSampleProductOnDiscountForTP3);
							this.employeeLongServiceAwardForTP3
									.setValue(A.employeeLongServiceAwardForTP3);
							this.totalContributionToKWSPForTP3
									.setValue(A.totalContributionToKWSPForTP3);
							this.tuitionfeesForTP3
									.setValue(A.tuitionfeesForTP3);
							this.contributionToPrivatePensionForTP3
									.setValue(A.contributionToPrivatePensionForTP3);
							this.compTP3
									.setTitle(Wtf.Malaysian_StatutoryForm_TP3
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.tp3authorize)
											+ ")");
							if (A.tp3authorize == 1) {
								this.compTP3.disable()
							} else {
								this.compTP3.enable()
							}
						}
					},
					getTP3 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.tp3authorize
								: 0;
						this.idForTP3 = new Wtf.form.Hidden(
								{
									name : "idForTP3",
									value : this.userdata != undefined ? this.userdata.idForTP3
											: ""
								});
						A.push(this.idForTP3);
						this.TP3Status = new Wtf.form.Hidden({
							name : "tp3authorize",
							id : "tp3authorize",
							value : B
						});
						A.push(this.TP3Status);
						this.previousEmployer1ForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.previous.employer1"),
									scope : this,
									name : "previousEmployer1ForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.previousEmployer1ForTP3
											: ""
								});
						A.push(this.previousEmployer1ForTP3);
						this.employerReferenceNo1ForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.employer.reference.no1"),
									scope : this,
									maxLength : 50,
									name : "employerReferenceNo1ForTP3",
									value : this.userdata != undefined ? this.userdata.employerReferenceNo1ForTP3
											: ""
								});
						A.push(this.employerReferenceNo1ForTP3);
						this.previousEmployer2ForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.previous.employer2"),
									scope : this,
									name : "previousEmployer2ForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.previousEmployer2ForTP3
											: ""
								});
						A.push(this.previousEmployer2ForTP3);
						this.employerReferenceNo2ForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.employer.reference.no2"),
									scope : this,
									maxLength : 50,
									name : "employerReferenceNo2ForTP3",
									value : this.userdata != undefined ? this.userdata.employerReferenceNo2ForTP3
											: ""
								});
						A.push(this.employerReferenceNo2ForTP3);
						this.oldIdentificationNumberForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									name : "oldIdentificationNumberForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForTP3
											: ""
								});
						A.push(this.oldIdentificationNumberForTP3);
						this.newIdentificationNumberForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									maxLength : 50,
									name : "newIdentificationNumberForTP3",
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForTP3
											: ""
								});
						A.push(this.newIdentificationNumberForTP3);
						this.armyOrPoliceNumberForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.army.police.number"),
									scope : this,
									name : "armyOrPoliceNumberForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.armyOrPoliceNumberForTP3
											: ""
								});
						A.push(this.armyOrPoliceNumberForTP3);
						this.passportNumberForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.passport.number"),
									scope : this,
									maxLength : 50,
									name : "passportNumberForTP3",
									value : this.userdata != undefined ? this.userdata.passportNumberForTP3
											: ""
								});
						A.push(this.passportNumberForTP3);
						this.incomeTaxFileNumberForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.file.number"),
									scope : this,
									name : "incomeTaxFileNumberForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.incomeTaxFileNumberForTP3
											: ""
								});
						A.push(this.incomeTaxFileNumberForTP3);
						this.freeSampleProductOnDiscountForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.free.sample.product.on.discount"),
									scope : this,
									name : "freeSampleProductOnDiscountForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.freeSampleProductOnDiscountForTP3
											: ""
								});
						A.push(this.freeSampleProductOnDiscountForTP3);
						this.employeeLongServiceAwardForTP3 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.employee.long.service.award"),
									scope : this,
									name : "employeeLongServiceAwardForTP3",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.employeeLongServiceAwardForTP3
											: ""
								});
						A.push(this.employeeLongServiceAwardForTP3);
						this.totalContributionToKWSPForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.total.contribution.to.kwsp"),
									scope : this,
									name : "totalContributionToKWSPForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.totalContributionToKWSPForTP3
											: ""
								});
						A.push(this.totalContributionToKWSPForTP3);
						this.tuitionfeesForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.tuition.fees"),
									scope : this,
									name : "tuitionfeesForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.tuitionfeesForTP3
											: ""
								});
						A.push(this.tuitionfeesForTP3);
						this.contributionToPrivatePensionForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.contribution.to.private.pension"),
									scope : this,
									name : "contributionToPrivatePensionForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.contributionToPrivatePensionForTP3
											: ""
								});
						A.push(this.contributionToPrivatePensionForTP3);
						this.totalAllowanceForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.total.allowance"),
									scope : this,
									name : "totalAllowanceForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.totalAllowanceForTP3
											: ""
								});
						A.push(this.totalAllowanceForTP3);
						this.otherAllowanceForTP3 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.other.allowance"),
									scope : this,
									name : "otherAllowanceForTP3",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.otherAllowanceForTP3
											: ""
								});
						A.push(this.otherAllowanceForTP3);
						this.compTP3 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_TP3, B);
						return this.compTP3
					},
					setCP39 : function(A) {
						if (A != undefined) {
							this.idForCP39.setValue(A.idForCP39);
							this.CP39Status.setValue(A.cp39authorize);
							this.incomeTaxFileNumberForCP39
									.setValue(A.incomeTaxFileNumberForCP39);
							this.oldIdentificationNumberForCP39
									.setValue(A.oldIdentificationNumberForCP39);
							this.newIdentificationNumberForCP39
									.setValue(A.newIdentificationNumberForCP39);
							this.passportNumberForCP39
									.setValue(A.passportNumberForCP39);
							this.countryCodeForCP39
									.setValue(A.countryCodeForCP39);
							this.deductionAmountForCP38ForCP39
									.setValue(A.deductionAmountForCP38ForCP39);
							this.compCP39
									.setTitle(Wtf.Malaysian_StatutoryForm_CP39
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.cp39authorize)
											+ ")");
							if (A.cp39authorize == 1) {
								this.compCP39.disable()
							} else {
								this.compCP39.enable()
							}
						}
					},
					getCP39 : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.cp39authorize
								: 0;
						this.idForCP39 = new Wtf.form.Hidden(
								{
									name : "idForCP39",
									value : this.userdata != undefined ? this.userdata.idForCP39
											: ""
								});
						A.push(this.idForCP39);
						this.CP39Status = new Wtf.form.Hidden({
							name : "cp39authorize",
							id : "cp39authorize",
							value : B
						});
						A.push(this.CP39Status);
						this.incomeTaxFileNumberForCP39 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.file.number"),
									scope : this,
									name : "incomeTaxFileNumberForCP39",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.incomeTaxFileNumberForCP39
											: ""
								});
						A.push(this.incomeTaxFileNumberForCP39);
						this.oldIdentificationNumberForCP39 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									maxLength : 50,
									name : "oldIdentificationNumberForCP39",
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForCP39
											: ""
								});
						A.push(this.oldIdentificationNumberForCP39);
						this.newIdentificationNumberForCP39 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									name : "newIdentificationNumberForCP39",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForCP39
											: ""
								});
						A.push(this.newIdentificationNumberForCP39);
						this.passportNumberForCP39 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.passport.number"),
									scope : this,
									maxLength : 50,
									name : "passportNumberForCP39",
									value : this.userdata != undefined ? this.userdata.passportNumberForCP39
											: ""
								});
						A.push(this.passportNumberForCP39);
						this.countryCodeForCP39 = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.country.code"),
									scope : this,
									name : "countryCodeForCP39",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.countryCodeForCP39
											: ""
								});
						A.push(this.countryCodeForCP39);
						this.deductionAmountForCP38ForCP39 = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.deduction.amount.for.cp38"),
									scope : this,
									name : "deductionAmountForCP38ForCP39",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.deductionAmountForCP38ForCP39
											: ""
								});
						A.push(this.deductionAmountForCP38ForCP39);
						this.compCP39 = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_CP39, B);
						return this.compCP39
					},
					setCP39A : function(A) {
						if (A != undefined) {
							this.idForCP39A.setValue(A.idForCP39A);
							this.CP39AStatus.setValue(A.cp39Aauthorize);
							this.incomeTaxFileNumberForCP39A
									.setValue(A.incomeTaxFileNumberForCP39A);
							this.oldIdentificationNumberForCP39A
									.setValue(A.oldIdentificationNumberForCP39A);
							this.newIdentificationNumberForCP39A
									.setValue(A.newIdentificationNumberForCP39A);
							this.passportNumberForCP39A
									.setValue(A.passportNumberForCP39A);
							this.countryCodeForCP39A
									.setValue(A.countryCodeForCP39A);
							this.deductionAmountForCP38ForCP39A
									.setValue(A.deductionAmountForCP38ForCP39A);
							this.compCP39A
									.setTitle(Wtf.Malaysian_StatutoryForm_CP39A
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.cp39Aauthorize)
											+ ")");
							if (A.cp39Aauthorize == 1) {
								this.compCP39A.disable()
							} else {
								this.compCP39A.enable()
							}
						}
					},
					getCP39A : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.cp39Aauthorize
								: 0;
						this.idForCP39A = new Wtf.form.Hidden(
								{
									name : "idForCP39A",
									value : this.userdata != undefined ? this.userdata.idForCP39A
											: ""
								});
						A.push(this.idForCP39A);
						this.CP39AStatus = new Wtf.form.Hidden({
							name : "cp39Aauthorize",
							id : "cp39Aauthorize",
							value : B
						});
						A.push(this.CP39AStatus);
						this.incomeTaxFileNumberForCP39A = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.file.number"),
									scope : this,
									name : "incomeTaxFileNumberForCP39A",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.incomeTaxFileNumberForCP39A
											: ""
								});
						A.push(this.incomeTaxFileNumberForCP39A);
						this.oldIdentificationNumberForCP39A = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									maxLength : 50,
									name : "oldIdentificationNumberForCP39A",
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForCP39A
											: ""
								});
						A.push(this.oldIdentificationNumberForCP39A);
						this.newIdentificationNumberForCP39A = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									name : "newIdentificationNumberForCP39A",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForCP39A
											: ""
								});
						A.push(this.newIdentificationNumberForCP39A);
						this.passportNumberForCP39A = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.passport.number"),
									scope : this,
									maxLength : 50,
									name : "passportNumberForCP39A",
									value : this.userdata != undefined ? this.userdata.passportNumberForCP39A
											: ""
								});
						A.push(this.passportNumberForCP39A);
						this.countryCodeForCP39A = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.country.code"),
									scope : this,
									name : "countryCodeForCP39A",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.countryCodeForCP39A
											: ""
								});
						A.push(this.countryCodeForCP39A);
						this.deductionAmountForCP38ForCP39A = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.deduction.amount.for.cp38"),
									scope : this,
									name : "deductionAmountForCP38ForCP39A",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.deductionAmountForCP38ForCP39A
											: ""
								});
						A.push(this.deductionAmountForCP38ForCP39A);
						this.compCP39A = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_CP39A, B);
						return this.compCP39A
					},
					setEA : function(A) {
						if (A != undefined) {
							this.idForEA.setValue(A.idForEA);
							this.EAStatus.setValue(A.eaAauthorize);
							this.serialNumberForEA
									.setValue(A.serialNumberForEA);
							this.employerERefNumberForEA
									.setValue(A.employerERefNumberForEA);
							this.incomeTaxFileNumberForEA
									.setValue(A.incomeTaxFileNumberForEA);
							this.incomeTaxBranchForEA
									.setValue(A.incomeTaxBranchForEA);
							this.oldIdentificationNumberForEA
									.setValue(A.oldIdentificationNumberForEA);
							this.newIdentificationNumberForEA
									.setValue(A.newIdentificationNumberForEA);
							this.accNumberKWSPForEA
									.setValue(A.accNumberKWSPForEA);
							this.incomeTaxPaidByEmployerForEA
									.setValue(A.incomeTaxPaidByEmployerForEA);
							this.carAndPetrolForEA
									.setValue(A.carAndPetrolForEA);
							this.carTypeForEA.setValue(A.carTypeForEA);
							this.carYearMakeForEA.setValue(A.carYearMakeForEA);
							this.carModelForEA.setValue(A.carModelForEA);
							this.driverWagesForEA.setValue(A.driverWagesForEA);
							this.entertainmentForEA
									.setValue(A.entertainmentForEA);
							this.handphoneForEA.setValue(A.handphoneForEA);
							this.maidAndGardenerForEA
									.setValue(A.maidAndGardenerForEA);
							this.airTicketsForHolidaysForEA
									.setValue(A.airTicketsForHolidaysForEA);
							this.otherBenefitsForClothingAndFoodsForEA
									.setValue(A.otherBenefitsForClothingAndFoodsForEA);
							this.housingAddressForEA
									.setValue(A.housingAddressForEA);
							this.refundsFromKWSPOtherForEA
									.setValue(A.refundsFromKWSPOtherForEA);
							this.compensationLossWorkForEA
									.setValue(A.compensationLossWorkForEA);
							this.retirementPaymentForEA
									.setValue(A.retirementPaymentForEA);
							this.periodicalPaymentForEA
									.setValue(A.periodicalPaymentForEA);
							this.cp38DeductionForEA
									.setValue(A.cp38DeductionForEA);
							this.nameForEA.setValue(A.nameForEA);
							this.portionOfKWSPForEA
									.setValue(A.portionOfKWSPForEA);
							this.typeOfIncomeForEA
									.setValue(A.typeOfIncomeForEA);
							this.contributionKWSPForEA
									.setValue(A.contributionKWSPForEA);
							this.amountForEA.setValue(A.amountForEA);
							this.nonTaxableAmountForEA
									.setValue(A.nonTaxableAmountForEA);
							this.otherBenefitsForEA
									.setValue(A.otherBenefitsForEA);
							this.housingBenefitsWithFurnitureForEA
									.setValue(A.housingBenefitsWithFurnitureForEA);
							this.housingBenefitsWithKitchenForEA
									.setValue(A.housingBenefitsWithKitchenForEA);
							this.furnitureAndFittingForEA
									.setValue(A.furnitureAndFittingForEA);
							this.kitchenAndUtensilsForEA
									.setValue(A.kitchenAndUtensilsForEA);
							this.compEA
									.setTitle(Wtf.Malaysian_StatutoryForm_EA
											+ " ("
											+ Wtf
													.getStatutoryFormAuthorizeRenderer(A.eaAauthorize)
											+ ")");
							if (A.eaAauthorize == 1) {
								this.compEA.disable()
							} else {
								this.compEA.enable()
							}
						}
					},
					getEA : function() {
						var A = [];
						var B = this.userdata != undefined ? this.userdata.eaAauthorize
								: 0;
						this.idForEA = new Wtf.form.Hidden(
								{
									name : "idForEA",
									value : this.userdata != undefined ? this.userdata.idForEA
											: ""
								});
						A.push(this.idForEA);
						this.EAStatus = new Wtf.form.Hidden({
							name : "eaAauthorize",
							id : "eaAauthorize",
							value : B
						});
						A.push(this.EAStatus);
						this.serialNumberForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.serial.number"),
									scope : this,
									maxLength : 50,
									name : "serialNumberForEA",
									value : this.userdata != undefined ? this.userdata.serialNumberForEA
											: ""
								});
						A.push(this.serialNumberForEA);
						this.employerERefNumberForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.employer.e.reference.number"),
									scope : this,
									maxLength : 50,
									name : "employerERefNumberForEA",
									value : this.userdata != undefined ? this.userdata.employerERefNumberForEA
											: ""
								});
						A.push(this.employerERefNumberForEA);
						this.incomeTaxFileNumberForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.file.number"),
									scope : this,
									maxLength : 50,
									name : "incomeTaxFileNumberForEA",
									value : this.userdata != undefined ? this.userdata.incomeTaxFileNumberForEA
											: ""
								});
						A.push(this.incomeTaxFileNumberForEA);
						this.incomeTaxBranchForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.branch"),
									scope : this,
									maxLength : 50,
									name : "incomeTaxBranchForEA",
									value : this.userdata != undefined ? this.userdata.incomeTaxBranchForEA
											: ""
								});
						A.push(this.incomeTaxBranchForEA);
						this.oldIdentificationNumberForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.old.identification.number"),
									scope : this,
									maxLength : 50,
									name : "oldIdentificationNumberForEA",
									value : this.userdata != undefined ? this.userdata.oldIdentificationNumberForEA
											: ""
								});
						A.push(this.oldIdentificationNumberForEA);
						this.newIdentificationNumberForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.new.identification.number"),
									scope : this,
									name : "newIdentificationNumberForEA",
									maxLength : 50,
									value : this.userdata != undefined ? this.userdata.newIdentificationNumberForEA
											: ""
								});
						A.push(this.newIdentificationNumberForEA);
						this.accNumberKWSPForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.account.number.kwsp"),
									scope : this,
									maxLength : 50,
									name : "accNumberKWSPForEA",
									value : this.userdata != undefined ? this.userdata.accNumberKWSPForEA
											: ""
								});
						A.push(this.accNumberKWSPForEA);
						this.incomeTaxPaidByEmployerForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.incometax.paid.by.employer"),
									scope : this,
									maxLength : 10,
									name : "incomeTaxPaidByEmployerForEA",
									value : this.userdata != undefined ? this.userdata.incomeTaxPaidByEmployerForEA
											: ""
								});
						A.push(this.incomeTaxPaidByEmployerForEA);
						this.carAndPetrolForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.car.and.petrol"),
									scope : this,
									maxLength : 10,
									name : "carAndPetrolForEA",
									value : this.userdata != undefined ? this.userdata.carAndPetrolForEA
											: ""
								});
						A.push(this.carAndPetrolForEA);
						this.carTypeForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.car.type"),
									scope : this,
									maxLength : 50,
									name : "carTypeForEA",
									value : this.userdata != undefined ? this.userdata.carTypeForEA
											: ""
								});
						A.push(this.carTypeForEA);
						this.carYearMakeForEA = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.car.year.make"),
									scope : this,
									format : "Y-m-d",
									width : 150,
									name : "carYearMakeForEA",
									value : this.userdata != undefined ? this.userdata.carYearMakeForEA
											: ""
								});
						A.push(this.carYearMakeForEA);
						this.carModelForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.car.model"),
									scope : this,
									maxLength : 50,
									name : "carModelForEA",
									value : this.userdata != undefined ? this.userdata.carModelForEA
											: ""
								});
						A.push(this.carModelForEA);
						this.driverWagesForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.driver.wages"),
									scope : this,
									maxLength : 10,
									name : "driverWagesForEA",
									value : this.userdata != undefined ? this.userdata.driverWagesForEA
											: ""
								});
						A.push(this.driverWagesForEA);
						this.entertainmentForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.entertainment"),
									scope : this,
									maxLength : 10,
									name : "entertainmentForEA",
									value : this.userdata != undefined ? this.userdata.entertainmentForEA
											: ""
								});
						A.push(this.entertainmentForEA);
						this.handphoneForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.handphone"),
									scope : this,
									maxLength : 10,
									name : "handphoneForEA",
									value : this.userdata != undefined ? this.userdata.handphoneForEA
											: ""
								});
						A.push(this.handphoneForEA);
						this.maidAndGardenerForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.maid.and.gardener"),
									scope : this,
									maxLength : 10,
									name : "maidAndGardenerForEA",
									value : this.userdata != undefined ? this.userdata.maidAndGardenerForEA
											: ""
								});
						A.push(this.maidAndGardenerForEA);
						this.airTicketsForHolidaysForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.air.tickets.for.holidays"),
									scope : this,
									maxLength : 10,
									name : "airTicketsForHolidaysForEA",
									value : this.userdata != undefined ? this.userdata.airTicketsForHolidaysForEA
											: ""
								});
						A.push(this.airTicketsForHolidaysForEA);
						this.otherBenefitsForClothingAndFoodsForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.other.benefits.clothing.foods"),
									scope : this,
									maxLength : 10,
									name : "otherBenefitsForClothingAndFoodsForEA",
									value : this.userdata != undefined ? this.userdata.otherBenefitsForClothingAndFoodsForEA
											: ""
								});
						A.push(this.otherBenefitsForClothingAndFoodsForEA);
						this.housingAddressForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.housing.address"),
									scope : this,
									maxLength : 50,
									name : "housingAddressForEA",
									value : this.userdata != undefined ? this.userdata.housingAddressForEA
											: ""
								});
						A.push(this.housingAddressForEA);
						this.refundsFromKWSPOtherForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.refunds.from.kwsp.other"),
									scope : this,
									maxLength : 10,
									name : "refundsFromKWSPOtherForEA",
									value : this.userdata != undefined ? this.userdata.refundsFromKWSPOtherForEA
											: ""
								});
						A.push(this.refundsFromKWSPOtherForEA);
						this.compensationLossWorkForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.compensation.loss.work"),
									scope : this,
									maxLength : 10,
									name : "compensationLossWorkForEA",
									value : this.userdata != undefined ? this.userdata.compensationLossWorkForEA
											: ""
								});
						A.push(this.compensationLossWorkForEA);
						this.retirementPaymentForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.retirement.payment"),
									scope : this,
									maxLength : 10,
									name : "retirementPaymentForEA",
									value : this.userdata != undefined ? this.userdata.retirementPaymentForEA
											: ""
								});
						A.push(this.retirementPaymentForEA);
						this.periodicalPaymentForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.periodical.payment"),
									scope : this,
									maxLength : 10,
									name : "periodicalPaymentForEA",
									value : this.userdata != undefined ? this.userdata.periodicalPaymentForEA
											: ""
								});
						A.push(this.periodicalPaymentForEA);
						this.cp38DeductionForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cp38.deduction"),
									scope : this,
									maxLength : 10,
									name : "cp38DeductionForEA",
									value : this.userdata != undefined ? this.userdata.cp38DeductionForEA
											: ""
								});
						A.push(this.cp38DeductionForEA);
						this.nameForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.EmailTemplateCmb.Name"),
									scope : this,
									maxLength : 50,
									name : "nameForEA",
									value : this.userdata != undefined ? this.userdata.nameForEA
											: ""
								});
						A.push(this.nameForEA);
						this.portionOfKWSPForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.portion.of.kwsp"),
									scope : this,
									maxLength : 10,
									name : "portionOfKWSPForEA",
									value : this.userdata != undefined ? this.userdata.portionOfKWSPForEA
											: ""
								});
						A.push(this.portionOfKWSPForEA);
						this.typeOfIncomeForEA = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.type.of.income"),
									scope : this,
									maxLength : 50,
									name : "typeOfIncomeForEA",
									value : this.userdata != undefined ? this.userdata.typeOfIncomeForEA
											: ""
								});
						A.push(this.typeOfIncomeForEA);
						this.contributionKWSPForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.contribution.on.kwsp"),
									scope : this,
									maxLength : 10,
									name : "contributionKWSPForEA",
									value : this.userdata != undefined ? this.userdata.contributionKWSPForEA
											: ""
								});
						A.push(this.contributionKWSPForEA);
						this.amountForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Amount"),
									scope : this,
									maxLength : 10,
									name : "amountForEA",
									value : this.userdata != undefined ? this.userdata.amountForEA
											: ""
								});
						A.push(this.amountForEA);
						this.nonTaxableAmountForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.non.taxable.amount"),
									scope : this,
									maxLength : 10,
									name : "nonTaxableAmountForEA",
									value : this.userdata != undefined ? this.userdata.nonTaxableAmountForEA
											: ""
								});
						A.push(this.nonTaxableAmountForEA);
						this.otherBenefitsForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.other.benefits"),
									scope : this,
									maxLength : 10,
									name : "otherBenefitsForEA",
									value : this.userdata != undefined ? this.userdata.otherBenefitsForEA
											: ""
								});
						A.push(this.otherBenefitsForEA);
						this.housingBenefitsWithFurnitureForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.housing.benefits.with.furniture"),
									scope : this,
									maxLength : 10,
									name : "housingBenefitsWithFurnitureForEA",
									value : this.userdata != undefined ? this.userdata.housingBenefitsWithFurnitureForEA
											: ""
								});
						A.push(this.housingBenefitsWithFurnitureForEA);
						this.housingBenefitsWithKitchenForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.housing.benefits.with.kitchen"),
									scope : this,
									maxLength : 10,
									name : "housingBenefitsWithKitchenForEA",
									value : this.userdata != undefined ? this.userdata.housingBenefitsWithKitchenForEA
											: ""
								});
						A.push(this.housingBenefitsWithFurnitureForEA);
						this.furnitureAndFittingForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.furniture.and.fitting"),
									scope : this,
									maxLength : 10,
									name : "furnitureAndFittingForEA",
									value : this.userdata != undefined ? this.userdata.furnitureAndFittingForEA
											: ""
								});
						A.push(this.furnitureAndFittingForEA);
						this.kitchenAndUtensilsForEA = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.kitchen.and.utensils"),
									scope : this,
									maxLength : 10,
									name : "kitchenAndUtensilsForEA",
									value : this.userdata != undefined ? this.userdata.kitchenAndUtensilsForEA
											: ""
								});
						A.push(this.kitchenAndUtensilsForEA);
						this.compEA = this.getFieldSet(A,
								Wtf.Malaysian_StatutoryForm_EA, B);
						return this.compEA
					}
				});
Wtf.MalaysianCompanyStatutoryForm = function(A) {
	Wtf.apply(this, A);
	Wtf.MalaysianCompanyStatutoryForm.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.MalaysianCompanyStatutoryForm,
				Wtf.Panel,
				{
					layout : "fit",
					closable : false,
					initComponent : function() {
						Wtf.MalaysianCompanyStatutoryForm.superclass.initComponent
								.call(this)
					},
					onRender : function(G) {
						var J = this.getTopToolbar();
						var N = this.getAmanahSahamNasional();
						var H = this.getTabungHaji();
						var O = this.getCP21();
						var K = this.getHRDLevy();
						var E = this.getTP1();
						var C = this.getTP2();
						var B = this.getTP3();
						var A = this.getPCB2();
						var I = this.getCP39();
						var F = this.getCP39A();
						var M = this.getCompanyDetails();
						var L = this.getEA();
						var D = new Wtf.Panel(
								{
									layout : "column",
									bodyBorder : false,
									border : false,
									items : [
											{
												columnWidth : 0.32,
												bodyBorder : false,
												border : false,
												layout : "form",
												style : "padding-top:10px; padding-rigth:1px; padding-bottom:1px; padding-left:10px;",
												items : [ N, K, H, O ]
											},
											{
												columnWidth : 0.32,
												layout : "form",
												style : "padding-top:10px; padding-rigth:10px; padding-bottom:10px; padding-left:10px;",
												bodyBorder : false,
												border : false,
												items : [ A, E, C, B ]
											},
											{
												columnWidth : 0.36,
												bodyBorder : false,
												layout : "form",
												style : "padding-top:10px; padding-rigth:10px; padding-bottom:10px; padding-left:10px;",
												border : false,
												items : [ I, F, M, L ]
											} ]
								});
						this.formPanel = new Wtf.form.FormPanel(
								{
									autoWidth : true,
									autoScroll : true,
									baseParams : {
										userid : this.userid
									},
									url : "Payroll/MalaysianStatutoryForm/saveCompanyFormInformation.py",
									border : true,
									bodyBorder : false,
									id : "formPanel",
									items : [ D ]
								});
						this.mainPanel = new Wtf.Panel(
								{
									layout : "fit",
									border : false,
									scope : this,
									tbar : J,
									items : [ this.formPanel ],
									bbar : [
											"->",
											{
												id : "Submit",
												iconCls : getButtonIconCls(Wtf.btype.submitbutton),
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												handler : this.submit
														.createDelegate(this)
											} ]
								});
						this.add(this.mainPanel);
						if (this.paymentTypeCombo.getValue() == 1) {
							this.chqNo.disable();
							this.chqNo.setValue("")
						} else {
							this.chqNo.enable();
							this.chqNo
									.setValue(this.userdata != undefined ? this.userdata.asnchqno
											: "")
						}
						this.paymentTypeCombo
								.on(
										"select",
										function(Q, R, P) {
											if (P == 1) {
												this.chqNo.enable();
												this.chqNo
														.setValue(this.userdata != undefined ? this.userdata.asnchqno
																: "")
											} else {
												this.chqNo.disable();
												this.chqNo.setValue("")
											}
										}, this);
						if (this.tabunghajiPaymentTypeCombo.getValue() == 1) {
							this.tabunghajiChqNo.disable();
							this.tabunghajiChqNo.setValue("")
						} else {
							this.tabunghajiChqNo.enable();
							this.tabunghajiChqNo
									.setValue(this.userdata != undefined ? this.userdata.tabunghajichqno
											: "")
						}
						this.tabunghajiPaymentTypeCombo
								.on(
										"select",
										function(Q, R, P) {
											if (P == 1) {
												this.tabunghajiChqNo.enable();
												this.tabunghajiChqNo
														.setValue(this.userdata != undefined ? this.userdata.tabunghajichqno
																: "")
											} else {
												this.tabunghajiChqNo.disable();
												this.tabunghajiChqNo
														.setValue("")
											}
										}, this);
						if (this.hrdPaymentTypeCombo.getValue() == 1) {
							this.hrdChqNo.disable();
							this.hrdChqNo.setValue("")
						} else {
							this.hrdChqNo.enable();
							this.hrdChqNo
									.setValue(this.userdata != undefined ? this.userdata.hrdchqno
											: "")
						}
						this.hrdPaymentTypeCombo
								.on(
										"select",
										function(Q, R, P) {
											if (P == 1) {
												this.hrdChqNo.enable();
												this.hrdChqNo
														.setValue(this.userdata != undefined ? this.userdata.hrdchqno
																: "")
											} else {
												this.hrdChqNo.disable();
												this.hrdChqNo.setValue("")
											}
										}, this);
						if (!Wtf.StoreMgr.containsKey("adminstore")) {
							Wtf.adminStore.load();
							Wtf.StoreMgr.add("adminstore", Wtf.adminStore)
						}
						Wtf.adminStore
								.on(
										"load",
										function() {
											if (this.userdata != undefined) {
												this.adminCmb
														.setValue(this.userdata.asnpreparedby);
												this.tabunghajiAdminCmb
														.setValue(this.userdata.tabunghajipreparedby);
												this.adminCmbTP1
														.setValue(this.userdata.personinchargetp1);
												this.adminCmbTP2
														.setValue(this.userdata.personinchargetp2);
												this.adminCmbTP3
														.setValue(this.userdata.personinchargetp3);
												this.adminCmbCP39
														.setValue(this.userdata.personinchargecp39);
												this.adminCmbCP39A
														.setValue(this.userdata.personinchargecp39a);
												this.adminCmbPCB2
														.setValue(this.userdata.personinchargepcb2);
												this.adminCmbEA
														.setValue(this.userdata.adminCmbEA)
											} else {
												this.adminCmb.setValue("");
												this.tabunghajiAdminCmb
														.setValue("");
												this.adminCmbTP1.setValue("");
												this.adminCmbTP2.setvalue("");
												this.adminCmbTP3.setValue("");
												this.adminCmbCP39.setValue("");
												this.adminCmbCP39A.setValue("");
												this.adminCmbPCB2.setValue("");
												this.adminCmbEA.setValue("")
											}
										}, this);
						this.decMonthCmb.on("select", function(Q, P, R) {
							this.reloadData()
						}, this);
						this.decYearCmb.on("select", function(Q, P, R) {
							this.reloadData()
						}, this);
						Wtf.MalaysianCompanyStatutoryForm.superclass.onRender
								.call(this, G)
					},
					reloadData : function() {
						calMsgBoxShow(202, 4, true);
						Wtf.Ajax
								.requestEx(
										{
											url : "Payroll/MalaysianStatutoryForm/getCompanyFormInformation.py",
											params : {
												companyid : companyid,
												month : this.decMonthCmb
														.getValue(),
												year : this.decYearCmb
														.getValue()
											}
										},
										this,
										function(response) {
											var userdata = eval("(" + response
													+ ")");
											var data = userdata.data.userdata;
											if (data != undefined) {
												this
														.setAmanahSahamNasional(data);
												this.setTabungHaji(data);
												this.setCP21(data);
												this.setHRDLevy(data);
												this.setPCB2(data);
												this.setTP1(data);
												this.setTP2(data);
												this.setTP3(data);
												this.setCP39(data);
												this.setCP39A(data);
												this.setEA(data);
												this.setCompanyDetails(data)
											}
											WtfGlobal.closeProgressbar()
										}, function(response) {
										})
					},
					getTopToolbar : function() {
						var A = [];
						this.decMonthCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Month"),
									hiddenName : "month",
									forceSelection : true,
									mode : "local",
									valueField : "id",
									displayField : "name",
									store : Wtf.monthStore0,
									width : 80,
									typeAhead : true,
									value : this.statutoryForm != undefined ? this.statutoryForm.monthCmb
											.getValue()
											: new Date().getMonth()
								});
						A.push("-");
						A.push(WtfGlobal
								.getLocaleText("hrms.payroll.select.month")
								+ ": ");
						A.push(this.decMonthCmb);
						this.decYearCmb = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.Year"),
									hiddenName : "year",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : Wtf.yearStore,
									width : 80,
									typeAhead : true,
									value : this.statutoryForm != undefined ? this.statutoryForm.yearCmb
											.getValue()
											: new Date().getFullYear()
								});
						A.push("-");
						A.push(WtfGlobal
								.getLocaleText("hrms.payroll.select.year")
								+ ": ");
						A.push(this.decYearCmb);
						return A
					},
					submit : function() {
						if (this.formPanel.form.isValid()) {
							this.formPanel
									.getForm()
									.submit(
											{
												params : {
													month : this.decMonthCmb
															.getValue(),
													year : this.decYearCmb
															.getValue()
												},
												waitMsg : WtfGlobal
														.getLocaleText("hrms.common.saving.information"),
												success : function() {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.common.user.information.saved.successfully"));
													this.ownerCt.remove(this);
													if (this.statutoryForm != undefined) {
														this.statutoryForm.empGDS
																.reload()
													}
												},
												failure : function(B, A) {
													Wtf.notify
															.msg(
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.common.error.saving.user.information"))
												},
												scope : this
											})
						} else {
						}
					},
					setAmanahSahamNasional : function(A) {
						this.companyid.setValue(A.companyid);
						this.paymentTypeCombo.setValue(A.asnpaymenttype);
						this.chqNo.setValue(A.asnchqno);
						this.adminCmb.setValue(A.asnpreparedby)
					},
					getAmanahSahamNasional : function() {
						var A = [];
						this.companyid = new Wtf.form.Hidden(
								{
									name : "companyid",
									id : "companyid",
									value : this.userdata != undefined ? this.userdata.companyid
											: ""
								});
						A.push(this.companyid);
						this.paymentType = new Wtf.data.SimpleStore(
								{
									id : "paymentType",
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.cash") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.cheque") ] ]
								});
						this.paymentTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.payment.type"),
									hiddenName : "asnpaymenttype",
									name : "asnpaymenttype",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.paymentType,
									width : "85%",
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.asnpaymenttype
											: "",
									allowBlank : false
								});
						A.push(this.paymentTypeCombo);
						this.chqNo = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cheque.no"),
									scope : this,
									name : "asnchqno",
									width : "75%",
									disabled : true,
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.asnchqno
											: ""
								});
						A.push(this.chqNo);
						this.adminCmb = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.prepared.by"),
									mode : "local",
									hiddenName : "asnpreparedby",
									name : "asnpreparedby",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.asnpreparedby
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmb);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_AmanahSahamNasional,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setTabungHaji : function(A) {
						this.tabunghajiPaymentTypeCombo
								.setValue(A.tabunghajipaymenttype);
						this.tabunghajiChqNo.setValue(A.tabunghajichqno);
						this.tabunghajiAdminCmb.setValue(A.tabunghajichqno);
						this.tabunghajiAdminCmb
								.setValue(A.tabunghajipreparedby)
					},
					getTabungHaji : function() {
						var A = [];
						this.tabunghajiPaymentType = new Wtf.data.SimpleStore(
								{
									id : "paymentType",
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.cash") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.cheque") ] ]
								});
						this.tabunghajiPaymentTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.payment.type"),
									hiddenName : "tabunghajipaymenttype",
									name : "tabunghajipaymenttype",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.tabunghajiPaymentType,
									width : "85%",
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.tabunghajipaymenttype
											: "",
									allowBlank : false
								});
						A.push(this.tabunghajiPaymentTypeCombo);
						this.tabunghajiChqNo = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cheque.no"),
									scope : this,
									name : "tabunghajichqno",
									width : "75%",
									disabled : true,
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.tabunghajichqno
											: ""
								});
						A.push(this.tabunghajiChqNo);
						this.tabunghajiAdminCmb = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.prepared.by"),
									mode : "local",
									hiddenName : "tabunghajipreparedby",
									name : "tabunghajipreparedby",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.tabunghajipreparedby
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.tabunghajiAdminCmb);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_TabungHaji,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setCP21 : function(A) {
						this.empfilerefno.setValue(A.cp21employerfilerefno)
					},
					getCP21 : function() {
						var A = [];
						this.empfilerefno = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employer.file.reference.no"),
									scope : this,
									width : 200,
									name : "cp21employerfilerefno",
									value : this.userdata != undefined ? this.userdata.cp21employerfilerefno
											: ""
								});
						A.push(this.empfilerefno);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_CP21,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setHRDLevy : function(A) {
						this.hrdPaymentTypeCombo.setValue(A.hrdpaymenttype);
						this.hrdChqNo.setValue(A.hrdchqno)
					},
					getHRDLevy : function() {
						var A = [];
						this.hrdPaymentType = new Wtf.data.SimpleStore(
								{
									id : "paymentType",
									fields : [ "id", "name" ],
									data : [
											[
													"1",
													WtfGlobal
															.getLocaleText("hrms.payroll.cash") ],
											[
													"2",
													WtfGlobal
															.getLocaleText("hrms.payroll.cheque") ] ]
								});
						this.hrdPaymentTypeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.payment.type"),
									hiddenName : "hrdpaymenttype",
									name : "hrdpaymenttype",
									mode : "local",
									valueField : "id",
									displayField : "name",
									forceSelection : true,
									store : this.hrdPaymentType,
									width : "85%",
									typeAhead : true,
									value : this.userdata != undefined ? this.userdata.hrdpaymenttype
											: "",
									allowBlank : false
								});
						A.push(this.hrdPaymentTypeCombo);
						this.hrdChqNo = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.cheque.no"),
									scope : this,
									name : "hrdchqno",
									width : "75%",
									disabled : true,
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.hrdchqno
											: ""
								});
						A.push(this.hrdChqNo);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_HRDLevy,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setPCB2 : function(A) {
						this.branch.setValue(A.branch);
						this.employerno.setValue(A.employerno);
						this.adminCmbPCB2.setValue(A.personinchargepcb2)
					},
					getPCB2 : function() {
						var A = [];
						this.branch = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.branch"),
									scope : this,
									name : "branch",
									width : "75%",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.branch
											: ""
								});
						A.push(this.branch);
						this.employerno = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employer.number"),
									scope : this,
									name : "employerno",
									width : "75%",
									maxLength : 10,
									value : this.userdata != undefined ? this.userdata.employerno
											: ""
								});
						A.push(this.employerno);
						this.adminCmbPCB2 = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_PCB2 ]
											}),
									mode : "local",
									hiddenName : "personinchargepcb2",
									name : "personinchargepcb2",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargepcb2
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbPCB2);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_PCB2,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setTP1 : function(A) {
						this.adminCmbTP1.setValue(A.personinchargetp1)
					},
					getTP1 : function() {
						var A = [];
						this.adminCmbTP1 = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_TP1 ]
											}),
									mode : "local",
									hiddenName : "personinchargetp1",
									name : "personinchargetp1",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargetp1
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbTP1);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_TP1,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setTP2 : function(A) {
						this.adminCmbTP2.setValue(A.personinchargetp2)
					},
					getTP2 : function() {
						var A = [];
						this.adminCmbTP2 = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_TP2 ]
											}),
									mode : "local",
									hiddenName : "personinchargetp2",
									name : "personinchargetp2",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargetp2
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbTP2);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_TP2,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setTP3 : function(A) {
						this.adminCmbTP3.setValue(A.personinchargetp3)
					},
					getTP3 : function() {
						var A = [];
						this.adminCmbTP3 = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_TP3 ]
											}),
									mode : "local",
									hiddenName : "personinchargetp3",
									name : "personinchargetp3",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargetp3
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbTP3);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_TP3,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setCP39 : function(A) {
						this.adminCmbCP39.setValue(A.personinchargecp39)
					},
					getCP39 : function() {
						var A = [];
						this.adminCmbCP39 = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_CP39 ]
											}),
									mode : "local",
									hiddenName : "personinchargecp39",
									name : "personinchargecp39",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargecp39
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbCP39);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_CP39,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setCompanyDetails : function(A) {
						this.companyOtherPhoneNumber
								.setValue(A.companyEmployerNumbeHeadQuarter)
					},
					getCompanyDetails : function() {
						var A = [];
						this.companyOtherPhoneNumber = new Wtf.form.TextField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.employer.no.head.quarter"),
									scope : this,
									width : 200,
									name : "companyEmployerNumbeHeadQuarter",
									value : this.userdata != undefined ? this.userdata.companyEmployerNumbeHeadQuarter
											: ""
								});
						A.push(this.companyOtherPhoneNumber);
						var B = new Wtf.form.FieldSet(
								{
									title : WtfGlobal
											.getLocaleText("hrms.common.company.details"),
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setCP39A : function(A) {
						this.adminCmbCP39A.setValue(A.personinchargecp39a)
					},
					getCP39A : function() {
						var A = [];
						this.adminCmbCP39A = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_CP39 ]
											}),
									mode : "local",
									hiddenName : "personinchargecp39a",
									name : "personinchargecp39a",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.personinchargecp39a
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbCP39A);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_CP39A,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					},
					setEA : function(A) {
						this.adminCmbEA.setValue(A.adminCmbEA)
					},
					getEA : function() {
						var A = [];
						this.adminCmbEA = new Wtf.form.ComboBox(
								{
									displayField : "username",
									store : Wtf.adminStore,
									fieldLabel : WtfGlobal
											.getLocaleText({
												key : "hrms.common.person.in.charge",
												params : [ Wtf.Malaysian_StatutoryForm_EA ]
											}),
									mode : "local",
									hiddenName : "adminCmbEA",
									name : "adminCmbEA",
									disabled : this.editperm,
									forceSelection : true,
									valueField : "userid",
									triggerAction : "all",
									width : "85%",
									value : this.userdata != undefined ? this.userdata.adminCmbEA
											: "",
									typeAhead : true,
									allowBlank : false
								});
						A.push(this.adminCmbEA);
						var B = new Wtf.form.FieldSet(
								{
									title : Wtf.Malaysian_StatutoryForm_EA,
									style : "padding-left:20px; padding-top:20px; padding-right: 20px; padding-bottom:20px; align:center;",
									width : "85%",
									autoHeight : true,
									items : A
								});
						return B
					}
				});
Wtf.WageTaxDeducWin = function(A) {
	A.border = false;
	A.layout = "fit";
	A.ren = 0;
	Wtf.WageTaxDeducWin.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.WageTaxDeducWin,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.WageTaxDeducWin.superclass.initComponent.call(this,
								A);
						this.text = new Wtf.form.NumberField({});
						this.netcomp = 0;
						this.amtcomp = 0;
						this.deduccomp = 0;
						this.text1 = new Wtf.form.NumberField({});
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							scope : this
						});
						this.fieldstax = [ {
							name : "type"
						}, {
							name : "code"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "rate"
						}, {
							name : "assigned"
						}, {
							name : "depwage"
						}, {
							name : "depwageid"
						}, {
							name : "expr"
						}, {
							name : "computeon"
						}, {
							name : "comp"
						} ];
						this.expander = new Wtf.grid.RowExpander(
								{
									tpl : new Wtf.XTemplate(
											"<p>&nbsp;&nbsp;&nbsp;&nbsp;<b>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.compute.on")
													+ ":</b> {[this.f(values)]}</p>",
											{
												f : function(K) {
													var E = K.computeon;
													var I = Wtf.getCmp(this.id);
													if (E == "0") {
														return WtfGlobal
																.getLocaleText("hrms.payroll.currentdeductions")
													} else {
														if (E == "1") {
															return WtfGlobal
																	.getLocaleText("hrms.payroll.currentearnings")
														} else {
															if (E == "2") {
																return WtfGlobal
																		.getLocaleText("hrms.payroll.netsalary")
															} else {
																if (E == "3") {
																	var B = "";
																	var M = K.expr
																			.split("(add)");
																	I.storetax
																			.clearFilter(true);
																	for ( var F = 0; F < M.length; F++) {
																		var L = M[F]
																				.split("(sub)");
																		for ( var G = 0; G < L.length; G++) {
																			var H = L[G]
																					.split("*");
																			var D = 1;
																			var J;
																			if (H.length > 1) {
																				D = H[0];
																				J = H[1]
																			} else {
																				J = H[0]
																			}
																			var C = I.storetax
																					.find(
																							"id",
																							J);
																			if (C > -1) {
																				if (G == 0) {
																					B += "+"
																				} else {
																					B += "-"
																				}
																				B += D
																						+ " * "
																						+ I.storetax
																								.getAt(
																										C)
																								.get(
																										"type")
																			}
																		}
																	}
																	I.storetax
																			.filter(
																					"comp",
																					"tax");
																	return B
																} else {
																	return "N/A"
																}
															}
														}
													}
												}
											}, this)
								});
						this.fieldstax = Wtf.data.Record.create(this.fieldstax);
						this.readertax = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.fieldstax);
						this.storetax = new Wtf.data.Store({
							url : "Payroll/Tax/getTaxMaster.py",
							method : "GET",
							reader : this.readertax
						});
						this.storetaxforgrid = new Wtf.data.Store({
							url : "Payroll/Tax/getDefualtTax.py",
							method : "GET",
							reader : this.readertax
						});
						this.storetaxforgrid.load({
							params : {
								type : "getDefualtTaxes",
								start : 0,
								grouper : "addpayroll",
								limit : 15
							}
						});
						this.storetaxforgrid.on("load", function() {
							this.addemptyrec()
						}, this);
						this.storetax1 = new Wtf.data.Store({
							url : Wtf.req.base + "PayrollHandler.jsp",
							method : "GET"
						});
						this.Ttypecombo = new Wtf.form.ComboBox({
							store : this.storetax,
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.payroll.TaxTypeName"),
							displayField : "type",
							valueField : "type",
							mode : "local",
							forceSelection : true,
							scope : this,
							width : 180,
							height : 200,
							triggerAction : "all",
							listeners : {
								scope : this,
								select : function(C, D, B) {
									this.insertrateRate = D.get("cash");
									this.insertrateCode = D.get("code");
									this.insertrateId = D.get("id");
									this.insertrateratetype = D.get("rate");
									this.insertratedepwage = D.get("depwage");
									this.insertratedepwageid = D
											.get("depwageid");
									this.insertratetype = D.get("type");
									this.insertratecomputeon = D
											.get("computeon");
									this.insertrateexpr = D.get("expr")
								}
							}
						});
						this.Ttypecombo.on("expand", function(B, C) {
							this.storetax.filter("comp", "tax")
						}, this);
						this.Tratenumberfield = new Wtf.form.NumberField({
							allowNegative : false
						});
						this.checkselmodel = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this
								});
						this.cmtax = new Wtf.grid.ColumnModel(
								[
										this.expander,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.TaxType"),
											scope : this,
											width : 200,
											dataIndex : "type",
											editor : this.Ttypecombo
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.code"),
											dataIndex : "code"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.value"),
											dataIndex : "cash",
											renderer : function(F, E, B, G, D,
													C) {
												if (B.data.rate == "1") {
													return ('<div align="right">'
															+ parseFloat(F)
																	.toFixed(2) + " %</div>")
												} else {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.payrollcurrencyRenderer(F) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.percent.of"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											renderer : this.rendererfun
													.createDelegate(this)
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											dataIndex : "",
											width : 35,
											renderer : function(D, C, B) {
												if (B.data.id != "-1") {
													return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.common.DeleteRecord")
															+ "></div></div>"
												}
											}
										} ]);
						this.storetax.load({
							params : {
								allflag : "true",
								type : "Tax",
								wage : "true",
								deduc : "true",
								grouper : "addpayroll",
								cname : "aa"
							}
						});
						this.grid = new Wtf.grid.EditorGridPanel(
								{
									scope : this,
									stripeRows : true,
									clicksToEdit : 1,
									id : this.id + "addtaxgrid",
									store : this.storetaxforgrid,
									cm : this.cmtax,
									sm : this.checkselmodel,
									listeners : {
										scope : this,
										cellclick : function(B, C, E, D) {
										}
									},
									plugins : this.expander,
									autoScroll : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.Nowageassignedforcurrentsalarytemplate"))
									},
									title : WtfGlobal
											.getLocaleText("hrms.common.Taxes")
								});
						this.grPanel = new Wtf.Panel({
							layout : "fit",
							border : false,
							items : [ this.grid ]
						});
						this.grid
								.on(
										"validateedit",
										function(C) {
											this.currentedit = C.record;
											var B = this.grid
													.getStore()
													.findBy(
															function(D) {
																if (D.data.type == C.value) {
																	return true
																}
															}, this);
											if (B == -1) {
												if (this.insertrateratetype == "0") {
													this.amtcomp++
												}
												if (this.insertratecomputeon == "0") {
													this.deduccomp++;
													this.insertcomp(C.column)
												} else {
													if (this.insertratecomputeon == "1") {
														this
																.insertcomp(C.column);
														this.amtcomp++
													} else {
														if (this.insertratecomputeon == "2") {
															if (this.netcomp > 0) {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.Operationnotpermitted"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.Youcannotincludetwocomponentswhichdependsoneachother"),
																			buttons : Wtf.MessageBox.OK,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO
																		});
																this.cancel = true;
																return false
															} else {
																this.netcomp++;
																this
																		.insertcomp(C.column)
															}
															this.amtcomp++
														} else {
															if (this.insertratecomputeon == "3") {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.SomeDependenceSureYouWanttoContinue"),
																			buttons : Wtf.MessageBox.YESNO,
																			animEl : "mb9",
																			scope : this,
																			icon : Wtf.MessageBox.INFO,
																			fn : function(
																					D,
																					E) {
																				if (D == "yes") {
																					this
																							.insertcomp(C.column);
																					this.storetax
																							.clearFilter(true);
																					this
																							.getdep(this.insertrateexpr);
																					this.storetax
																							.filter(
																									"comp",
																									"tax")
																				} else {
																					this.grid
																							.getStore()
																							.remove(
																									C.record);
																					this.cancel = true;
																					return false
																				}
																			}
																		});
																this.amtcomp++
															} else {
																this
																		.insertcomp(C.column)
															}
														}
													}
												}
											} else {
												this.cancel = true;
												return false
											}
											if (C.record.data.rate == "1") {
												if (C.record.data.cash > 100) {
													return false
												}
											}
										}, this);
						this.grid
								.on(
										"afteredit",
										function(B) {
											if (B.row == (this.grid.getStore()
													.getCount() - 1)) {
												this.addemptyrec();
												this.grid.getSelectionModel()
														.selectAll();
												this.grid
														.getSelectionModel()
														.deselectRow(
																this.grid
																		.getStore()
																		.getCount() - 1)
											}
										}, this);
						this.add(this.grPanel);
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.storetax.on("load", function() {
							if (this.edittemp == "yes") {
								for (this.i = 0; this.i < this.grid.getStore()
										.getCount() - 1; this.i++) {
									this.rec = this.grid.getStore().getAt(
											this.i);
									if (this.rec.get("assigned") == "1") {
										this.checkselmodel.selectRow(this.i,
												true)
									}
								}
							}
						}, this);
						if (this.edittemp == "yes") {
							this.storetaxforgrid.on("load", function() {
								this.grid.getSelectionModel().selectAll();
								this.grid.getSelectionModel().deselectRow(
										this.grid.getStore().getCount() - 1)
							}, this)
						}
						this.grid
								.on(
										"click",
										function(C) {
											if (C.target.className == "pwndCommon gridCancel") {
												var B = this.grid
														.getSelectionModel()
														.getSelected();
												if (this.grid
														.getSelectionModel()
														.getSelections().length > 0) {
													if (this.grid
															.getStore()
															.indexOf(
																	this.grid
																			.getSelectionModel()
																			.getSelected()) != this.grid
															.getStore()
															.getCount() - 1) {
														this.grid
																.getStore()
																.remove(
																		this.grid
																				.getSelectionModel()
																				.getSelected());
														Wtf.getCmp("editTemp")
																.enable();
														if (B.get("computeon") == 2) {
															this.netcomp--
														}
													}
												} else {
												}
											}
										}, this);
						this.record = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "id"
						}, {
							name : "code"
						} ]);
						if (this.paramstore != 1) {
							this.addemptyrec()
						}
					},
					getdep : function(J) {
						var I = J.split("(add)");
						for ( var A = 0; A < I.length; A++) {
							var G = I[A].split("(sub)");
							for ( var C = 0; C < G.length; C++) {
								var F = this.grid.getStore().find("id", G[C]);
								if (F == -1 && G[C] != "") {
									var B = this.storetax.find("id", G[C]);
									if (B > -1) {
										var H = this.storetax.getAt(B);
										if (H.get("comp") == "tax") {
											this.grid.getStore().insert(0, H)
										} else {
											if (H.get("comp") == "wage") {
												var D = this.id.split("addtax");
												if (D.length > 0) {
													var E = Wtf.getCmp(D[0]
															+ "addwage");
													if (E != null) {
														var B = E.storewageforgrid
																.find("id",
																		G[C]);
														if (B == -1) {
															E.addrecord(H)
														}
													}
												}
											} else {
												if (D.length > 0) {
													var E = Wtf.getCmp(D[0]
															+ "adddeduc");
													if (E != null) {
														var B = E.storededucforgrid
																.find("id",
																		G[C]);
														if (B == -1) {
															E.addrecord(H)
														}
													}
												}
											}
										}
										if (H.get("computeon") == "3") {
											this.getdep(H.get("expr"))
										}
									}
								}
							}
						}
					},
					insertcomp : function(A) {
						this.insertrate = this.currentedit;
						if (A == 1) {
							this.insertrate.beginEdit();
							this.insertrate.set("cash", this.insertrateRate);
							this.insertrate.set("code", this.insertrateCode);
							this.insertrate.set("id", this.insertrateId);
							this.insertrate
									.set("rate", this.insertrateratetype);
							this.insertrate.set("depwage",
									this.insertratedepwage);
							this.insertrate.set("type", this.insertratetype);
							this.insertrate.set("depwageid",
									this.insertratedepwageid);
							this.insertrate.set("computeon",
									this.insertratecomputeon);
							this.insertrate.set("expr", this.insertrateexpr);
							this.insertrate.endEdit()
						}
					},
					rendererfun : function(F, K, J, O, G, N) {
						if (J.get("rate") == 0) {
							return "-"
						}
						if (F == "0") {
							return WtfGlobal
									.getLocaleText("hrms.payroll.currentdeductions")
						} else {
							if (F == "1") {
								return WtfGlobal
										.getLocaleText("hrms.payroll.currentearnings")
							} else {
								if (F == "2") {
									return WtfGlobal
											.getLocaleText("hrms.payroll.netsalary")
								} else {
									if (F == "3") {
										var A = "";
										var M = J.get("expr").split("(add)");
										this.storetax.clearFilter(true);
										for ( var E = 0; E < M.length; E++) {
											var L = M[E].split("(sub)");
											for ( var D = 0; D < L.length; D++) {
												var H = L[D].split("*");
												var C = 1;
												var I;
												if (H.length > 1) {
													C = H[0];
													I = H[1]
												} else {
													I = H[0]
												}
												if (I == -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * <b>"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.template.basic")
															+ "</b>"
												}
												var B = this.storetax.find(
														"id", L[D]);
												if (B > -1) {
													if (D == 0) {
														A += "+"
													} else {
														A += "-"
													}
													A += C
															+ " * "
															+ this.storetax
																	.getAt(B)
																	.get("type")
												}
											}
										}
										this.storetax.filter("comp", "tax");
										return A
									}
								}
							}
						}
					},
					addemptyrec : function(A) {
						this.grid.getStore().add(new this.record({
							type : "",
							cash : "",
							id : "-1",
							code : ""
						}))
					}
				});
Wtf.GeneratePayroll = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side", A.autoScroll = true;
	A.layout = "fit";
	A.closable = true;
	Wtf.GeneratePayroll.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.GeneratePayroll,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.GeneratePayroll.superclass.initComponent.call(this,
								A);
						this.fromdateempG = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y"
						});
						this.todateempG = new Wtf.form.DateField({
							width : 135,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							format : "m/d/Y"
						});
						this.usersRec = new Wtf.data.Record.create([ {
							name : "empid"
						}, {
							name : "EName"
						}, {
							name : "Wage"
						}, {
							name : "AccNo"
						}, {
							name : "Tax"
						}, {
							name : "Deduc"
						}, {
							name : "Salary"
						}, {
							name : "FixedSal"
						}, {
							name : "empid"
						}, {
							name : "design"
						} ]);
						this.userds = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.usersRec),
							url : Wtf.req.base + "PayrollHandler.jsp"
						});
						this.userds.load({
							params : {
								start : 0,
								limit : 15,
								taxcash : this.taxcash,
								wagecash : this.wagecash,
								deduccash : this.deduccash,
								TempId : this.TempId,
								type : "EmpPerTemId",
								ttotal : this.ttotal,
								wtotal : this.wtotal,
								dtotal : this.dtotal
							}
						});
						this.userds.on("load", function() {
							if (this.userds.getCount() == 0) {
								calMsgBoxShow(18, 0)
							}
						}, this);
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this,
									singleSelect : false
								});
						this.gridcm = new Wtf.grid.ColumnModel(
								[
										this.selectionModel,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											dataIndex : "EName",
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Earning"),
											dataIndex : "Wage",
											sortable : true,
											groupable : true,
											renderer : function(B) {
												if (B != null) {
													return (WtfGlobal
															.currencyRenderer(parseFloat(
																	B).toFixed(
																	2)))
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Taxes"),
											dataIndex : "Tax",
											sortable : true,
											groupable : true,
											renderer : function(B) {
												if (B != null) {
													return (WtfGlobal
															.currencyRenderer(parseFloat(
																	B).toFixed(
																	2)))
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Deductions"),
											dataIndex : "Deduc",
											sortable : true,
											groupable : true,
											renderer : function(B) {
												if (B != null) {
													return (WtfGlobal
															.currencyRenderer(parseFloat(
																	B).toFixed(
																	2)))
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.netpay"),
											dataIndex : "Salary",
											scope : this,
											sortable : true,
											groupable : true,
											renderer : function(B) {
												if (B != null) {
													return (WtfGlobal
															.currencyRenderer(parseFloat(
																	B).toFixed(
																	2)))
												}
											}
										} ], this);
						this.sm2 = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : false,
							scope : this,
							listeners : {
								scope : this,
								rowselect : function(E, C, B) {
									var D = this.usergrid.getSelectionModel()
											.getSelected().data;
									this.ename = D.EName;
									this.accno = D.AccNo;
									this.salary = D.Wage;
									this.fixedsal = D.FixedSal;
									this.tax = D.Tax;
									this.deduc = D.Deduc;
									this.empid = D.empid;
									this.design = D.design
								},
								rowdeselect : function(D, C, B) {
								}
							}
						});
						this.usergrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									loadMask : true,
									searchLabel : WtfGlobal
											.getLocaleText("hrms.common.QuickSearch"),
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.grid.search.msg"),
									searchField : "EName",
									viewConfig : {
										forceFit : true
									},
									store : this.userds,
									cm : this.gridcm,
									scope : this,
									width : 400,
									id : "grouplistgridgenpay",
									border : false,
									sm : this.sm2,
									tbar : [
											"-",
											WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											this.fromdateempG,
											WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											this.todateempG,
											"-",
											this.gensalbtn = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.payroll.GenerateSalary"),
														scope : this,
														minWidth : 100,
														iconCls : getButtonIconCls(Wtf.btype.assignbutton),
														handler : function() {
															if (this.fromdateempG
																	.getRawValue() == ""
																	|| this.todateempG
																			.getRawValue() == ""
																	|| this.fromdateempG
																			.getRawValue() > this.todateempG
																			.getRawValue()) {
																calMsgBoxShow(
																		14, 0)
															} else {
																this.arr = this.usergrid
																		.getSelections();
																if (this.arr.length == 0) {
																	calMsgBoxShow(
																			19,
																			0)
																} else {
																	this.jsondata = "";
																	var B = 0;
																	this.arr = this.usergrid
																			.getSelections();
																	for (i = 0; i < this.arr.length; i++) {
																		this.jsondata += "{'EName':'"
																				+ this.arr[i]
																						.get("EName")
																				+ "',";
																		this.jsondata += "'AccNo':'"
																				+ this.arr[i]
																						.get("AccNo")
																				+ "',";
																		this.jsondata += "'Wage':'"
																				+ this.arr[i]
																						.get("Wage")
																				+ "',";
																		this.jsondata += "'FixedSal':'"
																				+ this.arr[i]
																						.get("FixedSal")
																				+ "',";
																		this.jsondata += "'Tax':'"
																				+ this.arr[i]
																						.get("Tax")
																				+ "',";
																		this.jsondata += "'Deduc':'"
																				+ this.arr[i]
																						.get("Deduc")
																				+ "',";
																		this.jsondata += "'empid':'"
																				+ this.arr[i]
																						.get("empid")
																				+ "',";
																		this.jsondata += "'design':'"
																				+ this.arr[i]
																						.get("design")
																				+ "'},";
																		if (this.arr[i]
																				.get("Salary") < 0) {
																			B = 1;
																			break
																		}
																	}
																	this.trmLen1 = this.jsondata.length - 1;
																	this.jsondata = this.jsondata
																			.substr(
																					0,
																					this.trmLen1);
																	if (B == 0) {
																		Wtf.Ajax
																				.requestEx(
																						{
																							url : "Emp/setPayrollforTemp.py",
																							scope : this,
																							method : "post",
																							params : {
																								save : "true",
																								saveType : "PayHistoryforTemp",
																								jsondata : this.jsondata,
																								TempId : this.TempId,
																								stdate : this.fromdateempG
																										.getRawValue(),
																								enddate : this.todateempG
																										.getRawValue()
																							}
																						},
																						this,
																						function(
																								C) {
																							var D = C.value
																									.toString();
																							if (D == "success") {
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.success"),
																												C.msg
																														.toString() ],
																										0);
																								this.empstore
																										.load()
																							} else {
																								if (D == "failure") {
																									calMsgBoxShow(
																											[
																													WtfGlobal
																															.getLocaleText("hrms.common.warning"),
																													C.msg
																															.toString() ],
																											0)
																								}
																							}
																						},
																						function(
																								C) {
																						})
																	} else {
																		calMsgBoxShow(
																				157,
																				0)
																	}
																}
															}
														}
													}),
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.SalaryDetails"),
												scope : this,
												minWidth : 100,
												iconCls : getButtonIconCls(Wtf.btype.reportbutton),
												handler : function() {
													this.arr = this.usergrid
															.getSelections();
													if (this.arr.length > 1) {
														calMsgBoxShow(20, 0)
													} else {
														if (this.usergrid
																.getSelectionModel()
																.getSelected() != null) {
															this.mainTabId = Wtf
																	.getCmp("mainpayrolltab");
															this.payslip = Wtf
																	.getCmp("payslipTabgenpay");
															if (this.payslip == null) {
																this.payslip = new Wtf.EmpPayslip(
																		{
																			layout : "fit",
																			closable : true,
																			iconCls : getTabIconCls(Wtf.etype.hrmsreport),
																			border : false,
																			id : "payslipTabgenpay",
																			TempId : this.TempId,
																			ename : this.ename,
																			accno : this.accno,
																			salary : this.salary,
																			tax : this.tax,
																			empid : this.empid,
																			deduc : this.deduc,
																			cursymbol : this.currency,
																			fixedsal : this.fixedsal,
																			design : this.design
																		});
																this.mainTabId
																		.add(this.payslip)
															}
															this.mainTabId
																	.setActiveTab(this.payslip);
															this.mainTabId
																	.doLayout()
														} else {
															calMsgBoxShow(21, 0)
														}
													}
												}
											},
											this.mypdf = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.payroll.DownloadPayslip"),
														scope : this,
														iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
														tooltip : WtfGlobal
																.getLocaleText("hrms.payroll.view.past.payslips"),
														handler : function() {
															var B = this.sm2
																	.getSelected();
															this
																	.exportReport(
																			1,
																			"pdf",
																			WtfGlobal
																					.getLocaleText("hrms.payroll.leave.card"),
																			B.data["empid"],
																			companyName,
																			this.fromdateempG
																					.getRawValue(),
																			this.todateempG
																					.getRawValue());
															this.empid = null
														}
													}) ]
								});
						this.mypdf.disable();
						this.pan = new Wtf.Panel(
								{
									layout : "fit",
									autoHeight : true,
									columnWidth : 1,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.employee.list"),
									border : false,
									scope : this,
									items : [ this.usergrid ]
								});
						this.MainDataEntryPanelG = new Wtf.Panel({
							layout : "fit",
							border : false,
							bodyStyle : "background:white",
							scope : this,
							items : [ this.usergrid ]
						});
						this.add(this.MainDataEntryPanelG);
						this.doLayout();
						this.on("activate", function(C, B) {
							this.doLayout()
						})
					},
					exportReport : function(J, I, A, E, H, G, D) {
						var F = "";
						var C = '{"data": []}';
						if (J == 1) {
							C = '{"data": ["No","From", "To", "Duration", "Reason", "Type Of Leave", "Paid", "LPW", "Employee Signature", "Approver Signature", "Balance"]}'
						}
						var B = "Payroll/Date/Salary/exportPDF.py?&flag=" + J
								+ "&colHeader=" + C + "&userIDs=" + F
								+ "&reportname=" + A + "&exporttype=" + I
								+ "&empid=" + E + "&cname=" + H + "&stdate="
								+ G + "&cdomain=" + subDomain
								+ "&flagpdf=datewise&enddate=" + D;
						setDldUrl(B)
					}
				});
Wtf.EmpPayslip = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side", A.layout = "fit";
	A.closable = true;
	this.modifiedflag = 0;
	Wtf.EmpPayslip.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.EmpPayslip,
				Wtf.Panel,
				{
					initComponent : function(F) {
						Wtf.EmpPayslip.superclass.initComponent.call(this, F);
						this.addEvents({
							"gridload" : true
						});
						this.jsondata = "";
						var B = this.cursymbol;
						var K = 0;
						var D = 0;
						var C = 0;
						var A = 0;
						this.salgen = 0;
						var G = WtfGlobal.getCurrencySymbol();
						this.empform = new Wtf.Panel(
								{
									height : 110,
									columnWidth : 1,
									border : false,
									bodyStyle : "margin-left:33%;margin-top:1%",
									scope : this,
									items : [ {
										height : 100,
										width : 400,
										scope : this,
										layout : "form",
										bodyStyle : "padding-top:20px;padding-left:50px;",
										items : [
												{
													xtype : "textfield",
													width : "70%",
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.common.employee.name"),
													value : this.ename,
													readOnly : true
												},
												{
													xtype : "textfield",
													width : "70%",
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.AccountNumber"),
													readOnly : true,
													value : this.accno
												} ]
									} ]
								});
						if (this.flag == "employee") {
							this.storeURL1 = Wtf.req.base
									+ "PayrollHandler.jsp?type=HistWages&TempId="
									+ this.TempId + "&histid=" + this.histid;
							this.storeURL3 = Wtf.req.base
									+ "PayrollHandler.jsp?type=HistTaxes&TempId="
									+ this.TempId + "&histid=" + this.histid;
							this.storeURL2 = Wtf.req.base
									+ "PayrollHandler.jsp?type=HistDeduces&TempId="
									+ this.TempId + "&histid=" + this.histid;
							this.storeURL4 = "Payroll/EmpContrib/getHistEmpContrib.py?histid="
									+ this.histid
						} else {
							this.storeURL1 = "Payroll/Wage/getwagesPerTempid.py?TempId="
									+ this.TempId
									+ "&salary="
									+ this.fixedsal
									+ "&empid=" + this.empid + "&grouper=b";
							this.storeURL2 = "Payroll/Deduction/getDeducPerTempid.py?TempId="
									+ this.TempId
									+ "&salary="
									+ this.fixedsal
									+ "&empid="
									+ this.empid
									+ "&stdate="
									+ this.stdate.format("m/d/Y")
									+ "&empid="
									+ this.empid + "&grouper=b";
							this.storeURL3 = "Payroll/Tax/getTaxPerTempid.py?TempId="
									+ this.TempId
									+ "&salary="
									+ this.fixedsal
									+ "&empid="
									+ this.empid
									+ "&grouper=b&firequery=1&netSalary="
									+ this.netSalary;
							this.storeURL4 = "Payroll/EmpContrib/getEmpContribPerTempid.py?TempId="
									+ this.TempId
									+ "&salary="
									+ this.fixedsal
									+ "&empid="
									+ this.empid
									+ "&grouper=b&firequery=1"
						}
						this.pan1 = new Wtf.Panel({
							columnWidth : 0.8,
							bodyStyle : "margin-top:1%",
							border : false,
							scope : this,
							items : [ this.wages = new Wtf.PayslipGrid({
								type : "Earning",
								Localetype : "hrms.common.Earning",
								height : 160,
								scope : this,
								id : "Earning" + this.id,
								TempId : this.TempId,
								empid : this.empid,
								flag : this.flag,
								stdate : this.stdate,
								salary : this.salary,
								mappingid : this.mappingid,
								deduc : this.deduc,
								fixedsal : this.fixedsal,
								Data : "Wage",
								total : this.salary,
								storeURL : this.storeURL1,
								cursymbol : B,
								paycyclestart : this.paycyclestart,
								paycycleend : this.paycycleend,
								paycycleactualstart : this.stdate
										.format("m-d-Y"),
								paycycleactualend : this.enddate
										.format("m-d-Y"),
								ischanged : this.ischanged
							}) ]
						});
						this.wages.on("storeload", function(M, L, N) {
							this.wagestatus = 1;
							if (this.deducstatus == 1 && this.wagestatus == 1
									&& !(this.salaryGenerated == "true")) {
								this.getdepcomp()
							}
						}, this);
						this.wages.on("datamodified", function() {
							this.modifiedflag = 1
						}, this);
						this.pan3 = new Wtf.Panel({
							columnWidth : 0.8,
							border : false,
							bodyStyle : "margin-top:1%",
							scope : this,
							items : [ this.diduces = new Wtf.PayslipGrid({
								type : "Deduction",
								Localetype : "hrms.common.Deductions",
								id : "Deduction" + this.id,
								scope : this,
								height : 150,
								TempId : this.TempId,
								empid : this.empid,
								flag : this.flag,
								stdate : this.stdate,
								salary : this.salary,
								Data : "Deduc",
								fixedsal : this.fixedsal,
								total : this.deduc,
								storeURL : this.storeURL2,
								cursymbol : B,
								paycycleactualstart : this.stdate
										.format("m-d-Y"),
								paycycleactualend : this.enddate
										.format("m-d-Y"),
								paycyclestart : this.paycyclestart,
								paycycleend : this.paycycleend,
								ischanged : this.ischanged
							}) ]
						});
						this.diduces.on("storeload", function(M, L, N) {
							this.deducstatus = 1;
							if (this.deducstatus == 1 && this.wagestatus == 1
									&& !(this.salaryGenerated == "true")) {
								this.getdepcomp()
							}
						}, this);
						this.diduces.on("datamodified", function() {
							this.modifiedflag = 1
						}, this);
						this.pan2 = new Wtf.Panel({
							columnWidth : 0.8,
							bodyStyle : "margin-top:1%",
							border : false,
							scope : this,
							items : [ this.taxes = new Wtf.PayslipGrid({
								type : "Tax",
								Localetype : "hrms.common.Tax",
								id : "Tax" + this.id,
								salary : this.salary,
								empid : this.empid,
								height : 150,
								scope : this,
								flag : this.flag,
								stdate : this.stdate,
								total : this.tax,
								TempId : this.TempId,
								fixedsal : this.fixedsal,
								dtotal : this.deduc,
								Data : "Tax",
								storeURL : this.storeURL3,
								cursymbol : B,
								paycycleactualstart : this.stdate
										.format("m-d-Y"),
								paycycleactualend : this.enddate
										.format("m-d-Y"),
								paycyclestart : this.paycyclestart,
								paycycleend : this.paycycleend,
								ischanged : this.ischanged
							}) ]
						});
						this.taxes.on("storeload", function() {
							this.taxstatus = 1
						}, this);
						this.taxes.on("datamodified", function() {
							this.modifiedflag = 1
						}, this);
						this.pan5 = new Wtf.Panel(
								{
									columnWidth : 0.8,
									bodyStyle : "margin-top:1%",
									border : false,
									scope : this,
									items : [ this.empcontrib = new Wtf.PayslipGrid(
											{
												type : "Employer Contribution",
												Localetype : "hrms.payroll.EmployerContribution",
												id : "Newgrid" + this.id,
												salary : this.salary,
												empid : this.empid,
												height : 150,
												scope : this,
												flag : this.flag,
												stdate : this.stdate,
												mappingid : this.mappingid,
												total : this.tax,
												TempId : this.TempId,
												fixedsal : this.fixedsal,
												dtotal : this.deduc,
												Data : "EC",
												storeURL : this.storeURL4,
												cursymbol : B,
												paycycleactualstart : this.stdate
														.format("m-d-Y"),
												paycycleactualend : this.enddate
														.format("m-d-Y"),
												paycyclestart : this.paycyclestart,
												paycycleend : this.paycycleend,
												ischanged : this.ischanged
											}) ]
								});
						this.empcontrib.on("storeload", function() {
						}, this);
						this.empcontrib.on("datamodified", function() {
						}, this);
						this.pan4 = new Wtf.Panel(
								{
									columnWidth : 0.8,
									layout : "form",
									border : false,
									labelWidth : 65,
									bodyStyle : "margin-left:81%;margin-bottom:2%;margin-top:2%",
									scope : this,
									items : [ this.tot = new Wtf.form.TextField(
											{
												border : true,
												scope : this,
												cls : "textfstyle",
												readOnly : true,
												fieldLabel : '<span style="padding-left:-3px;font-family:Lucida Sans Unicode;"><b>'
														+ WtfGlobal
																.getLocaleText("hrms.payroll.TOTAL")
														+ "</b>("
														+ G
														+ ")</span>",
												allowDecimals : true,
												labelSeparator : "",
												value : 0,
												height : 20,
												width : 120,
												bodyStyle : "margin-left:10%;background:white;border-right:3px",
												decimalPrecision : 2
											}) ]
								});
						this.wages.storetax.on("load", function(N, M, L) {
							this.setTotalSal()
						}, this);
						this.diduces.storetax.on("load", function(N, M, L) {
							this.setTotalSal()
						}, this);
						this.taxes.storetax.on("load", function(N, M, L) {
							this.setTotalSal()
						}, this);
						this.cnamedata = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Weekly"),
										"01" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Monthly"),
										"02" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Quarterly"),
										"03" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Yearly"),
										"04" ] ];
						this.combostore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "cname"
							}, {
								name : "mid"
							} ]
						});
						this.combostore.loadData(this.cnamedata);
						this.TaxName = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.Customer.Name"),
									store : this.combostore,
									displayField : "cname",
									mode : "local",
									scope : this,
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.Selectasalaryfrequency"),
									selectOnFocus : true,
									width : 150,
									value : "Monthly",
									height : 200,
									triggerAction : "all",
									listeners : {
										scope : this,
										select : function(M, N, L) {
										}
									}
								});
						this.fromdateemp = new Wtf.form.DateField({
							width : 155,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.fromdate"),
							format : "m/d/Y",
							disabled : true,
							value : this.stdate
						});
						this.todateemp = new Wtf.form.DateField({
							width : 155,
							readOnly : true,
							emptyText : WtfGlobal
									.getLocaleText("hrms.timesheet.todate"),
							disabled : true,
							format : "m/d/Y",
							value : this.enddate
						});
						this.xbt2 = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.GenerateSalary"),
									scope : this,
									minWidth : 110,
									id : this.id + "GenerateSalary",
									iconCls : getButtonIconCls(Wtf.btype.assignbutton),
									handler : function() {
										if (this.fromdateemp.getRawValue() == ""
												|| this.todateemp.getRawValue() == ""
												|| this.fromdateemp
														.getRawValue() > this.todateemp
														.getRawValue()) {
											calMsgBoxShow(14, 1)
										} else {
											this.Wagejsondata = "";
											for ( var L = 0; L <= this.wages.storetax
													.getCount() - 1; L++) {
												this.WStoreTax = this.wages.storetax
														.getAt(L);
												this.Wagejsondata += "{'type':'"
														+ this.WStoreTax
																.get("Type")
														+ "',";
												this.Wagejsondata += "'Id':'"
														+ this.WStoreTax
																.get("Id")
														+ "',";
												this.Wagejsondata += "'amount':'"
														+ parseFloat(
																this.WStoreTax
																		.get("amount"))
																.toFixed(2)
														+ "',";
												if (this.WStoreTax
														.get("ratetype") == 0) {
													this.Wagejsondata += "'Rate':'0',"
												} else {
													this.Wagejsondata += "'Rate':'"
															+ parseFloat(
																	this.WStoreTax
																			.get("Rate"))
																	.toFixed(2)
															+ "',"
												}
												this.wagetot = this.wages.total
														.getValue().replace(
																/,/g, "");
												this.Wagejsondata += "'total':'"
														+ this.wagetot + "'},"
											}
											this.trmLen1 = this.Wagejsondata.length - 1;
											this.WageJson = this.Wagejsondata
													.substr(0, this.trmLen1);
											this.Deducjsondata = "";
											for ( var L = 0; L <= this.diduces.storetax
													.getCount() - 1; L++) {
												this.DStoreTax = this.diduces.storetax
														.getAt(L);
												this.Deducjsondata += "{'type':'"
														+ this.DStoreTax
																.get("Type")
														+ "',";
												this.Deducjsondata += "'Id':'"
														+ this.DStoreTax
																.get("Id")
														+ "',";
												this.Deducjsondata += "'amount':'"
														+ parseFloat(
																this.DStoreTax
																		.get("amount"))
																.toFixed(2)
														+ "',";
												if (this.DStoreTax
														.get("ratetype") == 0) {
													this.Deducjsondata += "'Rate':'0',"
												} else {
													this.Deducjsondata += "'Rate':'"
															+ parseFloat(
																	this.DStoreTax
																			.get("Rate"))
																	.toFixed(2)
															+ "',"
												}
												this.deductot = this.diduces.total
														.getValue().replace(
																/,/g, "");
												this.Deducjsondata += "'total':'"
														+ this.deductot + "'},"
											}
											this.trmLen2 = this.Deducjsondata.length - 1;
											this.DeducJson = this.Deducjsondata
													.substr(0, this.trmLen2);
											this.taxesjsondata = "";
											for ( var L = 0; L <= this.taxes.storetax
													.getCount() - 1; L++) {
												this.TStoreTax = this.taxes.storetax
														.getAt(L);
												this.taxesjsondata += "{'type':'"
														+ this.TStoreTax
																.get("Type")
														+ "',";
												this.taxesjsondata += "'Id':'"
														+ this.TStoreTax
																.get("Id")
														+ "',";
												this.taxesjsondata += "'amount':'"
														+ parseFloat(
																this.TStoreTax
																		.get("amount"))
																.toFixed(2)
														+ "',";
												if (this.TStoreTax
														.get("ratetype") == 0) {
													this.taxesjsondata += "'Rate':'0',"
												} else {
													this.taxesjsondata += "'Rate':'"
															+ parseFloat(
																	this.TStoreTax
																			.get("Rate"))
																	.toFixed(2)
															+ "',"
												}
												this.taxtot = this.taxes.total
														.getValue().replace(
																/,/g, "");
												this.taxesjsondata += "'total':'"
														+ this.taxtot + "'},"
											}
											this.trmLen3 = this.taxesjsondata.length - 1;
											this.taxesJson = this.taxesjsondata
													.substr(0, this.trmLen3);
											this.ecjsondata = "";
											for ( var L = 0; L <= this.empcontrib.storetax
													.getCount() - 1; L++) {
												this.ECStoreTax = this.empcontrib.storetax
														.getAt(L);
												this.ecjsondata += "{'type':'"
														+ this.ECStoreTax
																.get("Type")
														+ "',";
												this.ecjsondata += "'amount':'"
														+ parseFloat(
																this.ECStoreTax
																		.get("amount"))
																.toFixed(2)
														+ "',";
												if (this.ECStoreTax
														.get("ratetype") == 0) {
													this.ecjsondata += "'Rate':'0',"
												} else {
													this.ecjsondata += "'Rate':'"
															+ parseFloat(
																	this.ECStoreTax
																			.get("Rate"))
																	.toFixed(2)
															+ "',"
												}
												this.ectot = this.empcontrib.total
														.getValue().replace(
																/,/g, "");
												this.ecjsondata += "'total':'"
														+ this.ectot + "'},"
											}
											this.trmLen4 = this.ecjsondata.length - 1;
											this.ecJson = this.ecjsondata
													.substr(0, this.trmLen4);
											this.netsal = this.tot.getValue()
													.replace(/,/g, "");
											this.fixedsal = this.fixedsal
													.replace(/,/g, "");
											Wtf.Ajax
													.requestEx(
															{
																url : "Emp/setPayrollforTemp.py",
																method : "post",
																params : {
																	save : "true",
																	saveType : "PayHistory",
																	empid : this.empid,
																	empname : this.ename,
																	design : this.design,
																	gross : this.fixedsal,
																	net : this.netsal,
																	wagetot : this.wagetot,
																	taxtot : this.taxtot,
																	deductot : this.deductot,
																	ectot : this.ectot,
																	mappingid : this.mappingid,
																	tempid : this.TempId,
																	WageJson : this.WageJson,
																	DeducJson : this.DeducJson,
																	taxesJson : this.taxesJson,
																	ECJson : this.ecJson,
																	stdate : this.fromdateemp
																			.getRawValue(),
																	enddate : this.todateemp
																			.getRawValue()
																}
															},
															this,
															function(N, M) {
																if (N.value
																		.toString() != "success") {
																	calMsgBoxShow(
																			15,
																			0)
																}
																if (N.value
																		.toString() == "success") {
																	calMsgBoxShow(
																			16,
																			0);
																	this.taxes.editrate
																			.disable();
																	this.wages.editrate
																			.disable();
																	this.diduces.editrate
																			.disable();
																	this.empcontrib.editrate
																			.disable();
																	Wtf
																			.getCmp(
																					this.id
																							+ "updateslip")
																			.disable();
																	Wtf
																			.getCmp(
																					this.id
																							+ "GenerateSalary")
																			.disable();
																	this.fromdateemp
																			.disable();
																	this.todateemp
																			.disable();
																	this.salgen = 1
																}
															}, function(N, M) {
															})
										}
									}
								});
						this.xbt1 = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.UpdateAmount"),
									scope : this,
									id : this.id + "updateslip",
									iconCls : "pwndCommon updatebuttonIcon",
									minWidth : 110,
									handler : function() {
										Wtf.Msg
												.show({
													title : WtfGlobal
															.getLocaleText("hrms.common.warning"),
													scope : this,
													animEl : "elId",
													icon : Wtf.MessageBox.QUESTION,
													msg : WtfGlobal
															.getLocaleText("hrms.payroll.Wouldliketoupdatepayslip"),
													buttons : Wtf.Msg.YESNO,
													fn : function(N, P) {
														if (N == "yes") {
															var O;
															var M = 0;
															this.clickflag = 0;
															O = this.wages.total
																	.getValue()
																	- this.diduces.total
																			.getValue();
															for ( var L = 0; L < this.taxes.storetax
																	.getCount(); L++) {
																this.taxes.storetax
																		.getAt(
																				L)
																		.set(
																				"amount",
																				parseFloat((this.taxes.storetax
																						.getAt(
																								L)
																						.get(
																								"Rate") * O) / 100))
															}
															for ( var L = 0; L < this.taxes.storetax
																	.getCount(); L++) {
																M += parseFloat(this.taxes.storetax
																		.getAt(
																				L)
																		.get(
																				"amount"))
															}
															this.taxes.total
																	.setValue(parseFloat(
																			M)
																			.toFixed(
																					2));
															D = parseFloat(this.wages.total
																	.getValue());
															C = parseFloat(this.diduces.total
																	.getValue());
															A = parseFloat(this.taxes.total
																	.getValue());
															K = D - C - A;
															this.tot
																	.setValue(parseFloat(
																			K)
																			.toFixed(
																					2));
															this.clickflag = 1;
															this.wages.storetax
																	.commitChanges();
															this.diduces.storetax
																	.commitChanges();
															this.taxes.storetax
																	.commitChanges()
														} else {
															this.wages.storetax
																	.load();
															this.diduces.storetax
																	.load();
															this.taxes.storetax
																	.load()
														}
													}
												})
									}
								});
						this.dwnldpay = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.DownloadPayslip"),
									iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
									disabled : true,
									scope : this,
									handler : function() {
										var L = this.ename + "_"
												+ this.paycyclestart + "";
										this.exportReport(1, "pdf", L,
												this.empid, companyName,
												this.fromdateemp.getRawValue(),
												this.todateemp.getRawValue())
									}
								});
						this.myprint = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip"),
									scope : this,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip.tooltip"),
									handler : function() {
										var L = this.ename + "_"
												+ this.paycyclestart + "";
										this.exportReport(1, "print", L,
												this.empid, companyName,
												this.fromdateemp.getRawValue(),
												this.todateemp.getRawValue())
									}
								});
						if (this.generated == "1") {
							this.dwnldpay.enable();
							this.myprint.enable()
						} else {
							this.dwnldpay.disable();
							this.myprint.disable()
						}
						var H = WtfGlobal
								.getLocaleText("hrms.payroll.GenerateSalary");
						var J = WtfGlobal
								.getLocaleText("hrms.payroll.want.to.generate.salary");
						if (Wtf.cmpPref.approvesalary != undefined
								&& Wtf.cmpPref.approvesalary === true) {
							H = WtfGlobal
									.getLocaleText("hrms.payroll.send.for.authorization");
							J = WtfGlobal
									.getLocaleText("hrms.payroll.want.to.send.it.authorization")
						}
						var I = [];
						I.push(WtfGlobal
								.getLocaleText("hrms.common.start.date")
								+ ":", this.fromdateemp, WtfGlobal
								.getLocaleText("hrms.common.end.date"),
								this.todateemp);
						if (this.flag != "employee") {
							I
									.push(
											"-",
											this.exppayslip = new Wtf.Button(
													{
														text : H,
														iconCls : getButtonIconCls(Wtf.btype.assignbutton),
														scope : this,
														handler : function() {
															Wtf.MessageBox
																	.show({
																		title : WtfGlobal
																				.getLocaleText("hrms.common.confirm"),
																		msg : J,
																		icon : Wtf.MessageBox.QUESTION,
																		buttons : Wtf.MessageBox.YESNO,
																		scope : this,
																		fn : function(
																				L) {
																			if (L == "yes") {
																				this
																						.genpayslipchk(1)
																			}
																		}
																	})
														}
													}), "-", this.dwnldpay,
											"-", this.myprint)
						}
						var E = [];
						if (this.flag != "employee") {
							E
									.push(
											"->",
											this.deletepayslip = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.delete"),
														iconCls : getButtonIconCls(Wtf.btype.deletebutton),
														scope : this,
														handler : function() {
															this
																	.genpayslipchk(0)
														}
													}))
						}
						this.MainDataEntryPanel = new Wtf.Panel({
							id : this.id + "payslip",
							layout : "column",
							border : false,
							bodyStyle : "background:white",
							scope : this,
							autoScroll : true,
							items : [ this.empform, this.pan1, this.pan3,
									this.pan2, this.pan5, this.pan4 ],
							tbar : I,
							buttonAlign : "right",
							bbar : E
						});
						this.add(this.MainDataEntryPanel);
						this.doLayout();
						this.on("activate", function(M, L) {
							this.doLayout()
						})
					},
					myfun : function(A) {
						this.finalStr = A;
						return A
					},
					exportReport : function(K, J, A, E, I, G, D) {
						var F = "";
						var C = '{"data": []}';
						if (K == 1) {
							C = '{"data": ["No","From", "To", "Duration", "Reason", "Type Of Leave", "Paid", "LPW", "Employee Signature", "Approver Signature", "Balance"]}'
						}
						var H = "";
						if (J == "print") {
							H = "Payroll/Date/Salary/printHTML.py?"
						} else {
							H = "Payroll/Date/Salary/exportPDF.py?"
						}
						var B = H + "&flag=" + K + "&colHeader=" + C
								+ "&userIDs=" + F + "&reportname=" + A
								+ "&exporttype=" + J + "&empid=" + E
								+ "&cname=" + I + "&stdate="
								+ this.paycyclestart
								+ "&flagpdf=datewise&showborder="
								+ this.showBorder + "&cdomain=" + subDomain
								+ "&enddate=" + this.paycycleend;
						setDldUrl(B, J)
					},
					getdepcomp : function() {
						Wtf.Ajax
								.requestEx(
										{
											url : Wtf.req.base
													+ "../Payroll/Wage/getDepwages.py",
											method : "post",
											params : {
												TempId : this.TempId,
												earnamount : this.wages.amtot,
												deducamount : this.diduces.amtot,
												paycyclestart : this.paycyclestart,
												paycycleend : this.paycycleend,
												paycycleactualstart : this.stdate
														.format("m-d-Y"),
												paycycleactualend : this.enddate
														.format("m-d-Y"),
												empid : this.empid,
												ischanged : this.ischanged
											}
										},
										this,
										function(C, B) {
											if (C.Wage != null
													&& C.Wage != undefined) {
												var F = C.Wage;
												var A = [];
												for ( var E = 0; E < F.length; E++) {
													var D = new this.wages.fieldstaxx(
															{
																Id : F[E].Id,
																Type : F[E].Type,
																Rate : F[E].Rate,
																amount : F[E].amount,
																amtot : F[E].amtot,
																ratetype : F[E].ratetype,
																depwage : F[E].depwage,
																depwageid : F[E].depwageid,
																computeon : F[E].computeon
															});
													this.wages.amtot = this.wages.amtot
															+ F[E].amount;
													A.push(D)
												}
												this.wages.storetax
														.insert(
																this.wages.storetax
																		.getTotalCount(),
																A);
												this.wages.total
														.setValue(WtfGlobal
																.currencyRenderer2(this.wages.amtot));
												Wtf.getCmp(
														this.empid
																+ "payslipTab"
																+ this.stdate)
														.setTotalSal()
											}
											if (C.Deduc != null
													&& C.Deduc != undefined) {
												var F = C.Deduc;
												var A = [];
												for ( var E = 0; E < F.length; E++) {
													var D = new this.diduces.fieldstaxx(
															{
																Id : F[E].Id,
																Type : F[E].Type,
																Rate : F[E].Rate,
																amount : F[E].amount,
																amtot : F[E].amtot,
																ratetype : F[E].ratetype,
																depwage : F[E].depwage,
																depwageid : F[E].depwageid,
																computeon : F[E].computeon
															});
													this.diduces.amtot = this.diduces.amtot
															+ F[E].amount;
													A.push(D)
												}
												this.diduces.storetax
														.insert(
																this.diduces.storetax
																		.getTotalCount(),
																A);
												this.diduces.total
														.setValue(WtfGlobal
																.currencyRenderer2(this.diduces.amtot));
												Wtf.getCmp(
														this.empid
																+ "payslipTab"
																+ this.stdate)
														.setTotalSal()
											}
											if (C.Tax != null
													&& C.Tax != undefined) {
												var F = C.Tax;
												var A = [];
												for ( var E = 0; E < F.length; E++) {
													var D = new this.taxes.fieldstaxx(
															{
																Id : F[E].Id,
																Type : F[E].Type,
																Rate : F[E].Rate,
																amount : F[E].amount,
																amtot : F[E].amtot,
																ratetype : F[E].ratetype,
																depwage : F[E].depwage,
																depwageid : F[E].depwageid,
																computeon : F[E].computeon
															});
													this.taxes.amtot = this.taxes.amtot
															+ F[E].amount;
													A.push(D)
												}
												this.taxes.storetax
														.insert(
																this.taxes.storetax
																		.getTotalCount(),
																A);
												this.taxes.total
														.setValue(WtfGlobal
																.currencyRenderer2(this.taxes.amtot));
												Wtf.getCmp(
														this.empid
																+ "payslipTab"
																+ this.stdate)
														.setTotalSal()
											}
											if (C.EC != null
													&& C.EC != undefined) {
												F = C.EC;
												A = [];
												for (E = 0; E < F.length; E++) {
													D = new this.empcontrib.fieldstaxx(
															{
																Type : F[E].Type,
																Rate : F[E].Rate,
																amount : F[E].amount,
																amtot : F[E].amtot,
																ratetype : F[E].ratetype,
																computeon : F[E].computeon
															});
													this.empcontrib.amtot = this.empcontrib.amtot
															+ F[E].amount;
													A.push(D)
												}
												this.empcontrib.storetax
														.insert(
																this.empcontrib.storetax
																		.getTotalCount(),
																A);
												this.empcontrib.total
														.setValue(WtfGlobal
																.currencyRenderer2(this.empcontrib.amtot))
											}
										}, function(B, A) {
										})
					},
					setTotalSal : function() {
						var C = 0;
						var A = 0;
						var D = 0;
						var B = 0;
						A = parseFloat((this.diduces.total.getValue()).replace(
								/,/g, ""));
						C = parseFloat((this.wages.total.getValue()).replace(
								/,/g, ""));
						D = parseFloat((this.taxes.total.getValue()).replace(
								/,/g, ""));
						B = C - A - D;
						this.tot.setValue(WtfGlobal
								.currencyRenderer2(parseFloat(B).toFixed(2)))
					},
					genpayslipchk : function(A) {
						if (this.modifiedflag == 1 && A != 0) {
							Wtf.MessageBox
									.show({
										title : WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										msg : WtfGlobal
												.getLocaleText("hrms.Messages.calMsgBoxShow139"),
										icon : Wtf.MessageBox.QUESTION,
										buttons : Wtf.MessageBox.YESNO,
										scope : this,
										fn : function(B) {
											if (B == "no") {
												return
											} else {
												this.genpayslip()
											}
										}
									})
						} else {
							if (A == 0) {
								Wtf.MessageBox
										.show({
											title : WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											msg : WtfGlobal
													.getLocaleText("hrms.payroll.Areyousureyouwanttodeletethesalarydetailsoftheemployee"),
											icon : Wtf.MessageBox.QUESTION,
											buttons : Wtf.MessageBox.YESNO,
											scope : this,
											fn : function(B) {
												if (B == "no") {
													return
												} else {
													this.deletePayslip()
												}
											}
										})
							} else {
								this.genpayslip()
							}
						}
					},
					deletePayslip : function() {
						var empid = new Array();
						empid.push(this.empid);
						Wtf.Ajax.requestEx({
							url : "Emp/deletePayslipDetails.py",
							method : "post",
							params : {
								empid : Wtf.encode(empid),
								enddate : this.todateemp.getRawValue(),
								startdate : this.paycyclestart
							}
						}, this, function(response) {
							var res = eval("(" + response + ")");
							Wtf.Msg.show({
								title : WtfGlobal
										.getLocaleText("hrms.common.success"),
								msg : "" + res.msg + "",
								scope : this,
								width : 300,
								buttons : Wtf.Msg.OK,
								fn : function(btn, value) {
									this.dwnldpay.disable();
									this.myprint.disable();
									this.fireEvent("gridload", response)
								},
								animEl : "elId",
								icon : Wtf.MessageBox.INFO
							})
						}, function(req, res) {
							calMsgBoxShow(27, 1)
						})
					},
					genpayslip : function() {
						var A = "";
						var M;
						var I = this.wages.storetax;
						for ( var O = 0; O < I.getCount(); O++) {
							M = I.getAt(O).data;
							A += "{'ctg':'Wages',";
							A += "'type':'" + M.Type + "',";
							A += "'amount':'" + M.amount + "',";
							A += "'Id':'" + M.Id + "',";
							A += "'Rate':'" + M.Rate + "'},"
						}
						var R = A.length - 1;
						var D = A.substr(0, R);
						var B = "";
						var P;
						var Q = this.diduces.storetax;
						for (O = 0; O < Q.getCount(); O++) {
							P = Q.getAt(O).data;
							B += "{'ctg':'Deduction',";
							B += "'type':'" + P.Type + "',";
							B += "'amount':'" + P.amount + "',";
							B += "'Id':'" + P.Id + "',";
							B += "'Rate':'" + P.Rate + "'},"
						}
						R = B.length - 1;
						var E = B.substr(0, R);
						var H = "";
						var G;
						var C = this.taxes.storetax;
						for (O = 0; O < C.getCount(); O++) {
							G = C.getAt(O).data;
							H += "{'ctg':'Taxes',";
							H += "'type':'" + G.Type + "',";
							H += "'amount':'" + G.amount + "',";
							H += "'Id':'" + G.Id + "',";
							H += "'Rate':'" + G.Rate + "'},"
						}
						R = H.length - 1;
						var F = H.substr(0, R);
						var J = "";
						var K;
						var L = this.empcontrib.storetax;
						for (O = 0; O < L.getCount(); O++) {
							K = L.getAt(O).data;
							J += "{'ctg':'Taxes',";
							J += "'type':'" + K.Type + "',";
							J += "'amount':'" + K.amount + "',";
							J += "'Rate':'" + K.Rate + "'},"
						}
						R = J.length - 1;
						var N = J.substr(0, R);
						this.taxtot = this.taxes.total.getValue().replace(/,/g,
								"");
						this.netsal = this.tot.getValue().replace(/,/g, "");
						this.wagetot = this.wages.total.getValue().replace(
								/,/g, "");
						this.deductot = this.diduces.total.getValue().replace(
								/,/g, "");
						this.ectot = this.empcontrib.total.getValue().replace(
								/,/g, "");
						if (parseFloat(this.deductot) > parseFloat(this.wagetot)) {
							calMsgBoxShow(157, 1);
							return
						}
						if (parseFloat(this.taxtot) > parseFloat(this.wagetot)) {
							calMsgBoxShow(157, 1);
							return
						}
						if ((parseFloat(this.taxtot) + parseFloat(this.deductot)) > parseFloat(this.wagetot)) {
							calMsgBoxShow(157, 1);
							return
						}
						Wtf.Ajax
								.requestEx(
										{
											url : "Emp/setPayrollforTemp1.py",
											method : "post",
											params : {
												flag : 59,
												empid : this.empid,
												gross : this.fixedsal,
												net : this.netsal,
												wagetot : this.wagetot,
												taxtot : this.taxtot,
												deductot : this.deductot,
												ectot : this.ectot,
												mappingid : this.mappingid,
												tempid : this.TempId,
												WageJson : D,
												DeducJson : E,
												taxesJson : F,
												ECJson : N,
												salaryStatus : Wtf.cmpPref.approvesalary ? 2
														: 3,
												stdate : this.fromdateemp
														.getRawValue(),
												enddate : this.todateemp
														.getRawValue(),
												paycyclestart : this.paycyclestart,
												paycycleend : this.paycycleend
											}
										},
										this,
										function(S) {
											Wtf.Msg
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.success"),
														msg : ""
																+ S.msg
																		.toString()
																+ "",
														scope : this,
														width : 300,
														buttons : Wtf.Msg.OK,
														fn : function(T, U) {
															if (S.value
																	.toString() == "success"
																	|| S.value
																			.toString() == WtfGlobal
																			.getLocaleText("hrms.common.success")) {
																this.dwnldpay
																		.enable();
																this.myprint
																		.enable();
																this
																		.fireEvent(
																				"gridload",
																				S)
															}
														},
														animEl : "elId",
														icon : Wtf.MessageBox.INFO
													})
										}, function(T, S) {
											calMsgBoxShow(27, 1)
										})
					},
					getUnpaidleaves : function(C) {
						for ( var B = 0; B < this.arr.length; B++) {
							if (C != undefined && C.data != undefined
									&& C.data[B] != undefined
									&& C.data[B] != "") {
								this.arr[B].data.unpaidleave = C.data[B].unpaidleave
							} else {
								this.arr[B].data.unpaidleave = 0
							}
						}
						var A = new Wtf.leavem.LeaveAdjustWindow(
								{
									title : WtfGlobal
											.getLocaleText("hrms.payroll.Unpaidleaves"),
									height : 400,
									width : 450,
									modal : true,
									resizable : false,
									paycycleend : this.paycycleend,
									emptempstore : this.emptempstore,
									empstore : this.empstore,
									paycyclestart : this.paycyclestart,
									TempId : this.TempId,
									fromdateempG : this.fromdateempG,
									todateempG : this.todateempG,
									layout : "fit",
									iconCls : getTabIconCls(Wtf.etype.iconwin),
									bodyStyle : "background-color: #f1f1f1;",
									arr : this.arr,
									extraarr : []
								});
						A.show()
					}
				});
Wtf.analysisWindow = function(config) {
	Wtf.apply(this, config);
	config.resizable = false;
	Wtf.analysisWindow.superclass.constructor
			.call(
					this,
					{
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									scope : this,
									handler : function() {
										var expr = "";
										for ( var ctr in this.mchild) {
											if (this.mchild[ctr].val != undefined) {
												expr += "("
														+ this.bchild[ctr].val
														+ ")";
												expr += this.cchild[ctr].val
														+ "*";
												expr += this.mchild[ctr].val
											}
										}
										if (!this.AddEditForm.form.isValid()) {
											return
										} else {
											if (expr == ""
													&& this.rateunit.getValue() == "%"
													&& this.computeon
															.getValue() == "3") {
												calMsgBoxShow(225, 0);
												return
											}
											if (this.radio1.getValue()
													&& this.radiowage
															.getValue()) {
												for ( var n = 0; n < this.userdsT.data.length; n++) {
													if (this.userdsT.getAt(n).data.id == this.componentCombo
															.getValue()) {
														if (!this.userdsT
																.getAt(n).data.isdefault) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.warning"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.selected.payroll.component.can.not.default.because.dependent.not.default") ],
																	2, false,
																	360);
															return
														}
													}
												}
											}
											if (this.radio1.getValue()) {
												if (this.rateunit.getValue() == "%") {
													var con = this.computeon
															.getValue();
													if (this.tablename != "Taxmaster") {
														if (con == "1"
																|| con == "2"
																|| con == "0") {
															for (n = 0; n < this.userdsT.data.length; n++) {
																if (this.userdsT
																		.getAt(n).data.isdefault == true) {
																	if (this.userdsT
																			.getAt(n).data.computeon == con) {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						WtfGlobal
																								.getLocaleText("hrms.payroll.can.not.set.default.two.component.on.same.type") ],
																				2,
																				false,
																				360);
																		return
																	}
																}
															}
														}
													} else {
														if (con == "2") {
															for (n = 0; n < this.userdsT.data.length; n++) {
																if (this.userdsT
																		.getAt(n).data.isdefault == true) {
																	if (this.userdsT
																			.getAt(n).data.computeon == con) {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.warning"),
																						WtfGlobal
																								.getLocaleText("hrms.payroll.can.not.set.default.two.component.on.same.type") ],
																				2,
																				false,
																				360);
																		return
																	}
																}
															}
														}
													}
												}
											}
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.common.confirm"),
															WtfGlobal
																	.getLocaleText("hrms.common.want.to.save.changes"),
															function(btn) {
																if (btn != "yes") {
																} else {
																	if (this.AddEdit == "Edit") {
																		var sm = this.generaltaxgrid
																				.getSelectionModel();
																		var rec = sm
																				.getSelected();
																		var row = this.userdsT
																				.indexOf(rec);
																		sm
																				.clearSelections()
																	}
																	var url;
																	var loadUrl;
																	if (this.type == "Wage") {
																		url = "Payroll/Wage/setWagesData.py";
																		loadUrl = "Payroll/Wage/getWageMaster.py"
																	} else {
																		if (this.type == "Tax") {
																			url = "Payroll/Tax/setTaxData.py";
																			loadUrl = "Payroll/Tax/getTaxMaster.py"
																		} else {
																			if (this.type == "Employer Contribution") {
																				url = "Payroll/EmpContrib/setEmployerContributionData.py";
																				loadUrl = "Payroll/EmpContrib/getEmpContribMaster.py"
																			} else {
																				url = "Payroll/Deduction/setDeductionData.py";
																				loadUrl = "Payroll/Deduction/getDeductionMaster.py"
																			}
																		}
																	}
																	calMsgBoxShow(
																			200,
																			4,
																			true);
																	var option = this.rateunit
																			.getValue();
																	if (option == "$") {
																		option = "Amount"
																	} else {
																		if (option == "%") {
																			option = "Percent"
																		}
																	}
																	this.AddEditForm
																			.getForm()
																			.submit(
																					{
																						url : url,
																						params : {
																							save : true,
																							saveType : this.type,
																							optiontype : this.rateunit
																									.getValue(),
																							option : option,
																							isChecked : this.radio1
																									.getValue(),
																							Action : this.AddEdit,
																							depwageid : this.componentCombo
																									.getValue(),
																							categoryid : this.categoryid == null ? ""
																									: this.categoryid,
																							expr : expr,
																							computeon : this.computeon
																									.getValue()
																						},
																						method : "post",
																						scope : this,
																						success : function(
																								a,
																								req) {
																							req = eval("("
																									+ req.response.responseText
																									+ ")");
																							if (req.data.value == "exist") {
																								calMsgBoxShow(
																										135,
																										0)
																							}
																							if (req.data.value == "assign") {
																								calMsgBoxShow(
																										138,
																										0)
																							}
																							if (req.data.value == "success") {
																								if (req.data.action == "Added") {
																									calMsgBoxShow(
																											136,
																											0)
																								}
																								if (req.data.action == "Edited") {
																									calMsgBoxShow(
																											137,
																											0)
																								}
																								Wtf
																										.getCmp(
																												"addWTDwindow")
																										.close();
																								this.userdsT.proxy.conn.url = loadUrl;
																								this.userdsT.baseParams = {
																									allflag : false,
																									tablename : this.tablename,
																									type : "getPayComponent"
																								};
																								if (this.AddEdit == "Edit") {
																									var params = {
																										start : this.generaltaxgrid.pag.cursor,
																										limit : this.generaltaxgrid.pag.pageSize
																									};
																									WtfGlobal
																											.delaytasks(
																													this.userdsT,
																													params)
																								} else {
																									this.userdsT
																											.load({
																												params : {
																													start : 0,
																													limit : this.generaltaxgrid.pag.pageSize
																												}
																											})
																								}
																								this.payrollcombo
																										.setValue(this.tablename);
																								if (this.tablename == "Taxmaster") {
																									this.incometaxgrid
																											.show();
																									Wtf
																											.getCmp(
																													"paysettingmainPanel")
																											.doLayout()
																								} else {
																									this.incometaxgrid
																											.hide();
																									Wtf
																											.getCmp(
																													"paysettingmainPanel")
																											.doLayout()
																								}
																							}
																						},
																						failure : function(
																								req,
																								res) {
																						}
																					})
																}
															}, this)
										}
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									handler : function() {
										Wtf.getCmp("addWTDwindow").close()
									},
									scope : this
								} ]
					})
};
Wtf
		.extend(
				Wtf.analysisWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.analysisWindow.superclass.initComponent.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					afterRender : function(B, A) {
						Wtf.analysisWindow.superclass.afterRender.call(this, B,
								A);
						if (this.computeon.getValue() == "3") {
							this.correct.setVisible(true);
							this.setHeight(600)
						}
					},
					selectrows : function(L, K, I) {
						var G = [];
						this.oper = [];
						this.coeff = [];
						var D = new this.wageRec(
								{
									"type" : "<b>"
											+ WtfGlobal
													.getLocaleText("hrms.payroll.template.basic")
											+ "</b>",
									"id" : "-1",
									"comp" : "<b>"
											+ WtfGlobal
													.getLocaleText("hrms.payroll.template.basic")
											+ "</b>"
								});
						G.push(D);
						if (I.params.ss == undefined || I.params.ss == "") {
							this.wageds.insert(0, G);
							this.ArrangeNumberer(0)
						}
						G = [];
						if (this.computeon.getValue() == "3") {
							if (this.generaltaxgrid.getSelectionModel()
									.getSelected() != null) {
								var M = this.generaltaxgrid.getSelectionModel()
										.getSelected().get("expr").split(
												"(add)");
								for ( var C = 0; C < M.length; C++) {
									var J = M[C].split("(sub)");
									for ( var B = 0; B < J.length; B++) {
										var E = J[B].split("*");
										var A = 1;
										var F;
										if (E.length > 1) {
											A = E[0];
											F = E[1]
										} else {
											F = E[0]
										}
										var H = this.wageds.find("id", F);
										if (H > -1) {
											if (B == 0) {
												this.oper[H] = "+"
											} else {
												this.oper[H] = "-"
											}
											G.push(this.wageds.getAt(H));
											this.coeff[H] = A
										}
									}
								}
								if (G.length > 0) {
									this.sm.selectRecords(G)
								}
							}
						}
					},
					GetNorthPanel : function() {
						var C = this.AddEdit == "Edit" ? WtfGlobal
								.getLocaleText("hrms.payroll.edit.component")
								: WtfGlobal
										.getLocaleText("hrms.payroll.add.component");
						var A = this.AddEdit == "Edit" ? WtfGlobal
								.getLocaleText("hrms.payroll.fill.up.information.to.edit.component")
								: WtfGlobal
										.getLocaleText("hrms.payroll.fill.up.information.to.add.component");
						var B = this.typeimage;
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 90,
									border : false,
									bodyStyle : "backgroubodyStylend-color:white;padding:8px;border-bottom:1px solid #bfbfbf;background-color: white",
									html : getTopHtml(C, A, B)
								})
					},
					GetAddEditForm : function() {
						this.combodata = [
								[ WtfGlobal.getLocaleText("hrms.payroll.Wage"),
										"Wagemaster" ],
								[ WtfGlobal.getLocaleText("hrms.payroll.Tax"),
										"Taxmaster" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Deduction"),
										"Deductionmaster" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.EmployerContribution"),
										"EmpContribmaster" ] ];
						this.combostore1 = new Wtf.data.SimpleStore({
							fields : [ {
								name : "type"
							}, {
								name : "code"
							} ],
							data : this.combodata
						});
						this.fieldswage = [ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "code"
						}, {
							name : "id"
						}, {
							name : "assigned"
						}, {
							name : "rate"
						}, {
							name : "amount"
						} ];
						this.fieldswage = Wtf.data.Record
								.create(this.fieldswage);
						this.readerwage = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.fieldswage);
						this.wagestore1 = new Wtf.data.Store({
							url : "Payroll/Wage/getWageMasterForComponent.py",
							method : "GET",
							reader : this.readerwage
						});
						this.percent = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Percent"),
										"%" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										"$" ] ];
						this.percentstore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "type"
							}, {
								name : "code"
							} ],
							data : this.percent
						});
						this.taxrateinamount = new Wtf.Panel(
								{
									width : 400,
									frame : false,
									border : false,
									layout : "column",
									items : [
											{
												columnWidth : 0.52,
												frame : false,
												border : false,
												layout : "form",
												items : [ this.rangefrom = new Wtf.form.NumberField(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.payroll.income.slab")
																	+ " ("
																	+ WtfGlobal
																			.getCurrencySymbol()
																	+ ")",
															editable : false,
															name : "rangefrom",
															width : 100,
															labelWidth : 100,
															emptyText : WtfGlobal
																	.getLocaleText("hrms.payroll.min.value"),
															regex : /^[0-9]{0,10}$/
														}) ]
											},
											{
												columnWidth : 0.48,
												frame : false,
												border : false,
												items : [ this.rangeto = new Wtf.form.NumberField(
														{
															width : 95,
															name : "rangeto",
															emptyText : WtfGlobal
																	.getLocaleText("hrms.payroll.max.value"),
															regex : /^[0-9]{0,10}$/
														}) ]
											} ]
								});
						this.ctgrycombo = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.category"),
									store : Wtf.catgStore,
									displayField : "name",
									valueField : "id",
									name : "categoryname",
									typeAhead : true,
									width : 200,
									listWidth : 200,
									labelWidth : 100,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.category"),
									addNewFn : this.addCategory
											.createDelegate(this),
									listeners : {
										scope : this,
										Select : function(D, B, C) {
											this.categoryid = B.get("id")
										}
									}
								});
						this.editloadflag = 0;
						if (!Wtf.StoreMgr.containsKey("catg")) {
							Wtf.catgStore.on("load", this.setCategary, this);
							Wtf.catgStore.load();
							Wtf.StoreMgr.add("catg", Wtf.catgStore)
						} else {
							this.setCategary();
							this.editloadflag = 1
						}
						this.taxpanel = new Wtf.Panel({
							width : 400,
							height : 60,
							layout : "form",
							border : false,
							hidden : true,
							items : [ this.taxrateinamount, this.ctgrycombo ]
						});
						this.combo1 = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.add.type")
											+ "*",
									store : this.combostore1,
									displayField : "type",
									typeAhead : true,
									valueField : "code",
									allowBlank : false,
									name : "type",
									width : 200,
									mode : "local",
									value : this.tablename,
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.select.component"),
									selectOnFocus : true,
									listeners : {
										scope : this,
										Select : function(D, B, C) {
											this.tablename = B.get("code");
											this.type = B.get("type");
											if (this.type == "Tax") {
												this.ctgrycombo.allowBlank = false;
												this.rangefrom.allowBlank = false;
												this.rangeto.allowBlank = false;
												this.AddEditForm.doLayout()
											} else {
												this.ctgrycombo.allowBlank = true;
												this.rangefrom.allowBlank = true;
												this.rangeto.allowBlank = true;
												this.AddEditForm.doLayout()
											}
										}
									}
								});
						this.componentCombo = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.wage.component"),
									store : this.wagestore1,
									displayField : "type",
									disabled : true,
									typeAhead : true,
									valueField : "id",
									allowBlank : false,
									name : "type",
									width : 200,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.select.wage.component"),
									selectOnFocus : true
								});
						this.text1 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.name")
									+ "*",
							width : 200,
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							maxLength : 35,
							scope : this,
							name : "name"
						});
						this.text2 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.code")
									+ "*",
							width : 200,
							name : "code",
							maxLength : 50,
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							displayField : "cname"
						});
						this.radio = new Wtf.Panel(
								{
									width : 400,
									layout : "form",
									height : 30,
									border : false,
									items : [ this.radio1 = new Wtf.form.Checkbox(
											{
												name : "linkasdefault",
												id : "checkisdefault",
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.add.as.default"),
												style : "padding-top:15px;"
											}) ]
								});
						this.radiosal = new Wtf.Panel(
								{
									width : 400,
									layout : "form",
									labelWidth : 200,
									border : false,
									items : [ this.radiosalary = new Wtf.form.Radio(
											{
												name : "percentof",
												id : "percentofsal",
												disabled : true,
												boxLabel : WtfGlobal
														.getLocaleText("hrms.payroll.percent.of.salary"),
												style : "padding-top:15px;padding-left:30px;",
												hideLabel : true
											}) ]
								});
						this.radiocomp = new Wtf.Panel(
								{
									width : 400,
									layout : "form",
									labelWidth : 200,
									border : false,
									items : [ this.radiowage = new Wtf.form.Radio(
											{
												name : "percentof",
												id : "percentofcomp",
												disabled : true,
												boxLabel : WtfGlobal
														.getLocaleText("hrms.payroll.percent.of.wage.component"),
												style : "padding-top:15px;padding-left:30px;",
												hideLabel : true
											}) ]
								});
						this.rateunit = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.unit")
											+ "*",
									store : this.percentstore,
									displayField : "type",
									typeAhead : true,
									valueField : "code",
									allowBlank : false,
									width : 200,
									labelWidth : 100,
									scope : this,
									name : "option",
									mode : "local",
									value : "%",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.select.percent.or.amount"),
									selectOnFocus : true,
									minValue : 0,
									listeners : {
										scope : this,
										Select : function(D, B, C) {
											if (B.get("type") == "Percent"
													|| B.get("type") == WtfGlobal
															.getLocaleText("hrms.payroll.Percent")) {
												this.myratetax.maxValue = 100;
												this.myratetax.setValue(0);
												Wtf.getCmp("percentofsal")
														.enable();
												Wtf.getCmp("percentofcomp")
														.enable();
												this.computeon
														.setDisabled(false);
												this.computeon.setVisible(true);
												this.computeon.container
														.up("div.x-form-item").dom.style.display = "block";
												this.computeon.allowBlank = false;
												if (this.computeon.getValue() == "3") {
													this.correct
															.setVisible(true);
													this.setHeight(600);
													this.doLayout()
												}
											}
											if (B.get("type") == "Amount"
													|| B.get("type") == WtfGlobal
															.getLocaleText("hrms.payroll.Amount")) {
												this.myratetax.maxValue = Number.MAX_VALUE;
												this.myratetax.setValue(0);
												Wtf.getCmp("percentofsal")
														.disable();
												Wtf.getCmp("percentofcomp")
														.disable();
												this.componentCombo.disable();
												this.componentCombo
														.setValue("");
												this.computeon
														.setVisible(false);
												this.computeon.container
														.up("div.x-form-item").dom.style.display = "none";
												this.computeon.allowBlank = true;
												if (this.computeon.getValue() == "3") {
													this.correct
															.setVisible(false);
													this.setHeight(450);
													this.doLayout()
												}
											}
										}
									}
								});
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.CheckboxSelectionModel(),
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.component"),
											dataIndex : "type",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.type"),
											dataIndex : "comp",
											sortable : true
										} ]);
						this.wageRec = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "id"
						}, {
							name : "comp"
						} ]);
						this.wageds = new Wtf.data.Store({
							scope : this,
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.wageRec),
							baseParams : {
								tablename : "Wagemaster",
								type : "getPayComponent",
								allflag : "true",
								isedit : this.AddEdit,
								wageno : (this.AddEdit) ? this.editWageId : "",
								earningtype : this.type,
								computeon : "3",
								deduc : "true",
								empcont : "true"
							},
							url : "Payroll/Wage/getWageMaster.py"
						});
						this.wageds.load({
							params : {
								start : 0,
								limit : 15
							}
						});
						this.wageds.on("load", this.selectrows, this);
						this.computedata = [
								[
										"0",
										WtfGlobal
												.getLocaleText("hrms.payroll.currentdeductions") ],
								[
										"1",
										WtfGlobal
												.getLocaleText("hrms.payroll.currentearnings") ],
								[
										"2",
										WtfGlobal
												.getLocaleText("hrms.payroll.netsalary") ],
								[
										"3",
										WtfGlobal
												.getLocaleText("hrms.payroll.specifiedformula") ] ];
						this.computestore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "id"
							}, {
								name : "value"
							} ],
							data : this.computedata
						});
						this.computeon = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.compute.on")
											+ "*",
									store : this.computestore,
									displayField : "value",
									typeAhead : true,
									valueField : "id",
									allowBlank : false,
									name : "type",
									width : 200,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.select.component"),
									selectOnFocus : true,
									listeners : {
										scope : this,
										Select : function(D, B, C) {
											if (B.get("id") == "3") {
												this.correct.setVisible(true);
												this.setHeight(600);
												this.doLayout()
											} else {
												this.correct.setVisible(false);
												this.setHeight(450);
												this.doLayout()
											}
										}
									}
								});
						this.child1 = [];
						this.bchild = [];
						this.mchild = [];
						this.cchild = [];
						this.achild = [];
						this.conContainer = document.createElement("div");
						this.conContainer.className = "conContainer";
						this.conContainer.id = "parentCon";
						this.child1[this.i] = document.createElement("div");
						this.child1[this.i].className = "child1";
						this.conContainer.appendChild(this.child1[this.i]);
						this.sm = new Wtf.grid.CheckboxSelectionModel();
						this.sm.on("rowselect", this.onRowSelect, this);
						this.sm.on("rowdeselect", this.onRowDeselect, this);
						this.correct = new Wtf.Panel(
								{
									id : "feed",
									layout : "fit",
									border : false,
									hidden : true,
									items : [ {
										layout : "border",
										height : (Wtf.isIE7 || Wtf.isIE8) ? 210
												: 200,
										bodyStyle : "margin-top:10px; background:transparent",
										border : false,
										layoutConfig : {
											labelSeparator : ""
										},
										items : [
												new Wtf.form.FieldSet(
														{
															height : (Wtf.isIE7 || Wtf.isIE8) ? 100
																	: 140,
															region : "north",
															layout : "fit",
															id : "rules",
															title : WtfGlobal
																	.getLocaleText("hrms.payroll.1.select.wage.components"),
															items : [ this.grid = new Wtf.KwlGridPanel(
																	{
																		id : "rulegrid",
																		store : this.wageds,
																		serverSideSearch : true,
																		cm : this.cm,
																		searchLabel : " ",
																		searchLabelSeparator : " ",
																		searchEmptyText : WtfGlobal
																				.getLocaleText("hrms.payroll.component.grid.search.msg"),
																		searchField : "type",
																		paging : false,
																		sm : this.sm,
																		viewConfig : {
																			forceFit : true
																		}
																	}) ]
														}),
												new Wtf.form.FieldSet(
														{
															region : "center",
															id : "subrules",
															bodyStyle : "overflow-y:scroll;",
															height : 100,
															title : WtfGlobal
																	.getLocaleText("hrms.payroll.2.your.formula"),
															items : [ new Wtf.Panel(
																	{
																		id : "addCon",
																		border : false,
																		contentEl : this.conContainer
																	}) ]
														}) ]
									} ]
								});
						this.myratetax = new Wtf.form.NumberField(
								{
									width : 200,
									labelWidth : 100,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.value")
											+ "*",
									name : "rate",
									maxLength : 10,
									scope : this,
									allowNegative : false,
									value : 0,
									id : "myratetext",
									allowBlank : false,
									listeners : {
										scope : this,
										focus : function() {
											if (this.rateunit.getValue() == "%") {
												this.myratetax.maxValue = 100
											}
											if (this.rateunit.getValue() == "$") {
												this.myratetax.maxValue = Number.MAX_VALUE
											}
										}
									}
								});
						this.typeid = new Wtf.form.Hidden({
							name : "typeid",
							scope : this,
							allowBlank : true,
							hideLabel : true,
							hidden : true
						});
						this.typeid.hide();
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									scope : this,
									labelWidth : 200,
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									items : [ this.combo1, this.text1,
											this.text2, this.rateunit,
											this.computeon, this.correct,
											this.myratetax, this.radio,
											this.typeid ]
								});
						if (this.type == "Tax") {
							this.ctgrycombo.allowBlank = false;
							this.rangefrom.allowBlank = false;
							this.rangeto.allowBlank = false
						}
						if (this.AddEdit == "Edit") {
							var A = this.generaltaxgrid.getSelectionModel()
									.getSelected().data;
							if (this.type == "Tax") {
								this.ctgrycombo.allowBlank = false;
								this.rangefrom.allowBlank = false;
								this.rangeto.allowBlank = false;
								this.AddEditForm.doLayout();
								this.rangefrom.setValue(A.rangefrom);
								this.rangeto.setValue(A.rangeto);
								Wtf.catgStore.on("load", function() {
									this.ctgrycombo.setValue(A.category)
								}, this);
								if (this.editloadflag == 1) {
									this.ctgrycombo.setValue(A.category)
								}
							} else {
								this.ctgrycombo.allowBlank = true;
								this.rangefrom.allowBlank = true;
								this.rangeto.allowBlank = true
							}
							this.text1.setValue(A.type);
							this.text2.setValue(A.code);
							this.typeid.setValue(A.id);
							if (A.rate == 0) {
								this.ratecash = A.cash;
								this.rateunit.setValue("$");
								this.computeon.setDisabled(true)
							} else {
								if (A.depwage == "") {
									Wtf.getCmp("percentofsal").enable();
									Wtf.getCmp("percentofcomp").enable();
									Wtf.getCmp("percentofsal").checked = true
								} else {
									Wtf.getCmp("percentofcomp").enable();
									Wtf.getCmp("percentofsal").enable();
									Wtf.getCmp("percentofcomp").checked = true
								}
								this.ratecash = A.cash;
								this.rateunit.setValue("%")
							}
							this.myratetax.setValue(this.ratecash);
							this.combo1.setValue(this.tablename);
							this.combo1.disable();
							this.radio1.setValue(A.isdefault);
							this.computeon.setValue(A.computeon);
							this.myratetax.on("change", this.validatePercent,
									this)
						}
						Wtf.getCmp("percentofcomp").on("check", function(C, B) {
							this.componentCombo.setDisabled(!B)
						}, this);
						Wtf.getCmp("percentofsal").on("check", function(C, B) {
							this.componentCombo.setValue("")
						}, this);
						Wtf
								.getCmp("percentofsal")
								.on(
										"check",
										function(C, B) {
											if (Wtf.getCmp("percentofsal").rendered
													&& Wtf
															.getCmp("percentofcomp").rendered) {
												Wtf.getCmp("percentofsal")
														.onClick();
												Wtf.getCmp("percentofcomp")
														.onClick()
											}
										}, this);
						Wtf
								.getCmp("percentofcomp")
								.on(
										"check",
										function(C, B) {
											if (Wtf.getCmp("percentofsal").rendered
													&& Wtf
															.getCmp("percentofcomp").rendered) {
												Wtf.getCmp("percentofsal")
														.onClick();
												Wtf.getCmp("percentofcomp")
														.onClick()
											}
										}, this)
					},
					ArrangeNumberer : function(B) {
						var A = this.grid.getView();
						var D = this.wageds.getCount();
						for ( var C = B; C < D; C++) {
							A.getCell(C, 1).firstChild.innerHTML = C + 1
						}
					},
					onRowDeselect : function(A, C, B) {
						document.getElementById("parentCon").removeChild(
								document.getElementById("con" + C));
						this.mchild.splice(C, 1);
						this.cchild.splice(C, 1);
						this.bchild.splice(C, 1);
						this.child1[C] = undefined
					},
					onRowSelect : function(A, C, B) {
						if (this.child1[C] == undefined) {
							this.child1[C] = document.createElement("div");
							this.child1[C].id = "con" + C;
							this.mchild[C] = document.createElement("div");
							this.mchild[C].className = "mchild";
							if (Wtf.isIE7 || Wtf.isIE8) {
								this.mchild[C].style.display = "inline"
							} else {
								this.mchild[C].style.cssFloat = "left"
							}
							this.mchild[C].val = B.get("id");
							this.mchild[C].id = "mchild" + C;
							this.cchild[C] = document.createElement("div");
							this.cchild[C].id = "coeff" + C;
							this.cchild[C].className = "x-form-item";
							if (Wtf.isIE7 || Wtf.isIE8) {
								this.cchild[C].style.display = "inline"
							} else {
								this.cchild[C].style.cssFloat = "left"
							}
							if (this.coeff != null && this.coeff != undefined
									&& this.coeff.length > 0) {
								this.cchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
										+ this.coeff[C] + ")</a>&nbsp;";
								this.cchild[C].val = this.coeff[C]
							} else {
								this.cchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
										+ 1 + ")</a>&nbsp;";
								this.cchild[C].val = 1
							}
							this.bchild[C] = document.createElement("div");
							this.bchild[C].id = "addsub" + C;
							this.bchild[C].className = "x-form-item";
							if (Wtf.isIE7 || Wtf.isIE8) {
								this.bchild[C].style.display = "inline"
							} else {
								this.bchild[C].style.cssFloat = "left"
							}
							if (this.oper != null && this.oper != undefined
									&& this.oper.length > 0) {
								if (this.oper[C] == "+") {
									this.bchild[C].val = "add"
								} else {
									if (this.oper[C] == "-") {
										this.bchild[C].val = "sub"
									} else {
										this.bchild[C].val = "add";
										this.oper[C] = "+"
									}
								}
								this.bchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
										+ this.oper[C] + ")</a>&nbsp;"
							} else {
								this.bchild[C].val = "add";
								this.bchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;"
							}
							this.mchild[C].innerHTML = B.get("type");
							this.mchild[C].className = "x-form-item";
							if (Wtf.isIE7 || Wtf.isIE8) {
								this.bchild[C].onclick = this.showRuleWin
										.createDelegate(this,
												[ this.bchild[C] ], false);
								this.cchild[C].onclick = this.showCoeffWin
										.createDelegate(this,
												[ this.cchild[C] ], false)
							} else {
								this.bchild[C].onclick = this.showRuleWin
										.createDelegate(this);
								this.cchild[C].onclick = this.showCoeffWin
										.createDelegate(this)
							}
							this.child1[C].appendChild(this.bchild[C]);
							this.child1[C].appendChild(this.cchild[C]);
							this.child1[C].appendChild(this.mchild[C]);
							this.conContainer.appendChild(this.child1[C])
						}
					},
					invRadiobttn : function(B, A) {
						if (B.id == "add") {
							Wtf.getCmp("sub").checked = false
						}
						if (B.id == "sub") {
							Wtf.getCmp("add").checked = false
						}
					},
					showCoeffWin : function(C) {
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.updateelement = C
						} else {
							this.updateelement = C.currentTarget
						}
						var B = new Wtf.Panel(
								{
									frame : true,
									items : [
											{
												layout : "form",
												items : [
														{
															layout : "column",
															items : [ {
																html : WtfGlobal
																		.getLocaleText("hrms.payroll.coefficient")
																		+ ":<br><br>"
															} ]
														},
														{
															layout : "column",
															fieldWidth : 0,
															items : [ new Wtf.form.NumberField(
																	{
																		name : "coeff",
																		id : "coefffield",
																		value : this.updateelement.val,
																		allowNegative : false,
																		minValue : 0,
																		maxValue : 100,
																		decimalPrecision : 4
																	}) ]
														} ]
											},
											{
												layout : "column",
												items : [ {
													layout : "form",
													buttons : [
															{
																text : WtfGlobal
																		.getLocaleText("hrms.common.ok"),
																scope : this,
																handler : function() {
																	var D = Wtf
																			.getCmp("coefffield").value;
																	if (!Wtf
																			.getCmp(
																					"coefffield")
																			.validateValue(
																					D)) {
																		return
																	}
																	this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>"
																			+ D
																			+ "</a>&nbsp;";
																	this.updateelement.val = D;
																	A.close()
																}
															},
															{
																text : WtfGlobal
																		.getLocaleText("hrms.common.cancel"),
																handler : function() {
																	A.close()
																}
															} ]
												} ]
											} ]
								});
						var A = new Wtf.Window({
							title : WtfGlobal
									.getLocaleText("hrms.payroll.coefficient"),
							closable : true,
							width : 200,
							iconCls : "winicon",
							resizable : false,
							autoDestroy : true,
							modal : true,
							border : false,
							id : "coefficientWindow",
							items : [ B ]
						});
						A.show()
					},
					showRuleWin : function(C) {
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.updateelement = C
						} else {
							this.updateelement = C.currentTarget
						}
						var B = new Wtf.Panel(
								{
									frame : true,
									items : [
											{
												layout : "form",
												items : [
														{
															layout : "column",
															items : [ {
																html : WtfGlobal
																		.getLocaleText("hrms.payroll.ApplyRuleIf")
																		+ ":<br><br>"
															} ]
														},
														{
															layout : "column",
															fieldWidth : 0,
															items : [ new Wtf.form.Radio(
																	{
																		name : "cond",
																		id : "add",
																		checked : (this.updateelement.val == "add") ? true
																				: false,
																		boxLabel : WtfGlobal
																				.getLocaleText("hrms.payroll.Addition")
																	}) ]
														},
														{
															layout : "column",
															fieldWidth : 0,
															items : [ new Wtf.form.Radio(
																	{
																		name : "cond",
																		id : "sub",
																		checked : (this.updateelement.val == "sub") ? true
																				: false,
																		boxLabel : WtfGlobal
																				.getLocaleText("hrms.payroll.Subtraction")
																	}) ]
														} ]
											},
											{
												layout : "column",
												items : [ {
													layout : "form",
													buttons : [
															{
																text : WtfGlobal
																		.getLocaleText("hrms.common.ok"),
																scope : this,
																handler : function() {
																	if (Wtf
																			.getCmp("add").checked == true) {
																		this.rad = 0
																	} else {
																		if (Wtf
																				.getCmp("sub").checked == true) {
																			this.rad = 1
																		}
																	}
																	if (this.rad == 1) {
																		this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(-)</a>&nbsp;";
																		this.updateelement.val = "sub"
																	} else {
																		this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;";
																		this.updateelement.val = "add"
																	}
																	A.close()
																}
															},
															{
																text : WtfGlobal
																		.getLocaleText("hrms.common.cancel"),
																handler : function() {
																	A.close()
																}
															} ]
												} ]
											} ]
								});
						Wtf.getCmp("add").on("check", this.invRadiobttn, this);
						Wtf.getCmp("sub").on("check", this.invRadiobttn, this);
						var A = new Wtf.Window({
							title : WtfGlobal
									.getLocaleText("hrms.payroll.andor"),
							closable : true,
							width : 200,
							iconCls : "winicon",
							resizable : false,
							autoDestroy : true,
							modal : true,
							border : false,
							id : "conditionWindow",
							items : [ B ]
						});
						A.show()
					},
					addCategory : function() {
						WtfGlobal.showmasterWindow(14, Wtf.catgStore, "Add")
					},
					setCategary : function() {
						if (Wtf.catgStore.getCount() > 0) {
							this.ctgrycombo.setValue(Wtf.catgStore.getAt(
									Wtf.catgStore.getCount() - 1).get("id"))
						}
					},
					validatePercent : function() {
						if (this.rateunit.getRawValue() == "Percent"
								&& this.myratetax.getValue() > 100) {
							this.myratetax.setValue("");
							calMsgBoxShow(166, 3)
						}
					}
				});
Wtf.addpayCmpWin = function(A) {
	Wtf.apply(this, {
		buttonAlign : "right",
		width : 430,
		height : 325,
		buttons : [ {
			text : WtfGlobal.getLocaleText("hrms.common.Save"),
			handler : this.saveRequest,
			scope : this
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			handler : function() {
				this.close()
			},
			scope : this
		} ]
	}, A);
	Wtf.addpayCmpWin.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.addpayCmpWin,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.addpayCmpWin.superclass.initComponent.call(this)
					},
					iconCls : getButtonIconCls(Wtf.btype.winicon),
					onRender : function(A) {
						Wtf.addpayCmpWin.superclass.onRender.call(this, A);
						this.perValue = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Percent"),
										"%" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										"$" ] ];
						this.percentSt = new Wtf.data.SimpleStore({
							fields : [ {
								name : "type"
							}, {
								name : "code"
							} ],
							data : this.perValue
						});
						this.text1 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.name"),
							width : 200,
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							maxLength : 35,
							scope : this,
							name : "name"
						});
						this.text2 = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.code")
									+ "*",
							width : 200,
							name : "code",
							validator : WtfGlobal.noBlankCheck,
							maxLength : 50,
							allowBlank : false,
							displayField : "cname"
						});
						this.rateunit = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.unit"),
									store : this.percentSt,
									displayField : "type",
									typeAhead : true,
									valueField : "code",
									allowBlank : false,
									disabled : true,
									width : 200,
									labelWidth : 100,
									scope : this,
									name : "option",
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.select.percent.or.amount"),
									selectOnFocus : true,
									listeners : {
										scope : this,
										Select : function(D, B, C) {
											if (B.get("type") == "Percent"
													|| B.get("type") == WtfGlobal
															.getLocaleText("hrms.payroll.Percent")) {
												this.phoneNumberExpr = /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/;
												Wtf.getCmp(this.id
														+ "myratetext").regex = this.phoneNumberExpr;
												Wtf.getCmp(
														this.id + "myratetext")
														.setValue(0)
											}
											if (B.get("type") == "Amount"
													|| B.get("type") == WtfGlobal
															.getLocaleText("hrms.payroll.Amount")) {
												this.phoneNumberExpr = /^[0-9]*$/;
												Wtf.getCmp(this.id
														+ "myratetext").regex = this.phoneNumberExpr;
												Wtf.getCmp(
														this.id + "myratetext")
														.setValue(0)
											}
										}
									}
								});
						this.myratetax = new Wtf.form.NumberField(
								{
									width : 200,
									labelWidth : 100,
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.value"),
									name : "rate",
									value : 0,
									maxLength : 10,
									allowNegative : false,
									scope : this,
									id : this.id + "myratetext",
									allowBlank : false,
									listeners : {
										scope : this,
										focus : function() {
											if (this.rateunit.getValue() == "%") {
												this.phoneNumberExpr = /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/;
												Wtf.getCmp(this.id
														+ "myratetext").regex = this.phoneNumberExpr
											}
											if (this.rateunit.getValue() == "$") {
												this.phoneNumberExpr = /^[0-9]*$/;
												Wtf.getCmp(this.id
														+ "myratetext").regex = this.phoneNumberExpr
											}
										}
									}
								});
						this.chk1 = new Wtf.form.Checkbox(
								{
									name : "linkasdefault",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.AddtoPayrollMaster"),
									style : "padding-top:15px;"
								});
						this.typeid = new Wtf.form.Hidden({
							name : "typeid",
							value : this.type
						});
						this.addpayform = new Wtf.form.FormPanel(
								{
									waitMsgTarget : true,
									border : false,
									cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder",
									style : "background: transparent;padding-left:20px;padding-top: 20px;padding-right: 0px;",
									autoScroll : false,
									labelWidth : 119,
									layoutConfig : {
										deferredRender : false
									},
									items : [ this.text1, this.text2,
											this.rateunit, this.myratetax,
											this.typeid ]
								});
						this.addpaypanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									autoScroll : false,
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 80,
													border : false,
													cls : "panelstyleClass1",
													html : getTopHtml(
															WtfGlobal
																	.getLocaleText({
																		key : "hrms.payroll.Addpayrollgrid",
																		params : [ this.type ]
																	}),
															WtfGlobal
																	.getLocaleText("hrms.common.FillupthefollowingDetails"),
															"images/payroll.gif")
												}, {
													border : false,
													region : "center",
													cls : "formstyleClass2",
													layout : "fit",
													items : [ this.addpayform ]
												} ]
									} ]
								});
						this.rateunit.setValue("$");
						this.add(this.addpaypanel)
					},
					saveRequest : function() {
						if (!this.addpayform.form.isValid()) {
							return
						} else {
							var F = 0;
							var C = "-";
							var B = "";
							if (this.rateunit.getValue() == "%") {
								F = parseFloat(this.myratetax.getValue())
										* (parseFloat(this.salary) / 100);
								C = this.myratetax.getValue();
								B = 1
							} else {
								F = parseFloat(this.myratetax.getValue());
								B = 0
							}
							var E = new this.gridrec({
								Type : this.text1.getValue(),
								Rate : C,
								computeon : "-",
								amount : F,
								amtot : "",
								ratetype : B
							});
							this.gridst.insert(this.gridst.getCount(), E);
							var D = 0;
							for ( var A = 0; A < this.gridst.getCount(); A++) {
								D += parseFloat(this.gridst.getAt(A).get(
										"amount"))
							}
							this.grid.total.setValue(WtfGlobal
									.currencyRenderer2(D));
							Wtf.getCmp(this.empid + "payslipTab" + this.stdate)
									.setTotalSal();
							this.close()
						}
					}
				});
Wtf.PayslipGrid = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side", A.border = false;
	Wtf
			.apply(
					Wtf.form.VTypes,
					{
						"percentage" : function(C) {
							var B = /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/;
							return B.test(C)
						},
						"percentageMask" : /[0-9.]/,
						"percentageText" : "This field must be a percentage between 0.00 and 99.99"
					});
	Wtf.PayslipGrid.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.PayslipGrid,
				Wtf.Panel,
				{
					initComponent : function(A) {
						this.addEvents({
							"storeload" : true
						});
						Wtf.PayslipGrid.superclass.initComponent.call(this, A);
						var D = this.salary;
						var F = this.Data;
						var E = this.dtotal;
						var B = this.fixedsal;
						var G = this.cursymbol;
						this.addEvents({
							"datamodified" : true
						});
						this.rateEditor = new Wtf.form.TextField();
						this.amountEditor = new Wtf.form.TextField();
						this.cmtax = new Wtf.grid.ColumnModel(
								[
										{
											header : WtfGlobal
													.getLocaleText(this.Localetype),
											dataIndex : "Type",
											sortable : true,
											autoWidth : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Rate"),
											dataIndex : "Rate",
											align : "center",
											sortable : true,
											hidden : true,
											autoWidth : true,
											renderer : function(J, I, H) {
												if (H.get("ratetype") == 1) {
													return WtfGlobal
															.percentageRenderer(J)
												} else {
													return "<div align='center'>-</div>"
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.percent.of"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											hidden : (this.flag != "employee") ? false
													: true,
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Amount"),
											dataIndex : "amount",
											autoWidth : true,
											scope : this,
											sortable : true,
											align : "right",
											renderer : function(H) {
												if (H != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			H)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											dataIndex : "",
											width : 30,
											hidden : (this.flag != "employee") ? false
													: true,
											renderer : function(J, I, H) {
												if (H.data.DeducId != "-1") {
													return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.common.DeleteRecord")
															+ "></div></div>"
												}
											}
										} ]);
						this.fieldstax = [ {
							name : "Type"
						}, {
							name : "Rate"
						}, {
							name : "amount",
							type : "float"
						}, {
							name : "amtot"
						}, {
							name : "ratetype"
						}, {
							name : "Id"
						}, {
							name : "computeon"
						} ];
						this.fieldstaxx = Wtf.data.Record
								.create(this.fieldstax);
						this.readertax = new Wtf.data.KwlJsonReader({
							root : this.Data,
							totalProperty : "totalCount"
						}, this.fieldstaxx);
						this.storetax = new Wtf.data.Store({
							scope : this,
							url : this.storeURL,
							method : "GET",
							reader : this.readertax
						});
						this.storetax.on("datachanged", function() {
							WtfGlobal.closeProgressbar()
						}, this);
						this.storetax.on("beforeload", function() {
							calMsgBoxShow(202, 4, true)
						}, this);
						this.addbtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText({
												key : "hrms.payroll.Addpayrollgrid",
												params : [ WtfGlobal
														.getLocaleText(this.Localetype) ]
											}),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									tooltip : WtfGlobal
											.getLocaleText({
												key : "hrms.payroll.Addnewpayrollgridincurrentsalary",
												params : [ WtfGlobal
														.getLocaleText(this.Localetype) ]
											}),
									scope : this,
									handler : this.addnew
								});
						this.storetax.load({
							params : {
								paycyclestart : this.paycyclestart,
								paycycleend : this.paycycleend,
								paycycleactualstart : this.paycycleactualstart,
								paycycleactualend : this.paycycleactualend,
								ischanged : this.ischanged,
								mappingid : this.mappingid
							}
						});
						var C = [];
						if (this.flag != "employee") {
							C.push(this.addbtn)
						}
						C
								.push(
										"->",
										WtfGlobal
												.getLocaleText("hrms.payroll.TOTAL")
												+ '<span align="right" style="font-family:Lucida Sans Unicode;">('
												+ WtfGlobal.getCurrencySymbol()
												+ ")</span>",
										this.total = new Wtf.form.TextField(
												{
													border : false,
													scope : this,
													cls : "textfstyle",
													width : 100,
													value : 0,
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.TOTAL"),
													readOnly : true,
													id : this.id + "gridtotal",
													height : 16,
													bodyStyle : "background:white"
												}));
						this.grid = new Wtf.grid.EditorGridPanel({
							scope : this,
							bodyStyle : "width:99.7%",
							cm : this.cmtax,
							sm : new Wtf.grid.RowSelectionModel({
								singleSelect : true
							}),
							store : this.storetax,
							autoScroll : true,
							viewConfig : {
								forceFit : true
							},
							height : this.height,
							clicksToEdit : 1,
							stripeRows : true,
							bbar : C
						});
						this.grid
								.on(
										"click",
										function(I) {
											if (I.target.className == "pwndCommon gridCancel") {
												if (this.grid
														.getSelectionModel()
														.getSelections().length > 0) {
													this.grid
															.getStore()
															.remove(
																	this.grid
																			.getSelectionModel()
																			.getSelected());
													var H = 0;
													for (i = 0; i < this.storetax
															.getCount(); i++) {
														H = H
																+ this.storetax
																		.getAt(
																				i)
																		.get(
																				"amount")
													}
													this.total
															.setValue(WtfGlobal
																	.currencyRenderer2(H));
													Wtf
															.getCmp(
																	this.empid
																			+ "payslipTab"
																			+ this.stdate)
															.setTotalSal();
													this
															.fireEvent("datamodified")
												}
											}
										}, this);
						this.storetax.on("load", function() {
							this.amtot = 0;
							for (i = 0; i < this.storetax.getCount(); i++) {
								this.amtot = this.amtot
										+ this.storetax.getAt(i).get("amount")
							}
							this.total.setValue(WtfGlobal
									.currencyRenderer2(this.amtot));
							this.fireEvent("storeload")
						}, this);
						this.pan1 = new Wtf.Panel({
							height : this.height,
							border : false,
							bodyStyle : "margin-left:25%",
							scope : this,
							items : [ this.grid ]
						});
						this.add(this.pan1);
						this.doLayout();
						this.pan1.doLayout();
						this.on("activate", function(I, H) {
							this.doLayout()
						});
						this.grid.on("afteredit", this.fillGridValue, this);
						this.grid.on("beforeedit", this.chkEditorValue, this)
					},
					chkEditorValue : function(B) {
						var A = 1;
						if (B.record.get("ratetype") == 0 && B.column == 2) {
							B.cancel = true
						}
					},
					fillGridValue : function(B) {
						var C = 0;
						if (B.column == 2) {
							this.storetax.getAt(B.row).set(
									"amount",
									(this.fixedsal * this.storetax.getAt(B.row)
											.get("Rate")) / 100);
							for ( var A = 0; A < this.storetax.getCount(); A++) {
								C += parseFloat(this.storetax.getAt(A).get(
										"amount"))
							}
						} else {
							if (B.column == 4) {
								this.storetax.getAt(B.row).set(
										"Rate",
										(100 * this.storetax.getAt(B.row).get(
												"amount"))
												/ this.fixedsal);
								for ( var A = 0; A < this.storetax.getCount(); A++) {
									C += parseFloat(this.storetax.getAt(A).get(
											"amount"))
								}
							}
						}
						this.total.setValue(WtfGlobal.currencyRenderer2(C));
						Wtf.getCmp(this.empid + "payslipTab" + this.stdate)
								.setTotalSal();
						this.fireEvent("datamodified")
					},
					addnew : function() {
						var A = Wtf.getCmp(this.id);
						var D = A.grid.getStore();
						var C = D.getCount();
						var B = new Wtf.addpayCmpWin(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									type : this.type,
									closable : true,
									resizable : false,
									stdate : this.stdate,
									gridst : D,
									gridrec : this.fieldstaxx,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.add.component"),
									border : false,
									id : this.id + "paywindow",
									modal : true,
									scope : this,
									empid : this.empid,
									grid : A,
									salary : this.fixedsal,
									plain : true
								});
						B.show()
					}
				});
Wtf.EditViewTemplate = function(A) {
	Wtf.form.Field.prototype.msgTarget = "side", A.layout = "fit";
	A.closable = true;
	Wtf.EditViewTemplate.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.EditViewTemplate,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.EditViewTemplate.superclass.initComponent.call(
								this, A);
						this.storeURL = "null";
						this.stran = String(this.range).substring(0,
								String(this.range).indexOf("-", 0) - 1);
						this.endran = String(this.range).substring(
								String(this.range).indexOf("-", 0) + 1,
								String(this.range).length);
						this.PayAreaForm12 = new Wtf.form.FormPanel(
								{
									columnWidth : 0.25,
									height : 200,
									labelWidth : 100,
									border : false,
									bodyBorder : "true",
									scope : this,
									frame : false,
									items : [ this.tempname = new Wtf.form.TextField(
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.CampaignDetail.TemplateName"),
												allowBlank : false,
												validator : WtfGlobal.noBlankCheck,
												id : "tempName" + this.id,
												scope : this,
												width : 200,
												maxLength : 40,
												value : this.templatename
											}) ]
								});
						this.PayAreaForm13 = new Wtf.form.FormPanel(
								{
									columnWidth : 0.25,
									height : 200,
									labelWidth : 150,
									border : false,
									hidden : true,
									bodyBorder : "true",
									scope : this,
									frame : false,
									items : [ this.newLimitStart = new Wtf.form.NumberField(
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.salary.range.month")
														+ ' (<span align="right" style="font-family:Lucida Sans Unicode;">'
														+ WtfGlobal
																.getCurrencySymbol()
														+ "</span>)",
												width : 150,
												labelWidth : 60,
												allowBlank : false,
												allowNegative : false,
												maxLength : 15,
												id : this.id
														+ "editsalarystartrange",
												scope : this,
												value : this.stran
											}) ]
								});
						this.PayAreaForm14 = new Wtf.form.FormPanel(
								{
									columnWidth : 0.18,
									height : 200,
									border : false,
									hidden : true,
									bodyBorder : "true",
									scope : this,
									frame : false,
									items : [ this.newLimitEnd = new Wtf.form.NumberField(
											{
												hideLabel : true,
												scope : this,
												maxLength : 15,
												allowBlank : false,
												allowNegative : false,
												initialPassField : this.id
														+ "editsalarystartrange",
												value : this.endran,
												vtype : "range",
												width : 150
											}) ]
								});
						this.PayAreaForm15 = new Wtf.form.FormPanel(
								{
									columnWidth : 0.24,
									height : 200,
									labelWidth : 120,
									border : false,
									bodyBorder : "true",
									scope : this,
									frame : false,
									items : [ this.addgroupCombo = new Wtf.form.FnComboBox(
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.AddtoDesignation"),
												scope : this,
												allowBlank : false,
												triggerAction : "none",
												readOnly : true,
												mode : "local",
												selectOnFocus : true,
												typeAhead : true,
												disabled : true,
												width : 200,
												store : Wtf.desigStore,
												addNewFn : this.addDesignation
														.createDelegate(this),
												plugins : [ new Wtf.common.comboAddNew(
														{
															handler : function() {
																WtfGlobal
																		.showmasterWindow(
																				1,
																				Wtf.desigStore,
																				"Add")
															},
															scope : this
														}) ],
												listeners : {
													scope : this,
													select : function(D, B, C) {
														new Wtf.form.Hidden(
																{
																	id : "GlobalGroupId1",
																	value : B
																			.get("id"),
																	readOnly : true
																})
													}
												},
												displayField : "name",
												valueField : "id"
											}) ]
								});
						this.wageentryform1 = new Wtf.WageEntryForm({
							edittemp : "yes",
							paramstore : "1",
							region : "west",
							parentId : this.id,
							id : this.id + "editwagegrid",
							width : "33%",
							bodyStyle : "padding:15px;background-color:white"
						});
						this.taxentryform1 = new Wtf.WageTaxDeducWin({
							edittemp : "yes",
							paramstore : "1",
							parentId : this.id,
							id : this.id + "edittaxgrid",
							region : "east",
							width : "33%",
							bodyStyle : "padding:15px;background-color:white"
						});
						this.deductionentryform1 = new Wtf.DeducEntryForm({
							edittemp : "yes",
							id : this.id + "editdeducgrid",
							paramstore : "1",
							parentId : this.id,
							region : "center",
							bodyStyle : "padding:15px;background-color:white"
						});
						this.TemplateViewForm = new Wtf.Panel({
							region : "north",
							border : false,
							layout : "column",
							scope : this,
							style : "height:12%",
							bodyStyle : "margin-left:1%;margin-top:2%",
							items : [ this.PayAreaForm12, this.PayAreaForm13,
									this.PayAreaForm14, this.PayAreaForm15 ]
						});
						this.SecondPanel = new Wtf.Panel({
							layout : "border",
							region : "center",
							border : false,
							scope : this,
							style : "height:88%",
							items : [ this.wageentryform1,
									this.deductionentryform1,
									this.taxentryform1 ]
						});
						this.MainDataEntryPanelE = new Wtf.Panel(
								{
									layout : "border",
									bodyStyle : "background:#FFFFFF",
									scope : this,
									border : false,
									autoScroll : true,
									items : [ this.TemplateViewForm,
											this.SecondPanel ],
									bbar : [
											"->",
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Save"),
												scope : this,
												id : "editTemp",
												disabled : true,
												iconCls : getButtonIconCls(Wtf.btype.submitbutton),
												minWidth : 50,
												handler : function() {
													if (this.PayAreaForm12.form
															.isValid()
															&& this.PayAreaForm13.form
																	.isValid()
															&& this.PayAreaForm14.form
																	.isValid()
															&& this.PayAreaForm15.form
																	.isValid()) {
														var C = this
																.calcTotalAmountA(
																		this.wageentryform1.grid
																				.getStore(),
																		"cash",
																		"rate",
																		parseFloat(this.newLimitEnd
																				.getValue()));
														var B = this
																.calcTotalAmountA(
																		this.deductionentryform1.DeductionGridPanel
																				.getStore(),
																		"cash",
																		"rate",
																		parseFloat(this.newLimitEnd
																				.getValue()));
														var D = this
																.calcTotalAmountA(
																		this.taxentryform1.grid
																				.getStore(),
																		"cash",
																		"rate",
																		parseFloat(this.newLimitEnd
																				.getValue()));
														Wtf.MessageBox
																.confirm(
																		WtfGlobal
																				.getLocaleText("hrms.common.confirm"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.save.selected.component"),
																		function(
																				E) {
																			if (E == "yes") {
																				this
																						.saveTemplate()
																			} else {
																				return
																			}
																		}, this)
													} else {
														calMsgBoxShow(5, 0)
													}
												}
											} ]
								});
						this.add(this.MainDataEntryPanelE);
						this.doLayout();
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.saveTemplate = function() {
							this.mywin = new Wtf.Window(
									{
										height : 150,
										width : 340,
										ckf : this,
										scope : this,
										title : "Confirm",
										resizable : false,
										border : false,
										html : "<br/><center><font size=2px>"
												+ WtfGlobal
														.getLocaleText("hrms.payroll.change.template.permanently.temporary")
												+ "<br/><br><b>"
												+ WtfGlobal
														.getLocaleText("hrms.Messages.DateCannotbeRetrive")
												+ "<br/></b></font></center>",
										layout : "Column",
										items : [
												{
													columnWidth : 0.5,
													border : false,
													bodyStyle : "padding-left:50%;",
													items : [ {
														text : WtfGlobal
																.getLocaleText("hrms.common.Permanent"),
														xtype : "button",
														scope : this,
														handler : function() {
															this
																	.permanentortempSave(1);
															Wtf
																	.destroy(this.mywin);
															this.groupStore
																	.reload();
															this.mywin.hide()
														}
													} ]
												},
												{
													columnWidth : 0.5,
													border : false,
													bodyStyle : "padding-left:3%;",
													items : [ {
														text : WtfGlobal
																.getLocaleText("hrms.payroll.temporary"),
														xtype : "button",
														scope : this,
														handler : function() {
															if (this.group == this.addgroupCombo
																	.getValue()) {
																this
																		.permanentortempSave(2);
																Wtf
																		.destroy(this.mywin);
																this.groupStore
																		.reload();
																this.mywin
																		.hide()
															} else {
																Wtf.Msg
																		.show({
																			msg : WtfGlobal
																					.getLocaleText("hrms.payroll.edited.template.cannot.proceed.saving.cannot.change.temporary"),
																			scope : this,
																			title : WtfGlobal
																					.getLocaleText("hrms.common.Message"),
																			width : 260,
																			buttons : Wtf.Msg.OK,
																			animEl : "elId",
																			fn : function(
																					B,
																					C) {
																				if (B == "ok") {
																					Wtf
																							.destroy(this.mywin);
																					this.mywin
																							.hide();
																					this.addgroupCombo
																							.focus(true)
																				}
																			}
																		})
															}
														}
													} ]
												} ]
									});
							this.mywin.show()
						};
						this.permanentortempSave = function(B) {
							if (this.PayAreaForm12.getComponent(0)
									.getRawValue().trim().length > 0
									&& this.PayAreaForm13.getComponent(0)
											.getRawValue().trim().length > 0
									&& this.PayAreaForm14.getComponent(0)
											.getRawValue().trim().length > 0
									&& this.PayAreaForm15.getComponent(0)
											.getRawValue().trim().length > 0) {
								if (this.wageentryform1.grid.getStore()
										.getCount() - 1 > 0) {
									if (parseFloat(this.PayAreaForm13
											.getComponent(0).getRawValue()) <= parseFloat(this.PayAreaForm14
											.getComponent(0).getRawValue())) {
										this.frmdta = "{TName:'"
												+ this.PayAreaForm12
														.getComponent(0)
														.getRawValue().trim()
												+ "',";
										this.frmdta += "RStart:'"
												+ this.PayAreaForm13
														.getComponent(0)
														.getRawValue() + "',";
										this.frmdta += "GId:'"
												+ this.addgroupCombo.getValue()
												+ "',";
										this.frmdta += "REnd:'"
												+ this.PayAreaForm14
														.getComponent(0)
														.getRawValue() + "'}";
										this.saveTemplateData = "{TaxDataADD:[";
										for (i = 0; i < this.taxentryform1.grid
												.getStore().getCount() - 1; i++) {
											if (i > 0) {
												this.saveTemplateData += ","
											}
											this.saveTemplateData += "{TaxId:'"
													+ this.taxentryform1.grid
															.getStore()
															.getAt(i).get("id")
													+ "',TaxRate:'"
													+ this.taxentryform1.grid
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData += "]}";
										this.saveTemplateData1 = "{WageDataADD:[";
										for (i = 0; i < this.wageentryform1.grid
												.getStore().getCount() - 1; i++) {
											if (i > 0) {
												this.saveTemplateData1 += ","
											}
											this.saveTemplateData1 += "{WageId:'"
													+ this.wageentryform1.grid
															.getStore()
															.getAt(i).get("id")
													+ "',WageRate:'"
													+ this.wageentryform1.grid
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData1 += "]}";
										this.saveTemplateData2 = "{DeducDataADD:[";
										for (i = 0; i < this.deductionentryform1.DeductionGridPanel
												.getStore().getCount() - 1; i++) {
											if (i > 0) {
												this.saveTemplateData2 += ","
											}
											this.saveTemplateData2 += "{DeducId:'"
													+ this.deductionentryform1.DeductionGridPanel
															.getStore()
															.getAt(i).get("id")
													+ "',DeducRate:'"
													+ this.deductionentryform1.DeductionGridPanel
															.getStore()
															.getAt(i).get(
																	"cash")
													+ "'}"
										}
										this.saveTemplateData2 += "]}";
										Wtf.Ajax
												.requestEx(
														{
															url : "Payroll/Template/updateTemplateData.py",
															method : "post",
															params : {
																save : "true",
																saveType : "updatetemplatedata",
																formdata : this.frmdta,
																taxdata : this.saveTemplateData,
																wagedata : this.saveTemplateData1,
																deducdata : this.saveTemplateData2,
																tempid : this.templateid,
																torp : B,
																templatename : this.templatename
															}
														},
														this,
														function(D, C) {
															msgFlag = 0;
															if (D.value
																	.toString() == "success") {
																calMsgBoxShow(
																		1, 0)
															} else {
																calMsgBoxShow(
																		13, 0)
															}
														}, function(D, C) {
														})
									} else {
										calMsgBoxShow(3, 0)
									}
								} else {
									calMsgBoxShow(4, 0)
								}
							} else {
								calMsgBoxShow(5, 0)
							}
						};
						new Wtf.form.Hidden({
							id : "GlobalCompanyName1",
							value : "companyid",
							readOnly : true
						});
						if (this.deductionentryform1.storededuc.getCount() > 0) {
							this.deductionentryform1.storededuc.removeAll()
						}
						this.deductionentryform1.storededucforgrid.proxy.conn.url = "Payroll/Deduction/getDeductionData.py";
						this.deductionentryform1.storededucforgrid.load({
							params : "type=TDeduction&cname=aa&TempId="
									+ this.templateid
						});
						if (this.taxentryform1.storetax.getCount() > 0) {
							this.taxentryform1.storetax.removeAll()
						}
						this.taxentryform1.storetaxforgrid.proxy.conn.url = "Payroll/Tax/getTaxData.py";
						this.taxentryform1.storetaxforgrid.load({
							params : "type=TTax&cname=aa&TempId="
									+ this.templateid
						});
						if (this.wageentryform1.storewage.getCount() > 0) {
							this.wageentryform1.storewage.removeAll()
						}
						this.wageentryform1.storewageforgrid.proxy.conn.url = "Payroll/Wage/getWagesData.py";
						this.wageentryform1.storewageforgrid.load({
							params : "type=TWages&cname=aa&TempId="
									+ this.templateid
						});
						this.doLayout();
						if (!Wtf.StoreMgr.containsKey("desig")) {
							Wtf.desigStore.load();
							Wtf.StoreMgr.add("desig", Wtf.desigStore);
							Wtf.desigStore.on("load", this.onloadfunc, this)
						} else {
							this.onloadfunc()
						}
						this.wageentryform1.grid.on("validateedit",
								function(B) {
									Wtf.getCmp("editTemp").enable()
								}, this);
						this.taxentryform1.grid.on("validateedit", function(B) {
							Wtf.getCmp("editTemp").enable()
						}, this);
						this.deductionentryform1.DeductionGridPanel.on(
								"validateedit", function(B) {
									Wtf.getCmp("editTemp").enable()
								}, this);
						Wtf.getCmp("tempName" + this.id).on("change",
								function(B) {
									Wtf.getCmp("editTemp").enable()
								}, this)
					},
					onloadfunc : function() {
						this.k = 0;
						for (this.k = 0; this.k < Wtf.desigStore.getCount(); this.k++) {
							if (Wtf.desigStore.getAt(this.k).get("name") == this.group) {
								new Wtf.form.Hidden({
									id : "GlobalGroupId1",
									value : Wtf.desigStore.getAt(this.k).get(
											"id"),
									readOnly : true
								})
							}
							this.addgroupCombo.setValue(this.group)
						}
					},
					addDesignation : function() {
						WtfGlobal.showmasterWindow(1, Wtf.desigStore, "Add")
					},
					calcTotalAmount : function(A, F, E, D) {
						var C = 0;
						for ( var B = 0; B < A.length; B++) {
							var H = A[B];
							var G = H.data[F] * 1;
							if (H.data[E] == "1") {
								G = D / 100 * G
							}
							C += G
						}
						return C
					},
					calcTotalAmountA : function(A, F, E, D) {
						var C = 0;
						for ( var B = 0; B < A.getCount(); B++) {
							var H = A.getAt(B);
							var G = H.data[F] * 1;
							if (H.data[E] == "1") {
								G = D / 100 * G
							}
							C += G
						}
						return C
					}
				});
Wtf.AssignEmployeeFT = function(A) {
	A.border = false;
	A.layout = "border";
	A.monitorResize = true;
	A.coun = 0;
	A.frame = false;
	A.autoScroll = true;
	A.tbar = [ {
		text : WtfGlobal.getLocaleText("hrms.common.AssignTemplate"),
		scope : this,
		minWidth : 110,
		iconCls : getButtonIconCls(Wtf.btype.assignbutton),
		handler : function() {
			Wtf.Msg.show({
				title : WtfGlobal.getLocaleText("hrms.common.warning"),
				msg : WtfGlobal.getLocaleText("hrms.payroll.save.changes"),
				buttons : Wtf.Msg.YESNO,
				fn : function(B, C) {
					if (B == "yes") {
						this.saveEdited()
					}
				},
				scope : this,
				animEl : "elId",
				icon : Wtf.MessageBox.QUESTION
			})
		}
	} ];
	Wtf.AssignEmployeeFT.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.AssignEmployeeFT,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.AssignEmployeeFT.superclass.initComponent.call(
								this, A);
						this.emplistfields = [ {
							name : "uname"
						}, {
							name : "design"
						}, {
							name : "salary"
						} ];
						this.EmployeeListIndex = 0;
						this.unassSelMod = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this,
									singleSelect : false
								});
						this.unassColMod = new Wtf.grid.ColumnModel(
								[
										this.unassSelMod,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											sortable : true,
											dataIndex : "empname",
											renderer : function(D, C, B) {
												if (D != null) {
													if (B.get("status") == "2") {
														return ('<div style="color:blue;" align="left">'
																+ D + "</div>")
													} else {
														return ('<div align="left">'
																+ D + "</div>")
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											sortable : true,
											dataIndex : "design",
											renderer : function(D, C, B) {
												if (D != null) {
													if (B.get("status") == "2") {
														return ('<div style="color:blue;" align="left">'
																+ D + "</div>")
													} else {
														return ('<div align="left">'
																+ D + "</div>")
													}
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Salary"),
											sortable : true,
											dataIndex : "salary",
											renderer : function(D, C, B) {
												if (D != null) {
													if (B.get("status") == "2") {
														return ('<div style="color:blue;" align="left">'
																+ WtfGlobal
																		.currencyRenderer(D) + "</div>")
													} else {
														return ('<div align="left">'
																+ WtfGlobal
																		.currencyRenderer(D) + "</div>")
													}
												}
											}
										} ]);
						this.EmployeeListGrid = new Wtf.grid.GridPanel({
							autoScroll : true,
							frame : false,
							scope : this,
							border : true,
							store : this.gridStore = new Wtf.data.Store({
								url : Wtf.req.base + "PayrollHandler.jsp",
								method : "GET",
								scope : this,
								id : this.id + "gridStore",
								reader : new Wtf.data.KwlJsonReader({
									root : "data",
									totalProperty : "totalCount"
								}, [ {
									name : "empname"
								}, {
									name : "design"
								}, {
									name : "salary"
								}, {
									name : "empid"
								}, {
									name : "index"
								}, {
									name : "status"
								}, {
									name : "lname"
								} ])
							}),
							forceFit : true,
							viewConfig : {
								forceFit : true
							},
							cm : this.unassColMod,
							sm : this.unassSelMod
						});
						this.EmployeeListGrid.on("beforerender",
								function(B) {
									this.i = 0;
									while (this.i < B.getStore().getCount()) {
										this.recor = B.getStore().getAt(i);
										this.recor.beginEdit();
										this.recor.set("index",
												this.EmployeeListIndex);
										this.recor.endEdit();
										this.recor.commit();
										B.commitChanges();
										this.EmployeeListIndex++;
										this.i++
									}
									B.getStore().sort("index", "ASC")
								});
						this.assSelModel = new Wtf.grid.CheckboxSelectionModel(
								{
									scope : this,
									singleSelect : false,
									listeners : {
										scope : this,
										rowselect : function(D, C, B) {
											this.a1 = C;
											this.arr = this.EmployeeListGrid
													.getSelections();
											this.arr2 = new Array();
											for (i = 0; i < this.arr.length; i++) {
												this.arr2.push(this.arr[i]
														.get("empid"))
											}
										},
										rowdeselect : function(D, C, B) {
											if (this.EmployeeListGrid
													.getSelections().length < 1) {
												this.arr2 = null
											}
										}
									}
								});
						this.assColModel = new Wtf.grid.ColumnModel(
								[
										this.assSelModel,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.employee.name"),
											sortable : true,
											dataIndex : "empname",
											renderer : function(D, C, B) {
												if (D != null) {
													return ('<div style="color:green;" align="left">'
															+ D + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.designation"),
											sortable : true,
											dataIndex : "design",
											renderer : function(D, C, B) {
												if (D != null) {
													return ('<div style="color:green;" align="left">'
															+ D + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Salary"),
											sortable : true,
											dataIndex : "salary",
											renderer : function(D, C, B) {
												if (D != null) {
													return ('<div style="color:green;" align="left">'
															+ WtfGlobal
																	.currencyRenderer(D) + "</div>")
												}
											}
										} ]);
						this.AssignEmployeeListGrid = new Wtf.grid.GridPanel({
							autoScroll : true,
							frame : false,
							id : "AssignEmployeeListGrid",
							border : true,
							scope : this,
							store : this.gridStore1 = new Wtf.data.Store({
								url : Wtf.req.base + "PayrollHandler.jsp",
								method : "GET",
								scope : this,
								reader : new Wtf.data.KwlJsonReader({
									root : "data",
									totalProperty : "totalCount"
								}, [ {
									name : "empname"
								}, {
									name : "design"
								}, {
									name : "salary"
								}, {
									name : "empid"
								}, {
									name : "index"
								}, {
									name : "status"
								} ])
							}),
							forceFit : true,
							viewConfig : {
								forceFit : true
							},
							cm : this.assColModel,
							sm : this.assSelModel
						});
						this.movetoright = document.createElement("img");
						this.movetoright.src = "images/arrowright.gif";
						this.movetoright.style.width = "24px";
						this.movetoright.style.height = "24px";
						this.movetoright.style.margin = "5px 0px 5px 0px";
						this.movetoright.onclick = this.insert_Item
								.createDelegate(this, [ this.EmployeeListGrid,
										this.AssignEmployeeListGrid, 1 ]);
						this.movetoleft = document.createElement("img");
						this.movetoleft.src = "images/arrowleft.gif";
						this.movetoleft.style.width = "24px";
						this.movetoleft.style.height = "24px";
						this.movetoleft.style.margin = "5px 0px 5px 0px";
						this.movetoleft.onclick = this.insert_Item
								.createDelegate(this, [
										this.AssignEmployeeListGrid,
										this.EmployeeListGrid, 0 ]);
						this.centerdiv = document.createElement("div");
						this.centerdiv.appendChild(this.movetoright);
						this.centerdiv.appendChild(this.movetoleft);
						this.centerdiv.style.padding = "165px 10px 165px 10px";
						this.transferbtnPanel = new Wtf.Panel({
							region : "center",
							border : false,
							frame : false,
							bodyStyle : "background:white",
							contentEl : this.centerdiv
						});
						this.EmployeeListIndex = 0;
						this.AssignEmployeeListGrid.on("beforerender",
								function(B) {
									this.i = 0;
									while (this.i < B.getStore().getCount()) {
										this.recor = B.getStore().getAt(i);
										this.recor.beginEdit();
										this.recor.set("index",
												this.EmployeeListIndex);
										this.recor.endEdit();
										this.recor.commit();
										B.commitChanges();
										this.EmployeeListIndex++;
										this.i++
									}
									B.getStore().sort("index", "ASC")
								});
						this.SelectSubGridContainerPanel = new Wtf.Panel({
							layout : "fit"
						});
						this.SelectSubData = [
								[ "Newly Joined Trainee", "12000-14000", 5, 3,
										2 ],
								[ "Trainee Level 1", "15000-17000", 5, 2, 2 ],
								[ "Trainee Level 2", "17000-19000", 5, 1, 3 ],
								[ "Experinced Trainee", "20000-22000", 6, 5, 5 ],
								[ "Half Time Trainee", "2000-7000", 3, 2, 9 ] ];
						this.SelectSubStore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "PAGName"
							}, {
								name : "GrossEarning"
							}, {
								name : "TFTArea"
							}, {
								name : "DFTArea"
							}, {
								name : "NetEarning"
							} ]
						});
						this.SelectSubStore.loadData(this.SelectSubData);
						this.sm = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : true,
							listeners : {
								scope : this,
								selectRow : function(D, C, B) {
								}
							}
						});
						this.firstgridpanel = new Wtf.Panel({
							layout : "fit",
							style : "background:#FFFFFF",
							border : false,
							scope : this,
							region : "west",
							width : "48%",
							items : [ this.EmployeeListGrid ]
						});
						this.secondgridpanel = new Wtf.Panel({
							layout : "fit",
							style : "background:#FFFFFF",
							border : false,
							scope : this,
							region : "east",
							width : "48%",
							items : [ this.AssignEmployeeListGrid ]
						});
						this.colorcodepan = new Wtf.Panel(
								{
									border : false,
									region : "north",
									width : 200,
									layout : "column",
									height : 30,
									bodyStyle : "background-color:white",
									items : [
											{
												xtype : "panel",
												border : false,
												columnWidth : 0.5,
												bodyStyle : "margin-left:20%;margin-top:1.5%",
												html : "<div style='height:14px;width:14px;background-color:blue;float:left'></div>&nbsp; :"
														+ WtfGlobal
																.getLocaleText("hrms.payroll.employee.assigned.to.template")
											},
											{
												xtype : "panel",
												border : false,
												bodyStyle : "margin-left:20%;margin-top:1.5%",
												columnWidth : 0.5,
												html : "<div style='height:14px;width:14px;background-color:green;float:left'></div>&nbsp; :"
														+ WtfGlobal
																.getLocaleText("hrms.payroll.employee.assigned.to.current.template")
											} ]
								});
						this.AssignmainPanel = new Wtf.Panel(
								{
									layout : "border",
									style : "background:#FFFFFF",
									border : false,
									frame : false,
									region : "center",
									id : "mainPanelAssigned",
									scope : this,
									items : [ this.firstgridpanel,
											this.transferbtnPanel,
											this.secondgridpanel ]
								});
						this.add(this.colorcodepan, this.AssignmainPanel);
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.gridStore.removeAll();
						this.gridStore.load({
							scope : this,
							params : "type=Users&cname=aa&Gname=" + this.Gname
									+ "&tid=" + this.TempId
						});
						this.gridStore1.removeAll();
						this.gridStore1.load({
							scope : this,
							params : "type=AUsers&cname=aa&Tid=" + this.TempId
						})
					},
					insert_Item : function(C, B, A) {
						this.recSize = C.getSelectionModel().getSelections().length;
						for (i = 0; i < this.recSize; i++) {
							if (C.getStore().indexOf(
									Rowselected = C.getSelectionModel()
											.getSelected()) != -1) {
								if (B.getStore().find("empid",
										Rowselected.get("empid")) == -1) {
									this.EmpSal = parseFloat(Rowselected
											.get("salary"));
									this.Temprange = this.Srange;
									this.TSRange = 0;
									this.TSRange = parseFloat(this.Srange
											.substring(0, this.Srange
													.indexOf("-")));
									this.TERange = 0;
									this.TERange = parseFloat(this.Srange
											.substring(
													this.Srange.indexOf("-") + 1,
													this.Srange.length));
									if (this.EmpSal >= this.TSRange
											&& this.EmpSal < this.TERange) {
										if (Rowselected.get("status") == "2"
												&& A == 1) {
											Wtf.Msg
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.warning"),
														msg : WtfGlobal
																.getLocaleText("hrms.payroll.employee.assigned.to.some.other.group"),
														scope : this,
														icon : Wtf.MessageBox.QUESTION,
														buttons : Wtf.Msg.YESNO,
														animEl : "elId",
														fn : function(D) {
															if (D == "yes") {
																B
																		.getStore()
																		.add(
																				Rowselected);
																B
																		.getStore()
																		.commitChanges();
																C
																		.getStore()
																		.remove(
																				Rowselected);
																C
																		.getStore()
																		.commitChanges()
															}
														}
													})
										} else {
											B.getStore().add(Rowselected);
											B.getStore().commitChanges();
											C.getStore().remove(Rowselected);
											C.getStore().commitChanges()
										}
									} else {
										calMsgBoxShow(12, 0);
										C
												.getSelectionModel()
												.deselectRow(
														C
																.getStore()
																.indexOf(
																		C
																				.getSelectionModel()
																				.getSelected()));
										this.recSize = C.getSelectionModel()
												.getSelections().length;
										i = 0
									}
								} else {
									C.getStore().remove(Rowselected);
									C.getStore().commitChanges()
								}
							}
						}
					},
					saveEdited : function() {
						if (this.gridStore1.getCount() > 0) {
							this.arr2 = null;
							this.arr2 = new Array();
							for (i = 0; i < this.gridStore1.getCount(); i++) {
								this.arr2.push(this.gridStore1.getAt(i).get(
										"empid"))
							}
							calMsgBoxShow(200, 4, true);
							Wtf.Ajax.requestEx({
								url : Wtf.req.base + "PayrollHandler.jsp",
								method : "post",
								params : {
									empidarr : this.arr2,
									save : "true",
									saveType : "AssignTemp",
									tid : this.TempId,
									TempName : this.TempName
								}
							}, this, function(B, A) {
								this.gridStore.removeAll();
								this.gridStore.reload();
								calMsgBoxShow(11, 0);
								this.gridStore1.removeAll();
								this.gridStore1.reload();
								this.groupstore.reload()
							}, function(B, A) {
							})
						} else {
							Wtf.Msg
									.show({
										msg : WtfGlobal
												.getLocaleText("hrms.payroll.unassign.all.employees"),
										width : 260,
										scope : this,
										buttons : Wtf.Msg.YESNO,
										animEl : "elId",
										fn : function(A) {
											if (A == "yes") {
												Wtf.Ajax
														.requestEx(
																{
																	url : Wtf.req.base
																			+ "PayrollHandler.jsp",
																	method : "post",
																	params : {
																		save : "true",
																		saveType : "AssignTemp",
																		tid : this.TempId
																	}
																},
																this,
																function(C, B) {
																	calMsgBoxShow(
																			11,
																			0);
																	this.gridStore
																			.removeAll();
																	this.gridStore
																			.reload();
																	this.gridStore1
																			.removeAll();
																	this.gridStore1
																			.reload()
																}, function(C,
																		B) {
																})
											}
										}
									})
						}
					}
				});
Wtf.viewmypayslip = function(A) {
	Wtf.viewmypayslip.superclass.constructor.call(this, A);
	A.title = "viewmypayslip2"
};
Wtf
		.extend(
				Wtf.viewmypayslip,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.viewmypayslip.superclass.onRender.call(this, A);
						this.maxUsers = 0;
						this.costPerUser = 0;
						this.count = 0;
						this.usersRecMS = new Wtf.data.Record.create([ {
							name : "EName"
						}, {
							name : "Wage"
						}, {
							name : "AccNo"
						}, {
							name : "month"
						}, {
							name : "Tax"
						}, {
							name : "Deduc"
						}, {
							name : "Salary"
						}, {
							name : "FixedSal"
						}, {
							name : "empid"
						}, {
							name : "design"
						}, {
							name : "tempid"
						}, {
							name : "stdate",
							type : "date"
						}, {
							name : "enddate",
							type : "date"
						}, {
							name : "showborder"
						}, {
							name : "histid"
						} ]);
						var B = "";
						if (this.profile) {
							B = this.userid
						}
						this.userstoreMS = new Wtf.data.Store({
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.usersRecMS),
							baseParams : {
								type : "viewmypayslip",
								empid : B
							},
							url : Wtf.req.base + "PayrollHandler.jsp?"
						});
						calMsgBoxShow(202, 4, true);
						this.userstoreMS.load({
							scope : this,
							params : {
								start : 0,
								limit : 15
							}
						});
						this.userstoreMS.on("load", function() {
							if (msgFlag == 1) {
								WtfGlobal.closeProgressbar()
							}
						}, this);
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.rowNo = new Wtf.grid.RowNumberer();
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.gridcmodel = new Wtf.grid.ColumnModel(
								[
										this.selectionModel,
										this.rowNo,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Month"),
											dataIndex : "month",
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.start.date"),
											dataIndex : "stdate",
											align : "center",
											renderer : WtfGlobal.dateonlyRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.end.date"),
											dataIndex : "enddate",
											align : "center",
											renderer : WtfGlobal.dateonlyRenderer,
											sortable : true,
											groupable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Earning"),
											dataIndex : "Wage",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Deductions"),
											dataIndex : "Deduc",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Taxes"),
											dataIndex : "Tax",
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.netpay"),
											dataIndex : "Salary",
											scope : this,
											sortable : true,
											align : "right",
											groupable : true,
											renderer : function(D) {
												if (D != null) {
													return '<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2))
															+ "</div>"
												}
											}
										} ], this);
						var C = [];
						C
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.common.reset"),
													scope : this,
													iconCls : "pwndRefresh",
													handler : function() {
														this.userstoreMS
																.load({
																	params : {
																		start : 0,
																		limit : this.salusergridMS.pag.pageSize
																	}
																});
														Wtf
																.getCmp(
																		"Quick"
																				+ this.salusergridMS.id)
																.setValue("")
													}
												}));
						if (!this.profile) {
							C
									.push(
											"-",
											new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.payroll.SalaryDetails"),
														tooltip : WtfGlobal
																.getLocaleText("hrms.payroll.SalaryDetails.tooltip"),
														scope : this,
														minWidth : 100,
														disabled : true,
														iconCls : getButtonIconCls(Wtf.btype.reportbutton),
														handler : function() {
															var E = this.salusergridMS
																	.getSelectionModel()
																	.getSelections();
															var D = E[0]
																	.get(
																			"stdate")
																	.format("F");
															if (E.length > 0) {
																this.mainTabId = Wtf
																		.getCmp("as");
																this.payslip = Wtf
																		.getCmp(this.id
																				+ "payslipTab"
																				+ E[0]
																						.get("stdate"));
																if (this.payslip == null) {
																	this.payslip = new Wtf.EmpPayslip(
																			{
																				layout : "fit",
																				scope : this,
																				closable : true,
																				iconCls : getTabIconCls(Wtf.etype.hrmsreport),
																				border : false,
																				id : this.id
																						+ "payslipTab"
																						+ E[0]
																								.get("stdate"),
																				TempId : this.TempId,
																				title : WtfGlobal
																						.getLocaleText({
																							key : "hrms.payroll.SalaryDetailsofmonth",
																							params : [ D ]
																						}),
																				ename : this.ename,
																				accno : this.accno,
																				salary : this.salary,
																				tax : this.tax,
																				empid : this.empid,
																				deduc : this.deduc,
																				cursymbol : this.currency,
																				fixedsal : this.fixedsal,
																				design : this.design,
																				flag : "employee",
																				histid : this.histid,
																				stdate : E[0]
																						.get("stdate"),
																				enddate : E[0]
																						.get("enddate")
																			});
																	this.mainTabId
																			.add(this.payslip)
																}
																this.mainTabId
																		.setActiveTab(this.payslip);
																this.mainTabId
																		.doLayout()
															} else {
																calMsgBoxShow(
																		42, 0)
															}
														}
													}))
						}
						this.myprint = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip"),
									scope : this,
									disabled : true,
									iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.PrintPayslip.tooltip"),
									handler : function() {
										var G = this.salusergridMS
												.getSelectionModel()
												.getSelections();
										var F = G[0].get("stdate").format(
												"m/d/Y");
										var E = G[0].get("enddate").format(
												"m/d/Y");
										var D = G[0].get("EName")
												+ "_"
												+ G[0].get("stdate").format(
														"FY") + "";
										this.exportReport(1, "print", D, G[0]
												.get("empid"), companyName, F,
												E, G);
										this.empid = null;
										this.salusergridMS.getSelectionModel()
												.clearSelections()
									}
								});
						C
								.push(
										"-",
										new Wtf.Toolbar.Button(
												{
													text : WtfGlobal
															.getLocaleText("hrms.payroll.DownloadPayslip"),
													scope : this,
													disabled : true,
													iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
													minWidth : 110,
													tooltip : WtfGlobal
															.getLocaleText("hrms.payroll.DownloadPayslip.tooltip"),
													handler : function() {
														var G = this.salusergridMS
																.getSelectionModel()
																.getSelections();
														var F = G[0]
																.get("stdate")
																.format("m/d/Y");
														var E = G[0]
																.get("enddate")
																.format("m/d/Y");
														var D = G[0]
																.get("EName")
																+ "_"
																+ G[0]
																		.get(
																				"stdate")
																		.format(
																				"FY")
																+ "";
														this
																.exportReport(
																		1,
																		"pdf",
																		D,
																		G[0]
																				.get("empid"),
																		companyName,
																		F, E, G);
														this.empid = null;
														this.salusergridMS
																.getSelectionModel()
																.clearSelections()
													}
												}), "-", this.myprint);
						this.summary = new Wtf.ux.grid.GridSummary();
						this.salusergridMS = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									border : false,
									loadMask : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.payroll.SearchbyMonth"),
									searchField : "month",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.NoPaysliptodownload"))
									},
									store : this.userstoreMS,
									displayInfo : true,
									cm : this.gridcmodel,
									region : "west",
									scope : this,
									width : 400,
									id : "salusergridMS",
									sm : new Wtf.grid.CheckboxSelectionModel(
											{
												singleSelect : true,
												scope : this,
												listeners : {
													scope : this,
													rowselect : function(F, E,
															D) {
														this.ename = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("EName");
														this.accno = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("AccNo");
														this.salary = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("Wage");
														this.fixedsal = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("FixedSal");
														this.tax = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("Tax");
														this.deduc = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("Deduc");
														this.empid = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("empid");
														this.design = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("design");
														this.TempId = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("tempid");
														this.fromdateemp = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("stdate");
														this.todateemp = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("enddate");
														this.histid = this.salusergridMS
																.getSelectionModel()
																.getSelected()
																.get("histid")
													}
												}
											}),
									tbar : C
								});
						this.UsergridPanel2 = new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.salusergridMS ]
						});
						this.innerpanel2 = new Wtf.Panel({
							layout : "fit",
							cls : "backcolor",
							border : false,
							items : [ this.UsergridPanel2 ]
						});
						this.add(this.innerpanel2);
						this.salusergridMS.getSelectionModel().on(
								"selectionchange",
								function() {
									if (this.profile) {
										WtfGlobal.enableDisableBtnArr(C,
												this.salusergridMS, [ 3, 5 ],
												[])
									} else {
										WtfGlobal.enableDisableBtnArr(C,
												this.salusergridMS,
												[ 3, 5, 7 ], [])
									}
								}, this)
					},
					exportReport : function(M, L, A, E, K, I, D, F) {
						var G = "";
						var H = F[0].get("showborder");
						var C = '{"data": []}';
						if (M == 1) {
							C = '{"data": ["No","From", "To", "Duration", "Reason", "Type Of Leave", "Paid", "LPW", "Employee Signature", "Approver Signature", "Balance"]}'
						}
						var J = "";
						if (L == "print") {
							J = "Payroll/Date/Salary/printHTML.py?"
						} else {
							J = "Payroll/Date/Salary/exportPDF.py?"
						}
						var B = J + "&flag=" + M + "&colHeader=" + C
								+ "&userIDs=" + G + "&reportname=" + A
								+ "&exporttype=" + L + "&empid=" + E
								+ "&cname=" + K + "&stdate=" + I
								+ "&showborder=" + H + "&cdomain=" + subDomain
								+ "&flagpdf=datewise&enddate=" + D;
						setDldUrl(B, L)
					}
				});
Wtf.AddIncometaxWin = function(config) {
	Wtf.apply(this, config);
	config.resizable = false;
	Wtf.AddIncometaxWin.superclass.constructor
			.call(
					this,
					{
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									scope : this,
									handler : function() {
										if (!this.AddEditForm.form.isValid()) {
											return
										} else {
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.timesheet.save.data"),
															WtfGlobal
																	.getLocaleText("hrms.common.want.to.save.changes"),
															function(btn) {
																if (btn != "yes") {
																	this
																			.close()
																} else {
																	calMsgBoxShow(
																			200,
																			4,
																			true);
																	this.AddEditForm
																			.getForm()
																			.submit(
																					{
																						url : "Payroll/Tax/setNewIncometax.py",
																						params : {
																							save : true,
																							saveType : "AddIncometax",
																							catgryid : this.ctgrycombo
																									.getValue()
																						},
																						method : "post",
																						scope : this,
																						success : function(
																								a,
																								req) {
																							req = eval("("
																									+ req.response.responseText
																									+ ")");
																							if (req.data.value == "exist") {
																								calMsgBoxShow(
																										135,
																										0)
																							}
																							if (req.data.value == "success"
																									|| req.data.value == WtfGlobal
																											.getLocaleText("hrms.common.success")) {
																								Wtf
																										.getCmp(
																												"incometaxwin")
																										.close();
																								calMsgBoxShow(
																										136,
																										0);
																								this.incometaxstore
																										.load({
																											params : {
																												type : "GetTaxperCatgry",
																												categoryid : this.ctgrycombo
																														.getValue(),
																												start : 0,
																												limit : this.gridp.pag.pageSize
																											}
																										})
																							}
																						},
																						failure : function(
																								req,
																								res) {
																						}
																					})
																}
															}, this)
										}
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									handler : function() {
										this.close()
									},
									scope : this
								} ]
					})
};
Wtf
		.extend(
				Wtf.AddIncometaxWin,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.AddIncometaxWin.superclass.initComponent.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						var C = WtfGlobal
								.getLocaleText("hrms.payroll.add.income.tax");
						var A = WtfGlobal
								.getLocaleText("hrms.payroll.fill.information.add.income.tax");
						var B = this.typeimage;
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 90,
									border : false,
									bodyStyle : "backgroubodyStylend-color:white;padding:8px;border-bottom:1px solid #bfbfbf;background-color: white",
									html : getTopHtml(C, A, B)
								})
					},
					GetAddEditForm : function() {
						this.percent = [
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Percent"),
										"%" ],
								[
										WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										"$" ] ];
						this.percentstore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "type"
							}, {
								name : "code"
							} ],
							data : this.percent
						});
						this.taxrateinamount = new Wtf.Panel(
								{
									width : 400,
									frame : false,
									border : false,
									layout : "column",
									items : [
											{
												columnWidth : 0.52,
												frame : false,
												border : false,
												layout : "form",
												items : [ {
													xtype : "numberfield",
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.income.slab"),
													allowBlank : false,
													maxLength : 10,
													editable : false,
													name : "rangefrom",
													width : 100,
													labelWidth : 100
												} ]
											},
											{
												columnWidth : 0.48,
												frame : false,
												border : false,
												items : [ this.myrate = new Wtf.form.NumberField(
														{
															width : 95,
															maxLength : 10,
															name : "rangeto"
														}) ]
											} ]
								});
						this.ctgrycombo = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.Masters.Category")
											+ "*",
									store : Wtf.catgStore,
									id : "catgorycombo3",
									displayField : "name",
									typeAhead : true,
									valueField : "id",
									name : "categoryname",
									allowBlank : false,
									width : 200,
									labelWidth : 200,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.category"),
									selectOnFocus : true,
									addNewFn : this.addCategory
											.createDelegate(this),
									listeners : {
										scope : this,
										Select : function(C, A, B) {
											this.categoryid = A.get("id")
										}
									}
								});
						if (!Wtf.StoreMgr.containsKey("catg")) {
							Wtf.catgStore.on("load", this.setCategary, this);
							Wtf.catgStore.load();
							Wtf.StoreMgr.add("catg", Wtf.catgStore)
						} else {
							this.setCategary()
						}
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									scope : this,
									defaults : {
										xtype : "numberfield",
										width : 200,
										allowBlank : false
									},
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									items : [
											this.ctgrycombo,
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.Rate")
														+ "*",
												scope : this,
												name : "rate",
												regex : /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/
											},
											{
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.salary.min")
														+ "*",
												name : "rangefrom",
												id : "incometaxmin",
												displayField : "cname",
												regex : /^\d{0,10}$/
											},
											{
												labelWidth : 100,
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.salary.max")
														+ "*",
												name : "rangeto",
												scope : this,
												vtype : "range",
												regex : /^\d{0,10}$/,
												initialPassField : "incometaxmin"
											} ]
								})
					},
					addCategory : function() {
						WtfGlobal.showmasterWindow(14, Wtf.catgStore, "Add")
					},
					setCategary : function() {
						if (Wtf.catgStore.getCount() > 0) {
							this.ctgrycombo.setValue(Wtf.catgStore.getAt(
									Wtf.catgStore.getCount() - 1).get("id"))
						}
					}
				});
Wtf.PayCompoSetting = function(A) {
	A.autoScroll = "true";
	A.layout = "fit";
	Wtf.PayCompoSetting.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.PayCompoSetting,
				Wtf.Panel,
				{
					initComponent : function(A) {
						Wtf.PayCompoSetting.superclass.initComponent.call(this,
								A);
						this.cm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.CheckboxSelectionModel(),
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.codeid"),
											dataIndex : "code",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.type"),
											dataIndex : "type",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Addasdefault"),
											dataIndex : "isdefault",
											sortable : true,
											renderer : function(F, E, D) {
												if (F) {
													return (WtfGlobal
															.getLocaleText("hrms.common.yes"))
												} else {
													return (WtfGlobal
															.getLocaleText("hrms.common.no"))
												}
											}
										},
										{
											header : '<div align="right">'
													+ WtfGlobal
															.getLocaleText("hrms.payroll.ratein")
													+ "</div>",
											dataIndex : "rate",
											sortable : true,
											renderer : function(F, E, D) {
												if (F == 1) {
													return ('<div align="right">'
															+ parseFloat(
																	D
																			.get("cash"))
																	.toFixed(2) + " %</div>")
												} else {
													return ('<div align="right">-</div>')
												}
											}
										},
										{
											header : '<div align="right">'
													+ WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.amountin",
																params : [ WtfGlobal
																		.getCurrencySymbol() ]
															}) + "</div>",
											dataIndex : "cash",
											sortable : true,
											renderer : function(F, E, D) {
												if (D.get("rate") == 0) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			F)
																			.toFixed(
																					2)) + "</div>")
												} else {
													return ('<div align="right">-</div>')
												}
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.computeon"),
											dataIndex : "computeon",
											align : "center",
											sortable : true,
											renderer : this.rendererfun
													.createDelegate(this)
										} ]);
						this.usersRecT = new Wtf.data.Record.create([ {
							name : "type"
						}, {
							name : "cash"
						}, {
							name : "rate"
						}, {
							name : "code"
						}, {
							name : "id"
						}, {
							name : "isdefault"
						}, {
							name : "rangefrom"
						}, {
							name : "rangeto"
						}, {
							name : "category"
						}, {
							name : "depwage"
						}, {
							name : "depwageid"
						}, {
							name : "computeon"
						}, {
							name : "expr"
						}, {
							name : "comp"
						} ]);
						this.userdsT = new Wtf.data.Store({
							scope : this,
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.usersRecT),
							baseParams : {
								tablename : "Wagemaster",
								type : "getPayComponent",
								allflag : "false"
							},
							url : "Payroll/Wage/getWageMaster.py"
						});
						this.userdsT.load({
							params : {
								start : 0,
								limit : 15,
								grouper : "payrollcomp"
							}
						});
						this.userdsT
								.on(
										"load",
										function() {
											if (this.payrollcombo.getValue() == "Wage") {
												this.userdsT.filter("comp",
														"wage")
											} else {
												if (this.payrollcombo
														.getValue() == "Deduction") {
													this.userdsT.filter("comp",
															"deduc")
												} else {
													if (this.payrollcombo
															.getValue() == "Employer Contribution") {
														this.userdsT.filter(
																"comp",
																"empcontrib")
													}
												}
											}
											if (this.userdsT.getCount() == 0) {
												this.generaltaxgrid.getView().emptyText = WtfGlobal
														.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addcompo(\""
																+ this.id
																+ "\")'>Get started by adding a payroll components now...</a>");
												this.generaltaxgrid.getView()
														.refresh()
											}
										}, this);
						this.combodata = [
								[
										"Wage",
										"Wagemaster",
										WtfGlobal
												.getLocaleText("hrms.payroll.Wage") ],
								[
										"Tax",
										"Taxmaster",
										WtfGlobal
												.getLocaleText("hrms.payroll.Tax") ],
								[
										"Deduction",
										"Deductionmaster",
										WtfGlobal
												.getLocaleText("hrms.payroll.Deduction") ],
								[
										"Employer Contribution",
										"EmpContribmaster",
										WtfGlobal
												.getLocaleText("hrms.payroll.EmployerContribution") ] ];
						this.combostore1 = new Wtf.data.SimpleStore({
							fields : [ {
								name : "type"
							}, {
								name : "table"
							}, {
								name : "displaytype"
							} ],
							data : this.combodata
						});
						this.type = "Wage";
						this.tablename = "Wagemaster";
						this.payrollcombo = new Wtf.form.ComboBox(
								{
									store : this.combostore1,
									width : 200,
									displayField : "displaytype",
									forceSelection : true,
									typeAhead : true,
									valueField : "table",
									scope : this,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.payroll.selectcomponent"),
									selectOnFocus : true,
									forceSelection : true,
									listeners : {
										scope : this,
										select : function(F, D, E) {
											this.userdsT.removeAll();
											this.tablename = D.get("table");
											this.type = D.get("type");
											this.importButtonWage.hide();
											this.importButtonDeduction.hide();
											this.importButtonTax.hide();
											this.importButtonEmp.hide();
											if (this.tablename == "Wagemaster") {
												this.userdsT.proxy.conn.url = "Payroll/Wage/getWageMaster.py"
											} else {
												if (this.tablename == "Taxmaster") {
													this.userdsT.proxy.conn.url = "Payroll/Tax/getTaxMaster.py"
												} else {
													if (this.tablename == "Deductionmaster") {
														this.userdsT.proxy.conn.url = "Payroll/Deduction/getDeductionMaster.py"
													} else {
														if (this.tablename == "EmpContribmaster") {
															this.userdsT.proxy.conn.url = "Payroll/EmpContrib/getEmpContribMaster.py"
														}
													}
												}
											}
											this.userdsT
													.load({
														params : {
															start : 0,
															limit : this.generaltaxgrid.pag.pageSize
														}
													});
											var G = Wtf
													.getCmp("paysettingmainPanel");
											if (this.type == "Tax") {
												this.incometaxgrid.show();
												G.doLayout();
												Wtf.getCmp("as").doLayout()
											} else {
												this.incometaxgrid.hide();
												G.doLayout()
											}
										}
									}
								});
						this.payrollcombo.setValue("Wagemaster");
						this.tablename = "Wagemaster";
						var B = {};
						var C = '{"Companydetails":"' + companyid + '"}';
						this.importBtnArrayWage = Wtf.importMenuArray1(this,
								"Wage", this.userdsT, C, B);
						this.importButtonWage = Wtf.importMenuButtonA1(
								this.importBtnArrayWage, this, "Wage");
						this.importBtnArrayDeduction = Wtf.importMenuArray1(
								this, "Deduction", this.userdsT, C, B);
						this.importButtonDeduction = Wtf
								.importMenuButtonA1(
										this.importBtnArrayDeduction, this,
										"Deduction");
						this.importBtnArrayTax = Wtf.importMenuArray1(this,
								"Tax", this.userdsT, C, B);
						this.importButtonTax = Wtf.importMenuButtonA1(
								this.importBtnArrayTax, this, "Tax");
						C = '{"Companyid":"' + companyid + '"}';
						this.importBtnArrayEmp = Wtf.importMenuArray1(this,
								"Employee Contribution", this.userdsT, C, B);
						this.importButtonEmp = Wtf.importMenuButtonA1(
								this.importBtnArrayEmp, this,
								"Employee Contribution");
						this.importButtonWage.hide();
						this.importButtonDeduction.hide();
						this.importButtonTax.hide();
						this.importButtonEmp.hide();
						this.generaltaxgrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									region : "center",
									height : 350,
									loadMask : true,
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.common.Searchbyname"),
									searchField : "type",
									serverSideSearch : true,
									viewConfig : {
										forceFit : true
									},
									store : this.userdsT,
									cm : this.cm,
									border : false,
									sm : new Wtf.grid.RowSelectionModel({
										singleSelect : true
									}),
									tbar : [
											"-",
											new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.reset"),
														scope : this,
														iconCls : "pwndRefresh",
														handler : function() {
															this.userdsT
																	.load({
																		params : {
																			start : 0,
																			limit : this.generaltaxgrid.pag.pageSize
																		}
																	});
															Wtf
																	.getCmp(
																			"Quick"
																					+ this.generaltaxgrid.id)
																	.setValue(
																			"")
														}
													}),
											"-",
											WtfGlobal
													.getLocaleText("hrms.payroll.selectcomponent")
													+ ":",
											this.payrollcombo,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.addnew"),
												scope : this,
												tooltip : WtfGlobal
														.getLocaleText("hrms.payroll.addnew.tooltip"),
												minWidth : 60,
												iconCls : getButtonIconCls(Wtf.btype.addbutton),
												handler : this.addcomponent
											},
											"-",
											this.editcomponent = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.edit"),
														scope : this,
														tooltip : WtfGlobal
																.getLocaleText("hrms.payroll.edit.tooltip"),
														minWidth : 60,
														iconCls : getButtonIconCls(Wtf.btype.editbutton),
														handler : function() {
															if (this.generaltaxgrid
																	.getSelectionModel()
																	.hasSelection() == false) {
																calMsgBoxShow(
																		42, 0)
															} else {
																var D = this.generaltaxgrid
																		.getSelectionModel()
																		.getSelected();
																this.wageDeduWinEdit = new Wtf.analysisWindow(
																		{
																			layout : "fit",
																			modal : true,
																			title : WtfGlobal
																					.getLocaleText("hrms.payroll.edit.component"),
																			closable : true,
																			id : "addWTDwindow",
																			closeAction : "close",
																			width : 500,
																			typeimage : "images/payroll.gif",
																			height : 450,
																			payrollcombo : this.payrollcombo,
																			iconCls : getButtonIconCls(Wtf.btype.winicon),
																			scope : this,
																			editWageId : D.data["id"],
																			AddEdit : "Edit",
																			generaltaxgrid : this.generaltaxgrid,
																			type : this.type,
																			userdsT : this.userdsT,
																			incometaxgrid : this.incometaxgrid,
																			tablename : this.tablename
																		});
																this.wageDeduWinEdit
																		.on(
																				"show",
																				function() {
																					this.wageDeduWinEdit.text1
																							.focus(
																									true,
																									100)
																				},
																				this);
																this.wageDeduWinEdit
																		.show()
															}
														}
													}),
											"-",
											this.deladdwtdform = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.delete"),
														scope : this,
														tooltip : WtfGlobal
																.getLocaleText("hrms.payroll.delete.tooltip"),
														minWidth : 70,
														iconCls : getButtonIconCls(Wtf.btype.deletebutton),
														handler : function() {
															if (!this.generaltaxgrid
																	.getSelectionModel()
																	.hasSelection()) {
																calMsgBoxShow(
																		42, 0)
															} else {
																var D = this.generaltaxgrid
																		.getSelectionModel()
																		.getSelected();
																for ( var E = 0; E < this.userdsT.data.length; E++) {
																	if (this.userdsT
																			.getAt(E).data.depwageid == D.data["id"]) {
																		calMsgBoxShow(
																				207,
																				2);
																		return
																	}
																}
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.confirm"),
																			msg : deleteMsgBox("component"),
																			buttons : Wtf.MessageBox.YESNO,
																			icon : Wtf.MessageBox.QUESTION,
																			scope : this,
																			fn : function(
																					G) {
																				if (G == "yes") {
																					var I = this.generaltaxgrid
																							.getSelectionModel()
																							.getSelected();
																					var H = this.userdsT
																							.indexOf(I);
																					this.generaltaxgrid
																							.getSelectionModel()
																							.clearSelections();
																					WtfGlobal
																							.highLightRow(
																									this.generaltaxgrid,
																									"FF0000",
																									5,
																									H);
																					calMsgBoxShow(
																							201,
																							4,
																							true);
																					var F;
																					if (this.type == "Deduction") {
																						F = "Payroll/Deduction/deleteMasterDeduc.py"
																					} else {
																						if (this.type == "Wage") {
																							F = "Payroll/Wage/deleteMasterWage.py"
																						} else {
																							if (this.type == "Employer Contribution") {
																								F = "Payroll/EmpContrib/deleteMasterEmpContrib.py"
																							} else {
																								F = "Payroll/Tax/deleteMasterTax.py"
																							}
																						}
																					}
																					Wtf.Ajax
																							.requestEx(
																									{
																										url : F,
																										method : "post",
																										params : {
																											dele : "true",
																											delType : this.type,
																											typeid : I.data["id"]
																										}
																									},
																									this,
																									function(
																											K) {
																										var J = K.value
																												.toString();
																										if (J == "success") {
																											calMsgBoxShow(
																													9,
																													0);
																											var L = {
																												start : 0,
																												limit : this.generaltaxgrid.pag.pageSize
																											};
																											WtfGlobal
																													.delaytasks(
																															this.userdsT,
																															L);
																											this.generaltaxgrid
																													.doLayout()
																										} else {
																											if (J == "assign") {
																												calMsgBoxShow(
																														10,
																														0)
																											} else {
																												if (J == "depend") {
																													calMsgBoxShow(
																															226,
																															0)
																												}
																											}
																										}
																									},
																									function(
																											J) {
																										this.userdsT
																												.reload();
																										this.generaltaxgrid
																												.doLayout();
																										calMsgBoxShow(
																												27,
																												2)
																									})
																				}
																			}
																		})
															}
														}
													}),
											this.importButtonWage,
											this.importButtonDeduction,
											this.importButtonTax,
											this.importButtonEmp,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.definecpfrules"),
												scope : this,
												hidden : true,
												tooltip : WtfGlobal
														.getLocaleText("hrms.payroll.definecpfrules.tooltip"),
												minWidth : 60,
												iconCls : getButtonIconCls(Wtf.btype.addbutton),
												handler : this.CPFRules
											} ]
								});
						this.cm1 = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.CheckboxSelectionModel(),
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.category"),
											dataIndex : "category",
											sortable : true
										},
										{
											header : '<div align="right">'
													+ WtfGlobal
															.getLocaleText("hrms.payroll.ratein")
													+ "</div>",
											dataIndex : "rate",
											sortable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right">'
															+ parseFloat(D)
																	.toFixed(2) + "</div>")
												}
											}
										},
										{
											header : '<div align="right">'
													+ WtfGlobal
															.getLocaleText("hrms.payroll.salarymin")
													+ "</div>",
											dataIndex : "rangefrom",
											sortable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										},
										{
											header : '<div align="right">'
													+ WtfGlobal
															.getLocaleText("hrms.payroll.salarymax")
													+ "</div>",
											dataIndex : "rangeto",
											sortable : true,
											renderer : function(D) {
												if (D != null) {
													return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
															+ WtfGlobal
																	.currencyRenderer(parseFloat(
																			D)
																			.toFixed(
																					2)) + "</div>")
												}
											}
										} ]);
						this.incomeRec = new Wtf.data.Record.create([ {
							name : "rate"
						}, {
							name : "category"
						}, {
							name : "rangefrom"
						}, {
							name : "rangeto"
						}, {
							name : "id"
						} ]);
						this.incometaxstore = new Wtf.data.Store({
							scope : this,
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalcount"
							}, this.incomeRec),
							url : "Payroll/Tax/GetTaxperCatgry.py"
						});
						this.catgrec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.catgStore = new Wtf.data.Store({
							url : "Common/getMasterDataField.common",
							baseParams : {
								configid : 14,
								flag : 203,
								common : "1"
							},
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.catgrec),
							autoLoad : false
						});
						this.catgStore.load();
						this.catgStore.on("load", function() {
							if (this.catgStore.getCount() > 0) {
								var D = new this.catgrec({
									id : "0",
									name : "All"
								});
								var E = this.catgStore.getCount();
								this.catgStore.insert(E, D);
								this.ctgrycombo1.setValue(this.catgStore.getAt(
										E).get("id"));
								this.incometaxstore.baseParams = {
									type : "GetTaxperCatgry",
									categoryid : this.ctgrycombo1.getValue()
								};
								this.incometaxstore.load({
									params : {
										start : 0,
										limit : 15
									}
								})
							}
						}, this);
						this.ctgrycombo1 = new Wtf.form.FnComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.category"),
									store : this.catgStore,
									id : "catgorycombo2",
									displayField : "name",
									typeAhead : true,
									valueField : "id",
									name : "categoryname",
									allowBlank : false,
									width : 200,
									labelWidth : 200,
									mode : "local",
									triggerAction : "all",
									emptyText : WtfGlobal
											.getLocaleText("hrms.common.select.category"),
									selectOnFocus : true,
									addNewFn : this.addCategory
											.createDelegate(this),
									listeners : {
										scope : this,
										Select : function(F, D, E) {
											this.categoryid = D.get("id");
											this.incometaxstore.removeAll();
											this.incometaxstore.baseParams = {
												type : "GetTaxperCatgry",
												categoryid : this.ctgrycombo1
														.getValue()
											};
											this.incometaxstore
													.load({
														params : {
															start : 0,
															limit : this.incometaxgrid.pag.pageSize
														}
													})
										}
									}
								});
						this.incometaxgrid = new Wtf.KwlGridPanel(
								{
									enableColumnHide : false,
									trackMouseOver : true,
									stripeRows : true,
									id : "incometaxgridpanel",
									region : "south",
									height : 250,
									loadMask : true,
									displayInfo : true,
									searchLabel : " ",
									searchLabelSeparator : " ",
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.payroll.incometaxgrid.searchby"),
									searchField : "rate",
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.incometaxgrid.emptytext"))
									},
									store : this.incometaxstore,
									cm : this.cm1,
									border : true,
									sm : new Wtf.grid.RowSelectionModel({
										singleSelect : true
									}),
									tbar : [
											"-",
											WtfGlobal
													.getLocaleText("hrms.common.select.category")
													+ ":",
											this.ctgrycombo1,
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.payroll.addnewincometax"),
												scope : this,
												minWidth : 70,
												iconCls : getButtonIconCls(Wtf.btype.addbutton),
												handler : function() {
													this.usertask = new Wtf.AddIncometaxWin(
															{
																layout : "fit",
																modal : true,
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.add.component"),
																configid : "configid",
																parentid : "parentid",
																closable : true,
																id : "incometaxwin",
																width : 500,
																typeimage : "images/tax.gif",
																height : 450,
																incometaxstore : this.incometaxstore,
																ctgrycombo1 : this.ctgrycombo1,
																iconCls : "WinIcon",
																gridp : this.incometaxgrid
															});
													this.usertask.show()
												}
											},
											"-",
											this.delincometax = new Wtf.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.delete"),
														scope : this,
														minWidth : 60,
														iconCls : getButtonIconCls(Wtf.btype.deletebutton),
														handler : function() {
															if (!this.incometaxgrid
																	.getSelectionModel()
																	.hasSelection()) {
																calMsgBoxShow(
																		42, 0)
															} else {
																Wtf.MessageBox
																		.show({
																			title : WtfGlobal
																					.getLocaleText("hrms.common.confirm"),
																			msg : deleteMsgBox("record"),
																			buttons : Wtf.MessageBox.YESNO,
																			icon : Wtf.MessageBox.QUESTION,
																			scope : this,
																			fn : function(
																					D) {
																				if (D == "yes") {
																					calMsgBoxShow(
																							201,
																							4,
																							true);
																					Wtf.Ajax
																							.requestEx(
																									{
																										url : "Payroll/Tax/deleteincomeTax.py",
																										method : "post",
																										params : {
																											dele : "true",
																											delType : "IncomeTax",
																											typeid : this.incometaxgrid
																													.getSelectionModel()
																													.getSelected()
																													.get(
																															"id")
																										}
																									},
																									this,
																									function(
																											E) {
																										var F = E.value;
																										if (F == "success") {
																											calMsgBoxShow(
																													9,
																													0);
																											this.incometaxstore.baseParams = {
																												type : "GetTaxperCatgry",
																												categoryid : this.ctgrycombo1
																														.getValue()
																											};
																											this.incometaxstore
																													.load({
																														params : {
																															start : 0,
																															limit : this.incometaxgrid.pag.pageSize
																														}
																													})
																										} else {
																											if (F == "assign") {
																												calMsgBoxShow(
																														10,
																														0)
																											}
																										}
																									},
																									function(
																											E) {
																										this.incometaxstore
																												.reload()
																									})
																				}
																			}
																		})
															}
														}
													}) ]
								});
						this.paysettingmainPanel = new Wtf.Panel({
							style : "background:#FFFFFF",
							border : false,
							autoScroll : true,
							id : "paysettingmainPanel",
							scope : this,
							layout : "border",
							items : [ this.generaltaxgrid ]
						});
						this.incometaxgrid.hide();
						this.add(this.paysettingmainPanel);
						this.doLayout();
						this.on("activate", function(E, D) {
							this.doLayout()
						})
					},
					addcomponent : function() {
						var A = new Wtf.analysisWindow(
								{
									layout : "fit",
									modal : true,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.add.component"),
									configid : "configid",
									parentid : "parentid",
									closable : true,
									id : "addWTDwindow",
									closeAction : "close",
									width : 500,
									typeimage : "images/payroll.gif",
									height : 450,
									payrollcombo : this.payrollcombo,
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									scope : this,
									userdsT : this.userdsT,
									incometaxgrid : this.incometaxgrid,
									type : this.type,
									AddEdit : "Add",
									generaltaxgrid : this.generaltaxgrid,
									tablename : this.tablename
								});
						A.on("show", function() {
							A.text1.focus(true, 100)
						}, this);
						A.show()
					},
					addCategory : function() {
						WtfGlobal.showmasterWindow(14, this.catgStore, "Add")
					},
					CPFRules : function() {
						var B = Wtf.getCmp("as");
						var A = Wtf.getCmp("CPFSetting");
						if (A == null) {
							A = new Wtf.CPFSetting(
									{
										layout : "fit",
										title : "<div wtf:qtip='"
												+ WtfGlobal
														.getLocaleText("hrms.payroll.cpfrules.tooltip")
												+ "'>"
												+ WtfGlobal
														.getLocaleText("hrms.payroll.cpfrules")
												+ "</div>",
										closable : true,
										border : false,
										iconCls : getTabIconCls(Wtf.etype.master),
										id : "CPFSetting"
									});
							B.add(A)
						}
						B.setActiveTab(A);
						B.doLayout()
					},
					rendererfun : function(G, B, A, F, D, C, E) {
						if (A.get("rate") == 0) {
							return "-"
						}
						if (G == "0") {
							return WtfGlobal
									.getLocaleText("hrms.payroll.currentdeductions")
						} else {
							if (G == "1") {
								return WtfGlobal
										.getLocaleText("hrms.payroll.currentearnings")
							} else {
								if (G == "2") {
									return WtfGlobal
											.getLocaleText("hrms.payroll.netsalary")
								} else {
									if (G == "3") {
										return WtfGlobal
												.getLocaleText("hrms.payroll.specifiedformula")
									}
								}
							}
						}
					}
				});
function addcompo(A) {
	Wtf.getCmp(A).addcomponent()
}
Wtf.CPFSetting = function(A) {
	A.autoScroll = "true";
	A.layout = "fit";
	Wtf.CPFSetting.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.CPFSetting,
				Wtf.Panel,
				{
					initComponent : function(A) {
						this.fixedAmt = "";
						Wtf.CPFSetting.superclass.initComponent.call(this, A)
					},
					onRender : function(A) {
						Wtf.CPFSetting.superclass.onRender.call(this, A);
						this.gridfields = [ {
							name : "Country"
						}, {
							name : "Fixamount"
						}, {
							name : "percentofsalary"
						}, {
							name : "AgeRange"
						}, {
							name : "SalRange"
						} ];
						this.cmGroupGrid = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											id : "country",
											header : WtfGlobal
													.getLocaleText("hrms.common.nationality"),
											sortable : true,
											dataIndex : "Country"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Amount"),
											sortable : true,
											dataIndex : "Fixamount"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.percentage.of.salary"),
											sortable : true,
											align : "right"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.age.range"),
											sortable : true,
											align : "right",
											dataIndex : "AgeRange"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.salary.range"),
											sortable : true,
											align : "right",
											dataIndex : "SalRange",
											renderer : function(E) {
												var D = WtfGlobal
														.getCurrencySymbol();
												var B = new Array(2);
												B = E.split("-");
												var C = D
														+ " "
														+ WtfGlobal
																.currencyRenderer2(B[0])
														+ " - "
														+ D
														+ " "
														+ WtfGlobal
																.currencyRenderer2(B[1]);
												if (E != null) {
													return ('<div class="currency" style="font-family:Lucida Sans Unicode;">'
															+ C + "</div>")
												}
											}
										} ]);
						this.reader = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.gridfields);
						this.child1 = [];
						this.bchild = [];
						this.mchild = [];
						this.achild = [];
						this.conContainer = document.createElement("div");
						this.conContainer.className = "conContainer";
						this.conContainer.id = "parentCon";
						this.child1[this.i] = document.createElement("div");
						this.child1[this.i].className = "child1";
						this.conContainer.appendChild(this.child1[this.i]);
						this.sm = new Wtf.grid.CheckboxSelectionModel();
						this.sm.on("rowselect", this.onRowSelect, this);
						this.sm.on("rowdeselect", this.onRowDeselect, this);
						this.cm = new Wtf.grid.ColumnModel(
								[
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.component"),
											dataIndex : "cmptname",
											width : 300
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.value"),
											dataIndex : "cmptvalue",
											align : "right",
											renderer : WtfGlobal.numericRenderer,
											editor : new Wtf.form.NumberField(
													{
														allowBlank : false,
														allowDecimals : false,
														allowNegative : false,
														maxValue : 100,
														minValue : 1,
														validator : WtfGlobal.noBlankCheck
													})
										} ]);
						this.selectedRec = new Wtf.data.Record.create([ {
							name : "cmptname"
						}, {
							name : "cmptvalue"
						}, {
							name : "cmptprintvalue"
						} ]);
						this.data1 = {
							"data" : [
									{
										cmptname : "Fixed Amount",
										cmptvalue : "0",
										cmptprintvalue : "$"
									},
									{
										cmptname : "Percent of Salary",
										cmptvalue : "0",
										cmptprintvalue : "% of Salary"
									},
									{
										cmptname : "Percent of ( Diff. between Salary and Fixed Amount )",
										cmptvalue : "0",
										cmptprintvalue : "% of Diff. between Salary and $"
									} ]
						};
						this.componentds = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, this.selectedRec)
						});
						this.groupGridStore = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, this.selectedRec)
						});
						this.componentds.loadData(this.data1);
						this.form = new Wtf.form.FormPanel(
								{
									url : Wtf.req.tmjsp
											+ "travelManager.jsp?flag=5",
									waitMsgTarget : true,
									method : "POST",
									autoScroll : true,
									scope : this,
									frame : false,
									fileUpload : true,
									border : false,
									style : "padding-top:10px;padding-bottom:0px;",
									bodyStyle : "margin-left:20px;margin-right:20px;",
									items : [
											{
												border : false,
												id : "formattach",
												layout : "column",
												autoWidth : true,
												bodyStyle : "padding:0px;font-size:11px;margin-top:1px;",
												items : [
														{
															border : false,
															columnWidth : 0.2,
															layout : "form",
															items : [ {
																xtype : "fieldset",
																title : WtfGlobal
																		.getLocaleText("hrms.common.nationality"),
																scope : this,
																height : 70,
																anchor : "93%",
																items : [ {
																	border : false,
																	layout : "form",
																	items : [ this.ExpenseCmb = new Wtf.form.ComboBox(
																			{
																				hideLabel : true,
																				store : Wtf.countryStore,
																				mode : "local",
																				border : false,
																				editable : true,
																				readOnly : true,
																				typeAhead : true,
																				forceSelection : true,
																				hiddenName : "expensetypeid",
																				valueField : "id",
																				allowBlank : false,
																				width : 150,
																				anchor : "93%",
																				displayField : "name",
																				triggerAction : "all",
																				emptyText : WtfGlobal
																						.getLocaleText("hrms.common.select.country"),
																				scope : this
																			}) ]
																} ]
															} ]
														},
														{
															border : false,
															columnWidth : 0.38,
															bodyStyle : "margin-left:10px;padding-right:10px;",
															layout : "form",
															items : [ {
																xtype : "fieldset",
																title : WtfGlobal
																		.getLocaleText("hrms.common.age.range"),
																scope : this,
																height : 70,
																bodyStyle : "padding-left:30px;",
																items : [ {
																	border : false,
																	layout : "column",
																	items : [
																			{
																				xtype : "panel",
																				columnWidth : 0.45,
																				border : false,
																				layout : "form",
																				items : [ this.startrange = new Wtf.form.NumberField(
																						{
																							allowBlank : false,
																							hideLabel : true,
																							allowNegative : false,
																							value : 0,
																							maxLength : 10,
																							scope : this
																						}) ]
																			},
																			{
																				xtype : "panel",
																				columnWidth : 0.45,
																				border : false,
																				layout : "form",
																				items : [ this.endrange = new Wtf.form.NumberField(
																						{
																							allowBlank : false,
																							maxLength : 10,
																							hideLabel : true,
																							value : 0,
																							allowNegative : false,
																							scope : this,
																							initialPassField : this.id
																									+ "salarystartrange"
																						}) ]
																			} ]
																} ]
															} ]
														},
														{
															border : false,
															columnWidth : 0.38,
															bodyStyle : "padding-left:10px;",
															layout : "form",
															items : [ {
																xtype : "fieldset",
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.salary.range.month")
																		+ ' (<span align="right" style="font-family:Lucida Sans Unicode;">'
																		+ WtfGlobal
																				.getCurrencySymbol()
																		+ "</span>)",
																scope : this,
																height : 70,
																bodyStyle : "padding-left:30px;",
																items : [ {
																	border : false,
																	layout : "column",
																	items : [
																			{
																				xtype : "panel",
																				columnWidth : 0.45,
																				border : false,
																				layout : "form",
																				items : [ this.startrange = new Wtf.form.NumberField(
																						{
																							allowBlank : false,
																							hideLabel : true,
																							allowNegative : false,
																							value : 0,
																							maxLength : 10,
																							scope : this
																						}) ]
																			},
																			{
																				xtype : "panel",
																				columnWidth : 0.45,
																				border : false,
																				layout : "form",
																				items : [ this.endrange = new Wtf.form.NumberField(
																						{
																							allowBlank : false,
																							maxLength : 10,
																							hideLabel : true,
																							value : 0,
																							allowNegative : false,
																							scope : this,
																							initialPassField : this.id
																									+ "salarystartrange"
																						}) ]
																			} ]
																} ]
															} ]
														} ]
											},
											{
												border : false,
												layout : "column",
												items : [
														{
															border : false,
															bodyStyle : "padding-right:10px;",
															layout : "form",
															columnWidth : 0.48,
															items : [ {
																xtype : "fieldset",
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.components.header"),
																scope : this,
																height : 150,
																items : [
																		{
																			border : false,
																			layout : "fit",
																			items : [ this.grid = new Wtf.grid.EditorGridPanel(
																					{
																						id : "rulegrid",
																						width : 400,
																						height : 80,
																						store : this.componentds,
																						clicksToEdit : 1,
																						cm : this.cm,
																						sm : this.sm,
																						viewConfig : {
																							forceFit : true
																						}
																					}) ]
																		},
																		{
																			xtype : "panel",
																			border : false,
																			html : '<div style="color:SeaGreen;font-size:11px;padding-left:25px;">* '
																					+ WtfGlobal
																							.getLocaleText("hrms.payroll.select.components.generate.cpf")
																					+ "</div>"
																		} ]
															} ]
														},
														{
															border : false,
															bodyStyle : "padding-left:10px;",
															layout : "form",
															columnWidth : 0.48,
															items : [ {
																xtype : "fieldset",
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.generated.rule"),
																scope : this,
																height : 150,
																items : [ new Wtf.Panel(
																		{
																			id : "addCon",
																			border : false,
																			contentEl : this.conContainer
																		}) ]
															} ]
														} ]
											} ]
								});
						this.grid1 = new Wtf.grid.GridPanel({
							border : false,
							layout : "fit",
							clicksToEdit : 1,
							store : this.groupGridStore,
							height : 350,
							frame : false,
							autoScroll : true,
							cm : this.cmGroupGrid,
							viewConfig : {
								forceFit : true
							}
						});
						this.cpfFormGridPanel = new Wtf.Panel(
								{
									layout : "border",
									border : true,
									frame : false,
									bodyStyle : "background:rgb(241,241,241);",
									items : [
											{
												region : "north",
												height : 300,
												border : true,
												layout : "fit",
												frame : false,
												split : true,
												autoScroll : true,
												style : "padding:3px 25px 3px 25px;background:rgb(241,241,241);",
												items : [ this.form ],
												bbar : [ this.submitBtn = new Wtf.Button(
														{
															anchor : "90%",
															iconCls : "pwnd showSaveAsDraftIcon",
															text : WtfGlobal
																	.getLocaleText("hrms.common.submit"),
															handler : this.addToGrid,
															scope : this
														}) ]
											},
											{
												region : "center",
												border : true,
												frame : false,
												layout : "fit",
												autoScroll : true,
												title : "Predefined Rules",
												style : "padding:0px 25px 0px 25px;background:rgb(241,241,241);",
												items : [ this.grid1 ]
											} ]
								});
						this.cpfFormGridPanelRender = new Wtf.Panel({
							layout : "fit",
							border : false,
							frame : false,
							bodyStyle : "background:rgb(241,241,241);",
							items : this.cpfFormGridPanel
						});
						if (!Wtf.StoreMgr.containsKey("country")) {
							Wtf.countryStore.load();
							Wtf.StoreMgr.add("country", Wtf.countryStore)
						}
						this.grid1.doLayout();
						this.cpfFormGridPanel.doLayout();
						this.add(this.cpfFormGridPanelRender)
					},
					openNewRoleWindow : function(A, C, B) {
						this.roleNameField = new Wtf.form.NumberField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.payroll.enter.fixed.amount.calculate.difference")
											+ "($)*",
									allowBlank : false,
									allowDecimals : false,
									allowNegative : false,
									maxValue : 100,
									minValue : 1,
									validator : WtfGlobal.noBlankCheck
								});
						this.groupForm = new Wtf.FormPanel({
							labelWidth : 300,
							labelAlign : "left",
							border : false,
							bodyStyle : "padding:15px 5px 0",
							layout : "form",
							anchor : "95%",
							defaultType : "textfield",
							buttonAlign : "right",
							items : [ this.roleNameField ]
						});
						this.win = new Wtf.Window(
								{
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									title : WtfGlobal
											.getLocaleText("hrms.common.Role"),
									height : 120,
									width : 500,
									id : "roleWin",
									modal : true,
									resizable : false,
									scope : this,
									items : [ this.groupForm ],
									buttonAlign : "right",
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Save"),
												scope : this,
												handler : function() {
													if (!this.roleNameField
															.isValid()) {
														return
													}
													this.fixedAmt = this.roleNameField
															.getValue();
													Wtf.getCmp("roleWin")
															.close();
													this
															.onRowSelectFun(A,
																	C, B)
												}
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												handler : function() {
													Wtf.getCmp("roleWin")
															.close()
												}
											} ]
								});
						this.win.show()
					},
					onRowSelect : function(A, C, B) {
						if (C == 2) {
							this.openNewRoleWindow(A, C, B)
						} else {
							this.onRowSelectFun(A, C, B)
						}
					},
					onRowSelectFun : function(A, C, B) {
						this.child1[C] = document.createElement("div");
						this.child1[C].id = "con" + C;
						this.mchild[C] = document.createElement("div");
						this.mchild[C].className = "mchild";
						this.mchild[C].style.cssFloat = "left";
						this.mchild[C].val = B.get("id");
						this.mchild[C].id = "mchild" + C;
						this.bchild[C] = document.createElement("div");
						this.bchild[C].id = "addsub" + C;
						this.bchild[C].className = "x-form-item";
						this.bchild[C].style.cssFloat = "left";
						if (this.oper != null && this.oper != undefined
								&& this.oper.length > 0) {
							if (this.oper[C] == "+") {
								this.bchild[C].val = "add"
							} else {
								if (this.oper[C] == "-") {
									this.bchild[C].val = "sub"
								} else {
									this.bchild[C].val = "add";
									this.oper[C] = "+"
								}
							}
							this.bchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ this.oper[C] + ")</a>&nbsp;"
						} else {
							this.bchild[C].val = "add";
							this.bchild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;"
						}
						if (C == 2) {
							this.mchild[C].innerHTML = B.get("cmptvalue") + " "
									+ B.get("cmptprintvalue") + " "
									+ this.fixedAmt
						} else {
							this.mchild[C].innerHTML = B.get("cmptvalue") + " "
									+ B.get("cmptprintvalue")
						}
						this.mchild[C].className = "x-form-item";
						this.bchild[C].onclick = this.showRuleWin
								.createDelegate(this);
						this.child1[C].appendChild(this.bchild[C]);
						this.child1[C].appendChild(this.mchild[C]);
						this.conContainer.appendChild(this.child1[C])
					},
					onRowDeselect : function(A, C, B) {
						document.getElementById("parentCon").removeChild(
								document.getElementById("con" + C));
						this.mchild.splice(C, 1);
						this.bchild.splice(C, 1)
					},
					showRuleWin : function(C) {
						this.updateelement = C.currentTarget;
						var B = new Wtf.Panel(
								{
									frame : true,
									items : [
											{
												layout : "form",
												items : [
														{
															layout : "column",
															items : [ {
																html : WtfGlobal
																		.getLocaleText("hrms.payroll.ApplyRuleIf")
																		+ ":<br><br>"
															} ]
														},
														{
															layout : "column",
															fieldWidth : 0,
															items : [ new Wtf.form.Radio(
																	{
																		name : "cond",
																		id : "add",
																		checked : (this.updateelement.val == "add") ? true
																				: false,
																		boxLabel : WtfGlobal
																				.getLocaleText("hrms.payroll.Addition")
																	}) ]
														},
														{
															layout : "column",
															fieldWidth : 0,
															items : [ new Wtf.form.Radio(
																	{
																		name : "cond",
																		id : "sub",
																		checked : (this.updateelement.val == "sub") ? true
																				: false,
																		boxLabel : WtfGlobal
																				.getLocaleText("hrms.payroll.Subtraction")
																	}) ]
														} ]
											},
											{
												layout : "column",
												items : [ {
													layout : "form",
													buttons : [
															{
																text : "OK",
																scope : this,
																handler : function() {
																	if (Wtf
																			.getCmp("add").checked == true) {
																		this.rad = 0
																	} else {
																		if (Wtf
																				.getCmp("sub").checked == true) {
																			this.rad = 1
																		}
																	}
																	if (this.rad == 1) {
																		this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(-)</a>&nbsp;";
																		this.updateelement.val = "sub"
																	} else {
																		this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;";
																		this.updateelement.val = "add"
																	}
																	A.close()
																}
															},
															{
																text : WtfGlobal
																		.getLocaleText("hrms.common.cancel"),
																handler : function() {
																	A.close()
																}
															} ]
												} ]
											} ]
								});
						Wtf.getCmp("add").on("check", this.invRadiobttn, this);
						Wtf.getCmp("sub").on("check", this.invRadiobttn, this);
						var A = new Wtf.Window({
							title : "And/Or",
							closable : true,
							width : 200,
							iconCls : "winicon",
							resizable : false,
							autoDestroy : true,
							modal : true,
							border : false,
							id : "conditionWindow",
							items : [ B ]
						});
						A.show()
					},
					getCalculationDetailTemplate : function(A) {
						var D = [
								'<div style="color: DarkSlateGray;">',
								'<table style="margin:7px">',
								"<tr><td>{percentamt}% of the employee's total wages for the month and</td></tr>",
								"<tr><td>{curr}{fixamt} and</td></tr>",
								"<tr><td>{mixpercent}% of the difference between the employee's total wages for the month and {curr}{minusamt}</td></tr>",
								"</table>", "</div>" ];
						var C = new Wtf.Template(D);
						var B = {
							percentamt : this.percent.getValue(),
							curr : WtfGlobal.getCurrencySymbol(),
							fixamt : this.fixamt.getValue(),
							mixpercent : this.mixpercent.getValue(),
							minusamt : this.minusamt.getValue()
						};
						C.overwrite(this.calculationTemplatePanel.body, B)
					}
				});
Wtf.configRecruitment = function(A) {
	Wtf.form.Field.prototype.msgTarget = "qtip", Wtf.apply(this, A);
	this.typeStore = new Wtf.data.SimpleStore({
		fields : [ "id", "name" ],
		data : [ [ 0, WtfGlobal.getLocaleText("hrms.masterconf.TextField") ],
				[ 2, WtfGlobal.getLocaleText("hrms.masterconf.DateField") ],
				[ 3, WtfGlobal.getLocaleText("hrms.masterconf.Dropdown") ],
				[ 4, WtfGlobal.getLocaleText("hrms.masterconf.TextArea") ],
				[ 5, WtfGlobal.getLocaleText("hrms.masterconf.FileUpload") ],
				[ 6, WtfGlobal.getLocaleText("hrms.masterconf.NumberField") ],
				[ 7, WtfGlobal.getLocaleText("hrms.masterconf.EmailField") ] ]
	});
	this.typeStore1 = new Wtf.data.SimpleStore(
			{
				fields : [ "id", "name" ],
				data : [
						[
								"Personal",
								WtfGlobal
										.getLocaleText("hrms.recruitment.PersonalInformation") ],
						[
								"Contact",
								WtfGlobal
										.getLocaleText("hrms.recruitment.ContactInformation") ],
						[
								"Academic",
								WtfGlobal
										.getLocaleText("hrms.recruitment.AcademicInformation") ],
						[
								"Work",
								WtfGlobal
										.getLocaleText("hrms.recruitment.WorkExperience") ],
						[
								"other",
								WtfGlobal
										.getLocaleText("hrms.recruitment.OtherInformation") ] ]
			});
	this.groupingView = new Wtf.grid.GroupingView({
		forceFit : true,
		showGroupName : false,
		hideGroupedColumn : true,
		enableGroupingMenu : false
	});
	this.reader = new Wtf.data.KwlJsonReader1({
		root : "data",
		totalProperty : "count"
	}, [ {
		name : "configid"
	}, {
		name : "configtype"
	}, {
		name : "formtype"
	}, {
		name : "fieldname",
		type : "string"
	}, {
		name : "allownull"
	}, {
		name : "position"
	}, {
		name : "issystemproperty"
	}, {
		name : "visible"
	}, {
		name : "allownull"
	} ]);
	this.ds = new Wtf.data.GroupingStore({
		url : "Rec/Job/getConfigRecruitment.rec",
		reader : this.reader
	});
	this.ds.baseParams = {
		flag : 212
	};
	this.sm = new Wtf.grid.CheckboxSelectionModel();
	this.cm = new Wtf.grid.ColumnModel(
			[
					new Wtf.grid.RowNumberer({}),
					this.sm,
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.ConfigType"),
						dataIndex : "configtype",
						width : 150,
						renderer : function(B) {
							if (B == 0) {
								return WtfGlobal
										.getLocaleText("hrms.masterconf.TextField")
							} else {
								if (B == 1) {
									return WtfGlobal
											.getLocaleText("hrms.masterconf.CheckBox")
								} else {
									if (B == 2) {
										return WtfGlobal
												.getLocaleText("hrms.masterconf.DateField")
									} else {
										if (B == 3) {
											return WtfGlobal
													.getLocaleText("hrms.masterconf.Dropdown")
										} else {
											if (B == 4) {
												return WtfGlobal
														.getLocaleText("hrms.masterconf.TextArea")
											} else {
												if (B == 5) {
													return WtfGlobal
															.getLocaleText("hrms.masterconf.FileUpload")
												} else {
													if (B == 6) {
														return WtfGlobal
																.getLocaleText("hrms.masterconf.NumberField")
													} else {
														if (B == 7) {
															return WtfGlobal
																	.getLocaleText("hrms.masterconf.EmailField")
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.Fieldname"),
						dataIndex : "fieldname",
						sortable : true,
						width : 150
					},
					{
						header : WtfGlobal
								.getLocaleText("hrms.masterconf.FormType"),
						dataIndex : "formtype",
						width : 150,
						renderer : function(B) {
							return WtfGlobal.getLocaleText("hrms.recruitment."
									+ B)
						}
					},
					{
						header : WtfGlobal
								.getLocaleText("hrms.common.Position"),
						dataIndex : "position",
						width : 150
					} ]);
	this.cm.defaultSortable = true;
	this.cloneRecord = Wtf.data.Record.create([ {
		name : "name",
		type : "string"
	}, {
		name : "displayname",
		type : "string"
	}, {
		name : "configid",
		type : "string"
	} ]);
	this.cloneReader = new Wtf.data.KwlJsonReader1({
		root : "data"
	}, this.cloneRecord);
	this.cloneStore = new Wtf.data.Store({
		proxy : new Wtf.data.HttpProxy({
			url : Wtf.req.base + "hrms.jsp"
		}),
		reader : this.cloneReader
	});
	this.addC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.AddConfig"),
		scope : this,
		iconCls : getButtonIconCls(Wtf.btype.addbutton),
		handler : function() {
			this.addConfig(true)
		},
		scope : this
	});
	this.editC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.EditConfig"),
		scope : this,
		iconCls : getButtonIconCls(Wtf.btype.editbutton),
		disabled : true,
		handler : function() {
			this.addConfig(false)
		}
	});
	this.up = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.Up"),
		scope : this,
		disabled : true,
		iconCls : getButtonIconCls(Wtf.btype.upbutton),
		handler : function() {
			this.updown(true)
		}
	});
	this.down = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.Down"),
		scope : this,
		disabled : true,
		iconCls : getButtonIconCls(Wtf.btype.downbutton),
		handler : function() {
			this.updown(false)
		}
	});
	this.delC = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.DeleteConfig"),
		scope : this,
		disabled : true,
		iconCls : getButtonIconCls(Wtf.btype.deletebutton),
		handler : function() {
			this.delConfig(true)
		},
		scope : this
	});
	this.setM = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.SetMaster"),
		scope : this,
		iconCls : getButtonIconCls(Wtf.btype.setmasterbutton),
		handler : this.masterwin
	});
	this.cloneBttn = new Wtf.Toolbar.Button({
		text : WtfGlobal.getLocaleText("hrms.masterconf.CloneMaster"),
		scope : this,
		handler : function() {
			this.addconfig1()
		}
	});
	Wtf.configRecruitment.superclass.constructor
			.call(
					this,
					{
						layout : "fit",
						items : [ {
							layout : "fit",
							border : false,
							items : [ this.grid = new Wtf.grid.GridPanel(
									{
										border : false,
										region : "center",
										store : this.ds,
										sm : this.sm,
										cm : this.cm,
										viewConfig : {
											autoFill : true,
											forceFit : true
										},
										loadMask : {
											msg : WtfGlobal
													.getLocaleText("hrms.Dashboard.Loading")
										},
										tbar : [
												WtfGlobal
														.getLocaleText("hrms.common.QuickSearch")
														+ ": ",
												this.quickPanelSearch1 = new Wtf.KWLTagSearch(
														{
															width : 200,
															emptyText : WtfGlobal
																	.getLocaleText("hrms.common.SearchbyFieldname"),
															field : "fieldname"
														}) ],
										bbar : [ "-", this.addC, this.editC,
												this.delC, this.up, this.down,
												this.setM ]
									}) ]
						} ]
					});
	this.ds.load();
	this.sm.on("selectionchange", this.disableBttns, this);
	this.ds.on("load", function(B) {
		this.quickPanelSearch1.StorageChanged(B)
	}, this)
};
Wtf
		.extend(
				Wtf.configRecruitment,
				Wtf.Panel,
				{
					addconfig1 : function() {
						this.win1 = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.masterconf.Clone"),
									layout : "fit",
									iconCls : "winicon",
									modal : true,
									height : 355,
									width : 450,
									scope : this,
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.add"),
												handler : function() {
													Wtf.Ajax
															.requestEx(
																	{
																		method : "POST",
																		url : "Rec/Job/addConfigRecruitmentType.rec",
																		params : {
																			flag : 214,
																			configid : "clone",
																			formtype : this.qType1
																					.getValue(),
																			fieldname : this.quesField
																					.getValue()
																		}
																	},
																	this,
																	function() {
																		msgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.success"),
																						WtfGlobal
																								.getLocaleText("hrms.masterconf.Configoptionaddedsuccessfully") ],
																				Wtf.MessageBox.INFO);
																		this.win1
																				.close();
																		this.ds
																				.load();
																		this.cloneStore
																				.load({
																					params : {
																						flag : 213
																					}
																				})
																	},
																	function() {
																		msgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.error"),
																						WtfGlobal
																								.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
																				Wtf.MessageBox.ERROR)
																	})
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.win1.close()
												}
											} ],
									items : [ this.pPanel = new Wtf.Panel(
											{
												layout : "fit",
												border : false,
												items : this.inP = new Wtf.Panel(
														{
															layout : "border",
															border : false,
															items : [
																	{
																		region : "north",
																		border : false,
																		height : 90,
																		bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
																		html : getHeader(
																				"images/createuser.gif",
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Config"),
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Selectaconfigtype"))
																	},
																	{
																		region : "center",
																		layout : "fit",
																		bodyStyle : "background:#f1f1f1;",
																		border : false,
																		items : [ this.addForm = new Wtf.form.FormPanel(
																				{
																					url : "jspfiles/admin/feedback.jsp",
																					region : "center",
																					bodyStyle : "padding: 10px;",
																					border : false,
																					labelWidth : 160,
																					height : 100,
																					buttonAlign : "right",
																					items : [
																							this.qType1 = new Wtf.form.ComboBox(
																									{
																										valueField : "id",
																										displayField : "name",
																										store : this.typeStore1,
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Applyto"),
																										editable : false,
																										allowBlank : false,
																										anchor : "95%",
																										mode : "local",
																										triggerAction : "all",
																										selectOnFocus : true,
																										emptyText : WtfGlobal
																												.getLocaleText("hrms.masterconf.ApplyConfig")
																									}),
																							this.quesField = new Wtf.form.TextField(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Fieldname"),
																										scope : this,
																										allowBlank : false,
																										name : "question",
																										maxLength : 256
																									}) ]
																				}) ]
																	} ]
														})
											}) ]
								});
						this.win1.show()
					},
					masterwin : function() {
						this.attributeRecord = Wtf.data.Record.create([ {
							name : "displayname",
							type : "string"
						}, {
							name : "configid",
							type : "string"
						} ]);
						this.attributeReader = new Wtf.data.KwlJsonReader1({
							root : "data"
						}, this.attributeRecord);
						this.attributeStore = new Wtf.data.Store({
							proxy : new Wtf.data.HttpProxy({
								url : "Rec/Job/getConfigRecruitment.rec"
							}),
							reader : this.attributeReader
						});
						this.attributeStore.load({
							params : {
								configtype : "3,1"
							}
						});
						this.attributeCombo = new Wtf.form.ComboBox(
								{
									triggerAction : "all",
									store : this.attributeStore,
									mode : "local",
									width : 240,
									forceSelection : true,
									typeAhead : true,
									displayField : "displayname",
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.masterconf.Attribute"),
									hiddenName : "configid",
									allowBlank : false,
									valueField : "configid",
									emptyText : WtfGlobal
											.getLocaleText("hrms.masterconf.SelectanAttribute")
								});
						this.mastersm = new Wtf.grid.CheckboxSelectionModel();
						this.mastercm = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										this.sm,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.MasterRecord"),
											dataIndex : "masterdata",
											editor : new Wtf.form.TextField(
													{
														allowBlank : false,
														maxLength : 100,
														items : [ {
															text : WtfGlobal
																	.getLocaleText("hrms.common.delete"),
															tooltip : {
																title : WtfGlobal
																		.getLocaleText("hrms.common.delete"),
																text : WtfGlobal
																		.getLocaleText("hrms.common.Clicktodeleterecord")
															}
														} ]
													})
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.status"),
											dataIndex : "status",
											renderer : function(F, C, A, E, D,
													B) {
												if (F == "1") {
													return WtfGlobal
															.getLocaleText("hrms.common.Active")
												} else {
													return WtfGlobal
															.getLocaleText("hrms.common.Inactive")
												}
											},
											hidden : true
										} ]);
						this.masterReader = new Wtf.data.Record.create([ {
							name : "masterid"
						}, {
							name : "masterdata"
						}, {
							name : "status"
						} ]);
						this.masterds = new Wtf.data.Store({
							url : "Rec/Job/getConfigMaster.rec",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data"
							}, this.masterReader)
						});
						this.addrec = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.add"),
									iconCls : getButtonIconCls(Wtf.btype.addbutton),
									disabled : true,
									tooltip : {
										title : WtfGlobal
												.getLocaleText("hrms.common.add"),
										text : WtfGlobal
												.getLocaleText("hrms.common.Clicktoaddnewrecord")
									},
									handler : function() {
										if (this.masterText.getValue() != "") {
											var B = false;
											for ( var A = 0; A < this.masterds
													.getCount(); A++) {
												if (this.masterds.getAt(A).get(
														"masterdata") == this.masterText
														.getValue()) {
													B = true;
													break
												}
											}
											if (!B) {
												Wtf.Ajax
														.request({
															url : "Rec/Job/addConfigMaster.rec",
															method : "POST",
															params : {
																flag : 215,
																configid : this.attributeCombo
																		.getValue(),
																masterdata : this.masterText
																		.getValue()
															},
															success : function(
																	C, D) {
																this.masterText
																		.setValue("");
																this.masterds
																		.reload();
																calMsgBoxShow(
																		219, 0)
															},
															scope : this
														})
											} else {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.warning"),
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.masterconf.Masterrecordabcalreadypresent",
																			params : [ this.masterText
																					.getValue() ]
																		}) ], 2)
											}
										} else {
											calMsgBoxShow(218, 2)
										}
									},
									scope : this
								});
						this.masterWin = new Wtf.Window(
								{
									id : "master" + this.id,
									title : WtfGlobal
											.getLocaleText("hrms.common.MasterRecord"),
									layout : "fit",
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									modal : true,
									height : 400,
									width : 650,
									scope : this,
									items : [ this.poppanel = new Wtf.Panel(
											{
												id : "masterpanel" + this.id,
												layout : "fit",
												cls : "backcolor",
												border : false,
												tbar : [
														this.attributeCombo,
														"-",
														WtfGlobal
																.getLocaleText("hrms.common.NewRecord")
																+ ": ",
														this.masterText = new Wtf.form.TextField(
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.common.NewMasterRecord"),
																	anchor : "95%",
																	maxLength : 60,
																	id : this.id
																			+ "masterText"
																}),
														"-",
														this.addrec,
														"-",
														this.delmaster = new Wtf.Toolbar.Button(
																{
																	text : WtfGlobal
																			.getLocaleText("hrms.common.delete"),
																	disabled : true,
																	iconCls : getButtonIconCls(Wtf.btype.deletebutton),
																	tooltip : {
																		title : WtfGlobal
																				.getLocaleText("hrms.common.delete"),
																		text : WtfGlobal
																				.getLocaleText("hrms.common.Clicktodeleterecord")
																	},
																	handler : function() {
																		this
																				.delConfig(false)
																	},
																	scope : this
																}) ],
												items : [ this.addmaster = new Wtf.Panel(
														{
															id : "addmaster"
																	+ this.id,
															layout : "fit",
															border : false,
															items : [ this.masterGrid = new Wtf.grid.EditorGridPanel(
																	{
																		id : "mastergrid"
																				+ this.id,
																		store : this.masterds,
																		sm : this.mastersm,
																		cm : this.mastercm,
																		border : false,
																		clicksToEdit : 1,
																		viewConfig : {
																			forceFit : true
																		}
																	}) ]
														}) ]
											}) ]
								});
						this.mastersm.on("selectionchange", this.handleBttns,
								this);
						this.masterWin.show();
						this.attributeCombo.on("select", this.masterload, this);
						this.masterGrid.on("afteredit", this.roleAfterEdit,
								this);
						this.masterds.on("loadException", this.masteronload,
								this)
					},
					handleBttns : function(A) {
						this.delmaster.disable();
						if (A.getCount() > 0) {
							this.delmaster.enable()
						} else {
							this.delmaster.disable()
						}
					},
					addConfig : function(A) {
						this.win1 = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.masterconf.Config"),
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									layout : "fit",
									modal : true,
									height : 355,
									width : 450,
									scope : this,
									buttons : [
											{
												text : A ? WtfGlobal
														.getLocaleText("hrms.common.add")
														: WtfGlobal
																.getLocaleText("hrms.common.Update"),
												handler : function() {
													if (this.quesField
															.getValue().trim() != "") {
														Wtf.Ajax
																.requestEx(
																		{
																			method : "POST",
																			url : "Rec/Job/addConfigRecruitmentType.rec",
																			params : {
																				flag : 214,
																				configid : A ? "config"
																						: this.sm
																								.getSelected()
																								.get(
																										"configid"),
																				formtype : this.qType1
																						.getValue(),
																				configtype : this.qType
																						.getValue(),
																				fieldname : this.quesField
																						.getValue(),
																				visible : this.visible.checked,
																				issystemproperty : this.issystemproperty.checked,
																				allownull : this.nullchk.checked
																			}
																		},
																		this,
																		function(
																				B,
																				C) {
																			if (B.success == "msg") {
																				var E = B.title;
																				var D = B.msg;
																				msgBoxShow(
																						[
																								E,
																								D ],
																						Wtf.MessageBox.INFO)
																			} else {
																				msgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.success"),
																								(A ? WtfGlobal
																										.getLocaleText("hrms.masterconf.Configoptionaddedsuccessfully")
																										: WtfGlobal
																												.getLocaleText("hrms.masterconf.Configoptioneditedsuccessfully")) ],
																						Wtf.MessageBox.INFO)
																			}
																			this.win1
																					.close();
																			this.ds
																					.load()
																		},
																		function() {
																			msgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.error"),
																							WtfGlobal
																									.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
																					Wtf.MessageBox.ERROR)
																		})
													} else {
														this.quesField
																.setValue("")
													}
												},
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.win1.close()
												}
											} ],
									items : [ this.pPanel = new Wtf.Panel(
											{
												layout : "fit",
												border : false,
												items : this.inP = new Wtf.Panel(
														{
															layout : "border",
															border : false,
															items : [
																	{
																		region : "north",
																		border : false,
																		height : 90,
																		bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
																		html : getHeader(
																				A ? "images/add-config.jpg"
																						: "images/edit-config.jpg",
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Config"),
																				WtfGlobal
																						.getLocaleText("hrms.masterconf.Selectaconfigtype"))
																	},
																	{
																		region : "center",
																		layout : "fit",
																		bodyStyle : "background:#f1f1f1;",
																		border : false,
																		items : [ this.addForm = new Wtf.form.FormPanel(
																				{
																					url : "jspfiles/admin/feedback.jsp",
																					region : "center",
																					bodyStyle : "padding: 10px;",
																					border : false,
																					labelWidth : 150,
																					height : 100,
																					buttonAlign : "right",
																					items : [
																							this.qType = new Wtf.form.ComboBox(
																									{
																										valueField : "id",
																										displayField : "name",
																										store : this.typeStore,
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.ConfigType"),
																										editable : false,
																										value : A ? null
																												: (this.sm
																														.getSelected()
																														.get("configtype")),
																										allowBlank : false,
																										anchor : "80%",
																										mode : "local",
																										triggerAction : "all",
																										selectOnFocus : true,
																										emptyText : WtfGlobal
																												.getLocaleText("hrms.masterconf.Selectconfigtype")
																									}),
																							this.qType1 = new Wtf.form.ComboBox(
																									{
																										valueField : "id",
																										displayField : "name",
																										store : this.typeStore1,
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Applyto"),
																										editable : false,
																										value : A ? null
																												: (this.sm
																														.getSelected()
																														.get("formtype")),
																										allowBlank : false,
																										anchor : "80%",
																										mode : "local",
																										triggerAction : "all",
																										selectOnFocus : true,
																										emptyText : WtfGlobal
																												.getLocaleText("hrms.masterconf.ApplyConfig")
																									}),
																							this.quesField = new Wtf.form.TextField(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Fieldname"),
																										scope : this,
																										allowBlank : false,
																										name : "question",
																										anchor : "80%",
																										value : A ? null
																												: (this.sm
																														.getSelected()
																														.get("fieldname")),
																										maxLength : 256
																									}),
																							this.issystemproperty = new Wtf.form.Checkbox(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.masterconf.Systemproperty"),
																										checked : A ? false
																												: (this.sm
																														.getSelected()
																														.get(
																																"issystemproperty") == 1 ? true
																														: false)
																									}),
																							this.visible = new Wtf.form.Checkbox(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.common.Visible"),
																										checked : A ? false
																												: (this.sm
																														.getSelected()
																														.get(
																																"visible") == 1 ? true
																														: false)
																									}),
																							this.nullchk = new Wtf.form.Checkbox(
																									{
																										fieldLabel : WtfGlobal
																												.getLocaleText("hrms.common.AllowNull"),
																										checked : A ? false
																												: (this.sm
																														.getSelected()
																														.get(
																																"allownull") == 1 ? true
																														: false)
																									}) ]
																				}) ]
																	} ]
														})
											}) ]
								});
						this.win1.show();
						this.qType.clearInvalid();
						this.qType1.clearInvalid();
						this.quesField.clearInvalid()
					},
					delConfig : function(A) {
						Wtf.Msg
								.show({
									title : (A == true) ? WtfGlobal
											.getLocaleText("hrms.common.confirm")
											: WtfGlobal
													.getLocaleText("hrms.masterconf.DeleteMaster"),
									msg : WtfGlobal
											.getLocaleText("hrms.common.SelecteddatawillbedeletedDoyouwanttocontinue"),
									buttons : Wtf.Msg.YESNO,
									fn : (A == true) ? this.confirmDelete
											: this.deletemaster,
									scope : this,
									icon : Wtf.MessageBox.QUESTION
								})
					},
					deletemaster : function(D) {
						if (D == "yes") {
							var C = [];
							var E = this.mastersm.getSelections();
							for ( var A = 0; A < this.mastersm.getSelections().length; A++) {
								C
										.push(this.masterGrid.getSelections()[A].data["masterid"])
							}
							var B = Wtf.encode(C);
							Wtf.Ajax
									.requestEx(
											{
												url : "Rec/Job/deleteConfigMaster.rec",
												params : {
													delid : B
												},
												method : "POST"
											},
											this,
											function(F, G) {
												if (F.success != null) {
													if (F.success == "msg") {
														var I = F.title;
														var H = F.msg;
														calMsgBoxShow(
																[ I, H ],
																Wtf.MessageBox.INFO)
													} else {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.common.Recorddeletedsuccessfully") ],
																Wtf.MessageBox.INFO)
													}
												} else {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.common.Recorddeletedsuccessfully") ],
															Wtf.MessageBox.INFO)
												}
												this.masterds.reload()
											},
											function() {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
														Wtf.MessageBox.ERROR)
											})
						}
					},
					confirmDelete : function(D) {
						if (D == "yes") {
							var C = [];
							for ( var A = 0; A < this.sm.getSelections().length; A++) {
								C
										.push(this.grid.getSelections()[A].data["configid"])
							}
							var B = Wtf.encode(C);
							Wtf.Ajax
									.requestEx(
											{
												url : "Rec/Job/deleteConfigRecruitment.rec",
												params : {
													delid : B,
													mode : "config",
													flag : 217
												},
												method : "POST"
											},
											this,
											function(E, F) {
												this.ds.reload();
												if (E.success != null) {
													if (E.success == "msg") {
														var H = E.title;
														var G = E.msg;
														msgBoxShow(
																[ H, G ],
																Wtf.MessageBox.INFO)
													} else {
														msgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.masterconf.Configoptiondeletedsuccessfully") ],
																Wtf.MessageBox.INFO)
													}
												} else {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.masterconf.Configoptiondeletedsuccessfully") ],
															Wtf.MessageBox.INFO)
												}
											},
											function() {
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
														Wtf.MessageBox.ERROR)
											})
						}
					},
					updown : function(A) {
						if (this.sm.getSelected().get("position") > 1
								|| (this.sm.getSelected().get("position") == 1 && !A)) {
							Wtf.Ajax
									.requestEx(
											{
												url : "Rec/Job/updownConfigRecruitment.rec",
												params : {
													configid : this.sm
															.getSelected().get(
																	"configid"),
													position : this.sm
															.getSelected().get(
																	"position"),
													formtype : this.sm
															.getSelected().get(
																	"formtype"),
													positioninc : A ? -1 : 1
												},
												method : "POST"
											},
											this,
											function(B, C) {
												if (B.success != null) {
													if (B.success == "msg") {
														var E = B.title;
														var D = B.msg;
														msgBoxShow(
																[ E, D ],
																Wtf.MessageBox.INFO)
													}
												} else {
													msgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.masterconf.Configoptionpositionchangedsuccessfully") ],
															Wtf.MessageBox.INFO)
												}
												this.ds.reload();
												this.up.disable();
												this.down.disable()
											},
											function() {
												msgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.Messages.calMsgBoxShow27") ],
														Wtf.MessageBox.ERROR)
											})
						}
					},
					disableBttns : function(A) {
						if (A.getCount() > 1) {
							this.delC.enable();
							this.editC.disable();
							this.up.disable();
							this.down.disable()
						} else {
							if (A.getCount() == 1) {
								this.editC.enable();
								if (this.sm.getSelected().get("position") == 1) {
									this.up.disable()
								} else {
									this.up.enable()
								}
								if (this.sm.getSelected().get(
										"issystemproperty")) {
									this.delC.disable()
								} else {
									this.delC.enable()
								}
								this.down.enable()
							} else {
								this.delC.disable();
								this.editC.disable();
								this.down.disable();
								this.up.disable()
							}
						}
					},
					roleAfterEdit : function(C) {
						var B = false;
						for ( var A = 0; A < this.masterds.getCount(); A++) {
							if (this.masterds.getAt(A).get("masterdata") == C.value
									&& !this.mastersm.isSelected(A)) {
								B = true;
								break
							}
						}
						if (!B) {
							Wtf.Ajax.requestEx({
								url : "Rec/Job/addConfigMaster.rec",
								method : "POST",
								params : {
									flag : 215,
									masterid : C.record.data.masterid,
									configid : this.attributeCombo.getValue(),
									masterdata : C.value
								}
							}, this, function(D, E) {
								if (D.success != null) {
									if (D.success == "msg") {
										var G = D.title;
										var F = D.msg;
										this.masterds.commitChanges();
										this.masterds.reload()
									}
								}
							}, function() {
							})
						} else {
							this.masterds.reload();
							calMsgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.warning"),
											WtfGlobal
													.getLocaleText({
														key : "hrms.masterconf.Masterrecordabcalreadypresent",
														params : [ C.value ]
													}) ], 2);
							return
						}
					},
					masteronload : function() {
						this.masterds.removeAll()
					},
					masterload : function() {
						this.addrec.enable();
						if (this.attributeCombo.getValue() == "coursetrainmode") {
							this.mastercm.setHidden(3, false)
						} else {
							this.mastercm.setHidden(3, true)
						}
						this.masterds.load({
							params : {
								flag : 216,
								configid : this.attributeCombo.getValue()
							}
						})
					},
					onRender : function(A) {
						Wtf.configRecruitment.superclass.onRender.call(this, A)
					}
				});
Wtf.importMenuArray = function(obj, moduleName, store, contactmapid,
		targetlistPagingLimit) {
	var archArray = [];
	var importButton = new Wtf.Action({
		text : WtfGlobal.getLocaleText("hrms.Importlog.ImportCSVFile"),
		id : "importcsvfile" + obj.id,
		tooltip : {
			text : WtfGlobal
					.getLocaleText("hrms.Importlog.ClicktoimportCSVfile")
		},
		iconCls : "pwnd importTabIcon",
		scope : obj,
		handler : function() {
			if (moduleName == "Lead") {
				obj.ImportLeads("csv")
			} else {
				if (moduleName == "Contact") {
					obj.ImportContacts("csv")
				} else {
					if (moduleName == "Target") {
						obj.ImportTargets("csv")
					} else {
						if (moduleName == "Target List") {
							obj.importCSVfile("TargetList")
						} else {
							if (moduleName == "Account") {
								obj.ImportAccounts("csv")
							}
						}
					}
				}
			}
		}
	});
	archArray.push(importButton);
	var importXLS = new Wtf.Action(
			{
				text : WtfGlobal.getLocaleText("hrms.Importlog.ImportXLSFile"),
				tooltip : {
					text : WtfGlobal
							.getLocaleText("hrms.Importlog.ClicktoimportXLSfile")
				},
				iconCls : "pwnd importTabIcon",
				scope : obj,
				handler : function() {
					this.form = new Wtf.form.FormPanel(
							{
								url : "fileUploadXLS",
								fileUpload : true,
								autoHeight : true,
								border : false,
								bodyStyle : "background:#f1f1f1;font-size:10px;padding:11px 15px 0",
								autoWidth : true,
								defaultType : "textfield",
								items : [ {
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.file.to.upload"),
									inputType : "file",
									id : "browsexlsBttn"
								} ]
							});
					this.win1 = new Wtf.Window(
							{
								resizable : false,
								scope : this,
								layout : "border",
								modal : true,
								width : 420,
								height : 185,
								iconCls : "pwnd favwinIcon",
								id : "importwindow",
								title : WtfGlobal
										.getLocaleText("hrms.Importlog.ImportXLSFile"),
								items : [
										{
											region : "north",
											height : 70,
											border : false,
											bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
											html : getTopHtml(
													WtfGlobal
															.getLocaleText("hrms.Importlog.ImportXLSFile"),
													WtfGlobal
															.getLocaleText("hrms.Importlog.ImportXLSFile"),
													"images/import.png")
										},
										{
											region : "center",
											layout : "fit",
											border : false,
											bodyStyle : "background:#f1f1f1;font-size:10px;",
											items : [ this.form ]
										} ],
								buttons : [ {
									text : WtfGlobal
											.getLocaleText("hrms.common.Upload"),
									handler : function() {
										var parsedObject = document
												.getElementById("browsexlsBttn").value;
										var extension = parsedObject
												.substr(parsedObject
														.lastIndexOf(".") + 1);
										var patt1 = new RegExp("xls", "i");
										if (patt1.test(extension)) {
											this.form
													.getForm()
													.submit(
															{
																waitMsg : WtfGlobal
																		.getLocaleText("hrms.Importlog.UploadingFile"),
																scope : this,
																success : function(
																		f, a) {
																	this.win1
																			.close();
																	genUploadResponse(
																			a.request,
																			true,
																			a.response,
																			moduleName,
																			store,
																			contactmapid,
																			targetlistPagingLimit,
																			obj)
																},
																failure : function(
																		f, a) {
																	this.win1
																			.close();
																	genUploadResponse(
																			a.request,
																			false,
																			a.response,
																			moduleName,
																			store,
																			contactmapid,
																			targetlistPagingLimit,
																			obj)
																}
															})
										} else {
											ResponseAlert(83)
										}
									},
									scope : this
								} ]
							});
					this.win1.show()
				}
			});
	archArray.push(importXLS);
	if (moduleName != "Target List" && moduleName != "Account") {
		var importGoogleContacts = new Wtf.Action({
			text : WtfGlobal.getLocaleText({
				key : "hrms.common.import.from.google.account",
				params : [ moduleName ]
			}),
			tooltip : {
				text : WtfGlobal.getLocaleText({
					key : "hrms.common.click.import.from.google.account",
					params : [ moduleName ]
				})
			},
			iconCls : "pwnd importTabIcon",
			scope : obj,
			handler : function() {
				Wtf.commonAuthenticationWindow(obj, store, moduleName,
						contactmapid)
			}
		});
		archArray.push(importGoogleContacts)
	}
	return archArray;
	function genUploadResponse(req, succeed, res, moduleName, store,
			contactmapid, targetlistPagingLimit, obj) {
		var msg = WtfGlobal.getLocaleText("hrms.common.FailedconnectionServer");
		var response = eval("(" + res.responseText + ")");
		if (succeed) {
			succeed = response.lsuccess;
			if (succeed) {
				this.win = new Wtf.SheetViewer1({
					title : "Available Sheets",
					iconCls : "pwnd favwinIcon",
					closable : true,
					autoScroll : true,
					width : 600,
					height : 600,
					plain : true,
					modal : true,
					id : "importxls",
					data : response,
					layout : "border",
					moduleName : moduleName,
					store : store,
					contactmapid : contactmapid,
					targetlistPagingLimit : targetlistPagingLimit,
					obj : obj
				});
				this.win.show()
			} else {
				msg = response.msg;
				Wtf.Msg.alert(WtfGlobal
						.getLocaleText("hrms.masterconf.FileUpload"), msg)
			}
		}
	}
};
Wtf.importMenuButtonA = function(A, D, C) {
	var B = new Wtf.Toolbar.Button({
		iconCls : "pwnd importicon",
		tooltip : {
			text : WtfGlobal.getLocaleText({
				key : "hrms.common.click.to.import",
				params : [ C ]
			})
		},
		scope : D,
		text : WtfGlobal.getLocaleText("hrms.Featurelist.importf"),
		menu : A
	});
	return B
};
Wtf.commonAuthenticationWindow = function(D, B, C, A) {
	if (C == "Lead") {
		this.form1 = new Wtf.form.FormPanel({
			border : false,
			items : [
					{
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.email.id"),
						id : "authentication_username" + D.id,
						width : 200,
						allowBlank : false,
						validator : WtfGlobal.noBlankCheck,
						msgTarget : "side",
						vtype : "email",
						xtype : "striptextfield"
					},
					password = new Wtf.form.TextField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.AuditGroup.Password"),
						id : "authentication_password" + D.id,
						allowBlank : false,
						validator : WtfGlobal.noBlankCheck,
						msgTarget : "side",
						inputType : "password",
						width : 200
					}),
					{
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.Company"),
						id : "authentication_company" + D.id,
						allowBlank : false,
						validator : WtfGlobal.noBlankCheck,
						msgTarget : "side",
						maxLength : 250,
						width : 200,
						xtype : "striptextfield"
					} ]
		})
	} else {
		if (C == "Contact") {
			this.accStore = new Wtf.data.Store({
				url : Wtf.req.base + "crm.jsp?flag=5",
				reader : new Wtf.data.KwlJsonReader({
					root : "data"
				}, Wtf.ComboReader),
				autoLoad : true
			});
			this.form1 = new Wtf.form.FormPanel(
					{
						border : false,
						items : [
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.common.email.id"),
									id : "authentication_username" + D.id,
									width : 200,
									allowBlank : false,
									validator : WtfGlobal.noBlankCheck,
									msgTarget : "side",
									vtype : "email",
									xtype : "striptextfield"
								},
								password = new Wtf.form.TextField(
										{
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.AuditGroup.Password"),
											id : "authentication_password"
													+ D.id,
											allowBlank : false,
											validator : WtfGlobal.noBlankCheck,
											msgTarget : "side",
											inputType : "password",
											width : 200
										}),
								this.accCombo = new Wtf.form.ComboBox(
										{
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.Importlog.Account"),
											id : "authentication_account"
													+ D.id,
											selectOnFocus : true,
											triggerAction : "all",
											mode : "local",
											store : this.accStore,
											displayField : "name",
											emptyText : "-- "
													+ WtfGlobal
															.getLocaleText("hrms.common.please.select")
													+ " --",
											typeAhead : true,
											allowBlank : false,
											valueField : "id",
											msgTarget : "side",
											anchor : "100%",
											width : 200
										}) ]
					})
		} else {
			this.form1 = new Wtf.form.FormPanel({
				border : false,
				items : [
						{
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.common.email.id"),
							id : "authentication_username" + D.id,
							width : 200,
							allowBlank : false,
							msgTarget : "side",
							vtype : "email",
							xtype : "striptextfield"
						},
						password = new Wtf.form.TextField({
							fieldLabel : WtfGlobal
									.getLocaleText("hrms.AuditGroup.Password"),
							id : "authentication_password" + D.id,
							allowBlank : false,
							validator : WtfGlobal.noBlankCheck,
							msgTarget : "side",
							inputType : "password",
							width : 200
						}) ]
			})
		}
	}
	this.selectAllAuthentication = new Wtf.form.Checkbox({
		boxLabel : WtfGlobal.getLocaleText("hrms.common.import.all"),
		inputType : "radio",
		name : "rectype",
		checked : true,
		inputValue : "false",
		id : "selectAllAuthentication" + D.id,
		width : 100
	});
	this.selectSomeAuthentication = new Wtf.form.Checkbox({
		boxLabel : WtfGlobal.getLocaleText("hrms.common.select.some"),
		width : 100,
		inputType : "radio",
		id : "selectSomeAuthentication" + D.id,
		inputValue : "true",
		name : "rectype"
	});
	this.TypeFormAuthentication = new Wtf.form.FormPanel(
			{
				autoScroll : true,
				border : false,
				labelWidth : 100,
				style : "background: #f1f1f1;padding-left: 35px;padding-top: 0px;padding-right: 30px;",
				layout : "column",
				items : [ {
					border : false,
					columnWidth : 0.5,
					items : this.selectAllAuthentication
				}, {
					border : false,
					columnWidth : 0.5,
					items : this.selectSomeAuthentication
				} ]
			});
	this.authwin = new Wtf.Window(
			{
				height : C == "Target" ? 260 : 290,
				width : 400,
				id : "authentication_window" + D.id,
				iconCls : "pwnd favwinIcon",
				title : "Authentication",
				modal : true,
				shadow : true,
				scope : this,
				resizable : false,
				buttonAlign : "right",
				buttons : [
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.submit"),
							scope : this,
							handler : function() {
								var L = Wtf.getCmp(
										"authentication_username" + D.id)
										.getValue();
								var G = Wtf.getCmp(
										"authentication_password" + D.id)
										.getValue();
								var F = Wtf.getCmp(
										"selectAllAuthentication" + D.id)
										.getValue();
								var E = "";
								var I = "";
								if (L == "") {
									WtfComMsgBox(1054, 0);
									return
								}
								if (G == "") {
									WtfComMsgBox(1055, 0);
									return
								}
								if (C == "Lead") {
									E = Wtf.getCmp(
											"authentication_company" + D.id)
											.getValue();
									if (E == "") {
										WtfComMsgBox(1052, 0);
										return
									}
								} else {
									if (C == "Contact") {
										I = Wtf
												.getCmp(
														"authentication_account"
																+ D.id)
												.getValue();
										if (I == "") {
											WtfComMsgBox(1053, 0);
											return
										}
									}
								}
								var K = "";
								Wtf
										.commonWaitMsgBox(WtfGlobal
												.getLocaleText("hrms.common.fetching.google.contacts"));
								K += "{'username':'" + L + "',";
								K += "'password':'" + G + "'},";
								var J = K.length - 1;
								var H = K.substr(0, J);
								Wtf.Ajax
										.requestEx(
												{
													url : Wtf.req.base
															+ "crm.jsp",
													params : {
														jsondata : H,
														importAll : F,
														account : I,
														company : E,
														moduleName : C,
														flag : 800,
														mapid : A
													}
												},
												this,
												function(M) {
													Wtf.updateProgress();
													if (M.importAll) {
														this.authwin.close();
														B.load();
														ResponseAlert(353)
													} else {
														if (M.data != undefined) {
															this.authwin
																	.close();
															var O = M.data;
															var N = Wtf.data.Record
																	.create([
																			{
																				name : "firstName",
																				mapping : 0
																			},
																			{
																				name : "lastName",
																				mapping : 1
																			},
																			{
																				name : "email",
																				mapping : 2
																			} ]);
															this.listds = new Wtf.ux.data.JsonPagingStore(
																	{
																		lastOptions : {
																			params : {
																				start : 0,
																				limit : 20
																			}
																		},
																		totalRecords : "records",
																		successProperty : WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		reader : new Wtf.data.ArrayReader(
																				{},
																				N),
																		fields : [
																				{
																					name : "firstName"
																				},
																				{
																					name : "lastName"
																				},
																				{
																					name : "email"
																				} ]
																	});
															this.listds
																	.loadData(M.data);
															this.listds.load({
																params : {
																	start : 0,
																	limit : 20
																}
															});
															var P = new Wtf.grid.CheckboxSelectionModel(
																	{
																		width : 25
																	});
															this.googleCM = new Wtf.grid.ColumnModel(
																	[
																			new Wtf.grid.CheckboxSelectionModel,
																			{
																				header : WtfGlobal
																						.getLocaleText("hrms.common.FirstName"),
																				width : 50,
																				dataIndex : "firstName"
																			},
																			{
																				header : WtfGlobal
																						.getLocaleText("hrms.common.LastName"),
																				width : 50,
																				dataIndex : "lastName"
																			},
																			{
																				header : WtfGlobal
																						.getLocaleText("hrms.common.email.id"),
																				dataIndex : "email"
																			} ]);
															this.contactGrid = new Wtf.grid.GridPanel(
																	{
																		id : "google_contact_grid"
																				+ D.id,
																		store : this.listds,
																		scope : this,
																		cm : this.googleCM,
																		sm : P,
																		border : false,
																		viewConfig : {
																			forceFit : true
																		},
																		bbar : new Wtf.PagingToolbar(
																				{
																					pageSize : 20,
																					store : this.listds,
																					displayInfo : true
																				})
																	});
															this.gContactWin = new Wtf.Window(
																	{
																		resizable : false,
																		scope : this,
																		layout : "border",
																		modal : true,
																		width : 600,
																		height : 500,
																		iconCls : "pwnd favwinIcon",
																		id : "import_window_gContacts"
																				+ D.id,
																		title : WtfGlobal
																				.getLocaleText("hrms.common.google.contacts"),
																		items : [
																				{
																					region : "north",
																					height : 70,
																					border : false,
																					id : "googleContacts_North_panel"
																							+ D.id,
																					bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
																					html : getTopHtml(
																							WtfGlobal
																									.getLocaleText("hrms.common.google.contacts"),
																							WtfGlobal
																									.getLocaleText({
																										key : "hrms.common.google.contact.list",
																										params : [ L ]
																									}),
																							"images/leads.gif")
																				},
																				{
																					region : "center",
																					layout : "fit",
																					items : [ this.contactGrid ]
																				} ],
																		buttons : [
																				{
																					text : WtfGlobal
																							.getLocaleText("hrms.Importlog.Import"),
																					id : "importBttn_googleContact"
																							+ D.id,
																					type : "submit",
																					scope : this,
																					handler : function() {
																						var Q = this.contactGrid
																								.getSelectionModel()
																								.getSelections();
																						if (Q.length > 0) {
																							Wtf
																									.saveGoogleContact(
																											Q,
																											B,
																											this.gContactWin,
																											C,
																											E,
																											I,
																											L,
																											this.listds,
																											A)
																						} else {
																							WtfComMsgBox(
																									1051,
																									0);
																							return
																						}
																					}
																				},
																				{
																					text : WtfGlobal
																							.getLocaleText("hrms.common.cancel"),
																					id : "canbttn_googleContact"
																							+ D.id,
																					scope : this,
																					handler : function() {
																						this.gContactWin
																								.close()
																					}
																				} ]
																	});
															this.gContactWin
																	.show()
														} else {
															WtfComMsgBox(1050,
																	0);
															Wtf
																	.getCmp(
																			"authentication_username"
																					+ D.id)
																	.setValue(
																			"");
															Wtf
																	.getCmp(
																			"authentication_password"
																					+ D.id)
																	.setValue(
																			"")
														}
													}
												}, function(M) {
													Wtf.updateProgress();
													ResponseAlert(352)
												})
							}
						},
						{
							text : WtfGlobal
									.getLocaleText("hrms.common.cancel"),
							scope : this,
							handler : function() {
								this.authwin.close()
							}
						} ],
				layout : "border",
				items : [
						{
							region : "north",
							height : 75,
							border : false,
							bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
							html : getTopHtml(
									WtfGlobal
											.getLocaleText("hrms.common.authentication"),
									WtfGlobal
											.getLocaleText("hrms.common.please.provide.google.account.details"),
									"images/import.png")
						},
						{
							region : "center",
							border : false,
							bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 10px 10px 30px",
							layout : "fit",
							items : [ this.form1 ]
						},
						{
							region : "south",
							height : 40,
							border : false,
							bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
							layout : "fit",
							items : this.TypeFormAuthentication
						} ]
			});
	this.authwin.show();
	this.selectSomeAuthentication.on("check", function() {
		this.selectAllAuthentication = false
	}, this);
	this.selectAllAuthentication.on("check", function() {
		this.selectSomeAuthentication = false
	}, this)
};
Wtf.saveGoogleContact = function(M, L, D, B, I, H, G, A, K) {
	var C = "";
	for ( var F = 0; F < M.length; F++) {
		C += "{'firstName':'" + M[F].data.firstName + "',";
		C += "'lastName':'" + M[F].data.lastName + "',";
		C += "'email':'" + M[F].data.email + "'},"
	}
	for ( var E = 0; E < M.length; E++) {
		A.remove(M[E])
	}
	A.load({
		params : {
			start : 0,
			limit : 20
		}
	});
	var J = C.substring(0, (C.length - 1));
	Wtf.commonWaitMsgBox(WtfGlobal
			.getLocaleText("hrms.common.importing.google.contacts"));
	Wtf.Ajax.requestEx({
		url : Wtf.req.base + "crm.jsp",
		params : {
			jsondata : J,
			flag : 801,
			moduleName : B,
			company : I,
			account : H,
			username : G,
			mapid : K
		}
	}, this, function(N) {
		Wtf.updateProgress();
		if (N.success) {
			ResponseAlert(351)
		} else {
			ResponseAlert(352)
		}
		Wtf.MessageBox.show({
			title : WtfGlobal.getLocaleText("hrms.common.google.contacts"),
			msg : WtfGlobal.getLocaleText({
				key : "hrms.CampaignDetail.nRecImportedSuccess",
				params : [ M.length ]
			}),
			buttons : Wtf.MessageBox.YESNO,
			animEl : "mb9",
			scope : this,
			icon : Wtf.MessageBox.INFO,
			fn : function(O, P) {
				if (O == "yes") {
					L.reload()
				} else {
					D.close();
					L.reload()
				}
			}
		})
	}, function() {
		Wtf.updateProgress();
		ResponseAlert(352)
	})
};
Wtf.SheetViewer1 = function(A) {
	Wtf.SheetViewer1.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.SheetViewer1,
				Wtf.Window,
				{
					initComponent : function(A) {
						Wtf.SheetViewer1.superclass.initComponent.call(this, A);
						this.addButton({
							text : WtfGlobal.getLocaleText("hrms.common.Next"),
							disabled : true,
							id : "nextButton" + this.id
						}, this.getCSVMappingInterface, this);
						this.addButton(WtfGlobal
								.getLocaleText("hrms.common.cancel"),
								function() {
									this.close()
								}, this)
					},
					onRender : function(E) {
						Wtf.SheetViewer1.superclass.onRender.call(this, E);
						this.xlsfilename = this.data.file;
						for ( var C = 0; C < this.data.data.length; C++) {
							this.data.data[C].srow = "1"
						}
						var F = new Wtf.data.Record.create([ {
							name : "name"
						}, {
							name : "index"
						}, {
							name : "srow"
						} ]);
						var D = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, F),
							data : this.data
						});
						this.shgrid = new Wtf.grid.GridPanel(
								{
									viewConfig : {
										forceFit : true
									},
									columns : [
											{
												header : WtfGlobal
														.getLocaleText("hrms.Importlog.SheetName"),
												dataIndex : "name"
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.Importlog.StartingRow"),
												dataIndex : "srow"
											} ],
									store : D
								});
						this.shgrid.on("rowclick", this.showDetail, this);
						var B = new Wtf.data.Record.create([ {
							name : "name"
						} ]);
						var A = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "fields"
							}, B)
						});
						this.shdgrid = new Wtf.grid.GridPanel({
							columns : [],
							store : A
						});
						this.shdgrid.on("rowclick", this.updateStartRow, this);
						this
								.add({
									region : "north",
									height : 80,
									border : false,
									bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
									html : getTopHtml(
											WtfGlobal
													.getLocaleText("hrms.Importlog.AvailableSheets"),
											WtfGlobal
													.getLocaleText("hrms.Importlog.step1.sheet.see.sample")
													+ "<br/><br/>"
													+ WtfGlobal
															.getLocaleText("hrms.Importlog.step2.next.import.selected.sheet"),
											"images/import.png")
								});
						this.add({
							region : "center",
							layout : "fit",
							autoScroll : true,
							items : this.shgrid
						});
						this.add({
							region : "south",
							height : 220,
							layout : "fit",
							autoScroll : true,
							items : this.shdgrid
						})
					},
					updateStartRow : function(B, A, C) {
						var D = this.shgrid.getSelectionModel().getSelected();
						D.set("srow", A + 1)
					},
					genUploadResponse12 : function(req, succeed, res) {
						var msg = WtfGlobal
								.getLocaleText("hrms.common.FailedconnectionServer");
						var response = eval("(" + res.responseText + ")");
						if (succeed) {
							msg = response.msg;
							succeed = response.lsuccess;
							this.Header = response.Header;
							this.xlsParserResponse = response;
							if (succeed) {
								this.cursheet = response.index;
								var cm = this
										.createColumnModel1(response.maxcol);
								var store = this.createStore1(response, cm);
								this.shdgrid.reconfigure(store, cm);
								var rowno = this.shgrid.getStore().getAt(
										this.shgrid.getStore().find("index",
												this.cursheet)).get("srow");
								if (rowno) {
									this.shdgrid.getSelectionModel().selectRow(
											rowno - 1)
								}
							} else {
								Wtf.Msg
										.alert(
												WtfGlobal
														.getLocaleText("hrms.Importlog.FileImport"),
												msg)
							}
						}
						this.shdgrid.enable()
					},
					createColumnModel1 : function(E) {
						var A = [ new Wtf.grid.RowNumberer() ];
						for ( var C = 1; C <= E; C++) {
							var B = C;
							var D = "";
							while (B > 0) {
								B--;
								D = String.fromCharCode(Math.floor(B % 26)
										+ "A".charCodeAt(0))
										+ D;
								B = Math.floor(B / 26)
							}
							A.push({
								header : D,
								dataIndex : D
							})
						}
						return new Wtf.grid.ColumnModel(A)
					},
					createStore1 : function(E, C) {
						var B = [];
						for ( var A = 0; A < C.getColumnCount(); A++) {
							B.push({
								name : C.getDataIndex(A)
							})
						}
						var F = new Wtf.data.Record.create(B);
						var D = new Wtf.data.Store({
							reader : new Wtf.data.JsonReader({
								root : "data"
							}, F),
							data : E
						});
						return D
					},
					showDetail : function(B, A, C) {
						Wtf.getCmp("nextButton" + this.id).enable();
						var D = this.shgrid.getStore().getAt(A);
						if (this.cursheet && this.cursheet == D.get("index")) {
							return
						}
						this.shdgrid.disable();
						Wtf.Ajax.request({
							method : "GET",
							url : "XLSDataExtractor",
							params : {
								filename : this.xlsfilename,
								index : D.get("index")
							},
							scope : this,
							success : function(E, F) {
								this.genUploadResponse12(F, true, E)
							},
							failure : function(E, F) {
								this.genUploadResponse12(F, false, E)
							}
						})
					},
					getCSVMappingInterface : function(B, A, C) {
						var D = this.shgrid.getSelectionModel().getSelected();
						Wtf.getCmp("importxls").hide();
						this.mapCSV = new Wtf.csvMappingInterface({
							csvheaders : this.Header,
							modName : this.moduleName + "s",
							typeXLSFile : true,
							impWin1 : Wtf.getCmp("importxls"),
							delimiterType : "",
							index : D.get("index"),
							moduleName : this.moduleName,
							store : this.store,
							contactmapid : this.contactmapid,
							targetlistPagingLimit : this.targetlistPagingLimit,
							scopeobj : this.obj,
							cm : this.obj.EditorColumnArray
						}).show();
						Wtf.getCmp("csvMappingInterface").on("importfn",
								this.importCSVfunc, this)
					},
					importCSVfunc : function(C, E, D, B, F, A, G) {
						Wtf.saveXLS(this, C, E, D, B, F, A, G);
						this.on("importTargetListRecs", this.insertIntoGrid,
								this)
					},
					insertIntoGrid : function(C, B, A, D) {
						if (C[0].TLID !== undefined) {
							D.TLID = C[0].TLID
						}
						B.baseParams.listID = D.TLID;
						B.baseParams.start = 0;
						B.baseParams.limit = A;
						B.load()
					}
				});
Wtf.saveXLS = function(F, D, C, B, J, H, I, E) {
	var G = B == "Target List" ? ("&tlid=" + E.TLID) : "";
	var A = B == "Target List" ? WtfGlobal.getLocaleText("hrms.common.Target")
			: B;
	Wtf.Ajax.timeout = 900000;
	Wtf.Ajax
			.requestEx(
					{
						url : "exportimportcontacts.jsp?type=submit&do=xlsImport&resjson="
								+ D + "&mapid=" + H + G,
						waitMsg : WtfGlobal
								.getLocaleText("hrms.Importlog.importing"),
						scope : this,
						params : ({
							filepath : F.xlsfilename,
							sheetindex : C,
							moduleName : B
						})
					},
					this,
					function(L, K) {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.success"),
									msg : WtfGlobal
											.getLocaleText({
												key : "hrms.CampaignDetail.imported.successfully",
												params : [ A ]
											}),
									buttons : Wtf.MessageBox.OK,
									animEl : "mb9",
									icon : Wtf.MessageBox.INFO
								});
						if (L.data.importedRecords.data != undefined) {
							F.addEvents({
								"importTargetListRecs" : true
							});
							F.fireEvent("importTargetListRecs",
									L.data.importedRecords.data, J, I, E)
						}
						J.load();
						Wtf.Ajax.timeout = 30000
					},
					function(L, K) {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.error"),
									msg : WtfGlobal
											.getLocaleText({
												key : "hrms.CampaignDetail.couldnot.imported.please.try.again",
												params : [ A ]
											}),
									buttons : Wtf.MessageBox.OK,
									animEl : "mb9",
									icon : Wtf.MessageBox.ERROR
								});
						Wtf.Ajax.timeout = 30000
					})
};
Wtf.ns("Wtf.ux.grid");
Wtf.ux.grid.BufferView = Wtf
		.extend(
				Wtf.grid.GridView,
				{
					rowHeight : 19,
					borderHeight : 2,
					scrollDelay : 100,
					cacheSize : 20,
					cleanDelay : 500,
					initTemplates : function() {
						Wtf.ux.grid.BufferView.superclass.initTemplates
								.call(this);
						var A = this.templates;
						A.rowHolder = new Wtf.Template(
								'<div class="x-grid3-row {alt}" style="{tstyle}"></div>');
						A.rowHolder.disableFormats = true;
						A.rowHolder.compile();
						A.rowBody = new Wtf.Template(
								'<table class="x-grid3-row-table" border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
								"<tbody><tr>{cells}</tr>",
								(this.enableRowBody ? '<tr class="x-grid3-row-body-tr" style="{bodyStyle}"><td colspan="{cols}" class="x-grid3-body-cell" tabIndex="0" hidefocus="on"><div class="x-grid3-row-body">{body}</div></td></tr>'
										: ""), "</tbody></table>");
						A.rowBody.disableFormats = true;
						A.rowBody.compile()
					},
					getStyleRowHeight : function() {
						return Wtf.isBorderBox ? (this.rowHeight + this.borderHeight)
								: this.rowHeight
					},
					getCalculatedRowHeight : function() {
						return this.rowHeight + this.borderHeight
					},
					getVisibleRowCount : function() {
						var B = this.getCalculatedRowHeight();
						var A = this.scroller.dom.clientHeight;
						return (A < 1) ? 0 : Math.ceil(A / B)
					},
					getVisibleRows : function() {
						var A = this.getVisibleRowCount();
						var B = this.scroller.dom.scrollTop;
						var C = (B == 0 ? 0 : Math.floor(B
								/ this.getCalculatedRowHeight()) - 1);
						return {
							first : Math.max(C, 0),
							last : Math.min(C + A + 2, this.ds.getCount() - 1)
						}
					},
					doRender : function(F, H, P, A, N, V, I) {
						var B = this.templates, E = B.cell, G = B.row, S = B.rowBody, K = N - 1;
						var O = this.getStyleRowHeight();
						var U = this.getVisibleRows();
						var C = "width:" + this.getTotalWidth() + ";height:"
								+ O + "px;";
						var Y = [], R, Z, Q = {}, J = {
							tstyle : C
						}, M;
						for ( var T = 0, X = H.length; T < X; T++) {
							M = H[T];
							R = [];
							var L = (T + A);
							var D = L >= U.first && L <= U.last;
							if (D) {
								for ( var W = 0; W < N; W++) {
									Z = F[W];
									Q.id = Z.id;
									Q.css = W == 0 ? "x-grid3-cell-first "
											: (W == K ? "x-grid3-cell-last "
													: "");
									Q.attr = Q.cellAttr = "";
									Q.value = Z.renderer(M.data[Z.name], Q, M,
											L, W, P);
									Q.style = Z.style;
									if (Q.value == undefined || Q.value === "") {
										Q.value = "&#160;"
									}
									if (M.dirty
											&& typeof M.modified[Z.name] !== "undefined") {
										Q.css += " x-grid3-dirty-cell"
									}
									R[R.length] = E.apply(Q)
								}
							}
							var a = [];
							if (V && ((L + 1) % 2 == 0)) {
								a[0] = "x-grid3-row-alt"
							}
							if (M.dirty) {
								a[1] = " x-grid3-dirty-row"
							}
							J.cols = N;
							if (this.getRowClass) {
								a[2] = this.getRowClass(M, L, J, P)
							}
							J.alt = a.join(" ");
							J.cells = R.join("");
							Y[Y.length] = !D ? B.rowHolder.apply(J) : (I ? S
									.apply(J) : G.apply(J))
						}
						return Y.join("")
					},
					isRowRendered : function(A) {
						var B = this.getRow(A);
						return B && B.childNodes.length > 0
					},
					syncScroll : function() {
						Wtf.ux.grid.BufferView.superclass.syncScroll.apply(
								this, arguments);
						this.update()
					},
					update : function() {
						if (this.scrollDelay) {
							if (!this.renderTask) {
								this.renderTask = new Wtf.util.DelayedTask(
										this.doUpdate, this)
							}
							this.renderTask.delay(this.scrollDelay)
						} else {
							this.doUpdate()
						}
					},
					doUpdate : function() {
						if (this.getVisibleRowCount() > 0) {
							var F = this.grid, B = F.colModel, G = F.store;
							var E = this.getColumnData();
							var A = this.getVisibleRows();
							for ( var D = A.first; D <= A.last; D++) {
								if (!this.isRowRendered(D)) {
									var C = this.doRender(E, [ G.getAt(D) ], G,
											D, B.getColumnCount(),
											F.stripeRows, true);
									this.getRow(D).innerHTML = C
								}
							}
							this.clean()
						}
					},
					clean : function() {
						if (!this.cleanTask) {
							this.cleanTask = new Wtf.util.DelayedTask(
									this.doClean, this)
						}
						this.cleanTask.delay(this.cleanDelay)
					},
					doClean : function() {
						if (this.getVisibleRowCount() > 0) {
							var B = this.getVisibleRows();
							B.first -= this.cacheSize;
							B.last += this.cacheSize;
							var C = 0, D = this.getRows();
							if (B.first <= 0) {
								C = B.last + 1
							}
							for ( var A = this.ds.getCount(); C < A; C++) {
								if ((C < B.first || C > B.last)
										&& D[C].innerHTML) {
									D[C].innerHTML = ""
								}
							}
						}
					},
					layout : function() {
						Wtf.ux.grid.BufferView.superclass.layout.call(this);
						this.update()
					}
				});
Wtf.ux.TextField = function(A) {
	Wtf.apply(this, A);
	Wtf.ux.TextField.superclass.constructor.call(this)
};
Wtf.extend(Wtf.ux.TextField, Wtf.form.TextField, {
	initComponent : function(A) {
		Wtf.ux.TextField.superclass.initComponent.call(this, A);
		this.on("change", this.mychange, this)
	},
	mychange : function(C, A) {
		var B = Wtf.util.Format.stripTags(A).trim();
		C.setValue(B);
		return B
	}
});
Wtf.reg("striptextfield", Wtf.ux.TextField);
Wtf.ux.ExtTextField = function(A) {
	Wtf.apply(this, A);
	Wtf.ux.ExtTextField.superclass.constructor.call(this)
};
Wtf.extend(Wtf.ux.ExtTextField, Wtf.form.TextField, {
	initComponent : function(A) {
		Wtf.ux.ExtTextField.superclass.initComponent.call(this, A);
		this.on("change", this.mychange, this)
	},
	mychange : function(C, A) {
		var B = Wtf.util.Format.stripTags(A).trim();
		B = WtfGlobal.replaceAll(B, "\\s+", " ");
		C.setValue(B);
		return B
	}
});
Wtf.reg("extstriptextfield", Wtf.ux.ExtTextField);
Wtf.ux.TextArea = function(A) {
	Wtf.apply(this, A);
	Wtf.ux.TextArea.superclass.constructor.call(this)
};
Wtf.extend(Wtf.ux.TextArea, Wtf.form.TextArea, {
	initComponent : function(A) {
		Wtf.ux.TextArea.superclass.initComponent.call(this, A);
		this.on("change", this.mychange, this)
	},
	mychange : function(C, A) {
		var B = Wtf.util.Format.stripTags(A).trim();
		B = WtfGlobal.replaceAll(B, "\\s+", " ");
		C.setValue(B);
		return B
	}
});
Wtf.reg("striptextarea", Wtf.ux.TextArea);
Wtf.namespace("Wtf.ux");
Wtf.namespace("Wtf.ux.Wiz");
Wtf.namespace("Wtf.ux.layout");
Wtf.ux.Wiz = Wtf.extend(Wtf.Panel,
		{
			loadMaskConfig : {
				"default" : WtfGlobal.getLocaleText("hrms.common.saving")
			},
			cards : null,
			previousButtonText : "&lt;&lt; Previous",
			nextButtonText : "Next &gt;&gt;",
			cancelButtonText : WtfGlobal.getLocaleText("hrms.common.cancel"),
			finishButtonText : "Finish",
			headerConfig : {},
			cardPanelConfig : {},
			previousButton : null,
			nextButton : null,
			cancelButton : null,
			cardPanel : null,
			currentCard : -1,
			headPanel : null,
			cardCount : 0,
			initComponent : function() {
				this.initButtons();
				this.initPanels();
				var A = this.title || this.headerConfig.title;
				A = A || "";
				Wtf.apply(this, {
					title : A,
					layout : "border",
					cardCount : this.cards.length,
					tbar : [ this.previousButton, this.nextButton ],
					items : [ this.headPanel, this.cardPanel ]
				});
				this.addEvents("cancel", "finish", "beforefinish",
						"beforeNextcard");
				Wtf.ux.Wiz.superclass.initComponent.call(this)
			},
			getWizardData : function() {
				var D = {};
				var C = this.cards;
				for ( var B = 0, A = C.length; B < A; B++) {
					if (C[B].form) {
						D[C[B].id] = C[B].form.getValues(false)
					} else {
						D[C[B].id] = {}
					}
				}
				return D
			},
			switchDialogState : function(A, C) {
				this.showLoadMask(!A, C);
				this.previousButton.setDisabled(!A);
				this.nextButton.setDisabled(!A);
				this.cancelButton.setDisabled(true);
				if (this.closable) {
					var B = this.tools["close"];
					switch (A) {
					case true:
						this.tools["close"].unmask();
						break;
					default:
						this.tools["close"].mask();
						break
					}
				}
			},
			showLoadMask : function(A, B) {
				if (!B) {
					B = "default"
				}
				if (A) {
					if (this.loadMask == null) {
						this.loadMask = new Wtf.LoadMask(this.body)
					}
					this.loadMask.msg = this.loadMaskConfig["type"];
					this.loadMask.show()
				} else {
					if (this.loadMask) {
						this.loadMask.hide()
					}
				}
			},
			initEvents : function() {
				Wtf.ux.Wiz.superclass.initEvents.call(this);
				var C = this.cards;
				for ( var B = 0, A = C.length; B < A; B++) {
					C[B].on("show", this.onCardShow, this);
					C[B].on("hide", this.onCardHide, this);
					C[B].on("clientvalidation", this.onClientValidation, this)
				}
			},
			initPanels : function() {
				var B = this.cards;
				var A = this.cardPanelConfig;
				Wtf.apply(this.headerConfig, {
					steps : B.length
				});
				this.headPanel = new Wtf.ux.Wiz.Header(this.headerConfig);
				Wtf.apply(A, {
					layout : new Wtf.ux.layout.CardLayout(),
					items : B
				});
				Wtf.applyIf(A, {
					region : "center",
					border : false,
					activeItem : 0
				});
				this.cardPanel = new Wtf.Panel(A)
			},
			initButtons : function() {
				this.previousButton = new Wtf.Button({
					text : this.previousButtonText,
					disabled : true,
					minWidth : 75,
					handler : this.onPreviousClick,
					scope : this
				});
				this.nextButton = new Wtf.Button({
					text : this.nextButtonText,
					minWidth : 75,
					handler : this.onNextClick,
					scope : this
				})
			},
			onClientValidation : function(A, B) {
				if (!B) {
					this.nextButton.setDisabled(true)
				} else {
					this.nextButton.setDisabled(false)
				}
			},
			onCardHide : function(A) {
				if (this.cardPanel.layout.activeItem.id === A.id) {
					this.nextButton.setDisabled(true)
				}
			},
			onCardShow : function(C) {
				var E = C.ownerCt;
				var B = E.items;
				for ( var D = 0, A = B.length; D < A; D++) {
					if (B.get(D).id == C.id) {
						break
					}
				}
				this.currentCard = D;
				this.headPanel.updateStep(D, C.title);
				if (D == A - 1) {
					this.nextButton.setText(this.finishButtonText)
				} else {
					this.nextButton.setText(this.nextButtonText)
				}
				if (C.isValid()) {
					this.nextButton.setDisabled(false)
				}
				if (D == 0) {
					this.previousButton.setDisabled(true)
				} else {
					this.previousButton.setDisabled(false)
				}
			},
			onCancelClick : function() {
				if (this.fireEvent("cancel", this) !== false) {
					this.close()
				}
			},
			onFinish : function() {
				if (this.fireEvent("beforefinish", this,
						this.cards[this.currentCard]) !== false) {
				}
			},
			closePanel : function() {
				for ( var A = 0; A < this.cards.length; A++) {
					this.cards[A].destroy();
					this.cards[A].ownerCt.remove(this.cards[A], true)
				}
				this.ownerCt.remove(this, true)
			},
			onPreviousClick : function() {
				if (this.currentCard > 0) {
					this.cardPanel.getLayout().setActiveItem(
							this.currentCard - 1)
				}
			},
			onNextClick : function() {
				if (this.fireEvent("beforeNextcard", this, this.currentCard)) {
					if (this.currentCard == this.cardCount - 1) {
						this.onFinish()
					} else {
						this.cardPanel.getLayout().setActiveItem(
								this.currentCard + 1)
					}
				}
			}
		});
Wtf.ux.Wiz.Header = Wtf.extend(Wtf.BoxComponent, {
	height : 55,
	region : "north",
	title : "Wizard",
	steps : 0,
	stepText : "Step {0} of {1}: {2}",
	autoEl : {
		tag : "div",
		cls : "wtf-ux-wiz-Header",
		children : [ {
			tag : "div",
			cls : "wtf-ux-wiz-Header-title"
		}, {
			tag : "div",
			children : [ {
				tag : "div",
				cls : "wtf-ux-wiz-Header-step"
			}, {
				tag : "div",
				cls : "wtf-ux-wiz-Header-stepIndicator-container"
			} ]
		} ]
	},
	titleEl : null,
	stepEl : null,
	imageContainer : null,
	indicators : null,
	stepTemplate : null,
	lastActiveStep : -1,
	updateStep : function(B, C) {
		var A = this.stepTemplate.apply({
			0 : B + 1,
			1 : this.steps,
			2 : C
		});
		this.stepEl.update(A);
		if (this.lastActiveStep != -1) {
			this.indicators[this.lastActiveStep]
					.removeClass("wtf-ux-wiz-Header-stepIndicator-active")
		}
		this.indicators[B].addClass("wtf-ux-wiz-Header-stepIndicator-active");
		this.lastActiveStep = B
	},
	onRender : function(D, B) {
		Wtf.ux.Wiz.Header.superclass.onRender.call(this, D, B);
		this.indicators = [];
		this.stepTemplate = new Wtf.Template(this.stepText), this.stepTemplate
				.compile();
		var F = this.el.dom.firstChild;
		var E = F.nextSibling;
		this.titleEl = new Wtf.Element(F);
		this.stepEl = new Wtf.Element(E.firstChild);
		this.imageContainer = new Wtf.Element(E.lastChild);
		this.titleEl.update(this.title);
		var G = null;
		for ( var C = 0, A = this.steps; C < A; C++) {
			G = document.createElement("div");
			G.innerHTML = "&#160;";
			G.className = "wtf-ux-wiz-Header-stepIndicator";
			this.indicators[C] = new Wtf.Element(G);
			this.imageContainer.appendChild(G)
		}
	}
});
Wtf.ux.Wiz.Card = Wtf.extend(Wtf.Panel, {
	header : false,
	hideMode : "display",
	initComponent : function() {
		this.addEvents("beforecardhide");
		Wtf.ux.Wiz.Card.superclass.initComponent.call(this)
	},
	isValid : function() {
		if (this.monitorValid) {
			return this.bindHandler()
		}
		return true
	},
	bindHandler : function() {
		this.form.items.each(function(A) {
			if (!A.isValid) {
				A.isValid = Wtf.emptyFn
			}
		});
		Wtf.ux.Wiz.Card.superclass.bindHandler.call(this)
	},
	initEvents : function() {
		var A = this.monitorValid;
		this.monitorValid = false;
		Wtf.ux.Wiz.Card.superclass.initEvents.call(this);
		this.monitorValid = A;
		this.on("beforehide", this.bubbleBeforeHideEvent, this);
		this.on("beforecardhide", this.isValid, this);
		this.on("show", this.onCardShow, this);
		this.on("hide", this.onCardHide, this)
	},
	bubbleBeforeHideEvent : function() {
		var A = this.ownerCt.layout;
		var B = A.activeItem;
		if (B && B.id === this.id) {
			return this.fireEvent("beforecardhide", this)
		}
		return true
	},
	onCardHide : function() {
		if (this.monitorValid) {
			this.stopMonitoring()
		}
	},
	onCardShow : function() {
		if (this.monitorValid) {
			this.startMonitoring()
		}
	}
});
Wtf.ux.layout.CardLayout = Wtf.extend(Wtf.layout.CardLayout, {
	setActiveItem : function(A) {
		A = this.container.getComponent(A);
		if (this.activeItem != A) {
			if (this.activeItem) {
				this.activeItem.hide()
			}
			if (this.activeItem && !this.activeItem.hidden) {
				return
			}
			this.activeItem = A;
			A.show();
			this.layout()
		}
	}
});
Wtf.campaignMailTemplate = function(A) {
	Wtf.apply(this, A);
	Wtf.campaignMailTemplate.superclass.constructor.call(this, {
		layout : "fit",
		border : false
	})
};
Wtf
		.extend(
				Wtf.campaignMailTemplate,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.campaignMailTemplate.superclass.onRender.call(this,
								A);
						var B = Wtf.data.Record.create([ {
							name : "templateid"
						}, {
							name : "templatename"
						}, {
							name : "description"
						}, {
							name : "subject"
						}, {
							name : "thumbnail"
						}, {
							name : "craetedon"
						} ]);
						var C = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 1,
								templateList : true
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, B)
						});
						C
								.on(
										"load",
										function(I, H) {
											var G = this.templateSelector.body.dom.childNodes;
											while (G.length > 0) {
												Wtf.get(G[0].id).remove()
											}
											for ( var F = 0; F < H.length; F++) {
												var D = false;
												if (this.selectedTemplate !== null
														&& H[F].data["templateid"] == this.selectedTemplate) {
													D = true
												}
												var J = "images/"
														+ H[F].data["thumbnail"];
												if (H[F].data["thumbnail"] == "") {
													J = "images/template-default-img.gif"
												}
												var E = new Wtf.emailTemplateThumbnail(
														{
															height : 120,
															width : 100,
															cssStyle : "margin:5px 10px 0px 10px;",
															imgWidth : 70,
															imgHeight : 90,
															tqtip : H[F].data["description"],
															id : "thumbnail_"
																	+ H[F].data["templateid"],
															tName : H[F].data["templatename"],
															thumbnail : J,
															tempRec : H[F],
															scope : this,
															selected : D,
															listeners : {
																"templateSelected" : this.selectTemplate
															},
															renderTo : this.templateSelector.body.dom
														});
												this.templateSelector.childArr
														.push(E);
												if (D) {
													this.selectedTemplate = E
												}
											}
										}, this);
						this.crateNewTemplate = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.administration.new.email.template"),
									scope : this,
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.administration.create.new.email.template")
									},
									iconCls : "pwndCRM templateEmailMarketing",
									handler : function() {
										var D = Wtf.getCmp("template_wiz_win"
												+ this.templateid);
										var E = WtfGlobal
												.getLocaleText("hrms.administration.new.template");
										var F = Wtf.util.Format.ellipsis(E, 18);
										if (D == null) {
											D = new Wtf.newEmailTemplate(
													{
														title : '<div wtf:qtip="'
																+ E
																+ "\"wtf:qtitle='"
																+ WtfGlobal
																		.getLocaleText("hrms.featurelist.email.template")
																+ "'>"
																+ F
																+ "</div>",
														tipTitle : E,
														mailTemplate : C
													});
											this.mainTab.add(D)
										}
										this.mainTab.setActiveTab(D);
										this.mainTab.doLayout()
									}
								});
						this.templateSelector = new Wtf.Panel({
							border : false,
							bodyStyle : "background-color: white;",
							childArr : [],
							layout : "fit",
							tbar : [ "-", this.crateNewTemplate, "-" ]
						});
						C.load();
						this.templateCont = this.add(this.templateSelector)
					},
					getSelectedTemplate : function() {
						return this.selectedTemplate
					},
					selectTemplate : function(A) {
						var C = this.scope.templateSelector.childArr;
						for ( var B = 0; B < C.length; B++) {
							C[B].deselectTemplate()
						}
						A.selectTemplate();
						this.scope.selectedTemplate = A
					}
				});
Wtf.addEmailMarketCmp = function(A) {
	Wtf.apply(this, A);
	Wtf.addEmailMarketCmp.superclass.constructor.call(this, {
		border : false,
		layout : "fit"
	})
};
Wtf
		.extend(
				Wtf.addEmailMarketCmp,
				Wtf.Panel,
				{
					onRender : function(B) {
						Wtf.addEmailMarketCmp.superclass.onRender.call(this, B);
						this.targetRecord = new Wtf.data.Record.create([ {
							name : "listid"
						}, {
							name : "listname"
						} ]);
						var A = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.targetRecord);
						this.targetStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 21,
								campID : this.campaignid,
								emailmarkid : this.mode == 1 ? this.emailmarkid
										: ""
							},
							method : "post",
							reader : A
						});
						this.targetStore.load();
						this.createTargetListBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.campaigndetail.new.target.list"),
									scope : this,
									iconCls : "targetlistIcon",
									tooltip : {
										text : WtfGlobal
												.getLocaleText({
													key : "hrms.campaigndetail.create.target.list.campaign",
													params : [ this.campaignname ]
												})
									},
									handler : function() {
										var E = "campaigntargetdetail"
												+ this.campaignid;
										var C = this.campaignname
												+ "'s Targets";
										var F = Wtf.util.Format.ellipsis(C, 17);
										var D = Wtf.getCmp(E);
										if (D == null) {
											D = new Wtf.campaignTargetList(
													{
														title : '<div wtf:qtip="'
																+ C
																+ "\"wtf:qtitle='"
																+ WtfGlobal
																		.getLocaleText("hrms.campaigndetail.campaign.targets")
																+ "'>"
																+ F
																+ "</div>",
														id : E,
														campaignid : this.campaignid,
														newFlag : 3,
														arcFlag : 1,
														archivedFlag : 1,
														mainTab : this.mainTab,
														storeTarget : this.targetStore
													});
											this.mainTab.add(D)
										}
										this.mainTab.setActiveTab(D);
										this.doLayout()
									}
								});
						this.activityform = new Wtf.form.FormPanel(
								{
									autoScroll : true,
									border : false,
									items : [ {
										border : false,
										defaults : {
											border : false,
											xtype : "fieldset",
											autoHeight : true
										},
										items : [ {
											cls : "marketingFieldset",
											title : "Marketing campaign setup",
											layout : "column",
											items : [
													{
														columnWidth : 0.48,
														layout : "form",
														border : false,
														cls : "mailMarketingForm",
														defaults : {
															width : 430,
															allowBlank : false,
															labelStyle : "width: 100%;",
															ctCls : "newTicketField"
														},
														items : [
																this.name = new Wtf.form.TextField(
																		{
																			fieldLabel : "Email Marketing Name*"
																		}),
																this.userMailCombo = new Wtf.form.TextField(
																		{
																			fieldLabel : "Sender Mail*",
																			vtype : "email"
																		}) ]
													},
													{
														columnWidth : 0.49,
														cls : "marketingFieldsetRight",
														layout : "form",
														border : false,
														defaults : {
															width : 430,
															allowBlank : false,
															labelStyle : "width: 100%;",
															ctCls : "newTicketField"
														},
														items : [
																this.fromname = new Wtf.form.TextField(
																		{
																			fieldLabel : "From Name*"
																		}),
																this.replayMail = new Wtf.form.TextField(
																		{
																			fieldLabel : "Reply Mail*",
																			vtype : "email"
																		}) ]
													} ]
										} ]
									} ]
								});
						this.campTargetStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 5,
								emailmarkid : this.mode == 1 ? this.emailmarkid
										: ""
							},
							method : "post",
							reader : A
						});
						if (this.mode == 1) {
							this.fromname.setValue(this.recData.fromname);
							this.userMailCombo
									.setValue(this.recData.fromaddress);
							this.name.setValue(this.recData.name);
							this.replayMail.setValue(this.recData.replymail)
						} else {
							if (this.mode == 0) {
								this.fromname.setValue("Newsletters");
								this.userMailCombo
										.setValue("newsletters@deskera.com");
								this.name.setValue("");
								this.replayMail
										.setValue("newsletters@deskera.com")
							}
						}
						this.campTargetStore.load();
						this.targetColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.CheckboxSelectionModel(),
										{
											header : "Target List",
											dataIndex : "listname",
											renderer : function(C) {
												return "<a href = '#' class='listofTargets'> "
														+ C + "</a>"
											}
										} ]);
						this.targetGrid = new Wtf.grid.GridPanel({
							store : this.targetStore,
							cm : this.targetColumn,
							sm : new Wtf.grid.CheckboxSelectionModel(),
							border : false,
							loadMask : true,
							viewConfig : {
								forceFit : true
							},
							tbar : [ "-", this.createTargetListBtn, "-" ]
						});
						this
								.add({
									region : "center",
									border : false,
									layout : "fit",
									items : [ {
										layout : "border",
										border : false,
										defaults : {
											border : false,
											layout : "fit"
										},
										items : [
												{
													region : "north",
													cls : "panelCls",
													bodyStyle : "background:#f1f1f1;font-size:10px;padding:40px 10px 10px 25px;",
													items : this.activityform
												},
												{
													region : "center",
													bodyStyle : "background:#f1f1f1;padding:0px 10px 10px 20px;",
													items : this.targetGrid
												} ]
									} ]
								});
						this.targetGrid.on("cellclick", this.listofTargets,
								this);
						this.campTargetStore.load();
						this.targetStore
								.on(
										"load",
										function() {
											for ( var D = 0; D < this.targetStore
													.getCount(); D++) {
												for ( var C = 0; C < this.campTargetStore
														.getCount(); C++) {
													if (this.targetStore.data.items[D].data.listid == this.campTargetStore.data.items[C].data.listid) {
														this.targetGrid
																.getSelectionModel()
																.selectRow(D,
																		true)
													}
												}
											}
										}, this);
						this.campTargetStore.on("load", function() {
							this.targetStore.load()
						}, this)
					},
					listofTargets : function(E, I, H, G) {
						var B = G;
						if (B.getTarget("a[class='listofTargets']")) {
							var C = this.targetStore.data.items[I].data.listid;
							var K = this.targetStore.data.items[I].data.listname;
							var D = K + "'s Targets";
							var J = Wtf.util.Format.ellipsis(D, 19);
							var F = "targetListsTargets" + this.id + C;
							var A = Wtf.getCmp(F);
							if (A == null) {
								A = new Wtf.targetListTargets({
									id : "targetListsTargets" + this.id + C,
									closable : true,
									title : '<div wtf:qtip="' + D
											+ "\"wtf:qtitle='Target List'>" + J
											+ "</div>",
									layout : "fit",
									border : false,
									targetlistId : C,
									iconCls : "pwndnewCRM targetlistTabicon"
								});
								this.mainTab.add(A)
							}
							this.mainTab.setActiveTab(A);
							this.mainTab.doLayout()
						}
					},
					getList : function() {
						var A = this.targetGrid.getSelectionModel()
								.getSelections();
						return A
					},
					getName : function() {
						return this.name.getValue().trim()
					},
					getSenderMail : function() {
						return this.userMailCombo.getValue().trim()
					},
					getFromName : function() {
						return this.fromname.getValue().trim()
					},
					getReplyMail : function() {
						return this.replayMail.getValue().trim()
					}
				});
Wtf.campaignMailEditor = function(A) {
	Wtf.apply(this, A);
	Wtf.campaignMailEditor.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.campaignMailEditor, Wtf.Panel, {
	layout : "fit",
	bodyStyle : "background-color: white;",
	border : false,
	onRender : function(A) {
		Wtf.campaignMailEditor.superclass.onRender.call(this, A);
		this.templateEditor = new Wtf.Panel({
			region : "center",
			baseCls : "bodytest",
			split : true,
			tbar : [ {
				text : "Send Test Mail",
				iconCls : "pwnd pmsgbtnicon",
				handler : this.previewTemplate,
				scope : this
			} ],
			collapsible : false
		});
		this.themePanel = new Wtf.colorThemePanel({
			region : "east",
			layout : "fit",
			plugins : new Wtf.ux.collapsedPanelTitlePlugin(),
			title : "Design Themes",
			maxWidth : 300,
			width : 300,
			split : true,
			collapsible : true
		});
		this.themePanel.on("colorThemeSelect", this.applyColorTheme, this);
		this.editorCont = new Wtf.Panel({
			bodyStyle : "background-color: white",
			autoScroll : true,
			layout : "border",
			items : [ this.templateEditor, this.themePanel ],
			border : false
		});
		this.templateEditor.on("render", function() {
			var B = "";
			this.editorHtmlComp = new Wtf.emailTemplatePanel({
				renderTo : this.templateEditor.body.dom,
				bodyHtml : B
			});
			if (this.mode != 1) {
				this.getTemplateContent()
			} else {
				this.getEmailMarketingContent()
			}
		}, this);
		this.add(this.editorCont)
	},
	getEmailMarketingContent : function() {
		Wtf.Ajax.requestEx({
			url : Wtf.req.base + "campaign.jsp",
			params : {
				flag : 26,
				marketid : this.marketRec.id
			}
		}, this, function(B, A) {
			if (B.success) {
				this.editorHtmlComp.setBodyHtml(unescape(B.data.html));
				if (B.data.theme) {
					this.themePanel.getThemeFromId(B.data.theme)
				}
			}
		}, function() {
			ResponseAlert([ "Failure", "Failed to Email Marketing content." ])
		})
	},
	getTemplateContent : function() {
		Wtf.Ajax.requestEx({
			url : Wtf.req.base + "campaign.jsp",
			params : {
				flag : 27,
				templateid : this.templateid
			}
		}, this, function(B, A) {
			if (B.success) {
				this.editorHtmlComp.setBodyHtml(unescape(B.data.html))
			}
		}, function() {
			ResponseAlert([ "Failure", "Failed to get Template content." ])
		})
	},
	getColorTheme : function() {
		return this.colortheme
	},
	getPlainMessage : function() {
		return this.editorHtmlComp.getPlainText()
	},
	applyColorTheme : function(B, A) {
		this.colortheme = A.data["id"];
		this.editorHtmlComp.applyNewColorTheme(A)
	},
	expandThemePanel : function() {
		var A = this.themePanel.getSize();
		A.width = 300;
		this.themePanel.setSize(A)
	},
	previewTemplate : function() {
		Wtf.Ajax.requestEx({
			url : Wtf.req.base + "sendMail.jsp",
			params : {
				tid : this.templateid,
				bodyhtml : this.editorHtmlComp.getPreviewHtml()
			}
		}, this, function(B, A) {
			ResponseAlert([ WtfGlobal.getLocaleText("hrms.common.success"),
					"Mail sent successfully." ])
		}, function(B, A) {
			ResponseAlert([ "Failure", "Failed to send mail." ])
		})
	},
	changeTemplate : function(A) {
		if (A !== undefined) {
			this.templateid = A.data.templateid;
			this.templateRec = A;
			this.getTemplateContent()
		}
	},
	getTemplateHtml : function() {
		return this.editorHtmlComp.getPreviewHtml()
	},
	setTemplateHtml : function(A) {
		this.editorHtmlComp.setBodyHtml(A)
	}
});
Wtf.colorThemePanel = function(A) {
	Wtf.apply(this, A);
	this.addEvents({
		"colorThemeSelect" : true
	});
	Wtf.colorThemePanel.superclass.constructor.call(this, {
		layout : "column",
		autoHeight : true,
		border : false
	})
};
Wtf
		.extend(
				Wtf.colorThemePanel,
				Wtf.Panel,
				{
					onRender : function(A) {
						Wtf.colorThemePanel.superclass.onRender.call(this, A);
						this.addCategoryGrid();
						this.addColorThemeGrid()
					},
					addColorThemeGrid : function() {
						this.ctRec = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "theme"
						}, {
							name : "background"
						}, {
							name : "headerbackground"
						}, {
							name : "headertext"
						}, {
							name : "footerbackground"
						}, {
							name : "footertext"
						}, {
							name : "bodybackground"
						}, {
							name : "bodytext"
						}, {
							name : "groupid"
						} ]);
						this.ctStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 24
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, this.ctRec)
						});
						this.ctStore.on("load", function() {
							this.themeLoaded = true
						}, this);
						this.ctStore.load();
						var A = new Wtf.grid.ColumnModel(
								[ {
									header : "Name",
									dataIndex : "theme",
									renderer : function(D, B, C) {
										return "<div class='themeImage'><div class='themeImgBox' style='background-color:#"
												+ C.data.background
												+ "'></div><div class='themeImgBox' style='background-color:#"
												+ C.data.headerbackground
												+ "'></div><div class='themeImgBox' style='background-color:#"
												+ C.data.headertext
												+ "'></div><div class='themeImgBox' style='background-color:#"
												+ C.data.footerbackground
												+ "'></div><div class='themeImgBox' style='background-color:#"
												+ C.data.bodybackground
												+ "'></div></div><span style='margin-left: 8px;'>"
												+ D + "</span>"
									}
								} ]);
						this.colorSM = new Wtf.grid.RowSelectionModel({
							singleSelect : true
						});
						this.themeGrid = new Wtf.grid.GridPanel({
							cm : A,
							cls : "noborderGrid themeGrid",
							title : "Themes",
							ds : this.ctStore,
							autoScroll : true,
							sm : this.colorSM,
							columnWidth : 1,
							height : 250,
							viewConfig : {
								forceFit : true
							}
						});
						this.colorSM.on("rowselect", this.changeColorTheme,
								this);
						this.add(this.themeGrid)
					},
					getThemeFromId : function(A) {
						if (this.themeLoaded) {
							this.getTheme()
						} else {
							this.thm = A;
							this.ctStore.on("load", this.getTheme, this)
						}
					},
					getTheme : function() {
						var A = this.ctStore.findBy(function(B) {
							if (B.data.id == this.thm) {
								return true
							} else {
								return false
							}
						}, this);
						if (A != -1) {
							this.colorSM.selectRow(A)
						}
					},
					addCategoryGrid : function() {
						var B = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "groupname"
						} ]);
						this.categoryStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 25
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, B)
						});
						this.categoryStore.load();
						var A = new Wtf.grid.ColumnModel([ {
							header : "Name",
							dataIndex : "groupname"
						} ]);
						this.categorySM = new Wtf.grid.RowSelectionModel({
							singleSelect : true
						});
						this.categoryGrid = new Wtf.grid.GridPanel({
							cm : A,
							cls : "noborderGrid themeGrid",
							ds : this.categoryStore,
							columnWidth : 1,
							sm : this.categorySM,
							height : 150,
							title : "Categories",
							viewConfig : {
								forceFit : true
							}
						});
						this.categorySM.on("rowselect", this.filterColorTheme,
								this);
						this.categorySM.on("rowdeselect",
								this.shoAllColorTheme, this);
						this.add(this.categoryGrid)
					},
					changeColorTheme : function(B, A, C) {
						this.fireEvent("colorThemeSelect", this, C)
					},
					useDefaultColorTheme : function(B, A, C) {
						ResponseAlert([ "Alert",
								"Change to default color theme" ])
					},
					filterColorTheme : function(B, A, C) {
						this.ctStore.filter("groupid", C.data["id"])
					},
					shoAllColorTheme : function(B, A, C) {
					}
				});
Wtf.emailTemplatePanel = function(A) {
	Wtf.apply(this, A);
	Wtf.emailTemplatePanel.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.emailTemplatePanel,
				Wtf.Component,
				{
					onRender : function(D) {
						Wtf.emailTemplatePanel.superclass.onRender
								.call(this, D);
						this.elDom = Wtf.get(this.renderTo).createChild({
							tag : "div",
							cls : "templateCompCont"
						});
						this.table1 = document.createElement("table");
						this.table1.setAttribute("cellspacing", 0);
						this.table1.setAttribute("width", "100%");
						this.table1.style.backgroundColor = "#FFFFCC";
						var F = document.createElement("tbody");
						var G = document.createElement("tr");
						var C = document.createElement("td");
						C.setAttribute("align", "center");
						G.appendChild(C);
						F.appendChild(G);
						this.table1.appendChild(F);
						var B = document.createElement("table");
						B.setAttribute("cellspacing", 0);
						B.setAttribute("cellpadding", 0);
						B.setAttribute("width", "600");
						var A = document.createElement("tbody");
						var E = document.createElement("tr");
						this.contentHolder = document.createElement("td");
						E.appendChild(this.contentHolder);
						A.appendChild(E);
						B.appendChild(A);
						C.appendChild(B);
						this.contentHolder.innerHTML = this.bodyHtml;
						Wtf.get(this.contentHolder).addListener("click",
								this.contentClicked);
						this.elDom.appendChild(this.table1)
					},
					setBodyHtml : function(A) {
						this.table1.style.backgroundColor = "#FFFFCC";
						this.contentHolder.innerHTML = A
					},
					getPreviewHtml : function() {
						return this.elDom.dom.innerHTML
					},
					contentClicked : function(C) {
						var A = C.target;
						if (A.className.indexOf("tpl-content") != -1
								|| A.className.indexOf("tpl-content-image") != -1) {
							var B = new Wtf.editorWindow(
									{
										headerImage : (A.className == "tpl-content-image"),
										val : A.innerHTML,
										parentCont : A
									});
							B
									.on(
											"okClicked",
											function(E) {
												var D = E.getEditorVal();
												E.parentCont.innerHTML = D.textVal;
												if (D.imageRec) {
													E.parentCont.parentNode.style.height = D.imageRec.data["height"]
															+ "px";
													E.parentCont.parentNode.style.background = "url("
															+ D.imageRec.data["url"]
															+ ") no-repeat"
												}
											}, this);
							B.show()
						}
					},
					getPlainText : function() {
						var A = this.elDom.dom.innerHTML;
						A = A.replace(/<p>/g, "");
						A = A.replace(/<\p>/g, "");
						A = A.replace(/<P>/g, "");
						A = A.replace(/<\P>/g, "");
						A = A.replace(/&nbsp;/g, "");
						A = Wtf.util.Format.stripTags(A);
						return A
					},
					applyNewColorTheme : function(C) {
						if (C) {
							this.table1.style.backgroundColor = "#"
									+ C.data.background;
							var E = Wtf.select(".headerTop", true, this.table1);
							if (E.elements.length > 0) {
								E = E.elements[0].dom;
								E.style.backgroundColor = "#"
										+ C.data.headerbackground;
								E.style.color = "#" + C.data.headertext
							}
							var D = Wtf.select(".footerRow", true, this.table1);
							if (D.elements.length > 0) {
								D = D.elements[0].dom;
								D.style.backgroundColor = "#"
										+ C.data.footerbackground;
								var B = Wtf.select(".footerText", true, D);
								if (B.elements.length != 0) {
									B.elements[0].dom.style.color = "#"
											+ C.data.footertext
								}
							}
							var A = Wtf.select(".defaultText", true,
									this.table1);
							if (A.elements.length > 0) {
								A = A.elements[0].dom;
								A.style.backgroundColor = "#"
										+ C.data.bodybackground;
								A.style.color = "#" + C.data.bodytext
							}
						}
					}
				});
Wtf.editorWindow = function(A) {
	Wtf.apply(this, A);
	this.addEvents({
		"okClicked" : true
	});
	Wtf.editorWindow.superclass.constructor.call(this, {
		width : 820,
		height : 580,
		resizable : false,
		layout : "fit",
		title : (this.title && this.title != "") ? this.title
				: "Edit Your Content",
		modal : true,
		buttons : [ {
			text : "Ok",
			scope : this,
			handler : this.okClicked
		}, {
			text : WtfGlobal.getLocaleText("hrms.common.cancel"),
			scope : this,
			handler : this.cancelClicked
		} ]
	})
};
Wtf
		.extend(
				Wtf.editorWindow,
				Wtf.Window,
				{
					onRender : function(C) {
						Wtf.editorWindow.superclass.onRender.call(this, C);
						var E = [];
						this.careteEditor();
						if (this.headerImage) {
							var D = Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "name"
							}, {
								name : "url"
							}, {
								name : "height"
							} ]);
							var B = new Wtf.data.Store({
								url : Wtf.req.base + "getFiles.jsp",
								baseParams : {
									action : 3
								},
								reader : new Wtf.data.KwlJsonReader({
									root : "data"
								}, D)
							});
							B.load();
							var A = new Wtf.grid.ColumnModel([ {
								header : "Name",
								dataIndex : "name"
							} ]);
							var F = new Wtf.grid.RowSelectionModel({
								singleSelect : true
							});
							F
									.on(
											"rowSelect",
											function(H, G, I) {
												document
														.getElementById("email_campaign_header_image").src = I.data.url
											}, this);
							this.imageGrid = new Wtf.grid.GridPanel({
								store : B,
								cm : A,
								height : 200,
								cls : "noborderGrid",
								layout : "fit",
								sm : F,
								border : false,
								viewConfig : {
									forceFit : true
								}
							});
							E[E.length] = new Wtf.Panel(
									{
										layout : "column",
										region : "north",
										border : false,
										height : 200,
										items : [
												{
													border : false,
													height : 200,
													columnWidth : 0.2,
													items : this.imageGrid
												},
												{
													columnWidth : 0.79,
													autoScroll : true,
													border : false,
													height : 200,
													bodyStyle : "text-align: center",
													html : "<img id='email_campaign_header_image' style='margin-top: 5px' src='' />"
												} ]
									})
						}
						E[E.length] = new Wtf.Panel({
							layout : "fit",
							region : "center",
							items : [ this.mce ]
						});
						this.add(new Wtf.Panel({
							layout : "border",
							items : E
						}))
					},
					careteEditor : function() {
						this.mce = new Wtf.form.HtmlEditor(
								{
									value : this.val,
									plugins : [
											new Wtf.ux.form.HtmlEditor.insertImage(
													{
														imageStoreURL : Wtf.req.base
																+ "getFiles.jsp?action=1&type=img",
														imageUploadURL : Wtf.req.base
																+ "getFiles.jsp?action=2&type=img"
													}),
											new Wtf.ux.form.HtmlEditor.HR({}),
											new Wtf.ux.form.HtmlEditor.SpecialCharacters(
													{}) ]
								})
					},
					showTagList : function() {
						var D = new Wtf.data.SimpleStore({
							fields : [ "id", "value", "notation" ],
							data : [ [ "0", "Email Address", "{emailid}" ],
									[ "1", "First Name", "{firstname}" ],
									[ "2", "Last Name", "{lastname}" ] ]
						});
						var C = new Wtf.grid.ColumnModel([ {
							header : "To Insert",
							dataIndex : "value"
						}, {
							header : "Use This",
							dataIndex : "notation"
						} ]);
						var B = new Wtf.grid.GridPanel({
							layout : "fit",
							cm : C,
							store : D,
							viewConfig : {
								forceFit : true
							}
						});
						var A = new Wtf.Window({
							title : "Tag list",
							layout : "fit",
							modal : true,
							resizable : false,
							height : 250,
							width : 440,
							buttons : [ {
								text : WtfGlobal
										.getLocaleText("hrms.common.Close"),
								handler : function() {
									A.close()
								}
							} ],
							items : B
						});
						A.show()
					},
					okClicked : function(A) {
						if (this.fireEvent("okClicked", this)) {
							this.close()
						}
					},
					cancelClicked : function(A) {
						this.close()
					},
					getEditorVal : function() {
						var A = {};
						A["textVal"] = this.mce.getValue();
						if (this.headerImage) {
							A["imageRec"] = this.imageGrid.getSelectionModel()
									.getSelected()
						}
						return A
					}
				});
Wtf.ns("Wtf.ux.form.HtmlEditor");
Wtf.ux.form.HtmlEditor.MidasCommand = Wtf
		.extend(
				Wtf.util.Observable,
				{
					init : function(A) {
						this.cmp = A;
						this.btns = [];
						this.cmp.on("render", this.onRender, this);
						this.cmp.on("initialize", this.onInit, this, {
							delay : 100,
							single : true
						})
					},
					onInit : function() {
						Wtf.EventManager.on(this.cmp.getDoc(), {
							"mousedown" : this.onEditorEvent,
							"dblclick" : this.onEditorEvent,
							"click" : this.onEditorEvent,
							"keyup" : this.onEditorEvent,
							buffer : 100,
							scope : this
						})
					},
					onRender : function() {
						var C, A = this.cmp.getToolbar(), B;
						Wtf.each(this.midasBtns, function(D) {
							if (Wtf.isObject(D)) {
								C = {
									iconCls : "x-edit-" + D.cmd,
									handler : function() {
										this.cmp.relayCmd(D.cmd)
									},
									scope : this,
									tooltip : D.tooltip || {
										title : D.title
									},
									overflowText : D.overflowText || D.title
								}
							} else {
								C = new Wtf.Toolbar.Separator()
							}
							B = A.addButton(C);
							if (D.enableOnSelection) {
								B.disable()
							}
							this.btns.push(B)
						}, this)
					},
					onEditorEvent : function() {
						var A = this.cmp.getDoc();
						Wtf
								.each(
										this.btns,
										function(B, C) {
											if (this.midasBtns[C].enableOnSelection
													|| this.midasBtns[C].disableOnSelection) {
												if (A.getSelection) {
													if ((this.midasBtns[C].enableOnSelection && A
															.getSelection() !== "")
															|| (this.midasBtns[C].disableOnSelection && A
																	.getSelection() === "")) {
														B.enable()
													} else {
														B.disable()
													}
												} else {
													if (A.selection) {
														if ((this.midasBtns[C].enableOnSelection && A.selection
																.createRange().text !== "")
																|| (this.midasBtns[C].disableOnSelection && A.selection
																		.createRange().text === "")) {
															B.enable()
														} else {
															B.disable()
														}
													}
												}
											}
											if (this.midasBtns[C].monitorCmdState) {
												B
														.toggle(A
																.queryCommandState(this.midasBtns[C].cmd))
											}
										}, this)
					}
				});
Wtf.ux.form.HtmlEditor.Divider = Wtf.extend(Wtf.util.Observable, {
	init : function(A) {
		this.cmp = A;
		this.cmp.on("render", this.onRender, this)
	},
	onRender : function() {
		this.cmp.getToolbar().addButton([ new Wtf.Toolbar.Separator() ])
	}
});
Wtf.ux.form.HtmlEditor.IndentOutdent = Wtf.extend(
		Wtf.ux.form.HtmlEditor.MidasCommand, {
			midasBtns : [ "|", {
				cmd : "indent",
				tooltip : {
					title : "Indent Text"
				},
				overflowText : "Indent Text"
			}, {
				cmd : "outdent",
				tooltip : {
					title : "Outdent Text"
				},
				overflowText : "Outdent Text"
			} ]
		});
Wtf.ux.form.HtmlEditor.RemoveFormat = Wtf.extend(
		Wtf.ux.form.HtmlEditor.MidasCommand, {
			midasBtns : [ "|", {
				enableOnSelection : true,
				cmd : "removeFormat",
				tooltip : {
					title : "Remove Formatting"
				},
				overflowText : "Remove Formatting"
			} ]
		});
Wtf.ux.form.HtmlEditor.SubSuperScript = Wtf.extend(
		Wtf.ux.form.HtmlEditor.MidasCommand, {
			midasBtns : [ "|", {
				enableOnSelection : true,
				cmd : "subscript",
				tooltip : {
					title : "Subscript"
				},
				overflowText : "Subscript"
			}, {
				enableOnSelection : true,
				cmd : "superscript",
				tooltip : {
					title : "Superscript"
				},
				overflowText : "Superscript"
			} ]
		});
Wtf.ux.form.HtmlEditor.SpecialCharacters = Wtf
		.extend(
				Wtf.util.Observable,
				{
					specialChars : [],
					charRange : [ 160, 256 ],
					init : function(A) {
						this.cmp = A;
						this.cmp.on("render", this.onRender, this)
					},
					onRender : function() {
						var B = this.cmp;
						var A = this.cmp
								.getToolbar()
								.addButton(
										{
											iconCls : "x-edit-char",
											handler : function() {
												if (this.specialChars.length == 0) {
													Wtf
															.each(
																	this.specialChars,
																	function(E,
																			D) {
																		this.specialChars[D] = [ "&#"
																				+ E
																				+ ";" ]
																	}, this);
													for (i = this.charRange[0]; i < this.charRange[1]; i++) {
														this.specialChars
																.push([ "&#"
																		+ i
																		+ ";" ])
													}
												}
												var C = new Wtf.data.SimpleStore(
														{
															fields : [ "char" ],
															data : this.specialChars
														});
												this.charWindow = new Wtf.Window(
														{
															title : "Insert Special Character",
															iconCls : getButtonIconCls(Wtf.btype.winicon),
															width : 436,
															resizable : false,
															modal : true,
															autoHeight : true,
															layout : "fit",
															items : [ this.charView = new Wtf.DataView(
																	{
																		style : "background-color:white;",
																		store : C,
																		autoHeight : true,
																		multiSelect : true,
																		tpl : new Wtf.XTemplate(
																				'<tpl for="."><div class="char-item">{char}</div></tpl><div class="x-clear"></div>'),
																		overClass : "char-over",
																		itemSelector : "div.char-item",
																		listeners : {
																			dblclick : function(
																					E,
																					D,
																					G,
																					F) {
																				this
																						.insertChar(E
																								.getStore()
																								.getAt(
																										D)
																								.get(
																										"char"));
																				this.charWindow
																						.close()
																			},
																			scope : this
																		}
																	}) ],
															buttons : [
																	{
																		text : "Insert",
																		handler : function() {
																			Wtf
																					.each(
																							this.charView
																									.getSelectedRecords(),
																							function(
																									D) {
																								var E = D
																										.get("char");
																								this
																										.insertChar(E)
																							},
																							this);
																			this.charWindow
																					.close()
																		},
																		scope : this
																	},
																	{
																		text : WtfGlobal
																				.getLocaleText("hrms.common.cancel"),
																		handler : function() {
																			this.charWindow
																					.close()
																		},
																		scope : this
																	} ]
														});
												this.charWindow.show()
											},
											scope : this,
											tooltip : {
												title : "Insert Special Character"
											},
											overflowText : "Special Characters"
										})
					},
					insertChar : function(A) {
						if (A) {
							this.cmp.insertAtCursor(A)
						}
					}
				});
Wtf.ux.form.HtmlEditor.customButton = function(A) {
	Wtf.apply(this, A)
};
Wtf.ux.form.HtmlEditor.customButton = Wtf.extend(
		Wtf.ux.form.HtmlEditor.customButton, Wtf.util.Observable, {
			init : function(A) {
				this.cmp = A;
				this.cmp.on("render", this.onRender, this)
			},
			onRender : function() {
				if (!this.buttonConf.scope) {
					this.buttonConf.scope = this
				}
				this.btn = this.cmp.getToolbar().addButton(this.buttonConf)
			}
		});
Wtf.ux.form.HtmlEditor.Table = Wtf
		.extend(
				Wtf.util.Observable,
				{
					cmd : "table",
					tableBorderOptions : [ [ "none", "None" ],
							[ "1px solid #000", "Sold Thin" ],
							[ "2px solid #000", "Solid Thick" ],
							[ "1px dashed #000", "Dashed" ],
							[ "1px dotted #000", "Dotted" ] ],
					init : function(A) {
						this.cmp = A;
						this.cmp.on("render", this.onRender, this)
					},
					onRender : function() {
						var A = this.cmp
								.getToolbar()
								.addButton(
										{
											iconCls : "x-edit-table",
											handler : function() {
												if (!this.tableWindow) {
													this.tableWindow = new Wtf.Window(
															{
																title : "Insert Table",
																closeAction : "hide",
																items : [ {
																	itemId : "insert-table",
																	xtype : "form",
																	border : false,
																	plain : true,
																	bodyStyle : "padding: 10px;",
																	labelWidth : 60,
																	labelAlign : "right",
																	items : [
																			{
																				xtype : "numberfield",
																				allowBlank : false,
																				allowDecimals : false,
																				fieldLabel : "Rows",
																				name : "row",
																				width : 60
																			},
																			{
																				xtype : "numberfield",
																				allowBlank : false,
																				allowDecimals : false,
																				fieldLabel : "Columns",
																				name : "col",
																				width : 60
																			},
																			{
																				xtype : "combo",
																				fieldLabel : "Border",
																				name : "border",
																				forceSelection : true,
																				mode : "local",
																				store : new Wtf.data.ArrayStore(
																						{
																							autoDestroy : true,
																							fields : [
																									"spec",
																									"val" ],
																							data : this.tableBorderOptions
																						}),
																				triggerAction : "all",
																				value : "none",
																				displayField : "val",
																				valueField : "spec",
																				width : 90
																			} ]
																} ],
																buttons : [
																		{
																			text : "Insert",
																			handler : function() {
																				var F = this.tableWindow
																						.getComponent(
																								"insert-table")
																						.getForm();
																				if (F
																						.isValid()) {
																					var D = F
																							.findField(
																									"border")
																							.getValue();
																					var B = [
																							F
																									.findField(
																											"row")
																									.getValue(),
																							F
																									.findField(
																											"col")
																									.getValue() ];
																					if (B.length == 2
																							&& B[0] > 0
																							&& B[0] < 10
																							&& B[1] > 0
																							&& B[1] < 10) {
																						var E = "<table>";
																						for ( var G = 0; G < B[0]; G++) {
																							E += "<tr>";
																							for ( var C = 0; C < B[1]; C++) {
																								E += "<td width='20%' style='border: "
																										+ D
																										+ ";'>"
																										+ G
																										+ "-"
																										+ C
																										+ "</td>"
																							}
																							E += "</tr>"
																						}
																						E += "</table>";
																						this.cmp
																								.insertAtCursor(E)
																					}
																					this.tableWindow
																							.hide()
																				} else {
																					if (!F
																							.findField(
																									"row")
																							.isValid()) {
																						F
																								.findField(
																										"row")
																								.getEl()
																								.frame()
																					} else {
																						if (!F
																								.findField(
																										"col")
																								.isValid()) {
																							F
																									.findField(
																											"col")
																									.getEl()
																									.frame()
																						}
																					}
																				}
																			},
																			scope : this
																		},
																		{
																			text : WtfGlobal
																					.getLocaleText("hrms.common.cancel"),
																			handler : function() {
																				this.tableWindow
																						.hide()
																			},
																			scope : this
																		} ]
															})
												} else {
													this.tableWindow.getEl()
															.frame()
												}
												this.tableWindow.show()
											},
											scope : this,
											tooltip : {
												title : "Insert Table"
											},
											overflowText : "Table"
										})
					}
				});
Wtf.ux.form.HtmlEditor.Word = Wtf
		.extend(
				Wtf.util.Observable,
				{
					curLength : 0,
					lastLength : 0,
					lastValue : "",
					wordPasteEnabled : true,
					init : function(A) {
						this.cmp = A;
						this.cmp.on("render", this.onRender, this);
						this.cmp.on("initialize", this.onInit, this, {
							delay : 100,
							single : true
						})
					},
					onInit : function() {
						Wtf.EventManager.on(this.cmp.getDoc(), {
							"keyup" : this.checkIfPaste,
							scope : this
						});
						this.lastValue = this.cmp.getValue();
						this.curLength = this.lastValue.length;
						this.lastLength = this.lastValue.length
					},
					checkIfPaste : function(C) {
						var A = 0;
						this.curLength = this.cmp.getValue().length;
						if (C.V == C.getKey() && C.ctrlKey
								&& this.wordPasteEnabled) {
							this.cmp.suspendEvents();
							A = this.findValueDiffAt(this.cmp.getValue());
							var B = [
									this.cmp.getValue().substr(0, A),
									this
											.fixWordPaste(this.cmp
													.getValue()
													.substr(
															A,
															(this.curLength - this.lastLength))),
									this.cmp.getValue().substr(
											(this.curLength - this.lastLength)
													+ A, this.curLength) ];
							this.cmp.setValue(B.join(""));
							this.cmp.resumeEvents()
						}
						this.lastLength = this.cmp.getValue().length;
						this.lastValue = this.cmp.getValue()
					},
					findValueDiffAt : function(A) {
						for (i = 0; i < this.curLength; i++) {
							if (this.lastValue[i] != A[i]) {
								return i
							}
						}
					},
					fixWordPaste : function(A) {
						var B = [
								/&nbsp;/ig,
								/[\r\n]/g,
								/<(xml|style)[^>]*>.*?<\/\1>/ig,
								/<\/?(meta|object|span)[^>]*>/ig,
								/<\/?[A-Z0-9]*:[A-Z]*[^>]*>/ig,
								/(lang|class|type|href|name|title|id|clear)=\"[^\"]*\"/ig,
								/style=(\'\'|\"\")/ig, /<![\[-].*?-*>/g,
								/MsoNormal/g, /<\\?\?xml[^>]*>/g,
								/<\/?o:p[^>]*>/g, /<\/?v:[^>]*>/g,
								/<\/?o:[^>]*>/g, /<\/?st1:[^>]*>/g, /&nbsp;/g,
								/<\/?SPAN[^>]*>/g, /<\/?FONT[^>]*>/g,
								/<\/?STRONG[^>]*>/g, /<\/?H1[^>]*>/g,
								/<\/?H2[^>]*>/g, /<\/?H3[^>]*>/g,
								/<\/?H4[^>]*>/g, /<\/?H5[^>]*>/g,
								/<\/?H6[^>]*>/g, /<\/?P[^>]*><\/P>/g,
								/<!--(.*)-->/g, /<!--(.*)>/g, /<!(.*)-->/g,
								/<\\?\?xml[^>]*>/g, /<\/?o:p[^>]*>/g,
								/<\/?v:[^>]*>/g, /<\/?o:[^>]*>/g,
								/<\/?st1:[^>]*>/g, /style=\"[^\"]*\"/g,
								/style=\'[^\"]*\'/g, /lang=\"[^\"]*\"/g,
								/lang=\'[^\"]*\'/g, /class=\"[^\"]*\"/g,
								/class=\'[^\"]*\'/g, /type=\"[^\"]*\"/g,
								/type=\'[^\"]*\'/g, /href=\'#[^\"]*\'/g,
								/href=\"#[^\"]*\"/g, /name=\"[^\"]*\"/g,
								/name=\'[^\"]*\'/g, / clear=\"all\"/g,
								/id=\"[^\"]*\"/g, /title=\"[^\"]*\"/g,
								/<span[^>]*>/g, /<\/?span[^>]*>/g, /class=/g ];
						Wtf.each(B, function(C) {
							A = A.replace(C, "")
						});
						A = A.replace(/<div[^>]*>/g, "<p>");
						A = A.replace(/<\/?div[^>]*>/g, "</p>");
						return A
					},
					onRender : function() {
						this.cmp
								.getToolbar()
								.add(
										{
											iconCls : "x-edit-wordpaste",
											pressed : true,
											handler : function(A) {
												A.toggle(!A.pressed);
												this.wordPasteEnabled = !this.wordPasteEnabled
											},
											scope : this,
											tooltip : {
												text : "Cleanse text pasted from Word or other Rich Text applications"
											}
										})
					}
				});
Wtf.ux.form.HtmlEditor.HR = Wtf
		.extend(
				Wtf.util.Observable,
				{
					cmd : "hr",
					init : function(A) {
						this.cmp = A;
						this.cmp.on("render", this.onRender, this)
					},
					onRender : function() {
						var B = this.cmp;
						var A = this.cmp
								.getToolbar()
								.addButton(
										{
											iconCls : "x-edit-hr",
											handler : function() {
												if (!this.hrWindow) {
													this.hrWindow = new Wtf.Window(
															{
																width : 200,
																title : "Insert Rule",
																closeAction : "hide",
																iconCls : getButtonIconCls(Wtf.btype.winicon),
																items : [ {
																	itemId : "insert-hr",
																	xtype : "form",
																	border : false,
																	plain : true,
																	bodyStyle : "padding: 10px;",
																	labelWidth : 60,
																	labelAlign : "right",
																	items : [ {
																		xtype : "textfield",
																		maskRe : /[0-9]|%/,
																		regex : /^[1-9][0-9%]{1,3}/,
																		fieldLabel : "Width",
																		name : "hrwidth",
																		width : 60,
																		listeners : {
																			specialkey : function(
																					C,
																					D) {
																				if ((D
																						.getKey() == D.ENTER || D
																						.getKey() == D.RETURN)
																						&& C
																								.isValid()) {
																					this
																							.doInsertHR()
																				} else {
																					C
																							.getEl()
																							.frame()
																				}
																			},
																			scope : this
																		}
																	} ]
																} ],
																buttons : [
																		{
																			text : "Insert",
																			handler : function() {
																				var C = this.hrWindow
																						.getComponent(
																								"insert-hr")
																						.getForm();
																				if (C
																						.isValid()) {
																					this
																							.doInsertHR()
																				} else {
																					C
																							.findField(
																									"hrwidth")
																							.getEl()
																							.frame()
																				}
																			},
																			scope : this
																		},
																		{
																			text : WtfGlobal
																					.getLocaleText("hrms.common.cancel"),
																			handler : function() {
																				this.hrWindow
																						.hide()
																			},
																			scope : this
																		} ]
															})
												} else {
													this.hrWindow.getEl()
															.frame()
												}
												this.hrWindow.show()
											},
											scope : this,
											tooltip : {
												title : "Insert Horizontal Rule"
											},
											overflowText : "Horizontal Rule"
										})
					},
					doInsertHR : function() {
						var B = this.hrWindow.getComponent("insert-hr")
								.getForm();
						if (B.isValid()) {
							var A = B.findField("hrwidth").getValue();
							if (A) {
								this.insertHR(A)
							} else {
								this.insertHR("100%")
							}
							B.reset();
							this.hrWindow.hide()
						}
					},
					insertHR : function(A) {
						this.cmp.insertAtCursor('<hr width="' + A + '">')
					}
				});
Wtf.ux.form.HtmlEditor.insertImage = Wtf
		.extend(
				function(A) {
					Wtf.apply(this, A)
				},
				Wtf.util.Observable,
				{
					init : function(A) {
						this.cmp = A;
						this.uType = "upload";
						this.cmp.on("render", this.onRender, this)
					},
					onRender : function() {
						var A = this.cmp.getToolbar().addButton({
							iconCls : "x-edit-image",
							handler : this.uploadImage,
							scope : this,
							tooltip : {
								title : "Insert image"
							}
						})
					},
					uploadImage : function() {
						var imgRec = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "description"
						}, {
							name : "imgname"
						}, {
							name : "url"
						} ]);
						this.imageStore = new Wtf.data.Store({
							url : this.imageStoreURL,
							reader : new Wtf.data.KwlJsonReader({
								root : "data"
							}, imgRec)
						});
						this.imageStore
								.on(
										"load",
										function(obj, recs) {
											var _cobj = this.imageGrid.body.dom.childNodes;
											while (_cobj.length > 0) {
												Wtf.get(_cobj[0].id).remove()
											}
											for ( var cnt = 0; cnt < recs.length; cnt++) {
												new Wtf.emailTemplateThumbnail(
														{
															height : 75,
															width : 72,
															imgWidth : 40,
															imgHeight : 40,
															tqtip : recs[cnt].data["description"],
															tName : recs[cnt].data["imgname"],
															thumbnail : recs[cnt].data["url"],
															tempRec : recs[cnt],
															scope : this,
															listeners : {
																"templateSelected" : this.selectTemplate
															},
															renderTo : this.imageGrid.body.dom
														})
											}
										}, this);
						this.imageStore.load();
						this.imageGrid = new Wtf.Panel({
							autoScroll : true,
							height : 200,
							style : "margin-bottom: 10px;",
							layout : "fit"
						});
						this.uploadFieldSet = new Wtf.Panel(
								{
									disabledClass : "fieldsetDisabled",
									cls : "uploadImagePanel",
									bodyStyle : "border: 1px solid #B5B8C8; padding: 10px 10px 6px 10px;",
									layout : "form",
									autoHeight : true,
									items : [
											new Wtf.Button(
													{
														text : "Delete File",
														scope : this,
														style : "margin-bottom:10px;",
														handler : function() {
															if (this.selectedTemplate) {
																var selectImg = this.selectedTemplate.tempRec.data.id;
																Wtf.Ajax
																		.requestEx(
																				{
																					url : Wtf.req.base
																							+ "getFiles.jsp?action=4&type=img",
																					params : {
																						tempid : selectImg
																					}
																				},
																				this,
																				function(
																						action,
																						response) {
																					var resultobj = eval("("
																							+ action.data
																							+ ")");
																					if (resultobj.success == false) {
																						calMsgBoxShow(
																								[
																										WtfGlobal
																												.getLocaleText("hrms.common.warning"),
																										"Please select image." ],
																								2)
																					} else {
																						this.imageStore
																								.reload()
																					}
																				},
																				function() {
																					ResponseAlert([
																							"Failure",
																							"Failed to Delete file" ])
																				})
															} else {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.warning"),
																				"Please select image." ],
																		2)
															}
														}
													}),
											this.imageGrid,
											this.uploadForm = new Wtf.form.FormPanel(
													{
														border : false,
														cls : "upploadForm",
														fileUpload : true,
														layout : "column",
														url : this.imageUploadURL,
														labelWidth : 50,
														items : [
																{
																	columnWidth : 0.83,
																	border : false,
																	layout : "form",
																	items : [ {
																		xtype : "textfield",
																		width : 180,
																		allowBlank : false,
																		id : "imageField",
																		fieldLabel : "Image",
																		inputType : "file",
																		validator : WtfGlobal.validateImageFile,
																		invalidText : "File format must be .jpg/.jpeg/.gif/.bmp/.png etc."
																	} ]
																},
																{
																	columnWidth : 0.17,
																	border : false,
																	items : [ new Wtf.Button(
																			{
																				text : "Upload",
																				scope : this,
																				handler : function() {
																					if (!Wtf
																							.getCmp(
																									"imageField")
																							.isValid()) {
																						calMsgBoxShow(
																								[
																										WtfGlobal
																												.getLocaleText("hrms.common.warning"),
																										"Please upload valid image file." ],
																								2);
																						return
																					}
																					this.uploadForm.form
																							.submit({
																								scope : this,
																								success : function(
																										action,
																										response) {
																									this.imageStore
																											.reload();
																									Wtf
																											.getCmp(
																													"imageField")
																											.reset()
																								},
																								failure : function(
																										action,
																										response) {
																									ResponseAlert([
																											"Failure",
																											"Failed to upload file" ])
																								}
																							})
																				}
																			}) ]
																} ]
													}) ]
								});
						this.newImage = new Wtf.Panel(
								{
									border : false,
									items : [
											{
												xtype : "fieldset",
												layout : "column",
												autoHeight : true,
												items : [
														new Wtf.Panel(
																{
																	columnWidth : 0.5,
																	layout : "form",
																	labelWidth : 110,
																	border : false,
																	items : [ {
																		xtype : "radio",
																		scope : this,
																		uType : "upload",
																		listeners : {
																			"check" : this.radioChanged
																		},
																		checked : true,
																		id : "uploadlocal",
																		cls : "uploadTypeRadio",
																		name : "uploadtype",
																		fieldLabel : "Upload new Image"
																	} ]
																}),
														new Wtf.Panel(
																{
																	columnWidth : 0.45,
																	layout : "form",
																	labelWidth : 90,
																	border : false,
																	items : [ {
																		xtype : "radio",
																		uType : "url",
																		scope : this,
																		listeners : {
																			"check" : this.radioChanged
																		},
																		cls : "uploadTypeRadio",
																		id : "uploadremote",
																		name : "uploadtype",
																		fieldLabel : "Use Web URL"
																	} ]
																}) ]
											},
											this.uploadFieldSet,
											this.urlFieldSet = new Wtf.Panel(
													{
														cls : "uploadImagePanel",
														bodyStyle : "border: 1px solid #B5B8C8; padding: 10px 10px 6px 10px;",
														layout : "form",
														labelWidth : 70,
														disabledClass : "fieldsetDisabled",
														autoHeight : true,
														items : [ this.urlField = new Wtf.form.TextField(
																{
																	width : 280,
																	fieldLabel : "Image URL"
																}) ]
													}) ]
								});
						this.uploadImg = new Wtf.Window(
								{
									title : "Upload Image",
									bodyStyle : "background-color:#FFFFFF; padding:12px;",
									iconCls : getButtonIconCls(Wtf.btype.winicon),
									modal : true,
									resizable : false,
									height : 478,
									width : 450,
									items : this.newImage,
									buttons : [
											{
												text : "OK",
												scope : this,
												handler : this.uploadNewImage
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.uploadImg.close()
												}
											} ]
								});
						this.selectedTemplate = null;
						this.uploadImg.show()
					},
					selectTemplate : function(A) {
						if (this.scope.selectedTemplate) {
							this.scope.selectedTemplate.deselectTemplate()
						}
						A.selectTemplate();
						this.scope.selectedTemplate = A
					},
					radioChanged : function(A, B) {
						if (B) {
							if (Wtf.getCmp("uploadremote").rendered
									&& Wtf.getCmp("uploadlocal").rendered) {
								Wtf.getCmp("uploadremote").onClick();
								Wtf.getCmp("uploadlocal").onClick()
							}
							if (A.uType == "upload") {
								this.scope.uType = "upload";
								this.scope.uploadFieldSet.setVisible(true);
								this.scope.urlFieldSet.setVisible(false)
							} else {
								this.scope.uType = "url";
								this.scope.uploadFieldSet.setVisible(false);
								this.scope.urlFieldSet.setVisible(true)
							}
						}
					},
					uploadNewImage : function() {
						var A = false;
						if (this.uType == "upload") {
							if (this.selectedTemplate) {
								this
										.insertImage(this.selectedTemplate.thumbnail);
								A = true
							}
						} else {
							if (this.urlField.getValue().trim() != "") {
								this.insertImage(this.urlField.getValue()
										.trim());
								A = true
							}
						}
						if (A) {
							this.uploadImg.close()
						}
					},
					insertImage : function(A) {
						if (A) {
							this.cmp.insertAtCursor("<img src='" + A + "' />")
						}
					}
				});
Wtf.letterSenderWindow = function(A) {
	Wtf.apply(this, A);
	A.resizable = false;
	Wtf.letterSenderWindow.superclass.constructor
			.call(
					this,
					{
						buttons : [
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Send"),
									scope : this,
									handler : function() {
										if (!this.AddEditForm.form.isValid()) {
											return
										} else {
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.common.confirm"),
															WtfGlobal
																	.getLocaleText("hrms.common.Doyouwanttosendthisletter"),
															function(B) {
																if (B != "yes") {
																	this
																			.close()
																} else {
																	if (this.AddEdit == "Edit") {
																		var C = this.generaltaxgrid
																				.getSelectionModel();
																		C
																				.clearSelections()
																	}
																	Wtf.Ajax
																			.requestEx(
																					{
																						url : "Rec/Job/sendLetters.rec",
																						params : {
																							save : true,
																							templateid : this.letter
																									.getValue(),
																							userlist : this.userlist
																						}
																					},
																					this,
																					function(
																							D) {
																						if (D.msg == "null") {
																							Wtf.Msg
																									.alert(
																											WtfGlobal
																													.getLocaleText("hrms.common.Message"),
																											WtfGlobal
																													.getLocaleText("hrms.common.Erroroccouredatserverside"))
																						} else {
																							if (D.value == "failed") {
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.warning"),
																												""
																														+ D.msg
																																.substr(
																																		D.msg
																																				.indexOf(":") + 1,
																																		D.msg.length)
																														+ "" ],
																										2)
																							} else {
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.success"),
																												""
																														+ D.msg
																														+ "" ],
																										0)
																							}
																						}
																						Wtf
																								.getCmp(
																										"letterSenderListWindow_id")
																								.close()
																					},
																					function() {
																						Wtf.Msg
																								.alert(
																										WtfGlobal
																												.getLocaleText("hrms.common.Message"),
																										WtfGlobal
																												.getLocaleText("hrms.common.Someerroroccoured"))
																					})
																}
															}, this)
										}
									}
								},
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.cancel"),
									handler : function() {
										Wtf.getCmp("letterSenderListWindow_id")
												.close()
									},
									scope : this
								} ]
					})
};
Wtf
		.extend(
				Wtf.letterSenderWindow,
				Wtf.Window,
				{
					initComponent : function() {
						Wtf.letterSenderWindow.superclass.initComponent
								.call(this);
						this.GetNorthPanel();
						this.GetAddEditForm();
						this.mainPanel = new Wtf.Panel({
							layout : "border",
							border : false,
							items : [ this.northPanel, this.AddEditForm ]
						});
						this.add(this.mainPanel)
					},
					GetNorthPanel : function() {
						var C = this.AddEdit == "Edit" ? WtfGlobal
								.getLocaleText("hrms.recruitment.EditLetterList")
								: WtfGlobal
										.getLocaleText("hrms.recruitment.SendLetter");
						var A = this.AddEdit == "Edit" ? WtfGlobal
								.getLocaleText("hrms.recruitment.Fillupinformationeditletterlist")
								: WtfGlobal
										.getLocaleText("hrms.recruitment.Selectthelettertosend");
						var B = this.typeimage;
						this.northPanel = new Wtf.Panel(
								{
									region : "north",
									height : 90,
									border : false,
									bodyStyle : "backgroubodyStylend-color:white;padding:8px;border-bottom:1px solid #bfbfbf;background-color: white",
									html : getTopHtml(C, A, B)
								})
					},
					GetAddEditForm : function() {
						this.templateListRecord = Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						} ]);
						this.templateListStore = new Wtf.data.Store(
								{
									url : "Common/Template/getBriefTemplateList.common",
									reader : new Wtf.data.KwlJsonReader({
										root : "data"
									}, this.templateListRecord),
									baseParams : {
										type : "gettemplateList"
									}
								});
						this.templateListStore.load();
						this.letter = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.recruitment.LetterType")
											+ "*",
									editable : false,
									name : "selectletter",
									width : 200,
									labelWidth : 100,
									emptyText : WtfGlobal
											.getLocaleText("hrms.recruitment.SelectLetter"),
									allowBlank : false,
									store : this.templateListStore,
									displayField : "name",
									valueField : "id",
									typeAhead : true,
									mode : "local",
									triggerAction : "all"
								});
						this.AddEditForm = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									scope : this,
									bodyStyle : "background-color:#f1f1f1;padding:15px",
									items : [ this.letter ]
								})
					}
				});
Wtf.highLightGlobal = function(B, C, D, A) {
	if (B != undefined) {
		this.row = Wtf.highLightSearch(B, D, A);
		if (this.row != null) {
			if (A != "activityid") {
				Wtf.highLightRow(C, "FFFF00", 2, this.row)
			} else {
				Wtf.highLightText(C, "FFFF00", 2, this.row)
			}
		}
	}
};
Wtf.highLightSearch = function(B, D, A) {
	var C = D.findBy(function(E) {
		if (E.get(A) == B) {
			return true
		} else {
			return false
		}
	});
	if (C == -1) {
		return null
	}
	return C
};
Wtf.deleteGlobal = function(C, G, K, L, A, M, J, I, H, F) {
	var N = C.getSelectionModel().getSelections();
	var E = 60;
	C.getSelectionModel().clearSelections();
	if (N.length > 0) {
		var D = Wtf.getCmp("tree");
		var B = D.getNodeById(F);
		Wtf.onlyhighLightRecordLoop(C, "FF0000", E, N, K);
		Wtf.highLightTreeNodeLoop("FF0000", E, N, D, B, A);
		Wtf.MessageBox
				.show({
					title : WtfGlobal.getLocaleText("hrms.common.confirm"),
					msg : WtfGlobal.getLocaleText({
						key : "hrms.Messages.Deleteselected",
						params : [ K ]
					})
							+ "<br><br><b>"
							+ WtfGlobal
									.getLocaleText("hrms.Messages.DateCannotbeRetrive"),
					buttons : Wtf.MessageBox.OKCANCEL,
					animEl : "upbtn",
					icon : Wtf.MessageBox.QUESTION,
					scope : this,
					fn : function(P) {
						if (P == "ok") {
							var U = "";
							for ( var Q = 0; Q < N.length; Q++) {
								if (N[Q].get("validflag") != -1) {
									U += "{'" + L + "':'" + N[Q].get(A) + "'},"
								}
							}
							var T = U.length - 1;
							var R = U.substr(0, T);
							Wtf.commonWaitMsgBox(WtfGlobal
									.getLocaleText("hrms.common.Deletingdata"));
							Wtf.Ajax
									.requestEx(
											{
												url : Wtf.req.base + "crm.jsp",
												params : {
													jsondata : R,
													table : M,
													flag : 41
												}
											},
											this,
											function(V) {
												this.delayFunction = new Wtf.util.DelayedTask(
														function() {
															Wtf
																	.removeSelectedTreeNode(
																			D,
																			B,
																			A,
																			N);
															Wtf
																	.removeSelectedRows(
																			C,
																			N);
															G
																	.load({
																		params : {
																			start : 0,
																			limit : C
																					.getBottomToolbar().pageSize
																		}
																	})
														}, this);
												Wtf
														.onlyhighLightRecordLoop(
																C, "ffffff", E,
																N, K, true);
												Wtf
														.highLightTreeNodeLoop(
																"ffffff", E, N,
																D, B, A);
												Wtf.onlyhighLightRecordLoop(C,
														"FF0000", 3, N, K);
												Wtf
														.highLightTreeNodeLoop(
																"FF0000", 3, N,
																D, B, A);
												this.delayFunction.delay(1800);
												if (K == "Lead"
														|| K == "Opportunity"
														|| K == "Account"
														|| K == "Activity") {
													bHasChanged = true
												}
												Wtf.updateProgress();
												ResponseAlert(J)
											}, function() {
												Wtf.updateProgress();
												ResponseAlert(I)
											})
						} else {
							var S = [];
							Wtf.highLightTreeNodeLoop("ffffff", E + 5, N, D, B,
									A);
							Wtf.onlyhighLightRecordLoop(C, "ffffff", E + 1, N,
									K, true);
							for ( var Q = 0; Q < N.length; Q++) {
								var O = G.indexOf(N[Q]);
								S.push(O)
							}
							C.getSelectionModel().selectRows(S)
						}
					}
				})
	} else {
		Wtf.updateProgress();
		ResponseAlert(H)
	}
};
Wtf.commonWaitMsgBox = function(A) {
	Wtf.MessageBox.show({
		msg : A,
		width : 290,
		wait : true,
		title : WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow200"),
		waitConfig : {
			interval : 200
		}
	})
};
Wtf.updateProgress = function() {
	Wtf.MessageBox.hide()
};
Wtf.PayrollSetDatevalue = function(obj) {
	var returnObject = {};
	var frequency = eval(obj.frequencyStoreCmb.getValue());
	var selectedYear = obj.yearCmb.getRawValue();
	var selectedMonth = eval(obj.monthCmb.getValue());
	var month = new Array("01", "02", "03", "04", "05", "06", "07", "08", "09",
			"10", "11", "12");
	var startdt;
	var enddt;
	if (frequency == 0) {
		startdt = Date.parseDate(selectedYear + "-" + month[selectedMonth - 1]
				+ "-01", "Y-m-d");
		enddt = startdt.add(month[selectedMonth - 1], +0).getLastDateOfMonth()
	} else {
		if (frequency == 1) {
			var date = new Date(selectedYear + "-01-01");
			startdt = new Date(date.clone().setDate(
					date.getDate() + ((selectedMonth - 1) * 7)));
			enddt = new Date(date.clone().setDate(
					date.getDate() + 6 + ((selectedMonth - 1) * 7)))
		} else {
			if (frequency == 2) {
				var startDates = new Array("16", "01");
				var endDate = "15";
				startdt = Date.parseDate(selectedYear + "-"
						+ month[parseInt((selectedMonth - 1) / 2)] + "-"
						+ startDates[selectedMonth % 2], "Y-m-d");
				if (selectedMonth % 2 == 0) {
					endDate = startdt.add(
							month[parseInt((selectedMonth - 1) / 2)], +0)
							.getLastDateOfMonth().format("d")
				}
				enddt = Date.parseDate(selectedYear + "-"
						+ month[parseInt((selectedMonth - 1) / 2)] + "-"
						+ endDate, "Y-m-d")
			}
		}
	}
	returnObject = {
		startdt : startdt,
		enddt : enddt
	};
	return returnObject
};
Wtf.notify = function() {
	var B;
	function A(C, D) {
		return [
				'<div class="msg">',
				'<div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div>',
				'<div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3>',
				C,
				"</h3>",
				D,
				"</div></div></div>",
				'<div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div>',
				"</div>" ].join("")
	}
	return {
		msg : function(F, E) {
			if (!B) {
				B = Wtf.DomHelper.insertFirst(document.body, {
					id : "msg-div"
				}, true)
			}
			B.alignTo(document, "t-t");
			var D = String.format.apply(String, Array.prototype.slice.call(
					arguments, 1));
			var C = Wtf.DomHelper.append(B, {
				html : A(F, D)
			}, true);
			C.slideIn("t").pause(2).ghost("t", {
				remove : true
			})
		},
		init : function() {
			var C = Wtf.get("exttheme");
			if (!C) {
				return
			}
			var E = Cookies.get("exttheme") || "aero";
			if (E) {
				C.dom.value = E;
				Wtf.getBody().addClass("x-" + E)
			}
			C.on("change", function() {
				Cookies.set("exttheme", C.getValue());
				setTimeout(function() {
					window.location.reload()
				}, 250)
			});
			var D = Wtf.get("lib-bar");
			if (D) {
				D.show()
			}
		}
	}
}();
Wtf.campaignDetails = function(A) {
	Wtf.campaignDetails.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.campaignDetails,
				Wtf.Panel,
				{
					closable : true,
					layout : "fit",
					border : false,
					iconCls : "pwndnewCRM emailmarketingTabicon",
					initComponent : function(C) {
						Wtf.campaignDetails.superclass.initComponent.call(this,
								C);
						var B = getHelpButton(this, 35);
						this.addEmailMarketing = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.AddEmailMarketing"),
									scope : this,
									id : "addemailmarketing35",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.AddEmailMarketing.tooltip")
									},
									iconCls : "pwnd addEmailMarketing",
									handler : function() {
										this.emailMarketing(0)
									}
								});
						this.editEmailMarketing = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.EditEmailMarketing"),
									scope : this,
									disabled : true,
									iconCls : "pwnd editEmailMarketing",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EditEmailMarketing.tooltip")
									},
									handler : function() {
										if (this.Grid.getSelectionModel()
												.getSelections().length == 1) {
											this.emailMarketing(1)
										} else {
											ResponseAlert(72)
										}
									}
								});
						this.scheduleEmailMarketing = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.ScheduleEmailMarketing"),
									scope : this,
									disabled : true,
									iconCls : "pwnd scheduleEmailMarketing",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.ScheduleEmailMarketing.tooltip")
									},
									handler : function() {
										var F = this.Grid.getSelectionModel()
												.getSelections();
										if (F.length == 1) {
											this.showScheduleWindow(F[0])
										} else {
											ResponseAlert(102)
										}
									}
								});
						this.emailTempBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.EmailTemplates"),
									scope : this,
									id : "emailtemplate35",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EmailTemplates.tooltip")
									},
									iconCls : "pwndCRM templateEmailMarketing",
									handler : function() {
										var F = Wtf.getCmp("emailTemplate");
										if (F == null) {
											F = new Wtf.emailTemplate({
												mainTab : this.mainTab
											});
											this.mainTab.add(F)
										}
										this.mainTab.setActiveTab(F);
										this.mainTab.doLayout()
									}
								});
						this.TargetListBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.TargetList"),
									scope : this,
									id : "targetlist35",
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.TargetList.tooltip")
									},
									iconCls : "pwnd targetListEmailMarketing",
									handler : this.targetListHandler
								});
						var D = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "templatename"
						}, {
							name : "templateid"
						}, {
							name : "fromname"
						}, {
							name : "fromaddress"
						}, {
							name : "replymail"
						}, {
							name : "unsub"
						}, {
							name : "fwdfriend"
						}, {
							name : "archive"
						}, {
							name : "updatelink"
						}, {
							name : "targetcount",
							type : "int"
						}, {
							name : "createdon"
						}, {
							name : "campaignlog"
						} ]);
						var E = new Wtf.grid.RowExpander(
								{
									tpl : new Wtf.XTemplate(
											'<div style="display:block;width:100%;" />',
											'<tpl for=".">{[this.f(values)]}</tpl></div>',
											{
												f : function(I) {
													var H = I.campaignlog;
													var F = "<table style='padding-left:10px;margin-top:7px;width:60%;border:1px solid grey'>  <caption style='margin-top:5px;'>"
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.ActivityHistory")
															+ "</caption><thead><tr><td style='color:#15428B;border-bottom:1px solid black'>Date</td><td style='color:#15428B;border-bottom:1px solid black'>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.Sent")
															+ "</td><td style='color:#15428B;border-bottom:1px solid black'>Viewed</td><td style='color:#15428B;border-bottom:1px solid black'>Failed</td></tr></thead><tbody>";
													if (H.campaignLogData != undefined) {
														for ( var G = 0; G < H.campaignLogData.length; G++) {
															F += "<tr><td>"
																	+ new Date(
																			H.campaignLogData[G].activitydate)
																			.format(WtfGlobal
																					.getDateFormat());
															+"</td>";
															F += "<td>"
																	+ H.campaignLogData[G].totalsent
																	+ "</td>";
															F += "<td>"
																	+ H.campaignLogData[G].viewed
																	+ "</td>";
															F += "<td>"
																	+ H.campaignLogData[G].failed
																	+ "</td></tr>"
														}
													}
													F += "</tbody></table>";
													return F
												}
											})
								});
						var A = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, D);
						this.EditorStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 9,
								campid : this.campaignid
							},
							reader : A
						});
						this.EditorStore.load();
						this.EditorColumn = new Wtf.grid.ColumnModel(
								[
										E,
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											dataIndex : "name",
											renderer : function(F) {
												return "<a href = '#' class='campAddMarketing'> "
														+ F + "</a>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.administration.email.template.tooltip"),
											dataIndex : "templatename"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.CreatedOn"),
											dataIndex : "createdon"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.SendTestEmail"),
											dataIndex : "targetcount",
											renderer : function(F) {
												var G = "";
												if (F > 0) {
													G = "<a href = '#' class='sendTestMail' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.SendTestEmail.tooltip")
															+ "> "
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.SendTestEmail")
															+ " </a>"
												}
												return G
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.SendEmail"),
											dataIndex : "targetcount",
											renderer : function(F) {
												var G = "";
												if (F > 0) {
													G = "<a href = '#' class='campdetails' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.SendEmail.tooltip")
															+ "> "
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.SendEmail")
															+ " </a>"
												}
												return G
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.ViewStatus"),
											dataIndex : "targetcount",
											renderer : function(F) {
												var G = "";
												if (F > 0) {
													G = "<a href = '#' class='campchart' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.ViewStatus.tooltip")
															+ "> "
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.ViewStatus")
															+ " </a>"
												}
												return G
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.BounceReport"),
											dataIndex : "id",
											renderer : function(G) {
												var F = "";
												if (G != "") {
													F = "<a href = '#' class='bouncereport' wtf:qtip="
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.BounceReport.tooltip")
															+ " style='color:#15428B;text-decoration:none;' >"
															+ WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.BounceReport")
															+ "</a>"
												}
												return F
											}
										} ]);
						this.deleteCon = new Wtf.Toolbar.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							scope : this,
							iconCls : getTabIconCls(Wtf.etype.delet),
							handler : this.campDelete
						});
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.Grid = new Wtf.KwlGridPanel(
								{
									layout : "fit",
									store : this.EditorStore,
									cm : this.EditorColumn,
									sm : this.selectionModel,
									border : false,
									loadMask : true,
									viewConfig : {
										forceFit : true
									},
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SearchbyName"),
									plugins : E,
									searchField : "name",
									tbar : [ "-", this.addEmailMarketing,
											this.editEmailMarketing,
											this.emailTempBtn,
											this.scheduleEmailMarketing, "->",
											B ]
								});
						this.Grid
								.on("cellclick", this.afterGridCellClick, this);
						this.campaignpan = new Wtf.Panel({
							layout : "fit",
							border : false,
							items : this.Grid
						});
						this.add(this.campaignpan)
					},
					loadBounceReport : function(B) {
						this.createBounceReportGrid(B);
						var A = new Wtf.Panel(
								{
									layout : "fit",
									id : "bounceReportPanel",
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.BounceReport"),
									closable : true,
									items : [ this.bounceReportGrid ]
								});
						this.mainTab.add(A);
						this.mainTab.activate(Wtf.getCmp("bounceReportPanel"));
						this.bounceReportStore.load({
							params : {
								start : 0,
								limit : 30
							}
						})
					},
					createBounceReportGrid : function(A) {
						var B = new Wtf.data.Record.create([ {
							name : "email"
						}, {
							name : "fname"
						}, {
							name : "lname"
						}, {
							name : "status"
						}, {
							name : "description"
						}, {
							name : "targetid"
						} ]);
						this.bounceReportColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.CheckboxSelectionModel({}),
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EmailAddress"),
											dataIndex : "email"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.FirstName"),
											dataIndex : "fname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.LastName"),
											dataIndex : "lname"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Reason"),
											dataIndex : "status",
											renderer : function(F, E, C) {
												var D = "";
												if (F != "") {
													D = "<span wtf:qtip='"
															+ C
																	.get("description")
															+ "'>"
															+ F
															+ "</span><img src=\"images/information.png\" style='vertical-align:middle;margin-left:5px;'wtf:qtip='"
															+ C
																	.get("description")
															+ "'>"
												}
												return D
											}
										} ]);
						this.bounceReportStore = new Wtf.data.Store({
							url : Wtf.req.base + "crm.jsp",
							baseParams : {
								flag : 827,
								emailmarketingid : A
							},
							reader : new Wtf.data.KwlJsonReader({
								root : "data",
								totalProperty : "totalCount"
							}, B)
						});
						this.bounceReportGrid = new Wtf.KwlGridPanel(
								{
									store : this.bounceReportStore,
									cm : this.bounceReportColumn,
									border : false,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.bounceReportGrid.EmptyText")
									},
									tbar : [ new Wtf.Button(
											{
												text : WtfGlobal
														.getLocaleText("hrms.CampaignDetail.RemoveFromTargetList"),
												handler : function() {
													selModel = this.bounceReportGrid
															.getSelectionModel();
													var D = selModel
															.getSelections();
													var C = "";
													for ( var E = 0; E < D.length; E++) {
														if (E > 0) {
															C += ","
														}
														C += D[E]
																.get("targetid")
													}
													if (C != "") {
														Wtf.Ajax
																.requestEx(
																		{
																			url : "jspfiles/crm.jsp",
																			params : {
																				flag : 828,
																				targets : C
																			}
																		},
																		this,
																		function(
																				G,
																				F) {
																			Wtf.MessageBox
																					.show({
																						title : WtfGlobal
																								.getLocaleText("hrms.common.success"),
																						msg : WtfGlobal
																								.getLocaleText("hrms.CampaignDetail.Selectedtargetdeleted"),
																						icon : Wtf.MessageBox.INFO,
																						buttons : Wtf.MessageBox.OK
																					});
																			this.bounceReportStore
																					.load({
																						params : {
																							start : 0,
																							limit : 25
																						}
																					})
																		},
																		function(
																				G,
																				F) {
																			Wtf.MessageBox
																					.show({
																						title : WtfGlobal
																								.getLocaleText("hrms.common.error"),
																						msg : WtfGlobal
																								.getLocaleText("hrms.CampaignDetail.ErrorSelectedtargetdeleted"),
																						icon : Wtf.MessageBox.ERROR,
																						buttons : Wtf.MessageBox.OK
																					})
																		})
													} else {
														Wtf.MessageBox
																.show({
																	title : WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	msg : WtfGlobal
																			.getLocaleText("hrms.CampaignDetail.Pleaseselectatleastonetargetfromthelist"),
																	icon : Wtf.MessageBox.ERROR,
																	buttons : Wtf.MessageBox.OK
																})
													}
												},
												scope : this
											}) ],
									bbar : new Wtf.PagingSearchToolbar(
											{
												pageSize : 30,
												displayInfo : true,
												store : this.bounceReportStore,
												plugins : this.pP = new Wtf.common.pPageSize(
														{})
											})
								})
					},
					showScheduleWindow : function(E) {
						var A = new Wtf.data.SimpleStore({
							fields : [ "id", "value" ],
							data : [ [ "0", "00:00" ], [ "1", "00:30" ],
									[ "2", "01:00" ], [ "3", "01:30" ],
									[ "4", "02:00" ], [ "5", "02:30" ],
									[ "6", "03:00" ], [ "7", "03:30" ],
									[ "8", "04:00" ], [ "9", "04:30" ],
									[ "10", "05:00" ], [ "11", "05:30" ],
									[ "12", "06:00" ], [ "13", "06:30" ],
									[ "14", "07:00" ], [ "15", "07:30" ],
									[ "16", "08:00" ], [ "17", "08:30" ],
									[ "18", "09:00" ], [ "19", "09:30" ],
									[ "20", "10:00" ], [ "21", "10:30" ],
									[ "22", "11:00" ], [ "23", "11:30" ],
									[ "24", "12:00" ], [ "25", "12:30" ],
									[ "26", "13:00" ], [ "27", "13:30" ],
									[ "28", "14:00" ], [ "29", "14:30" ],
									[ "30", "15:00" ], [ "31", "15:30" ],
									[ "32", "16:00" ], [ "33", "16:30" ],
									[ "34", "17:00" ], [ "35", "17:30" ],
									[ "36", "18:00" ], [ "37", "18:30" ],
									[ "38", "19:00" ], [ "39", "19:30" ],
									[ "40", "20:00" ], [ "41", "20:30" ],
									[ "42", "21:00" ], [ "43", "21:30" ],
									[ "44", "22:00" ], [ "45", "22:30" ],
									[ "46", "23:00" ], [ "47", "23:30" ] ]
						});
						var G = new Wtf.form.ComboBox(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.ScheduleTime"),
									store : A,
									displayField : "value",
									valueField : "id",
									width : 200,
									allowBlank : false,
									mode : "local",
									triggerAction : "all"
								});
						var C = new Date();
						C.setDate(C.getDate() + 1);
						var B = new Wtf.form.DateField(
								{
									fieldLabel : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.DeliveryDate"),
									border : false,
									minValue : C,
									width : 200,
									allowBlank : false
								});
						var D = new Wtf.form.FormPanel(
								{
									region : "center",
									border : false,
									bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px 10px 10px 30px;",
									items : [ B, G ]
								});
						var F = new Wtf.Window(
								{
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Scheduledelivery"),
									modal : true,
									height : 210,
									iconCls : "pwnd favwinIcon",
									width : 380,
									resizable : false,
									layout : "border",
									items : [
											{
												region : "north",
												bodyStyle : "background-color: white",
												border : false,
												height : 65,
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.common.Schedule"),
														WtfGlobal
																.getLocaleText("hrms.CampaignDetail.ScheduleForm.Title"),
														"images/activity1.gif")
											}, D ],
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Schedule"),
												scope : this,
												handler : function() {
													if (D.form.isValid()) {
														var H = G.getValue();
														var I = G.store.find(
																"id", H);
														if (I != -1) {
															H = G.store
																	.getAt(I).data["value"]
														} else {
															H = "00:00"
														}
														var J = B
																.getValue()
																.format("Y-m-d");
														Wtf.Ajax
																.requestEx(
																		{
																			url : "jspfiles/campaign.jsp",
																			params : {
																				flag : 28,
																				emailmarketingid : E.data["id"],
																				scheduledate : J,
																				scheduletime : H
																			}
																		},
																		this,
																		function(
																				L,
																				K) {
																			F
																					.close()
																		},
																		function(
																				L,
																				K) {
																			F
																					.close()
																		})
													} else {
														ResponseAlert(103)
													}
												}
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													F.close()
												}
											} ]
								});
						F.show()
					},
					afterGridCellClick : function(Grid, rowIndex, columnIndex,
							e) {
						var event = e;
						if (event.getTarget("a[class='campdetails']")) {
							Wtf.Ajax.timeout = 1200000;
							Wtf
									.commonWaitMsgBox(WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Sendingmail"));
							Wtf.Ajax
									.request({
										url : Wtf.req.base + "campaign.jsp",
										params : {
											emailmarkid : Grid.store
													.getAt(rowIndex).data.id,
											campid : this.campaignid,
											flag : 11
										},
										scope : this,
										success : function(res, req) {
											var obj = eval("("
													+ res.responseText.trim()
													+ ")");
											Wtf.updateProgress();
											Wtf.Ajax.timeout = 30000;
											Wtf.MessageBox
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.CampaignDetail.SendingEmailsforyourMarketingCampaign"),
														msg : obj.data.msg,
														icon : Wtf.MessageBox.INFO,
														buttons : Wtf.MessageBox.OK
													})
										},
										failure : function() {
											Wtf.updateProgress();
											Wtf.Ajax.timeout = 30000
										}
									})
						}
						if (event.getTarget("a[class='campchart']")) {
							var chartid = "CampaignMailStatus"
									+ Grid.store.getAt(rowIndex).data.id;
							var id = this.id + "graph";
							var swf = "scripts/graph/krwcolumn/krwcolumn/krwcolumn.swf";
							var dataflag = "22&campID=" + this.campaignid
									+ "&mailMarID="
									+ Grid.store.getAt(rowIndex).data.id + "";
							var mainID = this.mainTab.id;
							var xmlpath = "scripts/graph/krwcolumn/examples/CampaignMailStatus/CampaignMailStatus_settings.xml";
							var param = "mailMarID="
									+ Grid.store.getAt(rowIndex).data.id
									+ "&campID=" + this.campaignid;
							var tipTitle = Grid.store.getAt(rowIndex).data.name;
							var maintitle = Wtf.util.Format.ellipsis(tipTitle,
									20);
							var title = '<div wtf:qtip="' + tipTitle
									+ "\"wtf:qtitle='Chart View'>" + maintitle
									+ "</div>";
							var showHtml = "false";
							globalChart(chartid, id, swf, dataflag, mainID,
									xmlpath, Wtf.id(), showHtml, "", "",
									tipTitle)
						}
						var panel = Wtf.getCmp("comEmailMarket"
								+ this.campaignid + "_" + this.mode + "_"
								+ this.emailMarkId);
						if (panel != null) {
							this.editEmailMarketing.disable();
							this.scheduleEmailMarketing.disable();
							this.addEmailMarketing.disable()
						} else {
							this.editEmailMarketing.enable();
							this.scheduleEmailMarketing.enable()
						}
						if (event.getTarget("a[class='campAddMarketing']")) {
							this.emailMarketing(1)
						}
						if (event.getTarget("a[class='sendTestMail']")) {
							Wtf
									.commonWaitMsgBox(WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Sendingtestmail"));
							Wtf.Ajax.requestEx(
									{
										url : Wtf.req.base + "campaign.jsp",
										params : {
											emailmarkid : Grid.store
													.getAt(rowIndex).data.id,
											campid : this.campaignid,
											flag : 12
										}
									}, this, function() {
										Wtf.updateProgress();
										ResponseAlert(400)
									}, function() {
										Wtf.updateProgress();
										ResponseAlert(401)
									})
						}
						if (event.getTarget("a[class='bouncereport']")) {
							var emailmarketingid = Grid.store.getAt(rowIndex).data.id;
							this.loadBounceReport(emailmarketingid)
						}
					},
					emailMarketing : function(E) {
						this.mode = E;
						var C = WtfGlobal
								.getLocaleText("hrms.CampaignDetail.AddEmailMarketing");
						var B = "pwnd addEmailMarketingTab";
						this.emailMarkId = "0";
						if (E == 1) {
							this.recData = this.Grid.getSelectionModel()
									.getSelected().data;
							C = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.EditEmailMarketing")
									+ " : " + this.recData.name;
							B = "pwnd editEmailMarketingTab";
							this.emailMarkId = this.recData.id
						}
						var A = Wtf.getCmp("comEmailMarket" + this.campaignid
								+ "_" + this.mode + "_" + this.emailMarkId);
						var D = Wtf.util.Format.ellipsis(C, 19);
						if (A == null) {
							this.addEmailMarketing.disable();
							this.editEmailMarketing.disable();
							this.scheduleEmailMarketing.disable();
							this.setupRec = Wtf.data.Record.create([ {
								name : "id"
							}, {
								name : "title"
							}, {
								name : "description"
							}, {
								name : "licls"
							} ]);
							this.campaignSetup = new Wtf.data.SimpleStore({
								fields : [ "id", "title", "description",
										"licls" ]
							});
							this.addEmailMarketFun();
							this.card1 = new Wtf.ux.Wiz.Card(
									{
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.SetEmailDetails"),
										layout : "fit",
										border : false,
										items : this.addEmailMarketCmp
									});
							this.card2 = new Wtf.ux.Wiz.Card(
									{
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.ChooseanEmailTemplate"),
										layout : "fit"
									});
							this.card2.on("show", this.showTemplateSelector,
									this);
							this.card3 = new Wtf.ux.Wiz.Card(
									{
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EditEmailTemplate"),
										layout : "fit"
									});
							this.card3
									.on("show", this.showTemplateEditor, this);
							this.card4 = new Wtf.ux.Wiz.Card(
									{
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EnteryourPlainTextMessage"),
										layout : "fit"
									});
							this.card4.on("show", this.showPlainMessageEditor,
									this);
							this.card5 = new Wtf.ux.Wiz.Card(
									{
										layout : "fit",
										border : false,
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.FinalCampaignSetup")
									});
							this.card5.on("show", this.showFinalSetup, this);
							A = new Wtf.ux.Wiz(
									{
										closable : true,
										iconCls : B,
										id : "comEmailMarket" + this.campaignid
												+ "_" + this.mode + "_"
												+ this.emailMarkId,
										title : '<div wtf:qtip="'
												+ C
												+ '"wtf:qtitle='
												+ WtfGlobal
														.getLocaleText("hrms.CampaignDetail.EmailMarketing")
												+ ">" + D + "</div>",
										headerConfig : {
											title : '<div wtf:qtip="'
													+ C
													+ '"wtf:qtitle='
													+ WtfGlobal
															.getLocaleText("hrms.CampaignDetail.EmailMarketing")
													+ ">" + C + "</div>"
										},
										cards : [ this.card1, this.card2,
												this.card3, this.card4,
												this.card5 ]
									});
							A.on("beforeNextcard", this.beforeNext, this);
							A.on("beforefinish", this.beforeFinish, this);
							this.mainTab.add(A)
						}
						this.mainTab.setActiveTab(A);
						this.mainTab.doLayout();
						this.mainTab.on("remove",
								function(G, F) {
									if (F.id == "comEmailMarket"
											+ this.campaignid + "_" + this.mode
											+ "_" + this.emailMarkId) {
										this.addEmailMarketing.enable();
										this.Grid.getSelectionModel()
												.clearSelections()
									}
								}, this)
					},
					showFinalSetup : function() {
						var A = Wtf.getCmp("final_setup_card");
						if (!A) {
							this.finalSetupView = new Wtf.DataView(
									{
										store : this.campaignSetup,
										itemSelector : "final_setup_card",
										tpl : new Wtf.XTemplate(
												'<ul class="finalList"><tpl for=".">{[this.f(values)]}</tpl></div>',
												{
													f : function(B) {
														return "<li class='"
																+ B.licls
																+ "'><label>"
																+ B.title
																+ "</label>"
																+ B.description
																+ "</li>"
													},
													scope : this
												})
									});
							A = new Wtf.Panel(
									{
										id : "final_setup_card",
										bodyStyle : "background-color: white",
										autoScroll : true,
										html : "<span >"
												+ WtfGlobal
														.getLocaleText("hrms.CampaignDetail.sdfsdf")
												+ " </span>",
										items : this.finalSetupView
									});
							this.card5.add(A)
						}
						this.card5.doLayout()
					},
					showTemplateEditor : function() {
						var B = Wtf.getCmp("wizardTemplateEditor_" + this.id);
						if (B == null) {
							var A = this.selEmailTempCmp.selectedTemplate;
							if (A) {
								B = new Wtf.campaignMailEditor({
									mode : this.mode,
									marketRec : this.recData,
									id : "wizardTemplateEditor_" + this.id,
									templateRec : A.tempRec,
									templateid : A.tempRec.data["templateid"]
								});
								this.card3.add(B);
								this.card3.doLayout()
							}
						}
					},
					showPlainMessageEditor : function() {
						var B = Wtf.getCmp("Plaintext_textarea_form");
						if (!B) {
							var A = Wtf.getCmp(
									"wizardTemplateEditor_" + this.id)
									.getPlainMessage();
							B = new Wtf.form.FormPanel(
									{
										cls : "plainTextForm",
										id : "Plaintext_textarea_form",
										defaults : {
											labelStyle : "width: 100%; margin-bottom: 7px;",
											ctCls : "newTicketField"
										},
										items : [ {
											value : A.trim(),
											id : "mail_plaintext_textfield",
											fieldLabel : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.PlainMessageEditorText"),
											xtype : "textarea",
											height : "95%",
											width : "98%"
										} ]
									});
							this.card4.add(B)
						}
					},
					addEmailMarketFun : function() {
						var B = "";
						if (this.mode == 1) {
							B = this.recData.id
						}
						var A = Wtf.getCmp("addEmailMarketCmp_" + this.id
								+ this.mode + B);
						if (!A) {
							this.addEmailMarketCmp = new Wtf.addEmailMarketCmp(
									{
										id : "addEmailMarketCmp_" + this.id
												+ this.mode + B,
										emailmarkid : this.mode == 1 ? this.recData.id
												: "",
										campaignid : this.campaignid,
										templateid : this.mode == 1 ? this.recData.templateid
												: "",
										recData : this.recData,
										mode : this.mode,
										campaignname : this.campaignname,
										mainTab : this.mainTab
									})
						}
					},
					showTemplateSelector : function() {
						var A = Wtf
								.getCmp("selEmailTempCmp_" + this.templateid);
						if (A == null) {
							this.selEmailTempCmp = new Wtf.campaignMailTemplate(
									{
										id : "selEmailTempCmp_"
												+ this.templateid,
										selectedTemplate : (this.mode == 1) ? this.recData.templateid
												: null,
										border : false,
										mainTab : this.mainTab
									});
							this.card2.add(this.selEmailTempCmp);
							this.card2.doLayout()
						}
					},
					storeSetupInformation : function(B, A) {
						switch (A) {
						case 0:
							this.campaignSetup.add(this.getInitialSetup());
							break;
						case 1:
							this.campaignSetup.add(this.getTemplateSetup());
							break;
						case 3:
							this.campaignSetup.add(this.getPlainTextSetup());
							break
						}
					},
					getInitialSetup : function() {
						var C = this.addEmailMarketCmp;
						var B = [];
						var E = C.getList();
						var F = WtfGlobal
								.getLocaleText("hrms.CampaignDetail.DeskeraHRMSwilldeliverthistothe");
						var G = "";
						for ( var D = 0; D < E.length; D++) {
							G += E[D].data["listname"] + ","
						}
						var A;
						if (G != "") {
							F += G.substring(0, (G.length - 1));
							A = WtfGlobal.getLocaleText("hrms.common.success")
						} else {
							F = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.Nolistselectedtosendthiscampaign");
							A = WtfGlobal.getLocaleText("hrms.common.error")
						}
						this.removeSetupRec("list");
						B[B.length] = new this.setupRec(
								{
									id : "list",
									title : WtfGlobal
											.getLocaleText("hrms.common.List"),
									licls : A,
									description : F
								});
						F = C.getReplyMail();
						this.removeSetupRec("reply");
						B[B.length] = new this.setupRec(
								{
									id : "reply",
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Replies"),
									licls : (F != "") ? WtfGlobal
											.getLocaleText("hrms.common.success")
											: WtfGlobal
													.getLocaleText("hrms.common.error"),
									description : (F != "") ? F
											: "No reply email specifed."
								});
						F = C.getSenderMail();
						this.removeSetupRec("sender");
						B[B.length] = new this.setupRec(
								{
									id : "sender",
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Senderemail"),
									licls : (F != "") ? WtfGlobal
											.getLocaleText("hrms.common.success")
											: WtfGlobal
													.getLocaleText("hrms.common.error"),
									description : (F != "") ? F
											: "No sender email specified."
								});
						return B
					},
					getTemplateSetup : function() {
						var A = [];
						var B = this.selEmailTempCmp.getSelectedTemplate();
						if (B) {
							B = B.tempRec;
							this.removeSetupRec("subject");
							A[A.length] = new this.setupRec(
									{
										id : "subject",
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.Subjectline"),
										licls : WtfGlobal
												.getLocaleText("hrms.common.success"),
										description : B.data["subject"]
									});
							this.removeSetupRec("html");
							A[A.length] = new this.setupRec(
									{
										id : "html",
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.HTMLemail"),
										licls : WtfGlobal
												.getLocaleText("hrms.common.success"),
										description : WtfGlobal
												.getLocaleText({
													key : "hrms.CampaignDetail.YouaresendingHTMLemail",
													params : [ "<span class='boldtext'>"
															+ B.data["templatename"]
															+ "</span>" ]
												})
									})
						}
						return A
					},
					getPlainTextSetup : function() {
						var A = [];
						var C = Wtf.getCmp("mail_plaintext_textfield")
								.getValue().trim();
						var B = WtfGlobal.getLocaleText("hrms.common.error");
						if (C != "") {
							C = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.Youincludedplaintextversion");
							B = WtfGlobal.getLocaleText("hrms.common.success")
						} else {
							C = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.Youincludedplaintextversion")
						}
						this.removeSetupRec("plainmsg");
						A[A.length] = new this.setupRec(
								{
									id : "plainmsg",
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.Plaintextemail"),
									licls : B,
									description : C
								});
						return A
					},
					removeSetupRec : function(C) {
						if (C != "") {
							var B = this.campaignSetup.query("id", C, false,
									true);
							B = B.items;
							if (B.length > 0) {
								for ( var A = 0; A < B.length; A++) {
									this.campaignSetup.remove(B[A])
								}
							}
						}
					},
					beforeNext : function(F, D) {
						var A = true;
						if (D == 0) {
							A = this.addEmailMarketCmp.activityform.form
									.isValid();
							if (A) {
								var E = this.addEmailMarketCmp.getList();
								if (E.length > 0) {
									A = true
								} else {
									A = false;
									WtfComMsgBox(956, 0)
								}
							}
						} else {
							if (D == 1) {
								var C = this.selEmailTempCmp
										.getSelectedTemplate();
								if (C !== null) {
									var B = Wtf.getCmp("wizardTemplateEditor_"
											+ this.id);
									if (B) {
										B.changeTemplate(C.tempRec)
									}
									A = true;
									this.tempID = C.tempRec.data["templateid"]
								} else {
									ResponseAlert(600);
									A = false
								}
							}
						}
						if (A) {
							this.storeSetupInformation(F, D)
						}
						return A
					},
					beforeFinish : function(F) {
						var C = this.addEmailMarketCmp;
						var A = Wtf.getCmp("wizardTemplateEditor_" + this.id);
						var G = C.getSenderMail();
						var B = "[";
						var E = C.getList();
						for ( var D = 0; D < E.length; D++) {
							B += '{"listid" : "' + E[D].data.listid + '"},'
						}
						B = B.substring(0, (B.length - 1)) + "]";
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "campaign.jsp",
							params : {
								name : C.getName(),
								unsub : "",
								fwdfriend : "",
								archive : "",
								updatelink : "",
								fromaddress : G,
								replyaddress : C.getReplyMail(),
								fromname : C.getFromName(),
								inboundemail : G,
								templateid : this.tempID,
								campid : this.campaignid,
								targetlist : B,
								colortheme : A.getColorTheme(),
								htmlcont : A.getTemplateHtml(),
								plaincont : Wtf.getCmp(
										"mail_plaintext_textfield").getValue()
										.trim(),
								emailmarkid : this.mode == 1 ? this.recData.id
										: "",
								mode : this.mode,
								flag : 10
							}
						}, this, function() {
							WtfComMsgBox(953, 0);
							if (this.mode == 0) {
								this.EditorStore.load()
							}
							Wtf.getCmp(
									"comEmailMarket" + this.campaignid + "_"
											+ this.mode + "_"
											+ this.emailMarkId).closePanel();
							this.addEmailMarketing.enable();
							this.Grid.getSelectionModel().clearSelections()
						}, function() {
							WtfComMsgBox(954, 1)
						})
					},
					targetListHandler : function() {
						var A = "targetlistgrid";
						var B = Wtf.getCmp(A);
						if (B == null) {
							B = new Wtf.targetListDetails(
									{
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.TargetLists"),
										id : A,
										mainTab : this.mainTab
									});
							this.mainTab.add(B)
						}
						this.mainTab.setActiveTab(B);
						this.mainTab.doLayout()
					}
				});
Wtf.emailTemplate = function(A) {
	Wtf.emailTemplate.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.emailTemplate,
				Wtf.Panel,
				{
					closable : true,
					layout : "fit",
					title : WtfGlobal
							.getLocaleText("hrms.CampaignDetail.EmailTemplates"),
					id : this.id != "emailTemplatedashboard" ? "emailTemplate"
							: this.id,
					border : false,
					iconCls : getTabIconCls(Wtf.etype.acc),
					initComponent : function(A) {
						Wtf.campaignDetails.superclass.initComponent.call(this,
								A);
						this.getEditorGrid()
					},
					getEditorGrid : function() {
						var B = new Wtf.data.Record.create([ {
							name : "templateid"
						}, {
							name : "templatename"
						}, {
							name : "description"
						}, {
							name : "subject"
						}, {
							name : "bodyhtml"
						}, {
							name : "createdon"
						}, {
							name : "modifiedon"
						} ]);
						var A = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, B);
						this.EditorStore = new Wtf.data.Store({
							url : "Common/Template/getTemplates.common",
							pruneModifiedRecords : true,
							baseParams : {
								flag : 1
							},
							method : "post",
							reader : A
						});
						this.EditorStore.load();
						this.EditorColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.TemplateName"),
											dataIndex : "templatename",
											sortable : true,
											renderer : function(C) {
												return "<a href = '#' class='campdetails'> "
														+ C + "</a>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "description",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.CreatedOn"),
											dataIndex : "createdon",
											sortable : true
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.ModifiedOn"),
											dataIndex : "modifiedon",
											sortable : true
										} ]);
						this.deleteCon = new Wtf.Toolbar.Button({
							text : WtfGlobal
									.getLocaleText("hrms.common.delete"),
							scope : this,
							iconCls : getTabIconCls(Wtf.etype.delet),
							handler : this.campDelete
						});
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.Grid = new Wtf.KwlGridPanel(
								{
									layout : "fit",
									store : this.EditorStore,
									cm : this.EditorColumn,
									sm : this.selectionModel,
									border : false,
									height : 400,
									loadMask : true,
									displayInfo : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:addemltem(\""
														+ this.id
														+ "\")'>"
														+ WtfGlobal
																.getLocaleText("hrms.CampaignDetail.TemplateEditerGrid.EmptyText")
														+ "</a>")
									},
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SearchbyTemplateName"),
									searchField : "templatename",
									searchLabel : " ",
									searchLabelSeparator : " ",
									serverSideSearch : true,
									tbar : [
											"-",
											new Wtf.Toolbar.Button(
													{
														text : WtfGlobal
																.getLocaleText("hrms.common.reset"),
														scope : this,
														iconCls : "pwndRefresh",
														handler : function() {
															this.EditorStore
																	.load({
																		params : {
																			start : 0,
																			limit : this.Grid.pag.pageSize
																		}
																	});
															Wtf
																	.getCmp(
																			"Quick"
																					+ this.Grid.id)
																	.setValue(
																			"")
														}
													}),
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.administration.new.template"),
												scope : this,
												tooltip : {
													text : WtfGlobal
															.getLocaleText("hrms.CampaignDetail.NewTemplate.Tooltip")
												},
												iconCls : "pwndCommon addbuttonIcon",
												handler : this.addemltem
											},
											"-",
											{
												text : WtfGlobal
														.getLocaleText("hrms.CampaignDetail.DeleteTemplate"),
												scope : this,
												tooltip : {
													text : WtfGlobal
															.getLocaleText("hrms.CampaignDetail.DeleteTemplate.tooltip")
												},
												iconCls : "pwndCommon deletebuttonIcon",
												handler : this.delTemplate
											} ]
								});
						if (this.id == "emailTemplatedashboard") {
							this.templatePanel = new Wtf.Panel(
									{
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EmailTemplates"),
										iconCls : getTabIconCls(Wtf.etype.acc),
										border : false,
										id : this.id + "emailtemplatepan",
										layout : "fit",
										items : [ {
											layout : "fit",
											border : false,
											items : [ this.Grid ]
										} ]
									});
							this.mainTab = new Wtf.TabPanel({
								id : this.id + "emailtemplatetabPanel",
								scope : this,
								border : false,
								resizeTabs : true,
								minTabWidth : 155,
								enableTabScroll : true,
								items : [ this.templatePanel ]
							});
							this.add(this.mainTab);
							this.mainTab.setActiveTab(this.templatePanel)
						} else {
							this.add(this.Grid)
						}
						this.doLayout();
						this.Grid.on("cellclick", this.gridCellClick, this)
					},
					addemltem : function() {
						var B = WtfGlobal
								.getLocaleText("hrms.administration.new.template");
						var C = Wtf.util.Format.ellipsis(B, 18);
						var A = "";
						if (this.id == "emailTemplatedashboard") {
							A = Wtf.getCmp("template_dash_win"
									+ this.templateid)
						} else {
							A = Wtf
									.getCmp("template_wiz_win"
											+ this.templateid)
						}
						if (A == null) {
							A = new Wtf.newEmailTemplate(
									{
										store : this.EditorStore,
										title : '<div wtf:qtip="'
												+ B
												+ '"wtf:qtitle='
												+ WtfGlobal
														.getLocaleText("hrms.CampaignDetail.EmailTemplates")
												+ ">" + C + "</div>",
										tipTitle : B,
										mailTemplate : this.mailTemplate,
										dashboardCall : this.id == "emailTemplatedashboard" ? true
												: false
									});
							A.on("render", function() {
								A.tempname.focus(true, 100)
							}, this);
							this.mainTab.add(A)
						}
						this.mainTab.setActiveTab(A);
						this.mainTab.doLayout()
					},
					gridCellClick : function(D, H, F, E) {
						var B = E;
						if (B.getTarget("a[class='campdetails']")) {
							var G = D.getSelectionModel().getSelected().data;
							var A = Wtf.getCmp("template_wiz_win"
									+ G.templateid);
							var C = G.templatename
									+ " : "
									+ WtfGlobal
											.getLocaleText("hrms.CampaignDetail.EditTemplate");
							var I = Wtf.util.Format.ellipsis(C, 18);
							if (A == null) {
								A = new Wtf.newEmailTemplate(
										{
											templateid : G.templateid,
											tname : G.templatename,
											tdesc : G.description,
											tsubject : G.subject,
											tbody : G.bodyhtml,
											store : this.EditorStore,
											title : '<div wtf:qtip="'
													+ C
													+ '"wtf:qtitle='
													+ WtfGlobal
															.getLocaleText("hrms.CampaignDetail.EmailTemplates")
													+ ">" + I + "</div>",
											tipTitle : C
										});
								A.on("render", function() {
									A.tempname.focus(true, 100)
								}, this);
								this.mainTab.add(A)
							}
							this.mainTab.setActiveTab(A);
							this.mainTab.doLayout()
						}
					},
					delTemplate : function() {
						if (this.Grid.getSelectionModel().getCount() > 0) {
							Wtf.MessageBox
									.confirm(
											WtfGlobal
													.getLocaleText("hrms.common.confirm"),
											WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Doyouwanttodeletethistemplate"),
											function(A) {
												if (A != "yes") {
													this.close()
												} else {
													var B = this.Grid
															.getSelectionModel()
															.getSelected().data;
													Wtf.Ajax
															.requestEx(
																	{
																		url : "Common/Template/delTemplate.common",
																		params : {
																			tempid : B.templateid
																		}
																	},
																	this,
																	function(C) {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.success"),
																						WtfGlobal
																								.getLocaleText("hrms.CampaignDetail.Templatedeletedsuccessfully") ],
																				0);
																		this.EditorStore
																				.reload()
																	},
																	function() {
																		Wtf.Msg
																				.alert(
																						WtfGlobal
																								.getLocaleText("hrms.common.Message"),
																						WtfGlobal
																								.getLocaleText("hrms.CampaignDetail.Someerroroccoured"))
																	})
												}
											}, this)
						} else {
							calMsgBoxShow(42, 1)
						}
					}
				});
function addemltem(A) {
	Wtf.getCmp(A).addemltem()
}
Wtf.targetListDetails = function(A) {
	Wtf.targetListDetails.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.targetListDetails,
				Wtf.Panel,
				{
					closable : true,
					layout : "fit",
					border : false,
					iconCls : "pwndnewCRM targetlistTabicon",
					initComponent : function(B) {
						Wtf.targetListDetails.superclass.initComponent.call(
								this, B);
						var C = new Wtf.data.Record.create([ {
							name : "listid"
						}, {
							name : "listname"
						}, {
							name : "description"
						}, {
							name : "createdon"
						} ]);
						var A = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, C);
						this.EditorStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								flag : 4
							},
							method : "post",
							reader : A
						});
						this.EditorStore.load();
						this.EditorColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										new Wtf.grid.CheckboxSelectionModel(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.TargetList"),
											dataIndex : "listname",
											renderer : function(E) {
												return "<a href = '#' class='campTargetList'> "
														+ E + "</a>"
											}
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											dataIndex : "description"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.CreatedOn"),
											dataIndex : "createdon"
										} ]);
						var D = false;
						if (this.id == "campaigntargetdetail") {
							D = true
						}
						this.newTargetsBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.New"),
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.AddNewTargetList")
									},
									scope : this,
									iconCls : "pwnd newTargetListEmailMarketing",
									handler : function() {
										this.targetsHandler(0, D)
									}
								});
						this.editTargetsBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.edit"),
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.EditTargetList")
									},
									scope : this,
									iconCls : "pwnd editTargetListEmailMarketing",
									handler : function() {
										if (this.Grid.getSelectionModel()
												.getSelections().length == 1) {
											this.targetsHandler(1, D)
										} else {
											ResponseAlert(67)
										}
									}
								});
						this.deleteTargetsBtn = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.delete"),
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.DeletetheselectedTargetLists")
									},
									scope : this,
									iconCls : getTabIconCls(Wtf.etype.delet),
									handler : function() {
										Wtf.deleteGlobal(this.Grid,
												this.EditorStore,
												"Target List", "listid",
												"listid", "TargetList", 64, 65,
												66)
									}
								});
						this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
						this.Grid = new Wtf.KwlGridPanel(
								{
									store : this.EditorStore,
									cm : this.EditorColumn,
									sm : this.selectionModel,
									border : false,
									loadMask : true,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.TargetListGrid.emptytext")
									},
									tbar : [ "-", this.newTargetsBtn,
											this.editTargetsBtn,
											this.deleteTargetsBtn ],
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SearchbyTargetList"),
									displayInfo : true,
									searchField : "listname"
								});
						this.targetList = new Wtf.Panel({
							layout : "fit",
							border : false,
							height : 400,
							items : this.Grid
						});
						if (this.id == "campaigntargetdetail") {
							this.targetPanel = new Wtf.Panel(
									{
										title : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.TargetLists"),
										iconCls : "pwndnewCRM targetlistTabicon",
										border : false,
										layout : "fit",
										id : this.id + "targetpan",
										items : [ {
											layout : "fit",
											border : false,
											items : [ this.targetList ]
										} ]
									});
							this.mainTab = new Wtf.TabPanel({
								id : this.id + "targetTabPanel",
								scope : this,
								border : false,
								resizeTabs : true,
								minTabWidth : 155,
								enableTabScroll : true,
								items : [ this.targetPanel ]
							});
							this.add(this.mainTab);
							this.mainTab.setActiveTab(this.targetPanel)
						} else {
							this.add(this.targetList)
						}
						this.doLayout();
						this.Grid.on("cellclick", this.targetGridCellClick,
								this)
					},
					targetGridCellClick : function(D, J, I, H) {
						var B = H;
						if (B.getTarget("a[class='campTargetList']")) {
							var G = 1;
							var F = this.Grid.getSelectionModel().getSelected();
							var K = F.get("listid");
							var C = F.get("listname") + " ";
							var E = "targetListTabnewedit_dash" + G + K;
							var A = Wtf.getCmp(E);
							if (A == null) {
								A = new Wtf.targetListWin(
										{
											mode : G,
											record : F,
											id : E,
											listID : K,
											TLID : K,
											store : this.EditorStore,
											listname : C,
											iconCls : "pwnd editTargetListEmailMarketingWin",
											mainTab : this.mainTab
										});
								this.mainTab.add(A)
							}
							this.mainTab.setActiveTab(A);
							this.mainTab.doLayout()
						}
					},
					targetsHandler : function(G, F) {
						var B;
						var A = "";
						var D = "New ";
						if (G == 1) {
							B = this.Grid.getSelectionModel().getSelected();
							A = B.get("listid");
							D = B.get("listname") + " "
						}
						var C = "targetListTabnewedit" + G + A;
						if (F) {
							C = "targetListTabnewedit_dash" + G + A
						}
						var E = Wtf.getCmp(C);
						if (E == null) {
							E = new Wtf.targetListWin(
									{
										mode : G,
										record : B,
										id : C,
										listID : A,
										TLID : A,
										store : this.EditorStore,
										listname : D,
										iconCls : (G == 0 ? "pwnd newTargetListEmailMarketingWin"
												: "pwnd editTargetListEmailMarketingWin"),
										mainTab : this.mainTab
									});
							this.mainTab.add(E)
						}
						this.mainTab.setActiveTab(E);
						this.mainTab.doLayout()
					}
				});
Wtf.targetListWin = function(A) {
	A.title = A.listname + "Target List";
	Wtf.apply(this, A);
	Wtf.targetListWin.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.targetListWin,
				Wtf.ux.ClosableTabPanel,
				{
					iconCls : "pwnd favwinIcon",
					closable : true,
					layout : "fit",
					onRender : function(E) {
						this.toolItems = [];
						var G = new Wtf.Toolbar.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.common.Save"),
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.Savethetargetlist")
									},
									scope : this,
									iconCls : "pwnd saveBtn",
									handler : this.saveTargetList_Targets
								});
						this.toolItems.push(G);
						var I = [];
						var L = new Wtf.Action(
								{
									text : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.OpenTargets"),
									scope : this,
									flag : 0,
									listid : this.listID,
									handler : this.addNewTargetHandler
								});
						var H = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Leads")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Leads")
											+ "</span>",
									scope : this,
									flag : 1,
									iconCls : "pwndCRM leadSearch",
									listid : this.listID,
									handler : this.importHandler
								});
						var J = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Contacts.tooltip")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Contacts")
											+ "</span>",
									scope : this,
									flag : 2,
									iconCls : "pwndCRM contactsTabIconSearch",
									listid : this.listID,
									handler : this.importHandler
								});
						var C = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Users.tooltip")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Users.tooltip")
											+ "</span>",
									scope : this,
									flag : 3,
									iconCls : "pwndCRM author",
									listid : this.listID,
									handler : this.importHandler
								});
						var D = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.TargetLists.tooltip")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.TargetLists")
											+ "</span>",
									scope : this,
									flag : 4,
									iconCls : "pwndCRM targetlistButtonicon",
									listid : this.listID,
									handler : this.importHandler
								});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.Lead,
								Wtf.Perm.Lead.exportt)) {
							I.push(H)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.Contact,
								Wtf.Perm.Contact.exportt)) {
							I.push(J)
						}
						I.push(C);
						I.push(D);
						var F = new Wtf.Toolbar.Button(
								{
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.ImportEmailBtn")
									},
									scope : this,
									text : WtfGlobal
											.getLocaleText("hrms.common.Import"),
									iconCls : "pwnd importicon",
									menu : I
								});
						this.toolItems.push(F);
						var B = [];
						var N = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.AddanewLead")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Leads")
											+ "</span>",
									scope : this,
									iconCls : "pwndCRM leadSearch",
									handler : function() {
										this.createNewTarget(1)
									}
								});
						var K = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.AddanewContact")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Contacts")
											+ "</span>",
									scope : this,
									iconCls : "pwndCRM contactsTabIconSearch",
									handler : function() {
										this.createNewTarget(2)
									}
								});
						var A = new Wtf.Action(
								{
									text : "<span wtf:qtip="
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.AddanewTarget")
											+ ">"
											+ WtfGlobal
													.getLocaleText("hrms.CampaignDetail.Targets")
											+ "</span>",
									scope : this,
									iconCls : "pwndCRM targetlistButtonicon",
									handler : function() {
										this.createNewTarget(4)
									}
								});
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.Lead,
								Wtf.Perm.Lead.exportt)) {
							B.push(N)
						}
						if (!WtfGlobal.EnableDisable(Wtf.UPerm.Contact,
								Wtf.Perm.Contact.exportt)) {
							B.push(K)
						}
						B.push(A);
						var M = new Wtf.Toolbar.Button(
								{
									tooltip : {
										text : WtfGlobal
												.getLocaleText("hrms.CampaignDetail.AddLeadsContactsTargetseasily")
									},
									scope : this,
									text : WtfGlobal
											.getLocaleText("hrms.common.add"),
									iconCls : "pwnd addIcon",
									menu : B
								});
						this.toolItems.push(M);
						Wtf.targetListWin.superclass.onRender.call(this, E);
						this.activityform = new Wtf.form.FormPanel(
								{
									autoScroll : true,
									border : false,
									height : 100,
									items : {
										layout : "column",
										border : false,
										defaults : {
											border : false
										},
										items : [ {
											columnWidth : 1,
											items : [ {
												layout : "form",
												border : false,
												defaultType : "textfield",
												labelWidth : 150,
												defaults : {
													width : 250
												},
												items : [
														this.name = new Wtf.ux.TextField(
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.common.name")
																			+ "*",
																	allowBlank : false,
																	maxLength : 255,
																	value : this.mode == 1 ? this.record.data.listname
																			: ""
																}),
														this.desc = new Wtf.form.TextArea(
																{
																	fieldLabel : WtfGlobal
																			.getLocaleText("hrms.performance.description"),
																	maxLength : 1024,
																	value : this.mode == 1 ? this.record.data.description
																			: ""
																}) ]
											} ]
										} ]
									}
								});
						this.targetRecord = new Wtf.data.Record.create([ {
							name : "id"
						}, {
							name : "name"
						}, {
							name : "emailid"
						}, {
							name : "relatedto"
						}, {
							name : "relatedid"
						}, {
							name : "company"
						}, {
							name : "targetscount"
						}, {
							name : "targetlistDescription"
						} ]);
						this.targetReader = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalCount"
						}, this.targetRecord);
						this.campTargetStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								listID : this.TLID,
								flag : 7
							},
							method : "post",
							reader : this.targetReader
						});
						this.targetColumn = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											dataIndex : "name"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Email"),
											dataIndex : "emailid"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Remove"),
											dataIndex : "remove",
											renderer : function(S, O, R, T, P,
													Q) {
												return "<div class='pwnd deleteButton' > </div>"
											}
										} ]);
						this.campTargetStore.load({
							params : {
								start : 0,
								limit : 50
							}
						});
						this.targetGrid = new Wtf.grid.GridPanel(
								{
									store : this.campTargetStore,
									cm : this.targetColumn,
									tbar : [],
									clicksToEdit : 1,
									border : false,
									loadMask : true,
									searchEmptyText : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SearchbyName"),
									searchField : "name",
									view : new Wtf.ux.grid.BufferView(
											{
												scrollDelay : false,
												autoFill : true,
												forceFit : true,
												emptyText : WtfGlobal
														.getLocaleText("hrms.CampaignDetail.CampaignTargetGrid.emptyText")
											}),
									bbar : new Wtf.PagingSearchToolbar(
											{
												pageSize : 50,
												displayInfo : true,
												store : this.campTargetStore,
												plugins : this.pP = new Wtf.common.pPageSize(
														{
															id : "pPageSize_"
																	+ this.id
														})
											})
								});
						this.targetGrid
								.on("cellclick", this.deleteTarget, this);
						this.targetGrid
								.on("render", this.gridAfterRender, this);
						this.mainPanel = new Wtf.Panel(
								{
									layout : "border",
									border : false,
									items : [
											{
												layout : "fit",
												region : "north",
												height : 150,
												bodyStyle : "background:#f1f1f1;font-size:10px;padding:10px 10px 10px 30px;",
												items : this.activityform
											}, {
												layout : "fit",
												region : "center",
												items : this.targetGrid
											} ]
								});
						this.add(this.mainPanel)
					},
					gridAfterRender : function() {
						this.importTargetListA = Wtf
								.importMenuArray(
										this,
										WtfGlobal
												.getLocaleText("hrms.CampaignDetail.TargetList"),
										this.campTargetStore, "undefined",
										this.pP.combo.value);
						this.importTargetList = Wtf.importMenuButtonA(
								this.importTargetListA, this, WtfGlobal
										.getLocaleText("hrms.common.Target"));
						this.toolItems.push(this.importTargetList);
						this.targetGrid.getTopToolbar().addButton(
								this.toolItems)
					},
					deleteTarget : function(C, A, B, E) {
						var D = E;
						if (D.target.className == "pwnd deleteButton") {
							this.isClosable = false;
							Wtf.Ajax
									.requestEx(
											{
												url : Wtf.req.base
														+ "campaign.jsp",
												params : {
													listid : this.TLID,
													relatedid : C.selModel.selections.items[0].data.relatedid,
													flag : 35
												}
											},
											this,
											function(F, G) {
												ResponseAlert(52);
												C.store
														.load({
															params : {
																start : 0,
																limit : this.pP.combo.value
															}
														})
											}, function() {
												ResponseAlert(53)
											})
						}
					},
					importHandler : function(D, A) {
						var B = "ImportEmails";
						var C = Wtf.getCmp(B);
						if (C == null) {
							C = new Wtf.importTargetWindow({
								id : B,
								TLID : this.TLID,
								scope : this,
								butObj : D
							})
						}
						C.show()
					},
					importCSVfile : function(A) {
						this.impWin1 = Wtf.commonUploadWindow(this, A);
						this.impWin1.show()
					},
					displayName : function(D, A, C, F, E) {
						var B = (C.json.username).trim();
						return B
					},
					CreateNewTarget : function() {
						var A = this.grid.getSelectionModel().getSelected();
						this.addExtTargetfunction(0, A, 1)
					},
					mappingCSV : function(D, B, C, A) {
						this.filename = B.FileName;
						this.mapCSV = new Wtf.csvMappingInterface({
							csvheaders : D,
							modName : WtfGlobal
									.getLocaleText("hrms.common.Targets"),
							impWin1 : C,
							delimiterType : A
						}).show();
						Wtf.getCmp("csvMappingInterface").on("importfn",
								this.importCSVfunc, this)
					},
					mapImportedRes : function(I, E, K) {
						var G = 0;
						var A = "";
						var F = this.listds.getCount();
						var J = "{userdata:[";
						for ( var C = 0; C < F; C++) {
							var L = this.listds.getAt(C);
							var B = this.userds.find("cusername",
									L.data.cusername, 0, true);
							if (E == true) {
								var D = L.json.username.trim();
								B = this.userds.find("cusername", D, 0, true)
							}
							if (B != -1) {
								G++;
								var H = this.userds.getAt(B);
								J += A + '{user:"' + H.data.cusername
										+ '",email:"' + H.json.cemailid
										+ '",targetModuleid:"' + H.json.cuserid
										+ '",userid:"' + L.json.userid
										+ '",username:"' + L.json.username
										+ '",emailid:"' + L.json.emailid
										+ '",address:"' + L.json.address
										+ '",contactno:"' + L.json.contactno
										+ '"}';
								A = ","
							}
						}
						J += "]}";
						if (G > 0) {
							Wtf.Ajax.requestEx({
								url : Wtf.req.base + "contact.jsp",
								params : ({
									type : "repTarget",
									val : J
								}),
								method : "POST"
							}, this, function(M, O) {
								if (M != null && M != "") {
									for ( var N = 0; N < M.rec.length; N++) {
										var P = new this.targetRecord({
											id : "",
											name : M.rec[N].username,
											emailid : M.rec[N].emailid,
											relatedto : "4",
											relatedid : ""
										});
										this.campTargetStore.add(P)
									}
								}
								WtfComMsgBox(458, 0);
								I.close()
							}, function() {
								I.close()
							})
						} else {
							WtfComMsgBox(470, 0);
							I.close()
						}
					},
					importCSVfunc : function(A, B) {
						Wtf.commonConflictWindow(this, A, WtfGlobal
								.getLocaleText("hrms.common.Target"),
								this.filename, this.EditorStore, this.listds,
								this.grid, 469, 451, "images/leads.gif",
								"Null", "Null", this.grid1, 470, B, this.TLID);
						this.on("importrecs", this.insertIntoGrid, this)
					},
					insertIntoGrid : function(A, B) {
						if (A[0].TLID !== undefined) {
							this.TLID = A[0].TLID
						}
						this.campTargetStore.baseParams.listID = this.TLID;
						this.campTargetStore.load({
							params : {
								start : 0,
								limit : this.pP.combo.value
							}
						})
					},
					addExtTargetfunction : function(D, B, A) {
						var C = D == 0 ? WtfGlobal
								.getLocaleText("hrms.CampaignDetail.AddTarget")
								: WtfGlobal
										.getLocaleText("hrms.CampaignDetail.EditTarget");
						var E = D == 0 ? WtfGlobal
								.getLocaleText("hrms.CampaignDetail.EnternewTargetdetails")
								: WtfGlobal
										.getLocaleText("hrms.CampaignDetail.EditexistingTargetdetails");
						this.addExtTargetWindow = new Wtf.Window(
								{
									title : D == 0 ? WtfGlobal
											.getLocaleText("hrms.CampaignDetail.AddTarget")
											: WtfGlobal
													.getLocaleText("hrms.CampaignDetail.EditTarget"),
									closable : true,
									modal : true,
									iconCls : "pwnd favwinIcon",
									width : 430,
									height : 370,
									resizable : false,
									buttons : [
											{
												text : D == 0 ? WtfGlobal
														.getLocaleText("hrms.common.add")
														: WtfGlobal
																.getLocaleText("hrms.common.edit"),
												id : "createUserButton",
												scope : this,
												handler : function() {
													if (this.createuserForm.form
															.isValid()) {
														Wtf.Ajax
																.requestEx(
																		{
																			url : Wtf.req.base
																					+ "contact.jsp",
																			params : ({
																				type : "newTargetAddress",
																				userid : Wtf
																						.getCmp(
																								"tempContIdField")
																						.getValue(),
																				username : Wtf
																						.getCmp(
																								"tempNameField")
																						.getValue(),
																				emailid : Wtf
																						.getCmp(
																								"tempEmailField")
																						.getValue(),
																				address : Wtf
																						.getCmp(
																								"tempAddField")
																						.getValue(),
																				contactno : Wtf
																						.getCmp(
																								"tempPhoneField")
																						.getValue()
																			}),
																			method : "POST"
																		},
																		this,
																		function(
																				F,
																				G) {
																			if (F != null
																					&& F != "") {
																				WtfComMsgBox(
																						453,
																						0)
																			}
																			this.listds
																					.remove(B);
																			var H = new this.targetRecord(
																					{
																						id : "",
																						name : Wtf
																								.getCmp(
																										"tempNameField")
																								.getValue(),
																						emailid : Wtf
																								.getCmp(
																										"tempEmailField")
																								.getValue(),
																						relatedto : "4",
																						relatedid : ""
																					});
																			this.campTargetStore
																					.add(H);
																			this.addExtTargetWindow
																					.close()
																		},
																		function() {
																			this.addExtTargetWindow
																					.close()
																		})
													}
												}
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												id : "cancelCreateUserButton",
												scope : this,
												handler : function() {
													this.addExtTargetWindow
															.close()
												}
											} ],
									layout : "border",
									items : [
											{
												region : "north",
												id : "userwinnorth",
												height : 75,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(C, E)
											},
											{
												region : "center",
												border : false,
												id : "userwincenter",
												bodyStyle : "background:#f1f1f1;font-size:10px;",
												layout : "fit",
												items : [ this.createuserForm = new Wtf.form.FormPanel(
														{
															border : false,
															labelWidth : 120,
															bodyStyle : "margin-top:20px;margin-left:35px;font-size:10px;",
															defaults : {
																width : 200
															},
															defaultType : "textfield",
															items : [
																	{
																		fieldLabel : WtfGlobal
																				.getLocaleText("hrms.common.name")
																				+ "*",
																		id : "tempNameField",
																		name : "name",
																		validator : WtfGlobal.validateUserName,
																		allowBlank : false
																	},
																	{
																		fieldLabel : WtfGlobal
																				.getLocaleText("hrms.common.email.id")
																				+ "*",
																		id : "tempEmailField",
																		name : "emailid",
																		validator : WtfGlobal.validateEmail,
																		allowBlank : false,
																		renderer : WtfGlobal.renderEmailTo
																	},
																	{
																		fieldLabel : WtfGlobal
																				.getLocaleText("hrms.common.Phone")
																				+ "*",
																		allowBlank : false,
																		id : "tempPhoneField",
																		name : "phone"
																	},
																	{
																		xtype : "textarea",
																		fieldLabel : WtfGlobal
																				.getLocaleText("hrms.common.address"),
																		id : "tempAddField",
																		name : "address"
																	},
																	{
																		xtype : "hidden",
																		id : "tempContIdField",
																		name : "id"
																	} ]
														}) ]
											} ]
								});
						Wtf.getCmp("tempPhoneField").on(
								"change",
								function() {
									Wtf.getCmp("tempPhoneField").setValue(
											WtfGlobal.HTMLStripper(Wtf.getCmp(
													"tempPhoneField")
													.getValue()))
								}, this);
						Wtf
								.getCmp("tempAddField")
								.on(
										"change",
										function() {
											Wtf
													.getCmp("tempAddField")
													.setValue(
															WtfGlobal
																	.HTMLStripper(Wtf
																			.getCmp(
																					"tempAddField")
																			.getValue()))
										}, this);
						this.addExtTargetWindow.show();
						if (B != null) {
							Wtf.getCmp("tempNameField").setValue(
									B.json.username);
							Wtf.getCmp("tempEmailField").setValue(
									B.json.emailid);
							Wtf.getCmp("tempPhoneField").setValue(
									B.json.contactno);
							Wtf.getCmp("tempAddField").setValue(B.json.address);
							Wtf.getCmp("tempContIdField").setValue(
									B.json.userid)
						}
					},
					addNewTargetHandler : function() {
						addTargetModuleTab()
					},
					saveTargetList_Targets : function() {
						var A = "";
						if (this.campTargetStore.getCount() < 1) {
							ResponseAlert(73);
							return
						}
						if (this.name.getValue() == "") {
							ResponseAlert(63);
							return
						}
						Wtf.Ajax
								.requestEx(
										{
											url : Wtf.req.base + "campaign.jsp",
											params : {
												targets : A,
												listid : this.TLID,
												mode : this.mode,
												name : this.name.getValue(),
												desc : this.desc.getValue(),
												flag : 8
											}
										},
										this,
										function() {
											this.isClosable = true;
											this.fireEvent("close");
											WtfComMsgBox(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.Target"),
															WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.Targetlistsavedsuccessfully") ],
													0)
										},
										function() {
											WtfComMsgBox(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.Target"),
															WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.FailedtosaveTargetlist") ],
													1)
										});
						var B = Wtf.getCmp(this.id);
						if (this.addNewDashboardCall) {
							mainPanel.remove(B);
							mainPanel.doLayout()
						} else {
							this.mainTab.remove(B);
							this.mainTab.doLayout()
						}
						if (this.store) {
							this.store.load()
						}
					},
					createNewTarget : function(A) {
						this.relatedToMod = "";
						var D = "";
						var C = "";
						var B = "";
						if (A == 1) {
							this.relatedToMod = "1";
							C = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.AddanewLead");
							D = WtfGlobal
									.getLocaleText("hrms.CampaignDetail.ProvideinformationtoaddLead");
							B = "images/leads.gif"
						} else {
							if (A == 2) {
								this.relatedToMod = "2";
								C = WtfGlobal
										.getLocaleText("hrms.CampaignDetail.AddanewContact");
								D = WtfGlobal
										.getLocaleText("hrms.CampaignDetail.ProvideinformationtoaddContact");
								B = "images/contacts3.gif"
							} else {
								if (A == 4) {
									this.relatedToMod = "4";
									C = WtfGlobal
											.getLocaleText("hrms.CampaignDetail.AddanewTarget");
									D = WtfGlobal
											.getLocaleText("hrms.CampaignDetail.ProvideinformationtoaddTarget");
									B = "images/createuser.png"
								}
							}
						}
						if (A == 2) {
							this.form1 = new Wtf.form.FormPanel(
									{
										border : false,
										items : [
												new Wtf.form.TextField(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.common.name"),
															id : "target_name"
																	+ this.id,
															allowBlank : false,
															msgTarget : "side",
															width : 200
														}),
												{
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.common.email.id"),
													id : "target_email_id"
															+ this.id,
													width : 200,
													allowBlank : false,
													msgTarget : "side",
													vtype : "email",
													xtype : "striptextfield"
												} ]
									})
						} else {
							this.form1 = new Wtf.form.FormPanel(
									{
										border : false,
										items : [
												new Wtf.form.TextField(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.common.name"),
															id : "target_name"
																	+ this.id,
															allowBlank : false,
															msgTarget : "side",
															width : 200
														}),
												{
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.common.email.id"),
													id : "target_email_id"
															+ this.id,
													width : 200,
													allowBlank : false,
													msgTarget : "side",
													vtype : "email",
													xtype : "striptextfield"
												},
												new Wtf.form.TextField(
														{
															fieldLabel : WtfGlobal
																	.getLocaleText("hrms.common.Company"),
															id : "target_company"
																	+ this.id,
															allowBlank : false,
															msgTarget : "side",
															width : 200
														}) ]
									})
						}
						this.impWin1 = new Wtf.Window(
								{
									resizable : false,
									scope : this,
									layout : "border",
									modal : true,
									width : 380,
									height : A == 2 ? 250 : 280,
									iconCls : "pwnd favwinIcon",
									id : "create_new_target_window",
									title : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.NewTarget"),
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml("" + C + "",
														"" + D + "", "" + B
																+ "")
											},
											{
												region : "center",
												layout : "fit",
												border : false,
												bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 10px 10px 30px",
												items : this.form1
											} ],
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												type : "submit",
												scope : this,
												handler : function() {
													var G = Wtf.getCmp(
															"target_name"
																	+ this.id)
															.getValue();
													var F = Wtf.getCmp(
															"target_email_id"
																	+ this.id)
															.getValue();
													var E = "";
													if (A == 2) {
														if (F.trim() == ""
																|| G.trim() == "") {
															ResponseAlert(152);
															return
														}
														this.saveContact(G, F)
													} else {
														E = Wtf
																.getCmp(
																		"target_company"
																				+ this.id)
																.getValue();
														if (F.trim() == ""
																|| G.trim() == ""
																|| E.trim() == "") {
															ResponseAlert(152);
															return
														}
														if (A == 1) {
															this.saveLead(G, F,
																	E)
														} else {
															this.saveTarget(G,
																	F, E)
														}
													}
													this.impWin1.close()
												}
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												scope : this,
												handler : function() {
													this.impWin1.close()
												}
											} ]
								});
						this.impWin1.show()
					},
					saveLead : function(R, J, K) {
						var M = R.split(" ");
						var I = "";
						var O = "";
						if (M.length == 1) {
							I = R
						} else {
							O = M[0];
							I = M[1]
						}
						var N = "0";
						var B = loginid;
						var P = "";
						var C = 1;
						var Q = "";
						var D = "";
						var E = "";
						var A = "";
						var G = "";
						var S = "";
						var F = "";
						P += "{'leadid':'" + N + "',";
						P += "'leadownerid':'" + B + "',";
						P += "'firstname':'" + O + "',";
						P += "'lastname':'" + I + "',";
						P += "'validflag':'" + C + "',";
						P += "'title':'" + Q + "',";
						P += "'phone':'" + E + "',";
						P += "'leadstatusid':'" + D + "',";
						P += "'email':'" + J + "',";
						P += "'street':'" + F + "',";
						P += "'ratingid':'" + A + "',";
						P += "'industryid':'" + S + "',";
						P += "'leadsourceid':'" + G + "',";
						P += "'activities':'',";
						P += "'productid': '', ";
						P += "'price': '', ";
						P += "'revenue': '', ";
						P += "'moredetails': '', ";
						P += "'company':'" + K + "'},";
						var L = P.length - 1;
						var H = P.substr(0, L);
						this.saveRecordReq(H, {
							flag : 20,
							auditEntry : 1
						}, 1)
					},
					saveContact : function(A, G) {
						var K = A.split(" ");
						var H = "";
						var D = "";
						if (K.length == 1) {
							H = A
						} else {
							D = K[0];
							H = K[1]
						}
						var C = "0";
						var B = loginid;
						var E = "";
						var I = 1;
						E += "{'contactid':'" + C + "',";
						E += "'contactownerid':'" + B + "',";
						E += "'firstname':'" + D + "',";
						E += "'lastname':'" + H + "',";
						E += "'accountid':'',";
						E += "'phone':'',";
						E += "'mobile':'',";
						E += "'email':'" + G + "',";
						E += "'industryid':'',";
						E += "'leadsourceid':'',";
						E += "'title':'',";
						E += "'street':'',";
						E += "'createdon':'',";
						E += "'validflag':'" + I + "',";
						E += "'activities':'',";
						E += "'description':''},";
						var J = E.length - 1;
						var F = E.substr(0, J);
						this.saveRecordReq(F, {
							flag : 22,
							auditEntry : 1
						}, 2)
					},
					saveTarget : function(A, F, G) {
						var L = A.split(" ");
						var H = "";
						var B = "";
						if (L.length == 1) {
							H = A
						} else {
							B = L[0];
							H = L[1]
						}
						var J = "0";
						var C = loginid;
						var D = "";
						var I = 1;
						D += '{"targetModuleid":"' + J + '",';
						D += '"targetModuleownerid":"' + C + '",';
						D += '"firstname":"' + B + '",';
						D += '"lastname":"' + H + '",';
						D += '"company":"' + G + '",';
						D += '"auditstr":"",';
						D += '"phone":"",';
						D += '"mobile":"",';
						D += '"email":"' + F + '",';
						D += '"address":"",';
						D += '"validflag":"' + I + '",';
						D += '"description":""},';
						var K = D.length - 1;
						var E = D.substr(0, K);
						this.saveRecordReq(E, {
							flag : 301,
							auditEntry : 1
						}, 3)
					},
					saveRecordReq : function(jsondata, paramObj, actionCode) {
						Wtf.commonWaitMsgBox(WtfGlobal
								.getLocaleText("hrms.common.Savingdata"));
						var jsonData = eval("(" + jsondata + ")");
						paramObj["jsondata"] = jsondata;
						paramObj["type"] = 1;
						paramObj["TLID"] = this.TLID;
						var recID = "";
						Wtf.Ajax.requestEx({
							url : Wtf.req.base + "crm.jsp",
							params : paramObj
						}, this, function(res) {
							if (res.TLID) {
								this.TLID = res.TLID
							}
							Wtf.updateProgress();
							this.campTargetStore.baseParams.listID = this.TLID;
							this.campTargetStore.load({
								params : {
									start : 0,
									limit : this.pP.combo.value
								}
							})
						}, function(res) {
							WtfComMsgBox(152, 1)
						})
					}
				});
Wtf.importTargetWindow = function(A) {
	A.title = WtfGlobal.getLocaleText({
		key : "hrms.CampaignDetail.Importaction",
		params : [ A.butObj.text ]
	});
	Wtf.apply(this, A);
	Wtf.importTargetWindow.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.importTargetWindow,
				Wtf.Window,
				{
					iconCls : "pwnd favwinIcon",
					layout : "fit",
					modal : true,
					resizable : false,
					height : 500,
					width : 600,
					onRender : function(A) {
						Wtf.importTargetWindow.superclass.onRender
								.call(this, A);
						this.importTargetStore = new Wtf.data.Store({
							url : Wtf.req.base + "campaign.jsp",
							baseParams : {
								importID : this.butObj.flag,
								tlid : this.TLID,
								flag : 20
							},
							method : "post",
							reader : this.scope.targetReader
						});
						var B = new Wtf.grid.CheckboxSelectionModel({
							singleSelect : this.butObj.flag == "4" ? true
									: false
						});
						this.colModel = new Wtf.grid.ColumnModel(
								[
										new Wtf.grid.RowNumberer(),
										B,
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.name"),
											sortable : true,
											dataIndex : "name"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.Email"),
											sortable : true,
											hidden : this.butObj.flag == "4" ? true
													: false,
											dataIndex : "emailid"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.CampaignDetail.NoofTargets"),
											sortable : true,
											width : 50,
											hidden : this.butObj.flag == "4" ? false
													: true,
											dataIndex : "targetscount"
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.performance.description"),
											sortable : true,
											hidden : this.butObj.flag == "4" ? false
													: true,
											dataIndex : "targetlistDescription",
											renderer : function(C) {
												return '<div wtf:qtip="'
														+ C
														+ '"wtf:qtitle='
														+ WtfGlobal
																.getLocaleText("hrms.performance.description")
														+ ">" + C + "</div>"
											}
										} ]);
						this.quickPanelSearch = new Wtf.KWLTagSearch(
								{
									width : 150,
									emptyText : WtfGlobal
											.getLocaleText("hrms.CampaignDetail.SearchbyName"),
									Store : this.importTargetStore
								});
						this.pg = new Wtf.PagingSearchToolbar({
							pageSize : 15,
							searchField : this.quickPanelSearch,
							store : this.importTargetStore,
							displayInfo : true,
							plugins : this.pP = new Wtf.common.pPageSize()
						});
						this.importGrid = new Wtf.grid.GridPanel({
							store : this.importTargetStore,
							cm : this.colModel,
							sm : B,
							border : false,
							loadMask : true,
							viewConfig : {
								forceFit : true
							},
							tbar : [ "-", this.quickPanelSearch, "-" ],
							bbar : this.pg
						});
						this.importTargetStore
								.load({
									params : {
										start : 0,
										limit : this.importGrid
												.getBottomToolbar().pageSize
									}
								});
						this.importTargetStore.on("load", function(C) {
							this.quickPanelSearch.StorageChanged(C)
						}, this);
						this.importTargetStore.on("datachanged", function() {
							var C = this.pP.combo.value;
							this.quickPanelSearch.setPage(C)
						}, this);
						this.mainPanel = new Wtf.Panel(
								{
									layout : "border",
									border : false,
									buttons : [
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.submit"),
												scope : this,
												handler : this.addEmailsToGrid
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.Close"),
												scope : this,
												handler : function() {
													this.close()
												}
											} ],
									items : [
											{
												region : "north",
												height : 75,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText({
																	key : "hrms.CampaignDetail.Importaction",
																	params : [ this.butObj.text ]
																}),
														WtfGlobal
																.getLocaleText({
																	key : "hrms.CampaignDetail.SelectactionandClicksubmitbtn",
																	params : [ this.butObj.text ]
																}),
														"images/import.png")
											}, {
												layout : "fit",
												region : "center",
												items : this.importGrid
											} ]
								});
						this.add(this.mainPanel)
					},
					addEmailsToGrid : function() {
						if (this.butObj.flag == "4") {
							var F = this.importGrid.getSelectionModel()
									.getSelected().data;
							Wtf.Ajax
									.requestEx(
											{
												url : Wtf.req.base
														+ "campaign.jsp",
												params : {
													importtl : F.relatedid,
													listid : this.scope.TLID,
													flag : 30
												}
											},
											this,
											function(H, I) {
												if (H.TLID) {
													this.scope.TLID = H.TLID
												}
												Wtf.updateProgress();
												this.scope.isClosable = false;
												var G = this.scope.targetGrid
														.getStore();
												G.baseParams.listID = this.scope.TLID;
												G
														.load({
															params : {
																start : 0,
																limit : this.scope.pP.combo.value
															}
														});
												Wtf.MessageBox
														.show({
															title : WtfGlobal
																	.getLocaleText("hrms.common.Import"),
															msg : WtfGlobal
																	.getLocaleText("hrms.CampaignDetail.TargetListImportedSuccess"),
															buttons : Wtf.MessageBox.YESNO,
															animEl : "mb9",
															scope : this,
															icon : Wtf.MessageBox.INFO,
															fn : function(J, K) {
																if (J == "yes") {
																} else {
																	this
																			.close()
																}
															}
														})
											}, function() {
											})
						} else {
							if (this.importGrid.getSelectionModel()
									.hasSelection()) {
								var D = "[";
								var C = "";
								var E = this.importGrid.getSelectionModel()
										.getSelections();
								for ( var B = 0; B < E.length; B++) {
									var A = E[B].get("relatedid");
									D += '{"rid":"' + A + '"},';
									if (B == 0) {
										C = E[B].get("relatedto")
									}
								}
								D = D.substr(0, D.length - 1);
								D += "]";
								Wtf
										.commonWaitMsgBox(WtfGlobal
												.getLocaleText("hrms.CampaignDetail.ImportingData"));
								Wtf.Ajax
										.requestEx(
												{
													url : Wtf.req.base
															+ "campaign.jsp",
													params : {
														data : D,
														listid : this.scope.TLID,
														relatedto : C,
														flag : 29
													}
												},
												this,
												function(H, I) {
													if (H.TLID) {
														this.scope.TLID = H.TLID
													}
													Wtf.updateProgress();
													this.scope.isClosable = false;
													var G = this.scope.targetGrid
															.getStore();
													G.baseParams.listID = this.scope.TLID;
													G
															.load({
																params : {
																	start : 0,
																	limit : this.scope.pP.combo.value
																}
															});
													Wtf.MessageBox
															.show({
																title : WtfGlobal
																		.getLocaleText("hrms.common.Import"),
																msg : WtfGlobal
																		.getLocaleText({
																			key : "hrms.CampaignDetail.nRecImportedSuccess",
																			params : [ E.length ]
																		}),
																buttons : Wtf.MessageBox.YESNO,
																animEl : "mb9",
																scope : this,
																icon : Wtf.MessageBox.INFO,
																fn : function(
																		J, K) {
																	if (J == "yes") {
																	} else {
																		this
																				.close()
																	}
																}
															})
												}, function() {
												})
							}
						}
					}
				});
Wtf.userPayCycleGrid = function(A) {
	A.border = false;
	A.layout = "fit";
	deleteMappingIds = new Array();
	this.addEvents("assignemployee");
	Wtf.userPayCycleGrid.superclass.constructor.call(this, A);
	Wtf.apply(this, A)
};
Wtf
		.extend(
				Wtf.userPayCycleGrid,
				Wtf.Panel,
				{
					initComponent : function(A) {
						this.grid = this.getGrid();
						this.designationId = "";
						this.add(this.grid);
						this.grid
								.on(
										"rowclick",
										function(C, B, D) {
											if (D
													.getTarget("div[class='pwndCommon gridCancel']")) {
												var E = C.store.getAt(B);
												if (E.get("salaryflag") == "1") {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.warning"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.Salaryisalreadygeneratedusingthistemplatesoyoucannotunassignemployee") ],
															2)
												} else {
													deleteMappingIds
															.push(E.data.usertemplateid);
													C.store.remove(E)
												}
											}
										});
						this.on("activate", function(C, B) {
							this.doLayout()
						});
						this.assignedempstore.load({
							params : {
								templateid : this.templateid,
								grouper : "addpayroll",
								firequery : "1"
							}
						})
					},
					setDesignationId : function(A) {
						this.designationId = A
					},
					setpayinterval : function(A) {
						this.payinterval = A
					},
					seteffdate : function(B) {
						this.effdate = B;
						this.datearr = [];
						if (this.payinterval == 3) {
							for ( var A = 0; A < 7; A++) {
								if (B - 1 != A) {
									this.datearr.push(A)
								}
							}
						}
					},
					deleteRenderer : function(B, A, D, C) {
						if (D.data.id != "-1") {
							return "<div><div class='pwndCommon gridCancel' style='cursor:pointer' wtf:qtip="
									+ WtfGlobal
											.getLocaleText("hrms.common.DeleteRecord")
									+ "></div></div>"
						}
					},
					addBlankRow : function() {
						this.assignedempstore.add(new Wtf.data.Record(
								[ "", "" ]))
					},
					getAllEmployeeGrid : function() {
						var B = new Wtf.grid.CheckboxSelectionModel({});
						var A = new Wtf.grid.ColumnModel(
								[
										B,
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Employee"),
											dataIndex : "fullname"
										},
										{
											header : WtfGlobal.getLocaleText({
												key : "hrms.payroll.Basicsym",
												params : [ WtfGlobal
														.getCurrencySymbol() ]
											}),
											dataIndex : "basic",
											minValue : 1,
											allowNegative : false,
											allowBlank : false,
											editor : new Wtf.form.NumberField({
												width : 155,
												maxLength : 10
											})
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EffectiveFrom"),
											dataIndex : "effectivedate",
											editor : new Wtf.form.DateField(
													{
														width : 155,
														readOnly : true,
														emptyText : WtfGlobal
																.getLocaleText("hrms.timesheet.fromdate"),
														disabledDaysText : WtfGlobal
																.getLocaleText("hrms.payroll.select.another.day"),
														format : "m/d/Y",
														disabledDays : this.datearr
													}),
											renderer : WtfGlobal.onlyDateRenderer
										} ]);
						this.employeeSelectionGrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.allEmpStore,
									cm : A,
									sm : B,
									clicksToEdit : 1,
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.NoEmployeeisassignedtothisDesignation")),
										autoFill : true
									},
									border : false
								});
						return this.employeeSelectionGrid
					},
					getToolbar : function() {
						this.assignEmployeeWin = "";
						this.assignEmpBtn = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.assignemployee"),
									iconCls : "pwndCommon profilebuttonIcon",
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.Pleaseselectadesignationfirstthenassignemployee"),
									handler : function() {
										if (this.designationId != null
												&& this.designationId != ""
												&& ((this.payinterval != null && this.payinterval != "") || (this.effdate != null && this.effdate != ""))) {
											var B = '{"root":[{ "iscustom":false,"column":"ua.designationid.id","searchText":"'
													+ this.designationId
													+ '","columnheader":"Designation","search":"'
													+ this.designationId
													+ '","combosearch":"undefined","xtype":"combo"}]}';
											this.allEmpStore
													.on(
															"load",
															function() {
																this.quickSearchEMP
																		.StorageChanged(this.allEmpStore);
																this.allEmpStore
																		.filterBy(
																				function(
																						C,
																						D) {
																					C
																							.set(
																									"effectivedate",
																									new Date());
																					return true
																				},
																				this)
															}, this);
											this.allEmpStore.load({
												params : {
													"searchJson" : B,
													mode : 114
												}
											});
											this.quickSearchEMP = new Wtf.wtfQuickSearch(
													{
														width : 200,
														field : "fullname",
														emptyText : WtfGlobal
																.getLocaleText("hrms.common.grid.search.msg")
													});
											this.assignEmployeeWin = new Wtf.Window(
													{
														width : 400,
														height : 400,
														id : "assignEmplyeeWin",
														iconCls : getButtonIconCls(Wtf.btype.winicon),
														modal : true,
														title : WtfGlobal
																.getLocaleText("hrms.payroll.SelectEmployees"),
														layout : "border",
														items : [
																{
																	region : "north",
																	height : 90,
																	border : false,
																	bodyStyle : "backgroubodyStylend-color:white;padding:8px;border-bottom:1px solid #bfbfbf;background-color: white",
																	html : getTopHtml(
																			WtfGlobal
																					.getLocaleText("hrms.payroll.assignemployee"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.Seteffectivedateandselectemployeestobeassignedtothetemplate"),
																			this.typeimage)
																},
																{
																	border : false,
																	region : "center",
																	layout : "fit",
																	height : 300,
																	tbar : [
																			WtfGlobal
																					.getLocaleText("hrms.common.QuickSearch")
																					+ ": ",
																			this.quickSearchEMP ],
																	items : [ this
																			.getAllEmployeeGrid() ]
																} ],
														buttons : [
																{
																	text : WtfGlobal
																			.getLocaleText("hrms.payroll.Assign"),
																	handler : function() {
																		var C = this.employeeSelectionGrid
																				.getSelectionModel()
																				.getSelections();
																		var F = "[";
																		var L = "";
																		for ( var J = 0; J < C.length; J++) {
																			var I = C[J]
																					.get("joindate");
																			if (I == null
																					|| I == undefined
																					|| I == "") {
																				L += C[J]
																						.get("fullname")
																						+ "<br/>"
																			}
																			if (C[J]
																					.get("basic") == ""
																					|| C[J]
																							.get("basic") < 0) {
																				calMsgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.warning"),
																								WtfGlobal
																										.getLocaleText("hrms.payroll.Basicisinvalid") ],
																						2);
																				return
																			}
																			if (this.payinterval == 3) {
																				var K = C[J]
																						.get(
																								"effectivedate")
																						.getDay();
																				for ( var D = 0; D < this.datearr.length; D++) {
																					if (K == this.datearr[D]) {
																						calMsgBoxShow(
																								[
																										WtfGlobal
																												.getLocaleText("hrms.common.warning"),
																										WtfGlobal
																												.getLocaleText("hrms.payroll.Selectedeffectivedateiswrong") ],
																								2);
																						return
																					}
																				}
																			}
																			if (J > 0) {
																				F += ","
																			}
																			F += "{userid:'"
																					+ C[J]
																							.get("userid")
																					+ "',effectiveDate:'"
																					+ C[J]
																							.get(
																									"effectivedate")
																							.format(
																									"Y-m-d")
																					+ "',basic:'"
																					+ C[J]
																							.get("basic")
																					+ "'}"
																		}
																		if (L != "") {
																			calMsgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.warning"),
																							WtfGlobal
																									.getLocaleText("hrms.payroll.Pleasesetthejoiningdateforfollowingemployeebeforeassigningtemplate")
																									+ " : "
																									+ L ],
																					2);
																			return
																		}
																		var G = "";
																		for ( var J = 0; J < C.length; J++) {
																			var I = C[J]
																					.get("joindate");
																			if (new Date(
																					I)
																					.format("Y-m-d") > C[J]
																					.get(
																							"effectivedate")
																					.format(
																							"Y-m-d")) {
																				G += "<br/>"
																						+ C[J]
																								.get("fullname")
																			}
																		}
																		if (G != "") {
																			calMsgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.warning"),
																							WtfGlobal
																									.getLocaleText("hrms.payroll.Pleasesetthejoiningdateforfollowingemployeebeforeassigningtemplate")
																									+ " : "
																									+ G ],
																					2);
																			return
																		}
																		F += "]";
																		var H = WtfGlobal
																				.getLocaleText("hrms.payroll.OnethetemplatesisalreadyassignedforselectedEffectiveDatePleaseselectanotherdateForthefollowingemployee")
																				+ " :<br/><br/>";
																		var E = false;
																		Wtf.Ajax
																				.requestEx(
																						{
																							url : "Payroll/Template/getAssignedTemplateForEmponDate.py",
																							method : "GET",
																							params : {
																								records : F
																							}
																						},
																						this,
																						function(
																								N) {
																							var M = N.data;
																							var Q = 1;
																							if (M != null
																									&& M != undefined) {
																								for ( var P = 0; P < M.length; P++) {
																									var R = -1;
																									for ( var O = 0; O < C.length; O++) {
																										if (C[O]
																												.get("userid") == M[P].userid
																												&& M[P].effectivedate == C[O]
																														.get(
																																"effectivedate")
																														.format(
																																"Y-m-d")) {
																											R = O
																										}
																									}
																									if (R != -1) {
																										E = true;
																										H += "<b>"
																												+ Q
																												+ ")"
																												+ C[R]
																														.get("fullname")
																												+ "</b><br/>";
																										C
																												.splice(
																														R,
																														1);
																										Q++
																									}
																								}
																							}
																							if (E) {
																								Wtf.MessageBox
																										.alert(
																												WtfGlobal
																														.getLocaleText("hrms.payroll.Errorassigningusers"),
																												H)
																							}
																							this.assignedempstore
																									.add(C);
																							Wtf
																									.getCmp(
																											"assignEmplyeeWin")
																									.close()
																						},
																						function() {
																						})
																	},
																	scope : this
																},
																{
																	text : WtfGlobal
																			.getLocaleText("hrms.common.cancel"),
																	handler : function() {
																		Wtf
																				.getCmp(
																						"assignEmplyeeWin")
																				.close()
																	}
																} ]
													}).show()
										} else {
											calMsgBoxShow(223, 0)
										}
									},
									scope : this
								});
						var A = new Wtf.Toolbar([ this.assignEmpBtn ]);
						return A
					},
					getRecordsJSON : function() {
						var B = this.assignedempgrid.store.getRange(0,
								this.assignedempgrid.store.getCount());
						var A = "[";
						for ( var C = 0; C < B.length; C++) {
							if (C > 0) {
								A += ","
							}
							A += "{userid:'" + B[C].get("userid")
									+ "',effectiveDate:'"
									+ B[C].get("effectivedate").format("Y-m-d")
									+ "',basic:'" + B[C].get("basic")
									+ "',usertemplateid:'"
									+ B[C].get("usertemplateid") + "'}"
						}
						A += "]";
						return A
					},
					getGrid : function() {
						this.fieldsrec = Wtf.data.Record.create([ {
							name : "usertemplateid"
						}, {
							name : "fullname"
						}, {
							name : "userid"
						}, {
							name : "basic"
						}, {
							name : "salaryflag"
						}, {
							name : "effectivedate",
							type : "date",
							dateFormat : "Y-m-d"
						}, {
							name : "joindate"
						} ]);
						this.employeedatareader = new Wtf.data.KwlJsonReader({
							root : "data"
						}, this.fieldsrec);
						this.allEmpStore = new Wtf.data.Store({
							url : "Common/getAllUserDetailsHrms.common",
							method : "GET",
							reader : this.employeedatareader
						});
						this.assignedempstore = new Wtf.data.Store(
								{
									url : "Payroll/Template/getAssignedEmpForTemplate.py",
									method : "GET",
									reader : this.employeedatareader
								});
						this.cm = new Wtf.grid.ColumnModel(
								[
										{
											header : WtfGlobal
													.getLocaleText("hrms.payroll.Employee"),
											dataIndex : "fullname",
											width : 150
										},
										{
											header : WtfGlobal.getLocaleText({
												key : "hrms.payroll.Basicsym",
												params : [ WtfGlobal
														.getCurrencySymbol() ]
											}),
											dataIndex : "basic",
											width : 150
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.EffectiveFrom"),
											dataIndex : "effectivedate",
											renderer : WtfGlobal.onlyDateRenderer,
											width : 200
										},
										{
											header : WtfGlobal
													.getLocaleText("hrms.common.delete"),
											renderer : this.deleteRenderer
													.createDelegate(this)
										} ]);
						this.assignedempgrid = new Wtf.grid.EditorGridPanel(
								{
									store : this.assignedempstore,
									stripeRows : true,
									tbar : this.getToolbar(),
									id : this.id + "assignedemp",
									scope : this,
									height : 440,
									clicksToEdit : 1,
									title : WtfGlobal
											.getLocaleText("hrms.payroll.AssignedEmployees"),
									viewConfig : {
										forceFit : true,
										emptyText : WtfGlobal
												.emptyGridRenderer(WtfGlobal
														.getLocaleText("hrms.payroll.NoEmployeesareassignedtothisSalaryTemplatePleaseclickonAssignEmployeetoselectfromthelist"))
									},
									cm : this.cm
								});
						return this.assignedempgrid
					},
					getDeleteMappingIdsJSON : function() {
						return deleteMappingIds
					}
				});
Wtf.AddCostCenter = function(A) {
	Wtf.apply(this, A);
	Wtf.AddCostCenter.superclass.constructor.call(this, A)
};
Wtf
		.extend(
				Wtf.AddCostCenter,
				Wtf.Window,
				{
					onRender : function(A) {
						Wtf.AddCostCenter.superclass.onRender.call(this, A);
						this.loadMask = new Wtf.LoadMask(this.el.dom, Wtf
								.apply(this.empProfile));
						this.CostCenterPanel = new Wtf.Panel(
								{
									border : false,
									layout : "fit",
									items : [ {
										border : false,
										region : "center",
										layout : "border",
										items : [
												{
													region : "north",
													height : 70,
													border : false,
													bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
													html : this.isview ? getTopHtml(
															WtfGlobal
																	.getLocaleText({
																		key : "hrms.common.cost.center.params",
																		params : [ this.action ]
																	}), "")
															: getTopHtml(
																	WtfGlobal
																			.getLocaleText({
																				key : "hrms.common.cost.center.params",
																				params : [ this.action ]
																			}),
																	WtfGlobal
																			.getLocaleText("hrms.common.fill.following.fields"))
												},
												{
													border : false,
													region : "center",
													cls : "windowstyle",
													layout : "fit",
													bodyStyle : "background-color:#f1f1f1;padding:15px",
													items : [ this.CostCenterForm = new Wtf.form.FormPanel(
															{
																url : "Common/Master/addCostCenter.common",
																waitMsgTarget : true,
																method : "POST",
																border : false,
																bodyStyle : "font-size:10px;padding:10px 20px;",
																lableWidth : 50,
																layoutConfig : {
																	deferredRender : false
																},
																defaults : {
																	width : 200,
																	msgTarget : "side"
																},
																defaultType : "textfield",
																items : [
																		this.txtId = new Wtf.form.TextField(
																				{
																					width : 200,
																					maxLength : 50,
																					fieldLabel : WtfGlobal
																							.getLocaleText("hrms.common.cost.center.code")
																							+ "*",
																					allowBlank : false,
																					name : "code",
																					id : "txtId"
																							+ this.id
																				}),
																		this.txtName = new Wtf.form.TextField(
																				{
																					width : 200,
																					maxLength : 100,
																					fieldLabel : WtfGlobal
																							.getLocaleText("hrms.common.cost.center.name")
																							+ "*",
																					allowBlank : false,
																					name : "name",
																					id : "txtName"
																							+ this.id
																				}) ]
															}) ]
												} ]
									} ],
									buttonAlign : "right",
									buttons : [
											{
												text : (this.action == "Edit") ? WtfGlobal
														.getLocaleText("hrms.activityList.edit")
														: WtfGlobal
																.getLocaleText("hrms.common.submit"),
												id : "Item-submit-btn",
												handler : this.saveCostCenterRequest,
												scope : this
											},
											{
												text : WtfGlobal
														.getLocaleText("hrms.common.cancel"),
												handler : function() {
													this.close()
												},
												scope : this
											} ]
								});
						this.txtName.on("change", function() {
							this.txtName.setValue(HTMLStripper(this.txtName
									.getValue()))
						}, this);
						this.add(this.CostCenterPanel);
						if (this.rec && this.action != "Add") {
							this.txtId.setValue(this.rec.get("code"));
							this.txtName.setValue(this.rec.get("name"))
						}
					},
					saveCostCenterRequest : function() {
						if (this.CostCenterForm.form.isValid()) {
							var B = false;
							for ( var A = 0; A < this.store.getCount(); A++) {
								if (this.store.getAt(A).get("name") == this.txtName
										.getValue()
										|| this.store.getAt(A).get("code") == this.txtId
												.getValue()) {
									if (this.rec) {
										if (this.store.getAt(A).get("id") != this.rec
												.get("id")) {
											B = true
										}
									} else {
										B = true
									}
								}
							}
							if (B || this.txtName.getValue() == "") {
								Wtf.MessageBox
										.show({
											title : WtfGlobal
													.getLocaleText("hrms.common.error"),
											msg : WtfGlobal
													.getLocaleText("hrms.common.field.blank.data.already.present"),
											icon : Wtf.MessageBox.ERROR,
											buttons : Wtf.MessageBox.OK
										})
							} else {
								Wtf.getCmp("Item-submit-btn").setDisabled(true);
								this.CostCenterForm.form
										.submit(
												{
													scope : this,
													params : {
														"action" : (this.action),
														"id" : (this.action == "Edit") ? this.rec
																.get("id")
																: 0
													},
													failure : function(D, C) {
														msgBoxShow(100, 1);
														Wtf
																.getCmp(
																		"Item-submit-btn")
																.setDisabled(
																		false);
														this.close()
													},
													success : function(D, C) {
														var E = C.result.success;
														if (E) {
															if (this.action == "Edit") {
																calMsgBoxShow([
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.common.cost.center.edited.successfully") ])
															} else {
																calMsgBoxShow([
																		WtfGlobal
																				.getLocaleText("hrms.common.success"),
																		WtfGlobal
																				.getLocaleText("hrms.common.cost.center.added.successfully") ])
															}
														} else {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.error"),
																			WtfGlobal
																					.getLocaleText("hrms.common.error.adding.cost.center") ],
																	1)
														}
														this.store
																.load({
																	params : {
																		configid : this.configid
																	}
																});
														this.close()
													}
												}, this)
							}
						} else {
							Wtf.getCmp("Item-submit-btn").setDisabled(false)
						}
					}
				});
function ResponseAlert(A) {
	var B = [];
	switch (A) {
	case 59:
		B = [ "", WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow214") ];
		break;
	case 60:
		B = [ "", WtfGlobal.getLocaleText("hrms.Messages.calMsgBoxShow215") ];
		break;
	case 152:
		B = [ "", WtfGlobal.getLocaleText("hrms.Messages.msgBoxShow152") ];
		break;
	default:
		B = [ A[0], A[1] ];
		break
	}
	Wtf.notify.msg(B[0], B[1])
}
function WtfComMsgBox(B, C) {
	var D = [];
	switch (B) {
	case 152:
		D = [ WtfGlobal.getLocaleText("hrms.common.error"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 453:
		D = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 457:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 458:
		D = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 470:
		D = [ WtfGlobal.getLocaleText("hrms.common.success"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 605:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 606:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 607:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	case 950:
		D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
				WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
		break;
	break;
case 953:
	D = [ WtfGlobal.getLocaleText("hrms.common.success"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 955:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 956:
	D = [
			WtfGlobal
					.getLocaleText("hrms.administration.email.template.tooltip"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1050:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1051:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1052:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1053:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1054:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
case 1055:
	D = [ WtfGlobal.getLocaleText("hrms.common.alert"),
			WtfGlobal.getLocaleText("hrms.Messages.WtfComMsgBox" + B) ];
	break;
default:
	D = [ B[0], B[1] ];
	break
}
var A = Wtf.MessageBox.INFO;
if (C == 0) {
	A = Wtf.MessageBox.INFO
}
if (C == 1) {
	A = Wtf.MessageBox.ERROR
} else {
	if (C == 2) {
		A = Wtf.MessageBox.WARNING
	} else {
		if (C == 3) {
			A = Wtf.MessageBox.INFO
		}
	}
}
Wtf.MessageBox.show({
	title : D[0],
	msg : D[1],
	buttons : Wtf.MessageBox.OK,
	animEl : "mb9",
	icon : A
})
}
Wtf.leavem.PayrollDateLeaveWindow = function(A) {
Wtf.apply(this, A);
Wtf.leavem.PayrollDateLeaveWindow.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.leavem.PayrollDateLeaveWindow,
			Wtf.Window,
			{
				initComponent : function() {
					Wtf.leavem.PayrollDateLeaveWindow.superclass.initComponent
							.call(this)
				},
				onRender : function(B) {
					Wtf.leavem.PayrollDateLeaveWindow.superclass.onRender.call(
							this, B);
					this.createLeavetypeAdjGrid();
					var A = Array();
					this.adjLeavesPanel = new Wtf.Panel(
							{
								frame : true,
								border : false,
								scope : this,
								layout : "fit",
								items : [ {
									border : false,
									layout : "border",
									items : [
											{
												region : "north",
												height : 80,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.payroll.Unpaidleaves"),
														WtfGlobal
																.getLocaleText("hrms.payroll.Fillthenoofunpaidleavesforrespectiveusers"))
											},
											{
												border : false,
												region : "center",
												bodyStyle : "background:#f1f1f1;font-size:10px;",
												layout : "fit",
												items : [ this.typeGrid ]
											} ]
								} ],
								buttonAlign : "right",
								buttons : [
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.submit"),
											handler : function() {
												this.payrollDateLeaveWindow
														.submitpayrollDateLeaveWindow(
																this.LeavetypeAdjStore,
																this.emparr);
												this.close()
											},
											scope : this
										},
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.cancel"),
											handler : function() {
												this.close()
											},
											scope : this
										} ]
							});
					this.add(this.adjLeavesPanel)
				},
				createLeavetypeAdjGrid : function() {
					this.LeavetypeAdjStore = new Wtf.data.SimpleStore({
						fields : [ "userid", "ename", "unpaidleaves" ],
						data : this.storeData
					});
					this.cm = new Wtf.grid.ColumnModel(
							[
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.employee.name"),
										dataIndex : "ename"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.Unpaidleaves"),
										dataIndex : "unpaidleaves",
										align : "right",
										editor : new Wtf.form.NumberField({
											allowBlank : false,
											maxValue : 30,
											allowNegative : false
										})
									} ]);
					this.LeavetypeAdjStore.on("load", function() {
						Wtf.MsgClose()
					}, this);
					this.LeavetypeAdjStore.on("beforeload", function() {
						msgBoxShow(35, 4, 5, true)
					}, this);
					this.LeavetypeAdjStore.on("loadexception", function() {
						Wtf.MsgClose()
					}, this);
					this.sm2 = new Wtf.grid.RowSelectionModel({
						width : 25,
						singleSelect : true
					});
					this.typeGrid = new Wtf.grid.EditorGridPanel({
						store : this.LeavetypeAdjStore,
						cm : this.cm,
						sm : this.sm2,
						loadMask : true,
						layout : "fit",
						viewConfig : {
							forceFit : true
						},
						clicksToEdit : 1
					})
				}
			});
Wtf.Payroll_Status_Renderer_NOT_STARTED = WtfGlobal
	.getLocaleText("hrms.payroll.not.started");
Wtf.Payroll_Status_Renderer_ENTERED = WtfGlobal
	.getLocaleText("hrms.payroll.entered");
Wtf.Payroll_Status_Renderer_CALCULATED = WtfGlobal
	.getLocaleText("hrms.payroll.calculated");
Wtf.Payroll_Status_Renderer_AUTHORIZED = WtfGlobal
	.getLocaleText("hrms.payroll.Authorized");
Wtf.Payroll_Status_Renderer_UNAUTHORIZED = WtfGlobal
	.getLocaleText("hrms.payroll.Unauthorized");
Wtf.Payroll_Status_Renderer_PROCESSED_TRIAL = WtfGlobal
	.getLocaleText("hrms.payroll.processed.trial");
Wtf.Payroll_Status_Renderer_PROCESSED_FINAL = WtfGlobal
	.getLocaleText("hrms.payroll.processed.final");
Wtf.payrollStatusRenderer = function(C, B, A) {
if (C != null) {
	if (C == 0) {
		return Wtf.Payroll_Status_Renderer_NOT_STARTED
	} else {
		if (C == 1) {
			return "<span style='color:DarkOrchid !important;'>"
					+ Wtf.Payroll_Status_Renderer_ENTERED + "</span>"
		} else {
			if (C == 2) {
				return "<span style='color:blue !important;'>"
						+ Wtf.Payroll_Status_Renderer_CALCULATED + "</span>"
			} else {
				if (C == 3) {
					return "<span style='color:brown !important;'>"
							+ Wtf.Payroll_Status_Renderer_AUTHORIZED
							+ "</span>"
				} else {
					if (C == 4) {
						var D = A.data.comment;
						if (D != undefined && D.trim() != "") {
							return '<div style=\'color:red !important;\'><div style="cursor:pointer" wtf:qtip="'
									+ D
									+ '">'
									+ Wtf.Payroll_Status_Renderer_UNAUTHORIZED
									+ " "
									+ WtfGlobal.addCommentIcon(D)
									+ "</div></div>"
						} else {
							return "<span style='color:red !important;'>"
									+ Wtf.Payroll_Status_Renderer_UNAUTHORIZED
									+ "</span>"
						}
					} else {
						if (C == 5) {
							return "<span style='color:green !important;'>"
									+ Wtf.Payroll_Status_Renderer_PROCESSED_TRIAL
									+ "</span>"
						} else {
							if (C == 6) {
								return "<span style='color:green !important;'>"
										+ Wtf.Payroll_Status_Renderer_PROCESSED_FINAL
										+ "</span>"
							}
						}
					}
				}
			}
		}
	}
}
};
Wtf.GeneratePayrollProcessGrid = function(A) {
Wtf.GeneratePayrollProcessGrid.superclass.constructor.call(this, A);
A.title = WtfGlobal.getLocaleText("hrms.payroll.generate.payroll.process")
};
Wtf
	.extend(
			Wtf.GeneratePayrollProcessGrid,
			Wtf.Panel,
			{
				onRender : function(A) {
					Wtf.monthStore.loadData(Wtf.onceMonthRec);
					Wtf.GeneratePayrollProcessGrid.superclass.onRender.call(
							this, A);
					this.getAdvancedSearchComponent();
					this.generatedSalaryRecord = new Wtf.data.Record.create([ {
						name : "id"
					}, {
						name : "accountno"
					}, {
						name : "resource"
					}, {
						name : "employeeid"
					}, {
						name : "fullname"
					}, {
						name : "costcenter"
					}, {
						name : "costcentername"
					}, {
						name : "jobtitle"
					}, {
						name : "jobtitlename"
					}, {
						name : "contract"
					}, {
						name : "absence"
					}, {
						name : "unpaidleavesAmount"
					}, {
						name : "incomeTax"
					}, {
						name : "actual"
					}, {
						name : "employmentdate",
						type : "date"
					}, {
						name : "contractenddate",
						type : "date"
					}, {
						name : "difference"
					}, {
						name : "status"
					}, {
						name : "comment"
					} ]);
					var B = this.getToolbarArray();
					var C = this.getBottomToolbarButtons();
					this.generatedSalaryStore = new Wtf.data.Store({
						reader : new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.generatedSalaryRecord),
						url : "Payroll/Date/getGeneratedPayrollList.py"
					});
					this.generatedSalaryStore.on("beforeload", function(D, E) {
						E.params = E.params || {};
						E.params.sdate = this.startdate.getValue().format(
								"Y-m-d");
						E.params.edate = this.enddate.getValue()
								.format("Y-m-d");
						E.params.frequency = this.frequencyStoreCmb.getValue();
						E.params.status = this.statusComobBox.getValue()
					}, this);
					calMsgBoxShow(202, 4, true);
					this.generatedSalaryStore.load({
						scope : this,
						params : {
							start : 0,
							limit : 15
						}
					});
					this.generatedSalaryStore.on("load", function() {
						WtfGlobal.closeProgressbar()
					}, this);
					this.rowNo = new Wtf.grid.RowNumberer();
					this.selectionModel = new Wtf.grid.CheckboxSelectionModel({
						singleSelect : false
					});
					this.gridcmodel = new Wtf.grid.ColumnModel(
							[
									this.selectionModel,
									this.rowNo,
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.resource"),
										dataIndex : "resource",
										sortable : true,
										hidden : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.employee.id"),
										dataIndex : "employeeid",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.FullName"),
										dataIndex : "fullname",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.costcenter"),
										dataIndex : "costcentername",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.designation"),
										dataIndex : "jobtitlename",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Contract"),
										dataIndex : "contract",
										hidden : true,
										sortable : true,
										align : "right",
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.absence"),
										dataIndex : "absence",
										sortable : true,
										align : "right",
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.actual"),
										dataIndex : "actual",
										hidden : true,
										scope : this,
										sortable : true,
										align : "right",
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.employment.date"),
										dataIndex : "employmentdate",
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.contract.date"),
										dataIndex : "contractenddate",
										hidden : true,
										scope : this,
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : '<div wtf:qtip="'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.amount.difference.between.current.net.previous.salary")
												+ '">'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.difference")
												+ "</div>",
										dataIndex : "difference",
										sortable : true,
										align : "center",
										renderer : function(D) {
											if (D == 1) {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												if (D == 0) {
													return "<span style='color:red !important;'>"
															+ WtfGlobal
																	.getLocaleText("hrms.common.no")
															+ "</span>"
												}
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Details"),
										dataIndex : "difference",
										sortable : true,
										align : "center",
										renderer : function(E, D, J, I, H, G) {
											var F = E;
											if (J.data.absence == ""
													|| J.data.jobtitle == "") {
												if (J.data.absence === 0) {
													return "<span style='color:green !important;'>"
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.filled")
															+ "</span>"
												} else {
													return "<span style='color:red !important;'>"
															+ WtfGlobal
																	.getLocaleText("hrms.recruitment.not.filled")
															+ "</span>"
												}
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.recruitment.filled")
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.status"),
										dataIndex : "status",
										scope : this,
										sortable : true,
										align : "center",
										groupable : true,
										renderer : Wtf.payrollStatusRenderer
									} ], this);
					this.summary = new Wtf.ux.grid.GridSummary();
					this.generatedSalaryListGrid = new Wtf.KwlGridPanel({
						enableColumnHide : false,
						trackMouseOver : true,
						stripeRows : true,
						border : false,
						loadMask : true,
						searchLabel : " ",
						searchLabelSeparator : " ",
						searchEmptyText : WtfGlobal
								.getLocaleText("hrms.common.search.fullname"),
						searchField : "fullname",
						serverSideSearch : true,
						viewConfig : {
							forceFit : true,
							emptyText : WtfGlobal
									.emptyGridRenderer("No records to show")
						},
						store : this.generatedSalaryStore,
						displayInfo : true,
						cm : this.gridcmodel,
						scope : this,
						width : 400,
						sm : this.selectionModel,
						tbar : B,
						bbar : C
					});
					this.generatedSalaryListGrid
							.getSelectionModel()
							.on(
									"selectionchange",
									function() {
										var E = this.statusComobBox.getValue();
										var D = this.generatedSalaryListGrid
												.getSelectionModel().getCount();
										if (D == 1) {
											this.userid = this.generatedSalaryListGrid
													.getSelectionModel()
													.getSelected().data.resource;
											this.historyid = this.generatedSalaryListGrid
													.getSelectionModel()
													.getSelected().data.id;
											if (E == 1 || E == 2 || E == 3
													|| E == 4 || E == 5) {
												this.deleteEntry
														.setDisabled(false)
											}
											if (E != 0) {
												this.reviewingDetails
														.setDisabled(false);
												this.payrolldata
														.setDisabled(false)
											}
											if (E == 0 || E == 1 || E == 4) {
												this.newComponent
														.setDisabled(false)
											}
											if (E == 1 || E == 4) {
												this.calculate
														.setDisabled(false);
												this.linkComponent
														.setDisabled(false);
												this.zoom.setDisabled(false)
											}
											if (E == 2) {
												this.linkComponent
														.setDisabled(false)
											}
											this.payrollComponentdata
													.setDisabled(false)
										} else {
											if (D > 1) {
												if (E == 1 || E == 2 || E == 3
														|| E == 4 || E == 5) {
													this.deleteEntry
															.setDisabled(false)
												}
												this.payrolldata
														.setDisabled(true);
												this.reviewingDetails
														.setDisabled(true);
												this.newComponent
														.setDisabled(true);
												if (E == 1) {
													this.calculate
															.setDisabled(false)
												}
												this.reviewingDetails
														.setDisabled(true);
												this.linkComponent
														.setDisabled(true);
												this.zoom.setDisabled(true);
												this.payrollComponentdata
														.setDisabled(true)
											} else {
												this.zoom.setDisabled(true);
												this.linkComponent
														.setDisabled(true);
												this.deleteEntry
														.setDisabled(true);
												this.payrolldata
														.setDisabled(true);
												this.reviewingDetails
														.setDisabled(true);
												this.newComponent
														.setDisabled(true);
												this.calculate
														.setDisabled(true);
												this.payrollComponentdata
														.setDisabled(true)
											}
										}
									}, this);
					this.pan = new Wtf.Panel({
						layout : "border",
						border : false,
						items : [ this.filterPanel, {
							region : "center",
							layout : "fit",
							border : false,
							items : [ this.generatedSalaryListGrid ]
						} ]
					});
					this.add(this.pan);
					this.statusComobBox.on("select", function(F, D, E) {
						this.generatedSalaryStore.reload()
					}, this)
				},
				getToolbarArray : function() {
					var btns = [];
					var menubtns = [];
					menubtns
							.push(new Wtf.Action(
									{
										text : WtfGlobal
												.getLocaleText("hrms.payroll.previous.salary.components"),
										tooltip : {
											text : WtfGlobal
													.getLocaleText("hrms.payroll.click.assign.component.settings.allocated.previous.month")
										},
										iconCls : "pwndHRMS assignComponentIcon",
										scope : this,
										handler : function() {
											this
													.assignComponentToEmployee("PreviousSettings")
										}
									}));
					menubtns
							.push(new Wtf.Action(
									{
										text : WtfGlobal
												.getLocaleText("hrms.payroll.default.components"),
										tooltip : {
											text : WtfGlobal
													.getLocaleText("hrms.payroll.click.assign.default.component.settings.user.administration")
										},
										iconCls : "pwndHRMS assignComponentIcon",
										scope : this,
										handler : function() {
											this
													.assignComponentToEmployee("DefaultSettings")
										}
									}));
					this.newComponent = new Wtf.Toolbar.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.assign.component"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS assignComponentIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.assign.components.to.selected.employee"),
								menu : menubtns
							});
					btns.push(this.newComponent);
					btns.push("-");
					this.deleteEntry = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.delete"),
								scope : this,
								disabled : true,
								iconCls : getButtonIconCls(Wtf.btype.deletebutton),
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.delete.generated.authorized.processed.payroll.entries"),
								handler : this.deleteGeneratePayroll
							});
					btns.push(this.deleteEntry);
					btns.push("-");
					this.calculate = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.calculate"),
								scope : this,
								disabled : true,
								iconCls : "pwndPrint calculateIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.calculate.payroll.selected.employee"),
								handler : this.calculatePayroll
							});
					btns.push(this.calculate);
					btns.push("-");
					this.linkComponent = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.manage.amount"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS manageAmountIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.update.amount.components"),
								handler : function() {
									var userid = "";
									var emparr = this.generatedSalaryListGrid
											.getSelectionModel()
											.getSelections();
									if (emparr.length > 1) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.single.record.manage.amount") ],
												0);
										return
									}
									if (emparr.length == 0) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.record(s).manage.amount") ],
												0);
										return
									}
									if (emparr[0].get("status") > 2
											&& emparr[0].get("status") != 4) {
										msgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.salary.already.authorized.selected.employee") ],
												1);
										return
									}
									userid = emparr[0].get("resource");
									var absence = emparr[0].get("absence");
									var historyid = emparr[0].get("id");
									var status = emparr[0].get("status") == 0 ? true
											: false;
									this.linkComponentWin = new Wtf.linkComponentWin(
											{
												iconCls : getButtonIconCls(Wtf.btype.winicon),
												layout : "fit",
												closable : true,
												width : 760,
												title : WtfGlobal
														.getLocaleText("hrms.payroll.manage.amount"),
												height : 500,
												border : false,
												empGDS : this.generatedSalaryStore,
												modal : true,
												userid : userid,
												startdate : this.startdate
														.getValue().format(
																"Y-m-d"),
												enddate : this.enddate
														.getValue().format(
																"Y-m-d"),
												frequency : this.frequencyStoreCmb
														.getValue(),
												absence : absence,
												historyid : historyid,
												scope : this,
												plain : true,
												status : status,
												allempGrid : this.generatedSalaryListGrid
											});
									this.linkComponentWin.show()
								}
							});
					btns.push(this.linkComponent);
					btns.push("-");
					this.zoom = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.manage.employee.details"),
								scope : this,
								disabled : true,
								iconCls : "pwndPrint empDetailsIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.manage.employee.details"),
								handler : function() {
									var emparr = this.generatedSalaryListGrid
											.getSelectionModel()
											.getSelections();
									if (emparr.length > 1) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.single.record.manage.employee.details") ],
												0);
										return
									}
									if (emparr.length == 0) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.record.manage.employee.details") ],
												0);
										return
									}
									if (isStandAlone || !isEleaveIntegration) {
										this.getUnpaidleaves("", emparr)
									} else {
										calMsgBoxShow(202, 4, true);
										var json = new Array();
										var data = {};
										data["userid"] = emparr[0].data.resource;
										data["fromDate"] = this.startdate
												.getValue().format("m-d-Y");
										data["toDate"] = this.enddate
												.getValue().format("m-d-Y");
										json.push(data);
										Wtf.Ajax
												.requestEx(
														{
															url : "Emp/getLeavesFromEleaves.py",
															scope : this,
															method : "post",
															params : {
																jsondata : Wtf
																		.encode(json)
															}
														},
														this,
														function(request) {
															var req = eval("("
																	+ request
																	+ ")");
															this
																	.getUnpaidleaves(
																			req,
																			emparr);
															WtfGlobal
																	.closeProgressbar()
														},
														function(response) {
															WtfGlobal
																	.closeProgressbar()
														})
									}
								}
							});
					btns.push(this.zoom);
					btns.push("-");
					this.reviewingDetails = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.review.details"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS viewbuttonIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.review.salary.details.selected.employee"),
								handler : function() {
									var recData = this.generatedSalaryListGrid
											.getSelectionModel().getSelected().data;
									var userID = recData.resource;
									var historyID = recData.id;
									var empname = recData.fullname;
									var accountno = recData.accountno;
									var unpaidleavesAmount = recData.unpaidleavesAmount;
									var absence = recData.absence;
									this.mainTabId = Wtf.getCmp("as");
									var payslipmodule = Wtf.getCmp(userID
											+ "reviewingdetail"
											+ this.startdate.getValue().format(
													"Y-m-d"));
									if (payslipmodule == null) {
										payslipmodule = new Wtf.resourcePayslip(
												{
													layout : "fit",
													title : WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.s.pay.details",
																params : [ empname ]
															}),
													closable : true,
													border : false,
													id : userID
															+ "reviewingdetail"
															+ this.startdate
																	.getValue()
																	.format(
																			"Y-m-d"),
													iconCls : getTabIconCls(Wtf.etype.hrmsreport),
													userid : userID,
													historyid : historyID,
													startdate : this.startdate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													ename : empname,
													accno : accountno,
													reviewPayrollFlag : true,
													generatedSalaryListGrid : this.generatedSalaryListGrid,
													generatedSalaryStore : this.generatedSalaryStore,
													frequency : this.frequencyStoreCmb
															.getValue(),
													payrollStatus : recData.status,
													unpaidleavesAmount : unpaidleavesAmount,
													incomeTax : recData.incomeTax,
													absence : absence
												});
										this.mainTabId.add(payslipmodule);
										payslipmodule
												.on("gridload",
														function() {
															calMsgBoxShow(202,
																	4, true);
															this.empstore
																	.load()
														}, this)
									}
									this.mainTabId.setActiveTab(payslipmodule);
									this.mainTabId.doLayout()
								}
							});
					btns.push(this.reviewingDetails);
					btns.push("-");
					this.paydetails = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.export.Export"),
								scope : this,
								iconCls : "pwndExport export",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.export.salary.details.csv.format"),
								handler : this.ExportData
							});
					btns.push(this.paydetails);
					btns.push("->");
					btns.push(WtfGlobal
							.getLocaleText("hrms.common.select.status"));
					this.statusComobBox = Wtf.payrollStatusCombobox("Generate");
					btns.push(this.statusComobBox);
					return btns
				},
				assignComponentToEmployee : function(B) {
					var A = "";
					var D = this.generatedSalaryListGrid.getSelectionModel()
							.getSelections();
					if (D.length > 1) {
						calMsgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.payroll.select.single.record.assign.components") ],
								0);
						return
					}
					if (D.length == 0) {
						calMsgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.payroll.select.record.assign.components") ],
								0);
						return
					}
					A = D[0].get("resource");
					var C = D[0];
					calMsgBoxShow(202, 4, true);
					Wtf.Ajax
							.requestEx(
									{
										url : "Payroll/Date/getCheckForFilledDeclarationForm.py",
										params : {
											userid : A,
											enddate : this.enddate.getValue()
													.format("Y-m-d"),
											frequency : this.frequencyStoreCmb
													.getValue()
										}
									},
									this,
									function(E) {
										Wtf.updateProgress();
										if (!E.checkForDeclarationForm) {
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.common.confirm"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.tax.declaration.form.not.filled.selected.employee"),
															function(F) {
																if (F != "yes") {
																	return
																}
																if (B == "PreviousSettings") {
																	this
																			.getPreviousSalaryComponent(
																					A,
																					C)
																} else {
																	if (B == "DefaultSettings") {
																		this
																				.getDefaultSalaryComponent(
																						A,
																						C)
																	}
																}
															}, this)
										} else {
											if (B == "PreviousSettings") {
												this
														.getPreviousSalaryComponent(
																A, C)
											} else {
												if (B == "DefaultSettings") {
													this
															.getDefaultSalaryComponent(
																	A, C)
												}
											}
										}
									}, function(E) {
										calMsgBoxShow(27, 1)
									})
				},
				getPreviousSalaryComponent : function(A, B) {
					this.compWindow = new Wtf.assignComponentWin(
							{
								iconCls : getButtonIconCls(Wtf.btype.winicon),
								layout : "fit",
								closable : true,
								width : 860,
								title : WtfGlobal
										.getLocaleText("hrms.payroll.previous.salary.components"),
								height : 600,
								border : false,
								empGDS : this.generatedSalaryStore,
								modal : true,
								userid : A,
								scope : this,
								plain : true,
								rec : B,
								generatePayrollLink : true,
								previousSalaryFlag : true,
								allempGrid : this.generatedSalaryListGrid,
								startdate : this.startdate.getValue().format(
										"Y-m-d"),
								enddate : this.enddate.getValue().format(
										"Y-m-d"),
								frequency : this.frequencyStoreCmb.getValue()
							});
					this.compWindow.show()
				},
				getDefaultSalaryComponent : function(A, B) {
					this.compWindow = new Wtf.assignComponentWin(
							{
								iconCls : getButtonIconCls(Wtf.btype.winicon),
								layout : "fit",
								closable : true,
								width : 860,
								title : WtfGlobal
										.getLocaleText("hrms.payroll.default.components"),
								height : 600,
								border : false,
								empGDS : this.generatedSalaryStore,
								modal : true,
								userid : A,
								scope : this,
								plain : true,
								rec : B,
								generatePayrollLink : true,
								allempGrid : this.generatedSalaryListGrid,
								startdate : this.startdate.getValue().format(
										"Y-m-d"),
								enddate : this.enddate.getValue().format(
										"Y-m-d"),
								frequency : this.frequencyStoreCmb.getValue()
							});
					this.compWindow.show()
				},
				filterHandler : function() {
					if (this.generatedSalaryStore != undefined) {
						this.generatedSalaryStore
								.load({
									scope : this,
									params : {
										start : 0,
										limit : this.generatedSalaryListGrid.pag.pageSize
									}
								})
					}
				},
				getBottomToolbarButtons : function() {
					var A = [];
					this.payrollComponentdata = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.components"),
								scope : this,
								disabled : true,
								iconCls : "pwndCommon reportbuttonIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.view.payroll.components.selected.employee"),
								handler : function() {
									var E = this.generatedSalaryListGrid
											.getSelectionModel().getSelected();
									var C = E.data.resource;
									var B = Wtf.getCmp("as");
									var D = Wtf.getCmp("Employee_Payroll_Data"
											+ C);
									if (D == null) {
										D = new Wtf.PayrollComponentDataGrid(
												{
													id : "Employee_Payroll_Data"
															+ C,
													layout : "fit",
													title : "<div wtf:qtip='"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.components")
															+ "'>"
															+ WtfGlobal
																	.getLocaleText({
																		key : "hrms.payroll.s.components",
																		params : [ E.data.fullname ]
																	})
															+ "</div>",
													border : false,
													closable : true,
													startdate : this.startdate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													frequency : this.frequencyStoreCmb
															.getValue(),
													year : this.yearCmb
															.getValue(),
													iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip),
													empid : C
												});
										B.add(D)
									}
									B.setActiveTab(D);
									Wtf.getCmp("as").doLayout()
								}
							});
					A.push(this.payrollComponentdata);
					A.push("-");
					this.payrolldata = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.payroll.history"),
								scope : this,
								disabled : true,
								iconCls : "pwndPrint historyIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.view.payroll.history.selected.employee"),
								handler : function() {
									var E = this.generatedSalaryListGrid
											.getSelectionModel().getSelected();
									if (E.data.status == 0) {
										msgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.payroll.selected.employee.not.started.yet.link.component") ],
												1);
										return
									}
									var C = E.data.resource;
									var B = Wtf.getCmp("as");
									var D = Wtf
											.getCmp("GeneratePayrollProcessGridID"
													+ C);
									if (D == null) {
										D = new Wtf.EmployeePayrollDataGrid(
												{
													id : "GeneratePayrollProcessGridID"
															+ C,
													layout : "fit",
													title : "<div wtf:qtip='"
															+ WtfGlobal
																	.getLocaleText("hrms.payroll.payroll.history")
															+ "'>"
															+ WtfGlobal
																	.getLocaleText({
																		key : "hrms.payroll.s.payroll.history",
																		params : [ E.data.fullname ]
																	})
															+ "'</div>",
													border : false,
													closable : true,
													startdate : this.startdate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													frequency : this.frequencyStoreCmb
															.getValue(),
													iconCls : getTabIconCls(Wtf.etype.hrmsmypayslip),
													empid : C
												});
										B.add(D)
									}
									B.setActiveTab(D);
									Wtf.getCmp("as").doLayout()
								}
							});
					A.push(this.payrolldata);
					this.debbugger = new Wtf.Button(
							{
								text : "Debug Data",
								scope : this,
								iconCls : "pwndExport export",
								tooltip : "Click to show debug data",
								handler : function() {
									var D = this.generatedSalaryListGrid
											.getSelectionModel().selections;
									if (D.length != 1) {
										alert("Please select single record");
										return
									}
									var C = this.generatedSalaryListGrid
											.getSelectionModel().getSelected().data;
									var B = C.resource;
									Wtf.Ajax
											.requestEx(
													{
														url : "Payroll/Date/getIncomeTaxDataForDebug.py",
														params : {
															frequency : this.frequencyStoreCmb
																	.getValue(),
															enddate : this.enddate
																	.getValue()
																	.format(
																			"Y-m-d"),
															userid : B
														}
													},
													this,
													function(E) {
														if (E.success == true) {
															alert(" Earning :"
																	+ E.earning
																	+ "\n  Y :"
																	+ E.Y
																	+ "\n  K :"
																	+ E.K
																	+ "\n Y1BeforeBIK :"
																	+ E.Y1BeforeBIK
																	+ "\n  Y1 :"
																	+ E.Y1
																	+ "\n  K1 :"
																	+ E.K1
																	+ "\n  Yt :"
																	+ E.Yt
																	+ "\n  Kt :"
																	+ E.Kt
																	+ "\n  Y2 :"
																	+ E.Y2
																	+ "\n  K2 :"
																	+ E.K2
																	+ " \n  P :"
																	+ E.P
																	+ "\n Additional Renumeration:"
																	+ E.additionalrenum
																	+ "\n Current BIK:"
																	+ E.currentbik
																	+ "\n Current Comp, Opt and Allowances:"
																	+ E.currentcompoptandallowanceDeduction
																	+ "\n Current MTD :"
																	+ E.currentmtd
																	+ "\n Current Zakat :"
																	+ E.currentzakat
																	+ "\n Total Deduction:"
																	+ E.deduction
																	+ "\n Paid Income Tax:"
																	+ E.paidincometax
																	+ "\n Paid Other Deduction:"
																	+ E.paidotherdeduction
																	+ "\n Paid Zakat:"
																	+ E.paidzakat
																	+ "\n <b>Net MTD</b> :"
																	+ E.netmtd)
														}
													},
													function() {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.error"),
																		"Some error occured while unauthorizing." ],
																2)
													})
								}
							});
					return A
				},
				getAdvancedSearchComponent : function() {
					this.monthCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.period"),
						hiddenName : "period",
						forceSelection : true,
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.monthStore,
						width : 150,
						typeAhead : true,
						value : new Date().getMonth() + 1
					});
					this.startdate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.start.date"),
						format : "Y-m-d",
						name : "joindate",
						disabled : true,
						width : 200
					});
					this.enddate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.end.date"),
						format : "Y-m-d",
						disabled : true,
						name : "confirmdate",
						width : 200
					});
					this.yearCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.Year"),
						hiddenName : "year",
						mode : "local",
						valueField : "id",
						displayField : "name",
						forceSelection : true,
						store : Wtf.yearStore,
						width : 150,
						typeAhead : true,
						value : new Date().getFullYear()
					});
					this.frequencyStoreCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.masterconf.frequency"),
						hiddenName : "frequency",
						mode : "local",
						valueField : "id",
						displayField : "name",
						forceSelection : true,
						store : Wtf.frequencyStore,
						width : 150,
						typeAhead : true,
						value : 0
					});
					this.etrydate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.entry.date"),
						format : "Y-m-d",
						name : "entrydate",
						width : 200
					});
					this.applyFilter = new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.payroll.filter"),
						scope : this,
						iconCls : "pwndExport filter",
						tooltip : WtfGlobal
								.getLocaleText("hrms.payroll.filter"),
						handler : this.filterHandler
					});
					this.frequencyStoreCmb.on("select", function(a, b, c) {
						var i = eval(b.data.id);
						if (i == 0) {
							Wtf.monthStore.loadData(Wtf.onceMonthRec);
							this.monthCmb.setValue("1")
						} else {
							if (i == 1) {
								Wtf.monthStore.loadData(Wtf.onceWeekRec);
								this.monthCmb.setValue("1")
							} else {
								Wtf.monthStore.loadData(Wtf.twiceMonthRec);
								this.monthCmb.setValue("1")
							}
						}
						this.setDatevalue()
					}, this);
					this.filterPanel = new Wtf.form.FormPanel(
							{
								autoScroll : true,
								hidden : true,
								border : false,
								layout : "fit",
								region : "north",
								bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 10px 10px 25px;",
								height : 170,
								items : [ {
									border : false,
									defaults : {
										border : false,
										xtype : "fieldset",
										autoHeight : true
									},
									items : [ {
										title : WtfGlobal
												.getLocaleText("hrms.common.advanced.search"),
										layout : "column",
										items : [
												{
													columnWidth : ".50",
													layout : "form",
													border : false,
													labelWidth : 150,
													defaults : {
														anchor : "80%"
													},
													items : [ this.monthCmb,
															this.startdate,
															this.enddate ]
												},
												{
													columnWidth : ".50",
													layout : "form",
													defaults : {
														anchor : "80%"
													},
													border : false,
													labelWidth : 150,
													items : [
															this.yearCmb,
															this.frequencyStoreCmb,
															this.etrydate ]
												} ]
									} ]
								} ]
							});
					this.filterPanel.show();
					this.monthCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.yearCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.filterPanel.on("show", function() {
						this.setDatevalue()
					}, this);
					this.setDatevalue()
				},
				setDatevalue : function() {
					var A = Wtf.PayrollSetDatevalue(this);
					this.startdate.setValue(A.startdt);
					this.enddate.setValue(A.enddt);
					this.filterHandler()
				},
				deleteGeneratePayroll : function() {
					var C = this.generatedSalaryListGrid.getSelectionModel()
							.getSelections();
					if (C.length == 0) {
						calMsgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.payroll.select.record.delete") ],
								0);
						return
					}
					var B = [];
					for ( var A = 0; A < C.length; A++) {
						if (C[A].get("status") <= 5) {
							B.push(C[A].get("resource"))
						}
					}
					Wtf.MessageBox
							.confirm(
									WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									WtfGlobal
											.getLocaleText("hrms.payroll.want.delete.salary.selected.employee"),
									function(D) {
										if (D != "yes") {
											return
										}
										var E = true;
										calMsgBoxShow(201, 4, true);
										Wtf.Ajax
												.requestEx(
														{
															url : "Payroll/Date/deleteResourcePayrollData.py",
															params : {
																empids : B,
																startdate : this.startdate
																		.getValue()
																		.format(
																				"Y-m-d"),
																enddate : this.enddate
																		.getValue()
																		.format(
																				"Y-m-d"),
																frequency : this.frequencyStoreCmb
																		.getValue(),
																deleteComponentResourceMapping : E
															}
														},
														this,
														function(F) {
															this.generatedSalaryStore
																	.reload();
															Wtf.notify
																	.msg(
																			WtfGlobal
																					.getLocaleText("hrms.common.success"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.salary.deleted.successfully"))
														}, function(F) {
															calMsgBoxShow(229,
																	1)
														})
									}, this)
				},
				calculatePayroll : function() {
					var emparr = this.generatedSalaryListGrid
							.getSelectionModel().getSelections();
					if (emparr.length == 0) {
						calMsgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.payroll.select.record.to.calculate") ],
								0);
						return
					}
					var validate = this.validateCalculate(emparr);
					if (!validate) {
						return
					}
					if (isStandAlone || !isEleaveIntegration) {
						this.getUnpaidleavesCalculatePayroll(undefined, emparr)
					} else {
						calMsgBoxShow(202, 4, true);
						var json = new Array();
						for ( var i = 0; i < emparr.length; i++) {
							var data = {};
							data["userid"] = emparr[i].get("resource");
							data["fromDate"] = this.startdate.getValue()
									.format("m-d-Y");
							data["toDate"] = this.enddate.getValue().format(
									"m-d-Y");
							json.push(data)
						}
						Wtf.Ajax.requestEx({
							url : "Emp/getLeavesFromEleaves.py",
							scope : this,
							method : "post",
							params : {
								jsondata : Wtf.encode(json)
							}
						}, this, function(request) {
							var req = eval("(" + request + ")");
							this.getUnpaidleavesCalculatePayroll(req, emparr);
							WtfGlobal.closeProgressbar()
						}, function(response) {
							WtfGlobal.closeProgressbar()
						})
					}
				},
				submitpayrollDateLeaveWindow : function(D, F) {
					var B = [];
					var E = "";
					for ( var A = 0; A < F.length; A++) {
						B.push(F[A].get("resource"));
						E += "{'fullname':'" + F[A].get("fullname") + "',";
						E += "'historyid':'" + F[A].get("id") + "',";
						E += "'jobtitle':'" + F[A].get("jobtitle") + "',";
						E += "'userid':'" + F[A].get("resource") + "',";
						if (D != undefined && D.data != undefined
								&& D.data.items[A] != undefined) {
							E += "'absence':'"
									+ D.data.items[A].data.unpaidleaves + "',"
						} else {
							E += "'absence':'" + F[A].get("absence") + "',"
						}
						E += "'paycyclestartdate':'"
								+ this.startdate.getValue().format("Y-m-d")
								+ "',";
						E += "'paycycleenddate':'"
								+ this.enddate.getValue().format("Y-m-d")
								+ "',";
						E += "'frequency':'"
								+ this.frequencyStoreCmb.getValue() + "',";
						E += "'salarystatus':'2',";
						E += "'costcenter':'" + F[A].get("costcenter") + "',";
						E += "'employeeid':'" + F[A].get("employeeid") + "'},"
					}
					var C = E.substr(0, E.length - 1);
					C = "[" + C + "]";
					calMsgBoxShow(200, 4, true);
					Wtf.Ajax
							.requestEx(
									{
										url : "Payroll/Date/calculatePayroll.py",
										params : {
											jsonarray : C,
											empids : B
										}
									},
									this,
									function(G) {
										if (G.validationJson.length == 0) {
											this.generatedSalaryStore.reload();
											Wtf.notify
													.msg(
															WtfGlobal
																	.getLocaleText("hrms.common.success"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.salary.calculated.successfully"))
										} else {
											var H = "<P align='left'><br/>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.previous.salary.following.employee.pending")
													+ "<br/ >";
											for ( var I = 0; I < G.validationJson.length; I++) {
												H += ("<br/><b>"
														+ (I + 1)
														+ "."
														+ G.validationJson[I].username + "</b>")
											}
											H += "<br/><br/>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.to.generate.current.salary.previous.salary.status.processed.final")
													+ "</P>";
											Wtf.MessageBox
													.show({
														title : WtfGlobal
																.getLocaleText("hrms.common.error"),
														msg : H,
														buttons : Wtf.MessageBox.OK,
														animEl : "upbtn",
														icon : Wtf.MessageBox.ERROR,
														scope : this
													})
										}
									}, function(G) {
										calMsgBoxShow(229, 1)
									})
				},
				getUnpaidleavesCalculatePayroll : function(C, E) {
					var D = new Array();
					for ( var A = 0; A < E.length; A++) {
						var B = new Array();
						B.push(E[A].get("resource"));
						B.push(E[A].get("fullname"));
						if (E[A].get("absence") != 0) {
							B.push(E[A].get("absence"))
						} else {
							if (C != undefined && C.data != undefined
									&& C.data[A] != undefined
									&& C.data[A] != "") {
								B.push(C.data[A].unpaidleave)
							} else {
								B.push(0)
							}
						}
						D.push(B)
					}
					this.adjustLeaveWin = new Wtf.leavem.PayrollDateLeaveWindow(
							{
								title : WtfGlobal
										.getLocaleText("hrms.payroll.Unpaidleaves"),
								height : 400,
								width : 450,
								modal : true,
								resizable : false,
								layout : "fit",
								iconCls : getTabIconCls(Wtf.etype.iconwin),
								bodyStyle : "background-color: #f1f1f1;",
								storeData : D,
								emparr : E,
								payrollDateLeaveWindow : this
							});
					this.adjustLeaveWin.show()
				},
				validateCalculate : function(E) {
					var A = false;
					var C = "";
					var B = "";
					for ( var D = 0; D < E.length; D++) {
						if (E[D].get("jobtitle") == ""
								|| E[D].get("absence") == "") {
							if (E[D].get("absence") === 0) {
							} else {
								B += "<br>" + E[D].get("fullname") + ","
							}
						}
						if (E[D].get("employmentdate") == "") {
							C += "<br>" + E[D].get("fullname") + ","
						}
					}
					if (C != "") {
						C = C.substr(0, (C.length - 1));
						msgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.Alert"),
										WtfGlobal
												.getLocaleText("hrms.payroll.enter.date.joining.employee")
												+ "<br>" + C ], 1);
						A = false
					} else {
						if (B != "") {
							B = B.substr(0, (B.length - 1));
							msgBoxShow(
									[
											WtfGlobal
													.getLocaleText("hrms.common.Alert"),
											WtfGlobal
													.getLocaleText("hrms.payroll.fill.essential.fields.employee.before.calculating.payroll")
													+ "</br>" + B ], 1);
							A = false
						} else {
							A = true
						}
					}
					return A
				},
				ExportData : function() {
					var A = "Payroll/Salary/exportPayDetails.py?"
							+ Wtf.urlEncode(Wtf.urlDecode("startdate="
									+ this.startdate.getValue().format("Y-m-d")
									+ "&enddate="
									+ this.enddate.getValue().format("Y-m-d")
									+ "&frequency="
									+ this.frequencyStoreCmb.getValue()
									+ "&module=Generate&status="
									+ this.statusComobBox.getValue()));
					Wtf.get("downloadframe").dom.src = A
				},
				getUnpaidleaves : function(B, C) {
					if (C[0].data.absence == 0) {
						if (B != undefined && B.data != undefined
								&& B.data[0] != undefined && B.data[0] != "") {
							C[0].data.absence = B.data[0].unpaidleave
						} else {
							C[0].data.absence = 0
						}
					}
					var A = new Wtf.PayrollResourceGrid({
						record : C[0],
						sdate : this.startdate.getValue().format("Y-m-d"),
						edate : this.enddate.getValue().format("Y-m-d"),
						frequency : this.frequencyStoreCmb.getValue()
					});
					A.on("save", function() {
						this.generatedSalaryStore.load({
							scope : this,
							params : {
								start : 0,
								limit : 15
							}
						})
					}, this);
					A.on("notsave", this.genFailureResponse, this)
				}
			});
Wtf.authorizePayrollProcessGrid = function(A) {
Wtf.authorizePayrollProcessGrid.superclass.constructor.call(this, A);
A.title = WtfGlobal.getLocaleText("hrms.payroll.authorize.payroll.process")
};
Wtf
	.extend(
			Wtf.authorizePayrollProcessGrid,
			Wtf.Panel,
			{
				onRender : function(B) {
					Wtf.monthStore.loadData(Wtf.onceMonthRec);
					Wtf.authorizePayrollProcessGrid.superclass.onRender.call(
							this, B);
					this.getAdvancedSearchComponent();
					var A = this.getToolbarArray();
					var C = this.getBottomToolbarButtons();
					this.generatedSalaryRecord = new Wtf.data.Record.create([ {
						name : "payhistoryid"
					}, {
						name : "resource"
					}, {
						name : "employeeid"
					}, {
						name : "fullname"
					}, {
						name : "costcenter"
					}, {
						name : "costcentername"
					}, {
						name : "jobtitle"
					}, {
						name : "jobtitlename"
					}, {
						name : "netsalary"
					}, {
						name : "employmentdate",
						type : "date"
					}, {
						name : "contractenddate",
						type : "date"
					}, {
						name : "difference"
					}, {
						name : "status"
					}, {
						name : "absence"
					}, {
						name : "accountno"
					}, {
						name : "unpaidleavesAmount"
					}, {
						name : "incomeTax"
					}, {
						name : "comment"
					} ]);
					this.generatedSalaryStore = new Wtf.data.Store({
						reader : new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.generatedSalaryRecord),
						baseParams : {
							type : Wtf.Payroll_Date_Authorize
						},
						url : "Payroll/Date/getPayrollHistory.py"
					});
					this.generatedSalaryStore.on("beforeload", function(D, E) {
						E.params = E.params || {};
						E.params.sdate = this.startdate.getValue().format(
								"Y-m-d");
						E.params.edate = this.enddate.getValue()
								.format("Y-m-d");
						E.params.frequency = this.frequencyStoreCmb.getValue();
						E.params.status = this.statusComobBox.getValue()
					}, this);
					calMsgBoxShow(202, 4, true);
					this.generatedSalaryStore.load({
						scope : this,
						params : {
							start : 0,
							limit : 15
						}
					});
					this.generatedSalaryStore.on("load", function() {
						WtfGlobal.closeProgressbar()
					}, this);
					this.rowNo = new Wtf.grid.RowNumberer();
					this.selectionModel = new Wtf.grid.CheckboxSelectionModel({
						singleSelect : false
					});
					this.gridcmodel = new Wtf.grid.ColumnModel(
							[
									this.selectionModel,
									this.rowNo,
									{
										dataIndex : "payhistoryid",
										hidden : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.resource"),
										dataIndex : "employeeid",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.FullName"),
										dataIndex : "fullname",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.costcenter"),
										dataIndex : "costcentername",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.designation"),
										dataIndex : "jobtitlename",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.netsalary"),
										dataIndex : "netsalary",
										scope : this,
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(D) {
											return WtfGlobal
													.currencyRenderer(parseFloat(
															D).toFixed(2))
										}
									},
									{
										header : '<div wtf:qtip="'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.amount.difference.between.current.net.previous.salary")
												+ '">'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.difference")
												+ "</div>",
										dataIndex : "difference",
										sortable : true,
										align : "right",
										renderer : function(E) {
											var D = parseFloat(E).toFixed(2);
											if (D < 0) {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.currencyRenderer(D)
														+ "</span>"
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.currencyRenderer(D)
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.employment.date"),
										dataIndex : "employmentdate",
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.contract.date"),
										dataIndex : "contractenddate",
										scope : this,
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.status"),
										dataIndex : "status",
										scope : this,
										sortable : true,
										align : "center",
										groupable : true,
										renderer : Wtf.payrollStatusRenderer
									} ], this);
					this.summary = new Wtf.ux.grid.GridSummary();
					this.generatedSalaryListGrid = new Wtf.KwlGridPanel(
							{
								enableColumnHide : false,
								trackMouseOver : true,
								stripeRows : true,
								border : false,
								loadMask : true,
								searchLabel : " ",
								searchLabelSeparator : " ",
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.common.search.fullname"),
								searchField : "fullname",
								serverSideSearch : true,
								viewConfig : {
									forceFit : true,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.AuditTrail.Norecordstodisplay"))
								},
								store : this.generatedSalaryStore,
								displayInfo : true,
								cm : this.gridcmodel,
								scope : this,
								width : 400,
								sm : this.selectionModel,
								tbar : A,
								bbar : C
							});
					this.pan = new Wtf.Panel({
						layout : "border",
						border : false,
						items : [ this.filterPanel, {
							region : "center",
							layout : "fit",
							border : false,
							items : [ this.generatedSalaryListGrid ]
						} ]
					});
					this.add(this.pan);
					this.generatedSalaryListGrid
							.getSelectionModel()
							.on(
									"selectionchange",
									function() {
										var E = this.statusComobBox.getValue();
										var D = this.generatedSalaryListGrid
												.getSelectionModel().getCount();
										if (D == 1) {
											this.userid = this.generatedSalaryListGrid
													.getSelectionModel()
													.getSelected().data.resource;
											this.historyid = this.generatedSalaryListGrid
													.getSelectionModel()
													.getSelected().data.id;
											this.reviewingDetails
													.setDisabled(false);
											if (E == 2) {
												this.authBttn
														.setDisabled(false);
												this.unauthorizeButton
														.setDisabled(false)
											} else {
												if (E == 3) {
													this.unauthorizeButton
															.setDisabled(false)
												}
											}
										} else {
											if (D > 1) {
												this.reviewingDetails
														.setDisabled(true);
												if (E == 2) {
													this.authBttn
															.setDisabled(false);
													this.unauthorizeButton
															.setDisabled(false)
												} else {
													if (E == 3) {
														this.unauthorizeButton
																.setDisabled(false)
													}
												}
											} else {
												this.reviewingDetails
														.setDisabled(true);
												this.authBttn.setDisabled(true);
												this.unauthorizeButton
														.setDisabled(true)
											}
										}
									}, this);
					this.statusComobBox.on("select", function(F, D, E) {
						this.generatedSalaryStore.reload()
					}, this)
				},
				getToolbarArray : function() {
					var btns = [];
					this.authBttn = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.authorize"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS authorizeComponentIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.authorize.payroll.selected.employee"),
								handler : function() {
									var historyid = [];
									var sel = this.selectionModel.selections;
									if (sel.length == 0) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.record.authorized.salary") ],
												0);
										return
									}
									var htmlString = WtfGlobal
											.getLocaleText("hrms.payroll.want.to.authorize.selected.employee.salary");
									for ( var i = 0; i < sel.length; i++) {
										if (sel.items[i].get("status") == 2) {
											historyid.push(sel.items[i]
													.get("payhistoryid"))
										}
									}
									Wtf.MessageBox
											.confirm(
													WtfGlobal
															.getLocaleText("hrms.common.confirm"),
													htmlString,
													function(btn) {
														if (btn != "yes") {
															return
														}
														calMsgBoxShow(200, 4,
																true);
														Wtf.Ajax
																.requestEx(
																		{
																			url : "Payroll/Date/updatePayrollHistory.py",
																			params : {
																				historyid : historyid,
																				statusid : 3
																			}
																		},
																		this,
																		function(
																				response) {
																			var res = eval("("
																					+ response
																					+ ")");
																			if (res.success == false) {
																				calMsgBoxShow(
																						[
																								WtfGlobal
																										.getLocaleText("hrms.common.warning"),
																								WtfGlobal
																										.getLocaleText("hrms.payroll.dependency.exists.for.component") ],
																						2)
																			} else {
																				Wtf.notify
																						.msg(
																								WtfGlobal
																										.getLocaleText("hrms.common.success"),
																								WtfGlobal
																										.getLocaleText("hrms.payroll.salary.authorized.successfully"));
																				this.generatedSalaryStore
																						.reload()
																			}
																		},
																		function() {
																			calMsgBoxShow(
																					[
																							WtfGlobal
																									.getLocaleText("hrms.common.error"),
																							WtfGlobal
																									.getLocaleText("hrms.payroll.some.error.authorizing") ],
																					2)
																		})
													}, this)
								}
							});
					btns.push(this.authBttn);
					this.unauthorizeButton = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.unauthorize"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS authorizeComponentIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.unauthorize.payroll.selected.employee"),
								handler : function() {
									var sm = this.generatedSalaryListGrid
											.getSelectionModel();
									var emparr = sm.getSelections();
									if (sm.getCount() < 1) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.employee.to.unauthorize.payroll") ],
												0);
										return
									}
									this.empSelected = new Wtf.data.Store(
											this.generatedSalaryListGrid
													.getStore().initialConfig);
									this.empSelected.add(emparr);
									this.salStatusWindow = new Wtf.UnautorizeSalaryWin(
											{
												iconCls : getButtonIconCls(Wtf.btype.winicon),
												layout : "fit",
												closable : true,
												width : 700,
												title : WtfGlobal
														.getLocaleText("hrms.payroll.unauthorize.payroll"),
												height : 500,
												border : false,
												empGDS : this.empSelected,
												modal : true,
												scope : this,
												grid : this.generatedSalaryListGrid,
												plain : true
											});
									this.salStatusWindow.show()
								}
							});
					btns.push(this.unauthorizeButton);
					btns.push("-");
					this.reviewingDetails = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.review.details"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS viewbuttonIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.review.salary.details.selected.employee"),
								handler : function() {
									var recData = this.generatedSalaryListGrid
											.getSelectionModel().getSelected().data;
									var userID = recData.resource;
									var historyID = recData.payhistoryid;
									var empname = recData.fullname;
									var accountno = recData.accountno;
									var unpaidleavesAmount = recData.unpaidleavesAmount;
									var absence = recData.absence;
									this.mainTabId = Wtf.getCmp("as");
									this.payslip = Wtf.getCmp(userID
											+ "reviewingdetailforAuthorization"
											+ this.startdate.getValue().format(
													"Y-m-d"));
									if (this.payslip == null) {
										this.payslip = new Wtf.resourcePayslip(
												{
													layout : "fit",
													title : WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.s.pay.details",
																params : [ empname ]
															}),
													closable : true,
													id : userID
															+ "reviewingdetailforAuthorization"
															+ this.startdate
																	.getValue()
																	.format(
																			"Y-m-d"),
													border : false,
													iconCls : getTabIconCls(Wtf.etype.hrmsreport),
													userid : userID,
													historyid : historyID,
													startdate : this.startdate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													ename : empname,
													accno : accountno,
													reviewPayrollFlag : true,
													generatedSalaryListGrid : this.generatedSalaryListGrid,
													generatedSalaryStore : this.generatedSalaryStore,
													frequency : this.frequencyStoreCmb
															.getValue(),
													payrollStatus : recData.status,
													unpaidleavesAmount : unpaidleavesAmount,
													incomeTax : recData.incomeTax,
													absence : absence
												});
										this.mainTabId.add(this.payslip);
										this.payslip.on("gridload", function() {
											calMsgBoxShow(202, 4, true);
											this.empstore.load()
										}, this)
									}
									this.mainTabId.setActiveTab(this.payslip);
									this.mainTabId.doLayout()
								}
							});
					btns.push(this.reviewingDetails);
					btns.push("-");
					this.paydetails = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.export.Export"),
								scope : this,
								iconCls : "pwndExport export",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.export.salary.details.csv.format"),
								handler : this.ExportData
							});
					btns.push(this.paydetails);
					btns.push("->");
					btns.push(WtfGlobal
							.getLocaleText("hrms.common.select.status"));
					this.statusComobBox = Wtf
							.payrollStatusCombobox("Authorize");
					btns.push(this.statusComobBox);
					return btns
				},
				filterHandler : function() {
					if (this.generatedSalaryStore != undefined) {
						this.generatedSalaryStore
								.load({
									scope : this,
									params : {
										start : 0,
										limit : this.generatedSalaryListGrid.pag.pageSize
									}
								})
					}
				},
				getBottomToolbarButtons : function() {
					var A = [];
					return A
				},
				ExportData : function() {
					var A = "Payroll/Salary/exportPayDetails.py?"
							+ Wtf.urlEncode(Wtf.urlDecode("startdate="
									+ this.startdate.getValue().format("Y-m-d")
									+ "&enddate="
									+ this.enddate.getValue().format("Y-m-d")
									+ "&frequency="
									+ this.frequencyStoreCmb.getValue()
									+ "&module=" + Wtf.Payroll_Date_Authorize
									+ "&status="
									+ this.statusComobBox.getValue()));
					Wtf.get("downloadframe").dom.src = A
				},
				getAdvancedSearchComponent : function() {
					this.monthCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.period"),
						hiddenName : "period",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.monthStore,
						width : 150,
						typeAhead : true,
						value : new Date().getMonth() + 1
					});
					this.startdate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.start.date"),
						format : "Y-m-d",
						name : "joindate",
						disabled : true,
						width : 200
					});
					this.enddate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.end.date"),
						format : "Y-m-d",
						disabled : true,
						name : "confirmdate",
						width : 200
					});
					this.yearCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.Year"),
						hiddenName : "year",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.yearStore,
						width : 150,
						typeAhead : true,
						value : new Date().getFullYear()
					});
					this.frequencyStoreCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.masterconf.frequency"),
						hiddenName : "frequency",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.frequencyStore,
						width : 150,
						typeAhead : true,
						value : 0
					});
					this.frequencyStoreCmb.on("select", function(a, b, c) {
						var i = eval(b.data.id);
						if (i == 0) {
							Wtf.monthStore.loadData(Wtf.onceMonthRec);
							this.monthCmb.setValue("1")
						} else {
							if (i == 1) {
								Wtf.monthStore.loadData(Wtf.onceWeekRec);
								this.monthCmb.setValue("1")
							} else {
								Wtf.monthStore.loadData(Wtf.twiceMonthRec);
								this.monthCmb.setValue("1")
							}
						}
						this.setDatevalue()
					}, this);
					this.etrydate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.entry.date"),
						format : "Y-m-d",
						name : "entrydate",
						width : 200
					});
					this.applyFilter = new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.payroll.filter"),
						scope : this,
						iconCls : "pwndExport filter",
						tooltip : WtfGlobal
								.getLocaleText("hrms.payroll.filter"),
						handler : this.filterHandler
					});
					this.filterPanel = new Wtf.form.FormPanel(
							{
								autoScroll : true,
								border : false,
								layout : "fit",
								region : "north",
								bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 10px 10px 25px;",
								height : 170,
								items : [ {
									border : false,
									defaults : {
										border : false,
										xtype : "fieldset",
										autoHeight : true
									},
									items : [ {
										title : WtfGlobal
												.getLocaleText("hrms.common.advanced.search"),
										layout : "column",
										items : [
												{
													columnWidth : ".50",
													layout : "form",
													border : false,
													labelWidth : 150,
													defaults : {
														anchor : "80%"
													},
													items : [ this.monthCmb,
															this.startdate,
															this.enddate ]
												},
												{
													columnWidth : ".50",
													layout : "form",
													defaults : {
														anchor : "80%"
													},
													border : false,
													labelWidth : 150,
													items : [
															this.yearCmb,
															this.frequencyStoreCmb,
															this.etrydate ]
												} ]
									} ]
								} ]
							});
					this.filterPanel.show();
					this.monthCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.yearCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.filterPanel.on("show", function() {
						this.setDatevalue()
					}, this);
					this.setDatevalue()
				},
				setDatevalue : function() {
					var A = Wtf.PayrollSetDatevalue(this);
					this.startdate.setValue(A.startdt);
					this.enddate.setValue(A.enddt);
					this.filterHandler()
				}
			});
Wtf.processPayrollGrid = function(A) {
Wtf.processPayrollGrid.superclass.constructor.call(this, A);
A.title = "Process Payroll"
};
Wtf
	.extend(
			Wtf.processPayrollGrid,
			Wtf.Panel,
			{
				onRender : function(B) {
					Wtf.monthStore.loadData(Wtf.onceMonthRec);
					Wtf.processPayrollGrid.superclass.onRender.call(this, B);
					this.getAdvancedSearchComponent();
					var A = this.getToolbarArray();
					var C = this.getBottomToolbarButtons();
					this.generatedSalaryRecord = new Wtf.data.Record.create([ {
						name : "payhistoryid"
					}, {
						name : "id"
					}, {
						name : "employeeid"
					}, {
						name : "accountno"
					}, {
						name : "fullname"
					}, {
						name : "costcenter"
					}, {
						name : "costcentername"
					}, {
						name : "jobtitle"
					}, {
						name : "jobtitlename"
					}, {
						name : "netsalary"
					}, {
						name : "employmentdate",
						type : "date"
					}, {
						name : "contractenddate",
						type : "date"
					}, {
						name : "difference"
					}, {
						name : "status"
					}, {
						name : "absence"
					}, {
						name : "unpaidleavesAmount"
					}, {
						name : "incomeTax"
					}, {
						name : "resource"
					} ]);
					this.generatedSalaryStore = new Wtf.data.Store({
						reader : new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.generatedSalaryRecord),
						baseParams : {
							type : Wtf.Payroll_Date_Process
						},
						url : "Payroll/Date/getPayrollHistory.py"
					});
					this.generatedSalaryStore.on("beforeload", function(D, E) {
						E.params = E.params || {};
						E.params.sdate = this.startdate.getValue().format(
								"Y-m-d");
						E.params.edate = this.enddate.getValue()
								.format("Y-m-d");
						E.params.frequency = this.frequencyStoreCmb.getValue();
						E.params.status = this.statusComobBox.getValue()
					}, this);
					calMsgBoxShow(202, 4, true);
					this.generatedSalaryStore.load({
						scope : this,
						params : {
							start : 0,
							limit : 15
						}
					});
					this.generatedSalaryStore.on("load", function() {
						WtfGlobal.closeProgressbar()
					}, this);
					this.rowNo = new Wtf.grid.RowNumberer();
					this.selectionModel = new Wtf.grid.CheckboxSelectionModel({
						singleSelect : false
					});
					this.selectionModel
							.on(
									"selectionchange",
									function(E) {
										var F = this.statusComobBox.getValue();
										this.payslipBttn.setDisabled(true);
										this.myprint.setDisabled(true);
										this.dwnldpay.setDisabled(true);
										if (E.selections.items.length == 1) {
											this.rec = E.selections.items[0];
											var D = this.rec.data.status;
											if (F != 6) {
												this.processBttn
														.setDisabled(false)
											}
											if (D == "3") {
												this.unauthorizeButton
														.setDisabled(false)
											} else {
												if (D == "5" || D == "6") {
													if (D == "5") {
														this.unauthorizeButton
																.setDisabled(false)
													}
													this.payslipBttn
															.setDisabled(false);
													this.myprint
															.setDisabled(false);
													this.dwnldpay
															.setDisabled(false)
												}
											}
											this.userid = this.selectionModel
													.getSelected().data.id;
											this.payhistoryid = this.selectionModel
													.getSelected().data.payhistoryid;
											this.ename = this.selectionModel
													.getSelected().data.fullname;
											this.accno = this.selectionModel
													.getSelected().data.accountno;
											this.historyid = this.selectionModel
													.getSelected().data.payhistoryid;
											this.unpaidleavesAmount = this.selectionModel
													.getSelected().data.unpaidleavesAmount;
											this.incomeTax = this.selectionModel
													.getSelected().data.incomeTax;
											this.absence = this.selectionModel
													.getSelected().data.absence
										} else {
											if (E.selections.items.length > 1) {
												if (F != 6) {
													this.processBttn
															.setDisabled(false)
												}
											} else {
												this.processBttn
														.setDisabled(true);
												this.unauthorizeButton
														.setDisabled(true)
											}
										}
									}, this);
					this.gridcmodel = new Wtf.grid.ColumnModel(
							[
									this.selectionModel,
									this.rowNo,
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.resource"),
										dataIndex : "employeeid",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.FullName"),
										dataIndex : "fullname",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.costcenter"),
										dataIndex : "costcentername",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.designation"),
										dataIndex : "jobtitlename",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.netsalary"),
										dataIndex : "netsalary",
										scope : this,
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(D) {
											return WtfGlobal
													.currencyRenderer(parseFloat(
															D).toFixed(2))
										}
									},
									{
										header : '<div wtf:qtip="'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.amount.difference.between.current.net.previous.salary")
												+ '">'
												+ WtfGlobal
														.getLocaleText("hrms.payroll.difference")
												+ "</div>",
										dataIndex : "difference",
										sortable : true,
										align : "right",
										renderer : function(E) {
											var D = parseFloat(E).toFixed(2);
											if (D < 0) {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.currencyRenderer(D)
														+ "</span>"
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.currencyRenderer(D)
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.employment.date"),
										dataIndex : "employmentdate",
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.contract.date"),
										dataIndex : "contractenddate",
										scope : this,
										sortable : true,
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.status"),
										dataIndex : "status",
										scope : this,
										sortable : true,
										align : "center",
										groupable : true,
										renderer : Wtf.payrollStatusRenderer
									} ], this);
					this.summary = new Wtf.ux.grid.GridSummary();
					this.generatedSalaryListGrid = new Wtf.KwlGridPanel(
							{
								enableColumnHide : false,
								trackMouseOver : true,
								stripeRows : true,
								border : false,
								loadMask : true,
								searchLabel : " ",
								searchLabelSeparator : " ",
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.common.search.fullname"),
								searchField : "fullname",
								serverSideSearch : true,
								viewConfig : {
									forceFit : true,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.recruitment.job.grid.msg"))
								},
								store : this.generatedSalaryStore,
								displayInfo : true,
								cm : this.gridcmodel,
								scope : this,
								width : 400,
								sm : this.selectionModel,
								tbar : A,
								bbar : C
							});
					this.pan = new Wtf.Panel({
						layout : "border",
						border : false,
						items : [ this.filterPanel, {
							region : "center",
							layout : "fit",
							border : false,
							items : [ this.generatedSalaryListGrid ]
						} ]
					});
					this.add(this.pan);
					this.statusComobBox.on("select", function(F, D, E) {
						this.generatedSalaryStore.reload()
					}, this)
				},
				getToolbarArray : function() {
					var A = [];
					A.push("-");
					this.processBttn = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.process"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS processComponentIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.to.process.payroll.selected.employee"),
								handler : function() {
									var D = [];
									var B = [];
									var F = this.selectionModel.selections;
									for ( var C = 0; C < F.length; C++) {
										if (F.items[C].get("status") == 3
												|| F.items[C].get("status") == 5) {
											D.push(F.items[C]
													.get("payhistoryid"));
											B.push(F.items[C].get("resource"))
										}
									}
									var E = Wtf.getCmp("processPay" + this.id);
									if (E == null) {
										E = new Wtf.processPayrollWin(
												{
													layout : "fit",
													width : 400,
													height : 400,
													title : WtfGlobal
															.getLocaleText("hrms.payroll.process.payroll"),
													closable : true,
													border : false,
													modal : true,
													historyid : D,
													userids : B,
													frequency : this.frequencyStoreCmb
															.getValue(),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													grid : this.generatedSalaryListGrid,
													iconCls : getTabIconCls(Wtf.etype.master),
													id : "processPay" + this.id
												});
										E.show()
									}
								}
							});
					A.push(this.processBttn);
					A.push("-");
					this.unauthorizeButton = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.unauthorize"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS authorizeComponentIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.unauthorize.payroll.selected.employee"),
								handler : function() {
									var C = this.generatedSalaryListGrid
											.getSelectionModel();
									var B = C.getSelections();
									if (C.getCount() < 1) {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.Alert"),
														WtfGlobal
																.getLocaleText("hrms.payroll.select.employee.to.unauthorize.payroll") ],
												0);
										return
									}
									this.empSelected = new Wtf.data.Store(
											this.generatedSalaryListGrid
													.getStore().initialConfig);
									this.empSelected.add(B);
									this.salStatusWindow = new Wtf.UnautorizeSalaryWin(
											{
												iconCls : getButtonIconCls(Wtf.btype.winicon),
												layout : "fit",
												closable : true,
												width : 700,
												title : WtfGlobal
														.getLocaleText("hrms.payroll.unauthorize.payroll"),
												height : 500,
												border : false,
												empGDS : this.empSelected,
												modal : true,
												scope : this,
												grid : this.generatedSalaryListGrid,
												plain : true
											});
									this.salStatusWindow.show()
								}
							});
					A.push(this.unauthorizeButton);
					A.push("-");
					this.payslipBttn = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.SalaryDetails"),
								scope : this,
								disabled : true,
								iconCls : "pwndHRMS viewbuttonIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.view.salary.details.selected.employee"),
								handler : function() {
									this.mainTabId = Wtf.getCmp("as");
									var B = Wtf.getCmp(this.userid
											+ "payslipTab"
											+ this.startdate.getValue().format(
													"Y-m-d"));
									if (B == null) {
										B = new Wtf.resourcePayslip(
												{
													layout : "fit",
													title : WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.employeespayslip",
																params : [ this.ename ]
															}),
													closable : true,
													border : false,
													id : this.userid
															+ "payslipTab"
															+ this.startdate
																	.getValue()
																	.format(
																			"Y-m-d"),
													iconCls : getTabIconCls(Wtf.etype.hrmsreport),
													userid : this.userid,
													historyid : this.payhistoryid,
													startdate : this.startdate
															.getValue().format(
																	"Y-m-d"),
													enddate : this.enddate
															.getValue().format(
																	"Y-m-d"),
													frequency : this.frequencyStoreCmb
															.getValue(),
													ename : this.ename,
													accno : this.accno,
													unpaidleavesAmount : this.unpaidleavesAmount,
													incomeTax : this.incomeTax,
													absence : this.absence
												});
										this.mainTabId.add(B);
										B.on("gridload", function() {
											calMsgBoxShow(202, 4, true);
											this.empstore.load()
										}, this)
									}
									this.mainTabId.setActiveTab(B);
									this.mainTabId.doLayout()
								}
							});
					A.push(this.payslipBttn);
					A.push("-");
					this.paydetails = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.export.Export"),
								scope : this,
								iconCls : "pwndExport export",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.export.salary.details.csv.format"),
								handler : this.ExportData
							});
					A.push(this.paydetails);
					A.push("-");
					this.dwnldpay = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.DownloadPayslip"),
								iconCls : "pwnd downloadIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.download.payslip.pdf"),
								scope : this,
								disabled : true,
								handler : function() {
									Wtf.get("downloadframe").dom.src = "Payroll/Salary/exportSalarySlip.py?userid="
											+ this.userid
											+ "&startdate="
											+ this.startdate.getValue().format(
													"Y-m-d")
											+ "&enddate="
											+ this.enddate.getValue().format(
													"Y-m-d")
											+ "&historyid="
											+ this.payhistoryid
								}
							});
					A.push(this.dwnldpay);
					A.push("-");
					this.myprint = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.PrintPayslip"),
								scope : this,
								iconCls : "pwnd printIcon",
								disabled : true,
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.print.payslip"),
								handler : function() {
									window
											.open(
													"Payroll/Salary/printSalarySlip.py?userid="
															+ this.userid
															+ "&startdate="
															+ this.startdate
																	.getValue()
																	.format(
																			"Y-m-d")
															+ "&enddate="
															+ this.enddate
																	.getValue()
																	.format(
																			"Y-m-d")
															+ "&historyid="
															+ this.payhistoryid,
													"mywindow",
													"menubar=1,resizable=1,scrollbars=1")
								}
							});
					A.push(this.myprint);
					A.push("->");
					A
							.push(WtfGlobal
									.getLocaleText("hrms.common.select.status"));
					this.statusComobBox = Wtf.payrollStatusCombobox("Process");
					A.push(this.statusComobBox);
					return A
				},
				filterHandler : function() {
					if (this.generatedSalaryStore != undefined) {
						this.generatedSalaryStore
								.load({
									scope : this,
									params : {
										start : 0,
										limit : this.generatedSalaryListGrid.pag.pageSize
									}
								})
					}
				},
				getBottomToolbarButtons : function() {
					var A = [];
					return A
				},
				getAdvancedSearchComponent : function() {
					this.monthCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.period"),
						hiddenName : "period",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.monthStore,
						width : 150,
						typeAhead : true,
						value : new Date().getMonth() + 1
					});
					this.startdate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.start.date"),
						format : "Y-m-d",
						name : "joindate",
						disabled : true,
						width : 200
					});
					this.enddate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.end.date"),
						format : "Y-m-d",
						disabled : true,
						name : "confirmdate",
						width : 200
					});
					this.yearCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.Year"),
						hiddenName : "year",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.yearStore,
						width : 150,
						typeAhead : true,
						value : new Date().getFullYear()
					});
					this.frequencyStoreCmb = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.masterconf.frequency"),
						hiddenName : "frequency",
						mode : "local",
						valueField : "id",
						displayField : "name",
						store : Wtf.frequencyStore,
						width : 150,
						typeAhead : true,
						value : 0
					});
					this.frequencyStoreCmb.on("select", function(a, b, c) {
						var i = eval(b.data.id);
						if (i == 0) {
							Wtf.monthStore.loadData(Wtf.onceMonthRec);
							this.monthCmb.setValue("1")
						} else {
							if (i == 1) {
								Wtf.monthStore.loadData(Wtf.onceWeekRec);
								this.monthCmb.setValue("1")
							} else {
								Wtf.monthStore.loadData(Wtf.twiceMonthRec);
								this.monthCmb.setValue("1")
							}
						}
						this.setDatevalue()
					}, this);
					this.etrydate = new Wtf.form.DateField({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.entry.date"),
						format : "Y-m-d",
						name : "entrydate",
						width : 200
					});
					this.applyFilter = new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.payroll.filter"),
						scope : this,
						iconCls : "pwndExport filter",
						tooltip : WtfGlobal
								.getLocaleText("hrms.payroll.filter"),
						handler : this.filterHandler
					});
					this.filterPanel = new Wtf.form.FormPanel(
							{
								autoScroll : true,
								border : false,
								layout : "fit",
								region : "north",
								bodyStyle : "background:#f1f1f1;font-size:10px;padding:20px 10px 10px 25px;",
								height : 170,
								items : [ {
									border : false,
									defaults : {
										border : false,
										xtype : "fieldset",
										autoHeight : true
									},
									items : [ {
										title : WtfGlobal
												.getLocaleText("hrms.common.advanced.search"),
										layout : "column",
										items : [
												{
													columnWidth : ".50",
													layout : "form",
													border : false,
													labelWidth : 150,
													defaults : {
														anchor : "80%"
													},
													items : [ this.monthCmb,
															this.startdate,
															this.enddate ]
												},
												{
													columnWidth : ".50",
													layout : "form",
													defaults : {
														anchor : "80%"
													},
													border : false,
													labelWidth : 150,
													items : [
															this.yearCmb,
															this.frequencyStoreCmb,
															this.etrydate ]
												} ]
									} ]
								} ]
							});
					this.filterPanel.show();
					this.monthCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.yearCmb.on("select", function(combo, b, index) {
						this.setDatevalue()
					}, this);
					this.filterPanel.on("show", function() {
						this.setDatevalue()
					}, this);
					this.setDatevalue()
				},
				setDatevalue : function() {
					var A = Wtf.PayrollSetDatevalue(this);
					this.startdate.setValue(A.startdt);
					this.enddate.setValue(A.enddt);
					this.filterHandler()
				},
				ExportData : function() {
					var A = "Payroll/Salary/exportPayDetails.py?"
							+ Wtf.urlEncode(Wtf.urlDecode("startdate="
									+ this.startdate.getValue().format("Y-m-d")
									+ "&enddate="
									+ this.enddate.getValue().format("Y-m-d")
									+ "&frequency="
									+ this.frequencyStoreCmb.getValue()
									+ "&module=" + Wtf.Payroll_Date_Process
									+ "&status="
									+ this.statusComobBox.getValue()));
					Wtf.get("downloadframe").dom.src = A
				}
			});
Wtf.EmployeePayrollDataGrid = function(A) {
Wtf.EmployeePayrollDataGrid.superclass.constructor.call(this, A);
A.title = WtfGlobal.getLocaleText("hrms.payroll.data")
};
Wtf
	.extend(
			Wtf.EmployeePayrollDataGrid,
			Wtf.Panel,
			{
				onRender : function(A) {
					Wtf.EmployeePayrollDataGrid.superclass.onRender.call(this,
							A);
					this.generatedSalaryRecord = new Wtf.data.Record.create([ {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "type"
					}, {
						"name" : "isadjust"
					}, {
						"name" : "isdefault"
					}, {
						"name" : "isblock"
					}, {
						"name" : "istaxablecomponent"
					}, {
						"name" : "frequency"
					}, {
						"name" : "costcenter"
					}, {
						"name" : "paymentterm"
					}, {
						"name" : "amount"
					}, {
						"name" : "basevalue"
					} ]);
					this.groupingView = new Wtf.grid.GroupingView(
							{
								forceFit : true,
								showGroupName : true,
								enableGroupingMenu : true,
								groupTextTpl : WtfGlobal
										.getLocaleText("hrms.payroll.PayCycle")
										+ " ({gvalue} "
										+ WtfGlobal
												.getLocaleText("hrms.common.to.small")
										+ ' {[values.rs[0].data.edate]}) ({[values.rs.length]} {[values.rs.length > 1 ? "'
										+ WtfGlobal
												.getLocaleText("hrms.payroll.components")
										+ '" : "'
										+ WtfGlobal
												.getLocaleText("hrms.payroll.component")
										+ '"]})',
								hideGroupedColumn : false
							});
					this.generatedSalaryStore = new Wtf.data.GroupingStore({
						reader : new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "totalcount"
						}, this.generatedSalaryRecord),
						baseParams : {
							flag : 101
						},
						url : "Payroll/Date/getSalaryComponentsForEmployee.py",
						sortInfo : {
							field : "sdate",
							direction : "DESC"
						}
					});
					calMsgBoxShow(202, 4, true);
					this.generatedSalaryStore.load({
						scope : this,
						params : {
							start : 0,
							limit : 15,
							showAll : false,
							startdate : this.startdate,
							enddate : this.enddate,
							userid : this.empid
						}
					});
					this.selectionModel = new Wtf.grid.CheckboxSelectionModel({
						singleSelect : false
					});
					this.gridcmodel = new Wtf.grid.ColumnModel(
							[
									this.selectionModel,
									{
										dataIndex : "compid",
										hidden : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.code"),
										dataIndex : "code"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.performance.description"),
										dataIndex : "desc",
										groupRenderer : WtfGlobal.nameRenderer,
										renderer : function(C) {
											if (Wtf.isIE6 || Wtf.isIE7) {
												return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
														+ C
														+ '">'
														+ C
														+ "</pre>"
											}
											return "<span style='white-space:pre-wrap;'>"
													+ C + "</span>"
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										dataIndex : "amount",
										renderer : function(C) {
											if (C == "" || C == null) {
												return WtfGlobal
														.currencyRenderer(0)
											} else {
												return WtfGlobal
														.currencyRenderer(C)
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.paycycle.start.date"),
										dataIndex : "sdate",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.paycycle.end.date"),
										dataIndex : "edate"
									} ], this);
					var B = this.getToolbarArray();
					this.summary = new Wtf.ux.grid.GridSummary();
					this.generatedSalaryListGrid = new Wtf.KwlGridPanel(
							{
								enableColumnHide : false,
								trackMouseOver : true,
								stripeRows : true,
								border : false,
								loadMask : true,
								searchLabel : " ",
								searchLabelSeparator : " ",
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.payroll.search.component.code"),
								searchField : "code",
								serverSideSearch : true,
								view : this.groupingView,
								layout : "fit",
								store : this.generatedSalaryStore,
								displayInfo : true,
								cm : this.gridcmodel,
								scope : this,
								width : 400,
								sm : new Wtf.grid.CheckboxSelectionModel({
									scope : this,
									listeners : {
										scope : this,
										rowselect : function(E, D, C) {
										}
									}
								}),
								tbar : B
							});
					this.add(this.generatedSalaryListGrid);
					toggleBttn.on("toggle", this.onGroupBttnClick, this);
					this.generatedSalaryStore.on("load", function() {
						WtfGlobal.closeProgressbar();
						if (toggleBttn.pressed) {
							this.generatedSalaryListGrid.getStore().groupBy(
									this.generatedSalaryListGrid.getStore()
											.getSortState().field)
						}
					}, this)
				},
				onGroupBttnClick : function(B, A) {
					if (A) {
						this.generatedSalaryStore.load({
							scope : this,
							params : {
								start : 0,
								limit : 15,
								showAll : true,
								startdate : this.startdate,
								enddate : this.enddate,
								userid : this.empid
							}
						})
					} else {
						this.generatedSalaryListGrid.store.clearGrouping();
						this.generatedSalaryStore.load({
							scope : this,
							params : {
								start : 0,
								limit : 15,
								showAll : false,
								startdate : this.startdate,
								enddate : this.enddate,
								userid : this.empid
							}
						})
					}
				},
				getToolbarArray : function() {
					var A = [];
					A.push("-");
					toggleBttn = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.show.all"),
								iconCls : "pwndCommon reportbuttonIcon",
								tooltip : {
									text : WtfGlobal
											.getLocaleText("hrms.payroll.click.all.salaries.selected.employee")
								},
								enableToggle : true
							});
					A.push(toggleBttn);
					return A
				},
				getBottomToolbarButtons : function() {
					var A = [];
					this.zoom = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.zoom"),
								scope : this,
								iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.display.list.details.related.selected.entries")
							});
					A.push(this.zoom);
					A.push("-");
					this.resource = new Wtf.Button(
							{
								text : "Resource",
								scope : this,
								iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
								tooltip : "Click to display the selected resource card.",
								handler : function() {
								}
							});
					A.push(this.resource);
					A.push("-");
					this.schedule = new Wtf.Button(
							{
								text : "Schedule",
								scope : this,
								iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
								tooltip : "Click to display the work schedule of the selected resource.",
								handler : function() {
								}
							});
					A.push(this.schedule);
					A.push("-");
					this.hours = new Wtf.Button(
							{
								text : "Hours",
								scope : this,
								iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
								tooltip : "Click to display an hour entry application.",
								handler : function() {
								}
							});
					A.push(this.hours);
					A.push("-");
					this.reviewingDetails = new Wtf.Button(
							{
								text : "Reviewing Details",
								scope : this,
								iconCls : getButtonIconCls(Wtf.btype.downloadbutton),
								tooltip : "Click to delete the generated, authorized or processed payroll entries. ",
								handler : function() {
								}
							});
					A.push(this.reviewingDetails);
					return A
				}
			});
Wtf.PayrollComponentDataGrid = function(A) {
Wtf.PayrollComponentDataGrid.superclass.constructor.call(this, A)
};
Wtf.extend(Wtf.PayrollComponentDataGrid, Wtf.Panel, {
onRender : function(A) {
Wtf.PayrollComponentDataGrid.superclass.onRender.call(this, A);
if (this.frequency == 0) {
	this.GetMonthlyRecord();
	this.GetMonthlyGridColumnModel()
} else {
	if (this.frequency == 1) {
		this.GetWeeklyRecord();
		this.GetWeeklyGridColumnModel()
	} else {
		if (this.frequency == 2) {
			this.GetTwiceInMonthRecord();
			this.GetTwiceInMonthGridColumnModel()
		}
	}
}
this.generatedSalaryStore = new Wtf.data.GroupingStore({
	reader : new Wtf.data.KwlJsonReader({
		root : "data",
		totalProperty : "totalcount"
	}, this.generatedSalaryRecord),
	baseParams : {
		flag : 101
	},
	url : "Payroll/Date/getYearlySalaryComponentsForEmployee.py"
});
this.generatedSalaryListGrid = new Wtf.KwlGridPanel({
	enableColumnHide : false,
	trackMouseOver : true,
	stripeRows : true,
	border : false,
	loadMask : true,
	searchLabel : " ",
	searchLabelSeparator : " ",
	searchEmptyText : WtfGlobal
			.getLocaleText("hrms.payroll.search.component.code"),
	searchField : "code",
	serverSideSearch : true,
	layout : "fit",
	store : this.generatedSalaryStore,
	displayInfo : true,
	cm : this.gridcmodel,
	scope : this,
	width : 800,
	autoScroll : true,
	viewConfig : {
		forceFit : false
	}
});
this.add(this.generatedSalaryListGrid);
this.generatedSalaryStore.on("beforeload", function(B, C) {
	C.params = C.params || {};
	C.params.limit = this.generatedSalaryListGrid.pag.pageSize;
	C.params.startdate = this.startdate;
	C.params.enddate = this.enddate;
	C.params.userid = this.empid;
	C.params.frequency = this.frequency;
	C.params.year = this.year
}, this);
calMsgBoxShow(202, 4, true);
this.generatedSalaryStore.load({
	params : {
		start : 0
	},
	scope : this
});
this.generatedSalaryStore.on("load", function() {
	WtfGlobal.closeProgressbar()
}, this)
},
GetMonthlyRecord : function() {
this.generatedSalaryRecord = new Wtf.data.Record.create([ {
	"name" : "compid"
}, {
	"name" : "code"
}, {
	"name" : "jan"
}, {
	"name" : "feb"
}, {
	"name" : "mar"
}, {
	"name" : "apr"
}, {
	"name" : "may"
}, {
	"name" : "jun"
}, {
	"name" : "jul"
}, {
	"name" : "aug"
}, {
	"name" : "sep"
}, {
	"name" : "oct"
}, {
	"name" : "nov"
}, {
	"name" : "dec"
} ]);
return this.generatedSalaryRecord
},
GetMonthlyGridColumnModel : function() {
this.rowNo = new Wtf.grid.RowNumberer();
this.gridcmodel = new Wtf.grid.ColumnModel([ this.rowNo, {
	dataIndex : "compid",
	hidden : true
}, {
	header : WtfGlobal.getLocaleText("hrms.payroll.code"),
	dataIndex : "code"
}, {
	header : WtfGlobal.getLocaleText("hrms.January"),
	dataIndex : "jan",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.February"),
	dataIndex : "feb",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.March"),
	dataIndex : "mar",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.April"),
	dataIndex : "apr",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.May"),
	dataIndex : "may",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.June"),
	dataIndex : "jun",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.July"),
	dataIndex : "jul",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.August"),
	dataIndex : "aug",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.September"),
	dataIndex : "sep",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.October"),
	dataIndex : "oct",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.November"),
	dataIndex : "nov",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : WtfGlobal.getLocaleText("hrms.December"),
	dataIndex : "dec",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
} ], this)
},
GetTwiceInMonthRecord : function() {
this.generatedSalaryRecord = new Wtf.data.Record.create([ {
	"name" : "compid"
}, {
	"name" : "code"
}, {
	"name" : "p1"
}, {
	"name" : "p2"
}, {
	"name" : "p3"
}, {
	"name" : "p4"
}, {
	"name" : "p5"
}, {
	"name" : "p6"
}, {
	"name" : "p7"
}, {
	"name" : "p8"
}, {
	"name" : "p9"
}, {
	"name" : "p10"
}, {
	"name" : "p11"
}, {
	"name" : "p12"
}, {
	"name" : "p13"
}, {
	"name" : "p14"
}, {
	"name" : "p15"
}, {
	"name" : "p16"
}, {
	"name" : "p17"
}, {
	"name" : "p18"
}, {
	"name" : "p19"
}, {
	"name" : "p20"
}, {
	"name" : "p21"
}, {
	"name" : "p22"
}, {
	"name" : "p23"
}, {
	"name" : "p24"
} ]);
return this.generatedSalaryRecord
},
GetTwiceInMonthGridColumnModel : function() {
this.rowNo = new Wtf.grid.RowNumberer();
this.gridcmodel = new Wtf.grid.ColumnModel([ this.rowNo, {
	dataIndex : "compid",
	hidden : true
}, {
	header : "Code",
	dataIndex : "code"
}, {
	header : "Period 1",
	dataIndex : "p1",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 2",
	dataIndex : "p2",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 3",
	dataIndex : "p3",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 4",
	dataIndex : "p4",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 5",
	dataIndex : "p5",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 6",
	dataIndex : "p6",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 7",
	dataIndex : "p7",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 8",
	dataIndex : "p8",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 9",
	dataIndex : "p9",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 10",
	dataIndex : "p10",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 11",
	dataIndex : "p11",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 12",
	dataIndex : "p12",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 13",
	dataIndex : "p13",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 14",
	dataIndex : "p14",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 15",
	dataIndex : "p15",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 16",
	dataIndex : "p16",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 17",
	dataIndex : "p17",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 18",
	dataIndex : "p18",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 19",
	dataIndex : "p19",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 20",
	dataIndex : "p20",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 21",
	dataIndex : "p21",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 22",
	dataIndex : "p22",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 23",
	dataIndex : "p23",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 24",
	dataIndex : "p24",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
} ], this)
},
GetWeeklyRecord : function() {
this.generatedSalaryRecord = new Wtf.data.Record.create([ {
	"name" : "compid"
}, {
	"name" : "code"
}, {
	"name" : "p1"
}, {
	"name" : "p2"
}, {
	"name" : "p3"
}, {
	"name" : "p4"
}, {
	"name" : "p5"
}, {
	"name" : "p6"
}, {
	"name" : "p7"
}, {
	"name" : "p8"
}, {
	"name" : "p9"
}, {
	"name" : "p10"
}, {
	"name" : "p11"
}, {
	"name" : "p12"
}, {
	"name" : "p13"
}, {
	"name" : "p14"
}, {
	"name" : "p15"
}, {
	"name" : "p16"
}, {
	"name" : "p17"
}, {
	"name" : "p18"
}, {
	"name" : "p19"
}, {
	"name" : "p20"
}, {
	"name" : "p21"
}, {
	"name" : "p22"
}, {
	"name" : "p23"
}, {
	"name" : "p24"
}, {
	"name" : "p25"
}, {
	"name" : "p26"
}, {
	"name" : "p27"
}, {
	"name" : "p28"
}, {
	"name" : "p29"
}, {
	"name" : "p30"
}, {
	"name" : "p31"
}, {
	"name" : "p32"
}, {
	"name" : "p33"
}, {
	"name" : "p34"
}, {
	"name" : "p35"
}, {
	"name" : "p36"
}, {
	"name" : "p37"
}, {
	"name" : "p38"
}, {
	"name" : "p39"
}, {
	"name" : "p40"
}, {
	"name" : "p41"
}, {
	"name" : "p42"
}, {
	"name" : "p43"
}, {
	"name" : "p44"
}, {
	"name" : "p45"
}, {
	"name" : "p46"
}, {
	"name" : "p47"
}, {
	"name" : "p48"
}, {
	"name" : "p49"
}, {
	"name" : "p50"
}, {
	"name" : "p51"
}, {
	"name" : "p52"
} ]);
return this.generatedSalaryRecord
},
GetWeeklyGridColumnModel : function() {
this.rowNo = new Wtf.grid.RowNumberer();
this.gridcmodel = new Wtf.grid.ColumnModel([ this.rowNo, {
	dataIndex : "compid",
	hidden : true
}, {
	header : "Code",
	dataIndex : "code"
}, {
	header : "Period 1",
	dataIndex : "p1",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 2",
	dataIndex : "p2",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 3",
	dataIndex : "p3",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 4",
	dataIndex : "p4",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 5",
	dataIndex : "p5",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 6",
	dataIndex : "p6",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 7",
	dataIndex : "p7",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 8",
	dataIndex : "p8",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 9",
	dataIndex : "p9",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 10",
	dataIndex : "p10",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 11",
	dataIndex : "p11",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 12",
	dataIndex : "p12",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 13",
	dataIndex : "p13",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 14",
	dataIndex : "p14",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 15",
	dataIndex : "p15",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 16",
	dataIndex : "p16",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 17",
	dataIndex : "p17",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 18",
	dataIndex : "p18",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 19",
	dataIndex : "p19",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 20",
	dataIndex : "p20",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 21",
	dataIndex : "p21",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 22",
	dataIndex : "p22",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 23",
	dataIndex : "p23",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 24",
	dataIndex : "p24",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 25",
	dataIndex : "p25",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 26",
	dataIndex : "p26",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 27",
	dataIndex : "p27",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 28",
	dataIndex : "p28",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 29",
	dataIndex : "p29",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 30",
	dataIndex : "p30",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 31",
	dataIndex : "p31",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 32",
	dataIndex : "p32",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 33",
	dataIndex : "p33",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 34",
	dataIndex : "p34",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 35",
	dataIndex : "p35",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 36",
	dataIndex : "p36",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 37",
	dataIndex : "p37",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 38",
	dataIndex : "p38",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 39",
	dataIndex : "p39",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 40",
	dataIndex : "p40",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 41",
	dataIndex : "p41",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 42",
	dataIndex : "p42",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 43",
	dataIndex : "p43",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 44",
	dataIndex : "p44",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 45",
	dataIndex : "p45",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 46",
	dataIndex : "p46",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 47",
	dataIndex : "p47",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 48",
	dataIndex : "p48",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 49",
	dataIndex : "p49",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 50",
	dataIndex : "p50",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 51",
	dataIndex : "p51",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
}, {
	header : "Period 52",
	dataIndex : "p52",
	renderer : function(A) {
		return WtfGlobal.currencyRenderer(parseFloat(A).toFixed(2))
	}
} ], this)
}
});
Wtf.MyTaxDeclarationForm = function(A) {
Wtf.apply(this, A);
Wtf.MyTaxDeclarationForm.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.MyTaxDeclarationForm,
			Wtf.Window,
			{
				onRender : function(A) {
					Wtf.MyTaxDeclarationForm.superclass.onRender.call(this, A);
					var B = this.getDeclarationForm();
					this.MytaxDecPanel = new Wtf.Panel(
							{
								border : false,
								layout : "fit",
								items : [ {
									border : false,
									region : "center",
									layout : "border",
									items : [
											{
												region : "north",
												height : 70,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														this.title,
														WtfGlobal
																.getLocaleText("hrms.common.fill.following.fields"))
											},
											{
												border : false,
												region : "center",
												cls : "windowstyle",
												layout : "fit",
												bodyStyle : "background-color:#f1f1f1;padding:15px",
												items : [ this.MytaxDecForm = new Wtf.form.FormPanel(
														{
															url : "Payroll/Date/saveUserIncomeTaxDeclaration.py",
															waitMsgTarget : true,
															method : "POST",
															border : false,
															autoScroll : true,
															bodyStyle : "font-size:10px;padding:10px 20px;",
															lableWidth : 50,
															layoutConfig : {
																deferredRender : false
															},
															defaults : {
																width : 200,
																msgTarget : "side"
															},
															defaultType : "textfield",
															items : B
														}) ]
											} ]
								} ],
								buttonAlign : "right",
								buttons : [
										{
											text : (this.action == "Edit") ? WtfGlobal
													.getLocaleText("hrms.activityList.edit")
													: WtfGlobal
															.getLocaleText("hrms.common.submit"),
											id : "Item-submit-btn",
											handler : this.saveCostCenterRequest,
											scope : this
										},
										{
											text : WtfGlobal
													.getLocaleText("hrms.common.cancel"),
											handler : function() {
												this.close()
											},
											scope : this
										} ]
							});
					this.add(this.MytaxDecPanel)
				},
				getDeclarationForm : function() {
					var A = [];
					var G = new Wtf.form.NumberField(
							{
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.payroll.savings")
										+ WtfGlobal
												.addLabelHelp(WtfGlobal
														.getLocaleText("hrms.payroll.savings.tooltip")),
								scope : this,
								name : "savings",
								allowNegative : false,
								value : this.components.data.savings != undefined ? this.components.data.savings
										: 0
							});
					A.push(G);
					for ( var D = 0; D < this.components.count; D++) {
						var C = this.components.data.taxablecomponents[D].name;
						var F = this.components.data.taxablecomponents[D].value;
						var B = this.components.data.taxablecomponents[D].compid;
						var E = new Wtf.form.NumberField({
							fieldLabel : C + WtfGlobal.addLabelHelp(C),
							scope : this,
							name : B,
							allowNegative : false,
							value : F != undefined ? F : 0
						});
						A.push(E)
					}
					return A
				},
				saveCostCenterRequest : function() {
					if (this.MytaxDecForm.form.isValid()) {
						this.MytaxDecForm
								.getForm()
								.submit(
										{
											waitMsg : WtfGlobal
													.getLocaleText("hrms.payroll.saving.incometax.information"),
											params : {
												userid : this.userid,
												year : this.year
											},
											success : function() {
												Wtf.notify
														.msg(
																WtfGlobal
																		.getLocaleText("hrms.common.success"),
																WtfGlobal
																		.getLocaleText("hrms.payroll.user.incometax.saved.successfully"));
												this.close()
											},
											failure : function(B, A) {
												Wtf.notify
														.msg(
																WtfGlobal
																		.getLocaleText("hrms.common.error"),
																WtfGlobal
																		.getLocaleText("hrms.payroll.error.saving.user.incometax"))
											},
											scope : this
										})
					} else {
						ResponseAlert(152)
					}
				}
			});
Wtf.datePayCompoSetting = function(A) {
Wtf.datePayCompoSetting.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.datePayCompoSetting,
			Wtf.Panel,
			{
				initComponent : function() {
					Wtf.datePayCompoSetting.superclass.initComponent.call(this)
				},
				onRender : function(A) {
					Wtf.datePayCompoSetting.superclass.onRender.call(this, A);
					this.frequencyCombo = new Wtf.form.ComboBox({
						triggerAction : "all",
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.masterconf.frequency"),
						hiddenName : "frequency",
						mode : "local",
						valueField : "id",
						displayField : "name",
						forceSelection : true,
						store : Wtf.frequencyStore,
						width : 150,
						typeAhead : true,
						value : 0
					});
					this.record = Wtf.data.Record.create([ {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "type"
					}, {
						"name" : "isadjust"
					}, {
						"name" : "isdefault"
					}, {
						"name" : "isblocked"
					}, {
						"name" : "istaxablecomponent"
					}, {
						"name" : "frequency"
					}, {
						"name" : "costcenter"
					}, {
						"name" : "paymentterm"
					}, {
						"name" : "amount"
					}, {
						"name" : "basevalue"
					}, {
						"name" : "method"
					}, {
						"name" : "percent"
					}, {
						"name" : "computeon"
					}, {
						"name" : "expression"
					}, {
						"name" : "weightage"
					} ]);
					this.ds = new Wtf.data.Store({
						baseParams : {
							flag : 101
						},
						url : "Payroll/Date/getPayComponent_Date.py",
						reader : new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.record)
					});
					this.sm = new Wtf.grid.CheckboxSelectionModel({});
					this.rowNo = new Wtf.grid.RowNumberer();
					this.cm = new Wtf.grid.ColumnModel(
							[
									this.sm,
									this.rowNo,
									{
										dataIndex : "compid",
										hidden : true,
										fixed : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.code"),
										dataIndex : "code",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.performance.description"),
										dataIndex : "desc",
										sortable : true,
										renderer : function(C) {
											if (Wtf.isIE6 || Wtf.isIE7) {
												return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
														+ C
														+ '">'
														+ C
														+ "</pre>"
											}
											return "<span style='white-space:pre-wrap;'>"
													+ C + "</span>"
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										dataIndex : "amount",
										sortable : true,
										renderer : function(C) {
											if (C == "" || C == null) {
												return WtfGlobal
														.currencyRenderer(0)
											} else {
												return WtfGlobal
														.currencyRenderer(C)
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.start.date"),
										dataIndex : "sdate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.end.date"),
										dataIndex : "edate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.added.default"),
										dataIndex : "isdefault",
										sortable : true,
										align : "center",
										renderer : function(E, D, C) {
											if (E) {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.blocked"),
										dataIndex : "isblocked",
										sortable : true,
										align : "center",
										renderer : function(E, D, C) {
											if (E) {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.ajustable"),
										dataIndex : "isadjust",
										sortable : true,
										align : "center",
										renderer : function(E, D, C) {
											if (E) {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.taxable"),
										dataIndex : "istaxablecomponent",
										sortable : true,
										align : "center",
										renderer : function(E, D, C) {
											if (E) {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									} ]);
					this.refreshBtn = new Wtf.Toolbar.Button({
						text : WtfGlobal.getLocaleText("hrms.common.reset"),
						scope : this,
						iconCls : "pwndRefresh",
						handler : function() {
							this.ds.load({
								params : {
									start : 0,
									limit : this.componentGrid.pag.pageSize,
									frequency : this.frequencyCombo.getValue()
								}
							});
							Wtf.getCmp("Quick" + this.componentGrid.id)
									.setValue("")
						}
					});
					this.deleteButton = new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.common.delete"),
						tooltip : WtfGlobal
								.getLocaleText("hrms.payroll.delete.tooltip"),
						iconCls : getButtonIconCls(Wtf.btype.deletebutton),
						minWidth : 53,
						disabled : true,
						hidden : true,
						scope : this,
						handler : this.delete1
					});
					this.addButton = new Wtf.Button({
						text : WtfGlobal.getLocaleText("hrms.payroll.addnew"),
						tooltip : WtfGlobal
								.getLocaleText("hrms.payroll.addnew.tooltip"),
						iconCls : getButtonIconCls(Wtf.btype.addbutton),
						minWidth : 42,
						handler : this.add1,
						hidden : true,
						scope : this
					});
					this.editButton = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.edit"),
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.carry.changes.payroll.component.settings"),
								iconCls : getButtonIconCls(Wtf.btype.editbutton),
								minWidth : 42,
								disabled : true,
								hidden : true,
								handler : this.edit1,
								scope : this
							});
					this.searchText = new Wtf.form.TextField({
						emptyText : WtfGlobal
								.getLocaleText("hrms.common.search"),
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.search"),
						handler : this.search1,
						scope : this
					});
					this.frequency = this.frequencyCombo.getValue();
					var B = new Array();
					B.push("-");
					B.push(this.refreshBtn);
					B.push("-");
					B.push(this.addButton);
					B.push("-");
					B.push(this.editButton);
					B.push("-");
					B.push(this.deleteButton);
					B.push("-");
					B.push(WtfGlobal
							.getLocaleText("hrms.payroll.select.frequency")
							+ ": ");
					B.push(this.frequencyCombo);
					this.frequencyCombo.on("select", function() {
						this.ds.load({
							params : {
								start : 0,
								limit : this.componentGrid.pag.pageSize,
								frequency : this.frequencyCombo.getValue()
							}
						})
					}, this);
					this.addButton.show();
					this.editButton.show();
					this.deleteButton.show();
					this.componentGrid = new Wtf.KwlGridPanel(
							{
								cm : this.cm,
								store : this.ds,
								sm : this.sm,
								cls : "gridWithUl",
								border : false,
								viewConfig : {
									forceFit : true,
									emptyText : WtfGlobal
											.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:adddatepaycomp(\""
													+ this.id
													+ "\")'>"
													+ WtfGlobal
															.getLocaleText("hrms.payroll.started.adding.component")
													+ "</a>")
								},
								searchLabel : " ",
								id : "ComponentGrid",
								searchLabelSeparator : " ",
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.payroll.search.code"),
								loadMask : true,
								serverSideSearch : true,
								displayInfo : true,
								searchField : "code",
								listeners : {
									scope : this,
									rowclick : function(C, E, D) {
										this.rowindex = E
									}
								},
								tbar : B
							});
					this.add(this.componentGrid);
					this.ds.on("beforeload", function(C, D) {
						D.params = D.params || {};
						D.params.frequency = this.frequencyCombo.getValue();
						D.params.limit = this.componentGrid.pag.pageSize
					}, this);
					calMsgBoxShow(202, 4, true);
					this.ds.load({
						params : {
							start : 0
						}
					});
					this.ds.on("load", function() {
						if (msgFlag == 1) {
							WtfGlobal.closeProgressbar()
						}
					}, this);
					this.sm.on("selectionchange", function() {
						WtfGlobal.enableDisableBtnArr(B, this.componentGrid,
								[ 5 ], [ 7 ])
					}, this)
				},
				add1 : function() {
					generalconf("Add", null, this.frequencyCombo.getValue())
				},
				edit1 : function() {
					var A = this.sm.getSelected();
					generalconf("Edit", A, this.frequencyCombo.getValue())
				},
				delete1 : function() {
					var componentid = [];
					for ( var i = 0; i < this.sm.selections.length; i++) {
						componentid.push(this.sm.selections.items[i]
								.get("compid"))
					}
					Wtf.MessageBox
							.confirm(
									WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									WtfGlobal
											.getLocaleText("hrms.payroll.delete.components"),
									function(btn) {
										if (btn != "yes") {
											return
										}
										calMsgBoxShow(201, 4, true);
										Wtf.Ajax
												.requestEx(
														{
															url : "Payroll/Date/deletePayComponent_Date.py",
															params : {
																componentid : componentid
															}
														},
														this,
														function(response) {
															var res = eval("("
																	+ response
																	+ ")");
															if (res.success == true) {
																calMsgBoxShow(
																		[
																				WtfGlobal
																						.getLocaleText("hrms.common.success"),
																				WtfGlobal
																						.getLocaleText("hrms.payroll.component.deleted.successfully") ],
																		0);
																this.componentGrid
																		.getStore()
																		.reload()
															} else {
																if (res.somedeleted) {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.component.cannot.deleted.linked.automatically") ],
																			2);
																	this.componentGrid
																			.getStore()
																			.reload()
																} else {
																	calMsgBoxShow(
																			[
																					WtfGlobal
																							.getLocaleText("hrms.common.warning"),
																					WtfGlobal
																							.getLocaleText("hrms.payroll.this.component.cannot.deleted.linked.automatically") ],
																			2)
																}
															}
														},
														function() {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.error"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.error.deleting.component") ],
																	2)
														})
									}, this)
				}
			});
function adddatepaycomp(A) {
Wtf.getCmp(A).add1()
}
function generalconf(A, E, C) {
var D = Wtf.getCmp("as");
var B = Wtf.getCmp("PayCompoSetting");
if (B == null) {
	B = new Wtf.AddPayrollComponent({
		layout : "fit",
		width : 400,
		height : 600,
		isEdit : A == "Edit" ? true : false,
		action : A,
		rec : E,
		title : WtfGlobal.getLocaleText({
			key : "hrms.payroll.payroll.component.params",
			params : [ A ]
		}),
		closable : true,
		border : false,
		iconCls : getTabIconCls(Wtf.etype.master),
		id : "PayCompoSetting",
		frequency : C
	});
	B.show()
}
}
Wtf.AddPayrollComponent = function(A) {
Wtf.apply(this, A);
Wtf.AddPayrollComponent.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.AddPayrollComponent,
			Wtf.Window,
			{
				modal : true,
				onRender : function(A) {
					this.isFirstExpand = true;
					this.expression = undefined;
					Wtf.AddPayrollComponent.superclass.onRender.call(this, A);
					this.loadMask = new Wtf.LoadMask(this.el.dom, Wtf
							.apply(this.empProfile));
					this.headingType = "";
					this.CostCenterRec = new Wtf.data.Record.create([ {
						name : "id"
					}, {
						name : "name"
					}, {
						name : "code"
					}, {
						name : "creationDate"
					} ]);
					this.CostCenterReader = new Wtf.data.KwlJsonReader1({
						root : "data",
						totalProperty : "count"
					}, this.CostCenterRec);
					this.CostCenterStore = new Wtf.data.Store({
						url : "Common/getCostCenter.common",
						reader : this.CostCenterReader
					});
					this.CostCenterStore.load();
					this.computeonRec = Wtf.data.Record.create([ {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "type"
					}, {
						"name" : "typename"
					}, {
						"name" : "filter_incometax"
					} ]);
					this.computeonStore = new Wtf.data.Store({
						baseParams : {
							flag : 101
						},
						url : "Payroll/Date/getComputeOnComponents.py",
						reader : new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, this.computeonRec)
					});
					this.conContainer = document.createElement("div");
					this.conContainer.className = "conContainer";
					this.conContainer.id = "parentCon";
					this.specifiedFormula = new Wtf.form.FieldSet({
						region : "center",
						id : "subrule",
						hidden : true,
						bodyStyle : "overflow-y:scroll;",
						title : WtfGlobal
								.getLocaleText("hrms.payroll.your.formula"),
						items : [ new Wtf.Panel({
							id : "addCon",
							border : false,
							contentEl : this.conContainer
						}) ]
					});
					this.specifiedFormulaPanel = new Wtf.Panel({
						border : false,
						items : [ this.specifiedFormula ]
					});
					this.getRulesGridPanel();
					this.TypeCmb = new Wtf.form.ComboBox({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.common.type")
								+ "*",
						store : Wtf.gtypeStore,
						mode : "local",
						typeAhead : true,
						editable : true,
						valueField : "id",
						hiddenName : "itemtypeid",
						displayField : "name",
						allowBlank : false,
						width : 200,
						triggerAction : "all",
						selectOnFocus : true,
						forceSelection : true,
						emptyText : WtfGlobal
								.getLocaleText("hrms.payroll.select.type")
					});
					this.TypeCmb.on("select", function(E, C, D) {
						if (C.data.weightage == 6) {
							this.getPercentPanel();
							this.methodCombo.setValue("1");
							this.methodCombo.setDisabled(true);
							this.computeonStore
									.filter("filter_incometax", true)
						} else {
							this.getAmountPanel();
							this.methodCombo.setValue("0");
							this.methodCombo.setDisabled(false)
						}
					}, this);
					this.computeonCombo = new Wtf.form.ComboBox({
						store : this.computeonStore,
						displayField : "code",
						typeAhead : true,
						valueField : "compid",
						id : this.id + "computedOn_combofield",
						allowBlank : false,
						name : "computeon",
						hiddenName : "computeon",
						width : 200,
						mode : "local",
						triggerAction : "all",
						emptyText : WtfGlobal
								.getLocaleText("hrms.payroll.selectcomponent"),
						selectOnFocus : true
					});
					this.percent = [
							[ WtfGlobal.getLocaleText("hrms.payroll.Amount"),
									"0" ],
							[ WtfGlobal.getLocaleText("hrms.payroll.Percent"),
									"1" ],
							[
									WtfGlobal
											.getLocaleText("hrms.payroll.specifiedformula"),
									"2" ],
							[
									WtfGlobal
											.getLocaleText("hrms.payroll.add.rules"),
									"3" ] ];
					this.percentstore = new Wtf.data.SimpleStore({
						fields : [ {
							name : "type"
						}, {
							name : "code"
						} ],
						data : this.percent
					});
					this.methodCombo = new Wtf.form.ComboBox(
							{
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.payroll.method")
										+ "*",
								store : this.percentstore,
								displayField : "type",
								typeAhead : true,
								valueField : "code",
								allowBlank : false,
								width : 200,
								labelWidth : 100,
								scope : this,
								hiddenName : "method",
								name : "method",
								mode : "local",
								triggerAction : "all",
								emptyText : WtfGlobal
										.getLocaleText("hrms.payroll.select.percent.amount.specified.formula"),
								selectOnFocus : true,
								minValue : 0,
								value : this.rec ? this.rec.get("method") : "0",
								plugins : [ new Wtf.SpcifiedFormulaIcon(
										{
											handler : function() {
												if (!this.methodCombo.disabled) {
													if (this.methodCombo
															.getValue() != "3") {
														this.methodCombo
																.setValue("2");
														this
																.callSpecifiedFormula()
													}
													this.hideComputedOnCombo(
															100, true, false,
															"", "")
												}
											},
											scope : this
										}) ],
								listeners : {
									scope : this,
									Select : function(G, D, E) {
										if (D.get("code") == "1") {
											this.getPercentPanel();
											this.computeonStore.filter(
													"filter_incometax", false)
										} else {
											if (D.get("code") == "0") {
												this.getAmountPanel()
											} else {
												if (D.get("code") == "2") {
													this.callSpecifiedFormula();
													this.hideComputedOnCombo(
															100, true, false,
															"", "")
												} else {
													if (D.get("code") == "3") {
														var C = false;
														var F = Wtf.gtypeStore
																.queryBy(
																		function(
																				H) {
																			if (H
																					.get("id") == this.TypeCmb
																					.getValue()) {
																				if (H
																						.get("weightage") == 5) {
																					C = true;
																					return true
																				}
																			} else {
																				return false
																			}
																		}, this);
														if (!C) {
															calMsgBoxShow([
																	WtfGlobal
																			.getLocaleText("hrms.common.Alert"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.add.rule.is.applicable.for.only.income.tax.type.component") ]);
															this.methodCombo
																	.setValue("");
															return
														}
														this.removeChildNode();
														this.Amount
																.setValue("0");
														this.Amount.hide();
														this.Amount.allowBlank = true;
														this
																.changeLabelText("");
														this.specifiedFormula
																.hide();
														this.rulesGrid.show();
														this.doLayout();
														this
																.hideComputedOnCombo(
																		10000000000000000,
																		true,
																		false,
																		"", "");
														this.specifiedFormulaHidden
																.setValue("")
													}
												}
											}
										}
									}
								}
							});
					this.computeonCombo.on("expand", function() {
						if (this.isFirstExpand && !this.isEdit) {
							this.isFirstExpand = false;
							if (this.methodCombo.disabled) {
								this.computeonStore.filter("filter_incometax",
										true)
							} else {
								this.computeonStore.filter("filter_incometax",
										false)
							}
						}
					}, this);
					this.methodCombo.on("select", function() {
						if (!this.isEdit) {
							this.computeonStore.filter("filter_incometax",
									false)
						}
					}, this);
					Wtf.gtypeStore.load();
					Wtf.paymentStore.load();
					this.computeonStore.load({
						params : {
							frequency : this.frequency,
							componentid : this.rec == undefined ? ""
									: this.rec.data.compid
						}
					});
					var B = WtfGlobal.getLocaleText({
						key : "hrms.payroll.amount.params",
						params : [ WtfGlobal.getCurrencySymbol() ]
					}) + " *";
					if (this.rec) {
						if (this.methodCombo.getValue() == "1"
								|| this.methodCombo.getValue() == "2") {
							B = WtfGlobal.getLocaleText("hrms.payroll.Percent")
									+ "(%) *"
						}
					}
					this.Amount = new Wtf.form.NumberField({
						fieldLabel : B,
						anchor : "93%",
						allowBlank : false,
						name : "amount",
						minValue : 0,
						width : 200,
						id : this.id + "amount_component",
						msgTarget : "qtip",
						listeners : {
							scope : this,
							focus : function() {
								if (this.methodCombo.getValue() == "1"
										|| this.methodCombo.getValue() == "2") {
									this.Amount.maxValue = 100
								}
								if (this.methodCombo.getValue() == "0") {
									this.Amount.maxValue = 10000000000000000
								}
							}
						}
					});
					this.FrequencyCmb = new Wtf.form.ComboBox(
							{
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.masterconf.frequency")
										+ " *",
								store : Wtf.frequencyStore,
								mode : "local",
								typeAhead : true,
								editable : true,
								valueField : "id",
								hiddenName : "frequency",
								displayField : "name",
								allowBlank : false,
								width : 200,
								triggerAction : "all",
								selectOnFocus : true,
								forceSelection : true,
								emptyText : WtfGlobal
										.getLocaleText("hrms.payroll.select.frequency"),
								value : this.frequency,
								disabled : true
							});
					this.frequencyHidden = new Wtf.form.Hidden({
						name : "frequency",
						id : "frequencyHidden",
						value : this.frequency
					});
					this.specifiedFormulaHidden = new Wtf.form.Hidden(
							{
								name : "expression",
								id : "expression",
								value : this.rec != undefined ? this.rec.data.expression
										: ""
							});
					this.specifiedFormula.on("show", function() {
						if (this.rec != undefined
								&& this.rec.data.expression != "") {
							this.loadSpecifiedFormula(this.rec.data.expression)
						}
					}, this);
					this.PaymentCmb = new Wtf.form.ComboBox(
							{
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.masterconf.payment.type")
										+ "*",
								store : Wtf.paymentStore,
								mode : "local",
								typeAhead : true,
								editable : true,
								valueField : "id",
								hiddenName : "payment",
								displayField : "name",
								allowBlank : false,
								width : 200,
								triggerAction : "all",
								selectOnFocus : true,
								forceSelection : true,
								emptyText : WtfGlobal
										.getLocaleText("hrms.payroll.select.payment.type")
							});
					this.Debit = new Wtf.form.ComboBox(
							{
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.payroll.debit")
										+ "*",
								store : this.CostCenterStore,
								mode : "local",
								typeAhead : true,
								editable : true,
								valueField : "id",
								hiddenName : "debit",
								displayField : "name",
								allowBlank : false,
								width : 200,
								triggerAction : "all",
								selectOnFocus : true,
								forceSelection : true,
								emptyText : WtfGlobal
										.getLocaleText("hrms.payroll.select.debit.type")
							});
					this.WtfGeneralPanel = new Wtf.Panel(
							{
								border : false,
								layout : "fit",
								items : [ {
									border : false,
									region : "center",
									layout : "border",
									items : [
											{
												region : "north",
												height : 70,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : this.isview ? getTopHtml(
														WtfGlobal
																.getLocaleText({
																	key : "hrms.payroll.payroll.component.params",
																	params : [ this.action ]
																}), "")
														: getTopHtml(
																WtfGlobal
																		.getLocaleText({
																			key : "hrms.payroll.payroll.component.params",
																			params : [ this.action ]
																		}),
																WtfGlobal
																		.getLocaleText("hrms.common.fill.following.fields"))
											},
											{
												border : false,
												region : "center",
												cls : "windowstyle",
												layout : "fit",
												items : [ this.WtfGeneralForm = new Wtf.form.FormPanel(
														{
															url : "Payroll/Date/addPayComponent_Date.py",
															waitMsgTarget : true,
															method : "POST",
															border : false,
															bodyStyle : "background-color: #f1f1f1; margin: 5px ;padding:20px;",
															lableWidth : 50,
															autoScroll : true,
															layoutConfig : {
																deferredRender : false
															},
															defaultType : "textfield",
															items : [
																	this.txtCode = new Wtf.ux.TextField(
																			{
																				width : 200,
																				maxLength : 50,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.code")
																						+ "*",
																				anchor : "90%",
																				allowBlank : false,
																				name : "code",
																				id : "txtId"
																						+ this.id
																			}),
																	this.startDate = new Wtf.form.DateField(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.common.start.date"),
																				width : 200,
																				format : "Y-m-d",
																				name : "startdate"
																			}),
																	this.endDate = new Wtf.form.DateField(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.common.end.date"),
																				width : 200,
																				format : "Y-m-d",
																				name : "enddate"
																			}),
																	this.description = new Wtf.ux.TextField(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.performance.description")
																						+ "*",
																				allowBlank : false,
																				width : 200,
																				maxLength : 100,
																				name : "description"
																			}),
																	this.TypeCmb,
																	this.AdjChkBx = new Wtf.form.Checkbox(
																			{
																				id : "Adjchk"
																						+ this.id,
																				border : false,
																				bodyStyle : "left:-113px; !important",
																				cls : "chkEmailNotificationPerUser",
																				scope : this,
																				checked : false,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.adjustable"),
																				name : "Adjchk"
																			}),
																	this.lauto = new Wtf.form.Checkbox(
																			{
																				id : "lauto"
																						+ this.id,
																				border : false,
																				cls : "chkEmailNotificationPerUser",
																				scope : this,
																				checked : false,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.link.automatically"),
																				name : "lauto"
																			}),
																	this.blocked = new Wtf.form.Checkbox(
																			{
																				id : "blocked"
																						+ this.id,
																				border : false,
																				cls : "chkEmailNotificationPerUser",
																				scope : this,
																				checked : false,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.blocked"),
																				name : "blocked"
																			}),
																	this.taxableComponent = new Wtf.form.Checkbox(
																			{
																				id : "taxablecomponent"
																						+ this.id,
																				border : false,
																				cls : "chkEmailNotificationPerUser",
																				scope : this,
																				checked : false,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.taxable"),
																				name : "taxablecomponent"
																			}),
																	this.FrequencyCmb,
																	this.frequencyHidden,
																	this.methodCombo,
																	this.computeonCombo,
																	this.specifiedFormulaHidden,
																	this.specifiedFormulaPanel,
																	this.rulesGridPanel,
																	this.Amount,
																	this.Debit,
																	this.PaymentCmb ]
														}) ]
											} ]
								} ],
								buttonAlign : "right",
								buttons : [
										{
											anchor : "90%",
											text : this.isEdit ? WtfGlobal
													.getLocaleText("hrms.common.Update")
													: WtfGlobal
															.getLocaleText("hrms.common.submit"),
											id : "Item-submit-btn",
											handler : this.saveWtfGeneralRequest,
											scope : this
										},
										{
											anchor : "90%",
											text : WtfGlobal
													.getLocaleText("hrms.common.cancel"),
											handler : function() {
												this.close()
											},
											scope : this
										} ]
							});
					Wtf.gtypeStore.on("load", function() {
						if (this.rec) {
							this.TypeCmb.setValue(this.rec.get("type"))
						}
					}, this);
					Wtf.frequencyStore.on("load", function() {
						if (this.rec) {
							this.FrequencyCmb.setValue(this.rec
									.get("frequency"))
						}
					}, this);
					Wtf.paymentStore.on("load", function() {
						if (this.rec) {
							this.PaymentCmb.setValue(this.rec
									.get("paymentterm"))
						}
					}, this);
					this.computeonStore.on("load", function() {
						if (this.rec) {
							this.computeonCombo.setValue(this.rec
									.get("computeon"))
						}
					}, this);
					this.computeonCombo.on("expand", function() {
						if (this.rec) {
							this.computeonStore.filterBy(function(C) {
								if (C.data.compid == this.rec.get("compid")) {
									return false
								}
								return true
							}, this);
							if (this.isFirstExpand && this.isEdit) {
								if (this.methodCombo.disabled) {
									this.computeonStore.filter(
											"filter_incometax", true)
								} else {
									this.computeonStore.filter(
											"filter_incometax", false)
								}
							}
						}
					}, this);
					this.methodCombo.on("select", function() {
						this.computeonStore.filter("filter_incometax", false)
					}, this);
					if (this.rec) {
						this.txtCode.setValue(this.rec.get("code"));
						this.startDate.setValue(this.rec.get("sdate"));
						this.endDate.setValue(this.rec.get("edate"));
						this.description.setValue(this.rec.get("desc"));
						this.lauto.setValue(this.rec.get("isdefault"));
						this.AdjChkBx.setValue(this.rec.get("isadjust"));
						this.blocked.setValue(this.rec.get("isblocked"));
						this.taxableComponent.setValue(this.rec
								.get("istaxablecomponent"));
						this.TypeCmb.setValue(this.rec.get("type"));
						this.FrequencyCmb.setValue(this.rec.get("frequency"));
						this.PaymentCmb.setValue(this.rec.get("paymentterm"))
					} else {
						this.hideComputedOnCombo(10000000000000000, true,
								false, "", "");
						this.specifiedFormulaHidden.setValue("")
					}
					this.CostCenterStore.on("load", function() {
						if (this.rec) {
							this.Debit.setValue(this.rec.get("costcenter"))
						}
					}, this);
					this.WtfGeneralPanel
							.on(
									"afterlayout",
									function(D, C) {
										this.hideComputedOnCombo(
												10000000000000000, true, false,
												"", "");
										this.specifiedFormulaHidden
												.setValue("");
										if (this.rec) {
											this.TypeCmb.disable();
											if (this.rec.get("weightage") == 6) {
												this.methodCombo.disable()
											}
											if (this.rec.get("method") == "1") {
												this
														.hideComputedOnCombo(
																100,
																false,
																true,
																WtfGlobal
																		.getLocaleText("hrms.payroll.compute.on")
																		+ "*",
																this.rec
																		.get("computeon"));
												this.Amount.setValue(this.rec
														.get("percent"))
											} else {
												if (this.rec.get("method") == "2") {
													this.hideComputedOnCombo(
															100, true, false,
															"", "");
													this.specifiedFormula
															.show();
													this.specifiedFormulaHidden
															.setValue(this.rec.data.expression);
													this.Amount
															.setValue(this.rec
																	.get("percent"))
												} else {
													if (this.rec.get("method") == "0") {
														this
																.hideComputedOnCombo(
																		10000000000000000,
																		true,
																		false,
																		"", "");
														this.Amount
																.setValue(this.rec
																		.get("amount"))
													} else {
														if (this.rec
																.get("method") == "3") {
															this.methodCombo
																	.disable();
															this
																	.hideComputedOnCombo(
																			10000000000000000,
																			true,
																			false,
																			"",
																			"");
															this.rulesGrid
																	.show();
															this
																	.changeLabelText("");
															this.Amount
																	.setValue("0");
															this.Amount.hide();
															this.Amount.allowBlank = true
														}
													}
												}
											}
										}
									}, this);
					this.add(this.WtfGeneralPanel)
				},
				getAmountPanel : function() {
					this.removeChildNode();
					this.Amount.show();
					this.Amount.allowBlank = false;
					this.specifiedFormula.hide();
					this.rulesGrid.hide();
					this.doLayout();
					this.hideComputedOnCombo(10000000000000000, true, false,
							"", "");
					this.changeLabelText(WtfGlobal
							.getLocaleText("hrms.payroll.Amount")
							+ " (" + WtfGlobal.getCurrencySymbol() + ")* :");
					this.specifiedFormulaHidden.setValue("")
				},
				getPercentPanel : function() {
					this.removeChildNode();
					this.Amount.show();
					this.Amount.allowBlank = false;
					this.specifiedFormula.hide();
					this.rulesGrid.hide();
					this.doLayout();
					this.hideComputedOnCombo(100, false, true, WtfGlobal
							.getLocaleText("hrms.payroll.compute.on")
							+ "*", "");
					this.changeLabelText(WtfGlobal
							.getLocaleText("hrms.payroll.percent")
							+ "* :");
					this.specifiedFormulaHidden.setValue("")
				},
				getRulesGridPanel : function() {
					this.RuleForm = new Wtf.Panel(
							{
								border : false,
								lableWidth : 50,
								region : "north",
								height : 80,
								layout : "form",
								autoScroll : true,
								layoutConfig : {
									deferredRender : false
								},
								defaultType : "textfield",
								items : [
										this.lowerLimit = new Wtf.form.NumberField(
												{
													width : 150,
													maxLength : 50,
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.lowerlimit"),
													anchor : "90%",
													name : "lowerLimit",
													allowNegative : false,
													id : "lowerLimit" + this.id
												}),
										this.upperLimit = new Wtf.form.NumberField(
												{
													width : 150,
													maxLength : 50,
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.upperlimit"),
													anchor : "90%",
													name : "upperLimit",
													allowNegative : false,
													id : "upperLimit" + this.id
												}),
										this.coefft = new Wtf.form.NumberField(
												{
													width : 150,
													maxLength : 50,
													fieldLabel : WtfGlobal
															.getLocaleText("hrms.payroll.coefficient"),
													anchor : "90%",
													name : "coeff",
													id : "coeff" + this.id
												}) ],
								buttonAlign : "right",
								buttons : [ {
									anchor : "90%",
									text : WtfGlobal
											.getLocaleText("hrms.payroll.add.rule"),
									handler : function() {
										if (this.lowerLimit.getValue() === ""
												|| this.upperLimit.getValue() === ""
												|| this.coefft.getValue() === "") {
											calMsgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.warning"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.please.specify.lowerlimit.upperlimit.coeff") ],
													2)
										} else {
											if (this.validRule(this.rulestore,
													this.lowerLimit.getValue(),
													this.upperLimit.getValue())) {
												if (this.rec) {
													this
															.saveComponentRuleRequest()
												} else {
													this.addRuleRecord()
												}
											} else {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.warning"),
																WtfGlobal
																		.getLocaleText("hrms.payroll.not.valid.rule") ],
														2)
											}
										}
									},
									scope : this
								} ]
							});
					this.getRuleStore();
					this.cm = new Wtf.grid.ColumnModel(
							[
									new Wtf.grid.RowNumberer(),
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.lowerlimit"),
										dataIndex : "lowerlimit"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.upperlimit"),
										dataIndex : "upperlimit"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.coefficient"),
										dataIndex : "coefficient"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.delete"),
										dataIndex : "deleteicon",
										align : "center",
										renderer : function(B, A, F, E, D, C) {
											return "<div class='pwndCommon deletebuttonIconGrid' style='cursor:pointer' title="
													+ WtfGlobal
															.getLocaleText("hrms.common.delete")
													+ " ></div>"
										}
									} ]);
					this.rulesGrid = new Wtf.form.FieldSet({
						height : (Wtf.isIE7 || Wtf.isIE8) ? 250 : 290,
						layout : "border",
						hidden : true,
						bodyStyle : "background-color: #f1f1f1;",
						title : WtfGlobal
								.getLocaleText("hrms.payroll.add.rules"),
						items : [ this.RuleForm,
								this.grid = new Wtf.grid.GridPanel({
									store : this.rulestore,
									region : "center",
									autoScroll : true,
									cm : this.cm,
									searchLabel : " ",
									searchLabelSeparator : " ",
									sm : this.sm,
									viewConfig : {
										forceFit : true
									}
								}) ]
					});
					this.grid.on("cellclick", this.deleteTarget, this);
					this.RuleForm.on("afterLayout", function() {
						this.RuleForm.setHeight(120)
					}, this);
					this.rulesGridPanel = new Wtf.Panel({
						layout : "fit",
						border : false,
						items : [ this.rulesGrid ]
					})
				},
				deleteTarget : function(C, A, B, E) {
					var D = E;
					if (D.target.className == "pwndCommon deletebuttonIconGrid") {
						Wtf.MessageBox
								.show({
									title : WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									msg : WtfGlobal
											.getLocaleText("hrms.payroll.add.rule.msg"),
									icon : Wtf.MessageBox.QUESTION,
									buttons : Wtf.MessageBox.YESNO,
									scope : this,
									fn : function(F) {
										if (F == "yes") {
											var G = C.getStore().getAt(A);
											if (this.isEdit) {
												this.deleteRule(G.data.id)
											} else {
												C.getStore().remove(G)
											}
										}
									}
								})
					}
				},
				deleteRule : function(A) {
					Wtf.commonWaitMsgBox(WtfGlobal
							.getLocaleText("hrms.common.Deletingdata"));
					Wtf.Ajax.requestEx({
						url : "Payroll/Date/deleteComponentRule.py",
						params : {
							ruleid : A
						}
					}, this, function() {
						this.rulestore.load();
						Wtf.updateProgress()
					}, function() {
						Wtf.updateProgress()
					})
				},
				getRuleStore : function() {
					if (this.rec) {
						this.ruleRec = Wtf.data.Record.create([ {
							"name" : "id"
						}, {
							"name" : "lowerlimit"
						}, {
							"name" : "upperlimit"
						}, {
							"name" : "coefficient"
						}, {
							"name" : "deleteicon"
						} ]);
						this.rulestore = new Wtf.data.Store({
							baseParams : {
								componentid : this.rec.get("compid")
							},
							url : "Payroll/Date/getComponentRules.py",
							reader : new Wtf.data.KwlJsonReader1({
								root : "data",
								totalProperty : "count"
							}, this.ruleRec)
						});
						this.rulestore.load()
					} else {
						this.rulestore = new Wtf.data.SimpleStore({
							fields : [ {
								name : "lowerlimit"
							}, {
								name : "upperlimit"
							}, {
								name : "coefficient"
							}, {
								name : "deleteicon"
							} ]
						})
					}
				},
				addRuleRecord : function() {
					this.ruleRecord = new Wtf.data.Record({
						lowerlimit : Wtf.getCmp("lowerLimit" + this.id)
								.getValue(),
						upperlimit : Wtf.getCmp("upperLimit" + this.id)
								.getValue(),
						coefficient : Wtf.getCmp("coeff" + this.id).getValue(),
						deleteicon : ""
					});
					this.rulestore.insert(this.rulestore.getCount(),
							this.ruleRecord)
				},
				validRule : function(A, C, E) {
					var D = true;
					for ( var B = 0; B < A.getCount(); B++) {
						var F = A.getAt(B);
						if ((F.data.lowerlimit <= C && C <= F.data.upperlimit)
								|| (F.data.lowerlimit <= E && E <= F.data.upperlimit)) {
							D = false;
							break
						}
					}
					return D
				},
				saveComponentRuleRequest : function() {
					if (Wtf.getCmp("lowerLimit" + this.id).isValid()
							&& Wtf.getCmp("upperLimit" + this.id).isValid()
							&& Wtf.getCmp("coeff" + this.id).isValid()) {
						Wtf.Ajax.requestEx({
							url : "Payroll/Date/addComponentRule_Date.py",
							params : {
								lowerLimit : Wtf.getCmp("lowerLimit" + this.id)
										.getValue(),
								upperLimit : Wtf.getCmp("upperLimit" + this.id)
										.getValue(),
								coeff : Wtf.getCmp("coeff" + this.id)
										.getValue(),
								componentid : this.rec.data.compid
							}
						}, this, function(A) {
							if (A.success) {
								this.rulestore.load()
							} else {
							}
						}, function() {
							msgBoxShow(100, 1);
							this.close()
						})
					}
				},
				loadSpecifiedFormula : function(expression) {
					this.removeChildNode();
					this.coechild = [];
					this.aschild = [];
					this.cchild = [];
					this.mainchild = [];
					var records = eval(expression);
					for ( var i = 0; i < records.length; i++) {
						if (this.coeff == null || this.coeff == undefined) {
							this.coeff = [];
							this.oper = []
						}
						if (records[i] != undefined) {
							this.coeff[i] = records[i].coefficient;
							this.oper[i] = records[i].operator;
							this.onRowSelect(i, records[i].component,
									records[i].componentname)
						}
					}
				},
				onRowSelect : function(C, A, B) {
					if (this.mainchild[C] == undefined) {
						this.mainchild[C] = document.createElement("div");
						this.mainchild[C].id = A;
						this.cchild[C] = document.createElement("div");
						this.cchild[C].id = "cchild" + A;
						this.cchild[C].val = A;
						this.cchild[C].innerHTML = B;
						this.cchild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.cchild[C].style.display = "inline"
						} else {
							this.cchild[C].style.cssFloat = "left"
						}
						this.coechild[C] = document.createElement("div");
						this.coechild[C].id = "coechild" + A;
						this.coechild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.coechild[C].style.display = "inline"
						} else {
							this.coechild[C].style.cssFloat = "left"
						}
						if (this.coeff != null && this.coeff != undefined
								&& this.coeff.length > 0) {
							this.coechild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ this.coeff[C] + ")</a>&nbsp;";
							this.coechild[C].val = this.coeff[C]
						} else {
							this.coechild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ 1 + ")</a>&nbsp;";
							this.coechild[C].val = 1
						}
						this.aschild[C] = document.createElement("div");
						this.aschild[C].id = "aschild" + A;
						this.aschild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.aschild[C].style.display = "inline"
						} else {
							this.aschild[C].style.cssFloat = "left"
						}
						if (this.oper != null && this.oper != undefined
								&& this.oper.length > 0) {
							if (this.oper[C] == "+") {
								this.aschild[C].val = "+"
							} else {
								if (this.oper[C] == "-") {
									this.aschild[C].val = "-"
								} else {
									this.aschild[C].val = "+";
									this.oper[C] = "+"
								}
							}
							this.aschild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ this.oper[C] + ")</a>&nbsp;"
						} else {
							this.aschild[C].val = "+";
							this.aschild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;"
						}
						this.mainchild[C].appendChild(this.aschild[C]);
						this.mainchild[C].appendChild(this.coechild[C]);
						this.mainchild[C].appendChild(this.cchild[C]);
						this.conContainer.appendChild(this.mainchild[C])
					}
				},
				genJsonForRule : function() {
					var C = [];
					for ( var B = 0; B < this.rulestore.getCount(); B++) {
						var A = this.rulestore.getAt(B).data;
						C.push({
							lowerlimit : A.lowerlimit,
							upperlimit : A.upperlimit,
							coefficient : A.coefficient,
							deleteicon : A.deleteicon
						})
					}
					C = {
						data : C
					};
					return Wtf.encode(C)
				},
				saveWtfGeneralRequest : function() {
					if (this.methodCombo.getValue() == "2"
							&& (this.specifiedFormulaHidden.getValue() == undefined
									|| this.specifiedFormulaHidden.getValue() == "[]" || this.specifiedFormulaHidden
									.getValue() == "")) {
						calMsgBoxShow(
								[
										WtfGlobal
												.getLocaleText("hrms.common.warning"),
										WtfGlobal
												.getLocaleText("hrms.payroll.enter.specified.formula") ],
								2);
						return
					}
					var A = this.startDate.getValue();
					var E = this.endDate.getValue();
					if (A != "" && E != "") {
						var D = new Date(A);
						var C = new Date(E);
						if (C < D) {
							calMsgBoxShow([
									WtfGlobal
											.getLocaleText("hrms.common.Alert"),
									WtfGlobal
											.getLocaleText("hrms.Messages.calMsgBoxShow170") ]);
							return
						}
					}
					var B = true;
					var F = Wtf.gtypeStore
							.queryBy(
									function(G) {
										if (G.get("id") == this.TypeCmb
												.getValue()) {
											if ((G.get("weightage") != 5 && this.methodCombo
													.getValue() == 3)
													|| (G.get("weightage") == 5 && this.methodCombo
															.getValue() != 3)) {
												B = false;
												return true
											}
										} else {
											return true
										}
									}, this);
					if (!B) {
						calMsgBoxShow([
								WtfGlobal.getLocaleText("hrms.common.Alert"),
								WtfGlobal
										.getLocaleText("hrms.payroll.add.rule.is.applicable.for.only.income.tax.type.component") ]);
						this.methodCombo.setValue("");
						return
					}
					Wtf.getCmp("Item-submit-btn").setDisabled(true);
					if (this.WtfGeneralForm.form.isValid()) {
						this.WtfGeneralForm.form
								.submit(
										{
											scope : this,
											params : {
												"action" : (this.action),
												"id" : (this.action == "Edit") ? this.rec
														.get("compid")
														: 0,
												"computeon" : this.methodCombo
														.getValue() == 1 ? this.computeonCombo
														.getValue()
														: "",
												"rules" : this.methodCombo
														.getValue() == 3 ? (this.isEdit ? ""
														: this.genJsonForRule())
														: "",
												"taxablecomponent" : this.taxableComponent
														.getValue()
											},
											failure : function(H, G) {
												msgBoxShow(100, 1);
												this.close()
											},
											success : function(I, H) {
												var J = H.result.success;
												if (J) {
													if (!H.result.isMethodChanged) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.method.cannot.changed.depends.other.component") ],
																2);
														Wtf
																.getCmp(
																		"Item-submit-btn")
																.setDisabled(
																		false);
														return
													}
													if (H.result.isDuplicateCode) {
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText("hrms.payroll.component.code.already.exist") ],
																2);
														Wtf
																.getCmp(
																		"Item-submit-btn")
																.setDisabled(
																		false)
													} else {
														if (this.action == "Edit") {
															calMsgBoxShow([
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.Messages.calMsgBoxShow137") ])
														} else {
															calMsgBoxShow([
																	WtfGlobal
																			.getLocaleText("hrms.common.success"),
																	WtfGlobal
																			.getLocaleText("hrms.Messages.calMsgBoxShow136") ])
														}
														var G = Wtf
																.getCmp("ComponentGrid");
														if (G) {
															G.getStore()
																	.reload()
														}
														this.close()
													}
												} else {
													calMsgBoxShow(
															[
																	WtfGlobal
																			.getLocaleText("hrms.common.error"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.error.adding.payroll.component") ],
															1)
												}
											}
										}, this)
					} else {
						Wtf.getCmp("Item-submit-btn").setDisabled(false)
					}
				},
				callSpecifiedFormula : function() {
					this.hideComputedOnCombo(100, true, false, "", "");
					this.Amount.show();
					this.Amount.allowBlank = false;
					this.rulesGrid.hide();
					this.specifiedFormula.show();
					this.doLayout();
					this.changeLabelText(WtfGlobal
							.getLocaleText("hrms.payroll.percent")
							+ "* :");
					var A = new Wtf.AddSpecifiedFormula(
							{
								title : WtfGlobal
										.getLocaleText("hrms.payroll.specifiedformula"),
								layout : "fit",
								width : 400,
								height : 300,
								frequency : this.frequency,
								componentid : this.rec == undefined ? ""
										: this.rec.data.compid,
								expression : this.expression == undefined ? (this.rec == undefined ? ""
										: this.rec.data.expression)
										: this.expression
							});
					A.show();
					A.on("specified_formula", function(C, B) {
						this.expression = B;
						this.loadSpecifiedFormula(B);
						this.specifiedFormulaHidden.setValue(C)
					}, this)
				},
				changeLabelText : function(D) {
					var C = Wtf.getCmp(this.id + "amount_component");
					var B = C.el.findParent("div.x-form-item", 3, true);
					var A = B.first("label.x-form-item-label");
					B.first("label.x-form-item-label").dom.innerHTML = D
				},
				removeChildNode : function() {
					if (this.conContainer.hasChildNodes()) {
						while (this.conContainer.childNodes.length >= 1) {
							this.conContainer
									.removeChild(this.conContainer.firstChild)
						}
					}
				},
				hideComputedOnCombo : function(C, B, A, G, H) {
					if (A) {
						this.computeonCombo.show()
					} else {
						this.computeonCombo.hide()
					}
					this.computeonCombo.setValue(H);
					this.Amount.maxValue = C;
					this.computeonCombo.allowBlank = B;
					var E = Wtf.getCmp(this.id + "computedOn_combofield");
					if (E.el != undefined) {
						var F = E.el.findParent("div.x-form-item", 4, true);
						var D = F.first("label.x-form-item-label");
						F.first("label.x-form-item-label").dom.innerHTML = G
					}
				}
			});
Wtf.AddSpecifiedFormula = function(A) {
Wtf.apply(this, A);
Wtf.AddSpecifiedFormula.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.AddSpecifiedFormula,
			Wtf.Window,
			{
				modal : true,
				initComponent : function(config) {
					this.addEvents({
						"specified_formula" : true
					});
					Wtf.AddSpecifiedFormula.superclass.initComponent.call(this,
							config);
					this.computeonRec = Wtf.data.Record.create([ {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "type"
					}, {
						"name" : "typename"
					}, {
						"name" : "componentname"
					}, {
						"name" : "filter_incometax"
					} ]);
					this.computeonStore = new Wtf.data.Store({
						baseParams : {
							flag : 101,
							isSpecifiedComponents : true
						},
						url : "Payroll/Date/getComputeOnComponents.py",
						reader : new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count",
							id : "compid"
						}, this.computeonRec)
					});
					this.computeonStore.on("beforeload",
							function(store, option) {
								option.params = option.params || {};
								option.params.frequency = this.frequency;
								option.params.componentid = this.componentid
							}, this);
					this.computeonStore.load();
					this.computeonStore.on("load", function() {
						var records = eval(this.expression);
						if (records != undefined) {
							for ( var i = 0; i < records.length; i++) {
								if (this.coeff == null
										|| this.coeff == undefined) {
									this.coeff = [];
									this.oper = []
								}
								this.coeff[i] = records[i].coefficient;
								this.oper[i] = records[i].operator;
								this.sm.selectRow(this.computeonStore.find(
										"compid", records[i].component), true)
							}
						}
					}, this);
					this.coechild = [];
					this.aschild = [];
					this.cchild = [];
					this.componentname = [];
					this.mainchild = [];
					this.conContainer = document.createElement("div");
					this.conContainer.className = "conContainer";
					this.conContainer.id = "parentCon";
					this.cm = new Wtf.grid.ColumnModel(
							[
									new Wtf.grid.CheckboxSelectionModel(),
									new Wtf.grid.RowNumberer(),
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.component"),
										dataIndex : "code",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.type"),
										dataIndex : "typename",
										sortable : true
									} ]);
					this.sm = new Wtf.grid.CheckboxSelectionModel();
					this.sm.on("rowselect", this.onRowSelect, this);
					this.sm.on("rowdeselect", this.onRowDeselect, this);
					this.specifiedFormula = new Wtf.Panel(
							{
								region : "center",
								id : "feed",
								layout : "fit",
								border : false,
								items : [ {
									layout : "border",
									cls : "spFormula",
									height : (Wtf.isIE7 || Wtf.isIE8) ? 240
											: 230,
									bodyStyle : "background-color: #f1f1f1;",
									border : false,
									layoutConfig : {
										labelSeparator : ""
									},
									items : [
											new Wtf.form.FieldSet(
													{
														height : (Wtf.isIE7 || Wtf.isIE8) ? 120
																: 160,
														region : "north",
														layout : "fit",
														id : "rules",
														title : WtfGlobal
																.getLocaleText("hrms.payroll.1.select.wage.components"),
														items : [ this.grid = new Wtf.KwlGridPanel(
																{
																	id : "rulegrid",
																	store : this.computeonStore,
																	serverSideSearch : true,
																	cm : this.cm,
																	searchLabel : " ",
																	searchLabelSeparator : " ",
																	searchEmptyText : WtfGlobal
																			.getLocaleText("hrms.payroll.component.grid.search.msg"),
																	searchField : "code",
																	paging : false,
																	sm : this.sm,
																	viewConfig : {
																		forceFit : true
																	}
																}) ]
													}),
											this.formula = new Wtf.form.FieldSet(
													{
														region : "center",
														id : "subrules",
														bodyStyle : "overflow-y:scroll;",
														title : WtfGlobal
																.getLocaleText("hrms.payroll.2.your.formula"),
														items : [ new Wtf.Panel(
																{
																	id : "addCon",
																	border : false,
																	contentEl : this.conContainer
																}) ]
													}) ]
								} ],
								buttonAlign : "right",
								buttons : [
										{
											anchor : "90%",
											text : WtfGlobal
													.getLocaleText("hrms.common.ok"),
											id : "Item-submit-btn1",
											handler : function() {
												var expr = new Array();
												var expr1 = new Array();
												for ( var ctr = 0; ctr < this.mainchild.length; ctr++) {
													if (this.mainchild[ctr] != undefined) {
														var temp = {
															operator : this.aschild[ctr].val,
															coefficient : this.coechild[ctr].val,
															component : this.cchild[ctr].val,
															componentname : this.componentname[ctr].val
														};
														expr[ctr] = Wtf
																.encode(temp);
														expr1[ctr] = temp
													}
												}
												this
														.fireEvent(
																"specified_formula",
																Wtf
																		.encode(expr),
																expr1);
												this.close()
											},
											scope : this
										},
										{
											anchor : "90%",
											text : WtfGlobal
													.getLocaleText("hrms.common.cancel"),
											handler : function() {
												this.close()
											},
											scope : this
										} ]
							});
					this.add(this.specifiedFormula)
				},
				onRowDeselect : function(A, C, B) {
					this.mainchild[C].removeChild(this.coechild[C]);
					this.coechild[C] = undefined;
					this.mainchild[C].removeChild(this.aschild[C]);
					this.aschild[C] = undefined;
					this.mainchild[C].removeChild(this.cchild[C]);
					this.cchild[C] = undefined;
					this.mainchild[C].removeChild(this.componentname[C]);
					this.componentname[C] = undefined;
					this.conContainer.removeChild(this.mainchild[C]);
					this.mainchild[C] = undefined
				},
				onRowSelect : function(A, C, B) {
					if (this.mainchild[C] == undefined) {
						this.componentname[C] = document.createElement("div");
						this.componentname[C].id = "componentname"
								+ B.data.componentname;
						this.componentname[C].val = B.data.componentname;
						this.mainchild[C] = document.createElement("div");
						this.mainchild[C].id = B.data.compid;
						this.cchild[C] = document.createElement("div");
						this.cchild[C].id = "cchild" + B.data.compid;
						this.cchild[C].val = B.get("compid");
						this.cchild[C].innerHTML = B.get("code");
						this.cchild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.cchild[C].style.display = "inline"
						} else {
							this.cchild[C].style.cssFloat = "left"
						}
						this.coechild[C] = document.createElement("div");
						this.coechild[C].id = "coechild" + B.data.compid;
						this.coechild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.coechild[C].style.display = "inline"
						} else {
							this.coechild[C].style.cssFloat = "left"
						}
						if (this.coeff != null && this.coeff != undefined
								&& this.coeff.length > 0
								&& this.coeff[C] != undefined) {
							this.coechild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ this.coeff[C] + ")</a>&nbsp;";
							this.coechild[C].val = this.coeff[C]
						} else {
							this.coechild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ 1 + ")</a>&nbsp;";
							this.coechild[C].val = 1
						}
						this.aschild[C] = document.createElement("div");
						this.aschild[C].id = "aschild" + B.data.compid;
						this.aschild[C].className = "x-form-item";
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.aschild[C].style.display = "inline"
						} else {
							this.aschild[C].style.cssFloat = "left"
						}
						if (this.oper != null && this.oper != undefined
								&& this.oper.length > 0) {
							if (this.oper[C] == "+") {
								this.aschild[C].val = "+"
							} else {
								if (this.oper[C] == "-") {
									this.aschild[C].val = "-"
								} else {
									this.aschild[C].val = "+";
									this.oper[C] = "+"
								}
							}
							this.aschild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>("
									+ this.oper[C] + ")</a>&nbsp;"
						} else {
							this.aschild[C].val = "+";
							this.aschild[C].innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;"
						}
						if (Wtf.isIE7 || Wtf.isIE8) {
							this.aschild[C].onclick = this.showRuleWin
									.createDelegate(this, [ this.aschild[C] ],
											false);
							this.coechild[C].onclick = this.showCoeffWin
									.createDelegate(this, [ this.coechild[C] ],
											false)
						} else {
							this.aschild[C].onclick = this.showRuleWin
									.createDelegate(this);
							this.coechild[C].onclick = this.showCoeffWin
									.createDelegate(this)
						}
						this.mainchild[C].appendChild(this.aschild[C]);
						this.mainchild[C].appendChild(this.coechild[C]);
						this.mainchild[C].appendChild(this.cchild[C]);
						this.mainchild[C].appendChild(this.componentname[C]);
						this.conContainer.appendChild(this.mainchild[C])
					}
				},
				showCoeffWin : function(C) {
					if (Wtf.isIE7 || Wtf.isIE8) {
						this.updateelement = C
					} else {
						this.updateelement = C.currentTarget
					}
					var B = new Wtf.Panel(
							{
								frame : true,
								items : [
										{
											layout : "form",
											items : [
													{
														layout : "column",
														items : [ {
															html : WtfGlobal
																	.getLocaleText("hrms.payroll.coefficient")
																	+ ":<br><br>"
														} ]
													},
													{
														layout : "column",
														fieldWidth : 0,
														items : [ new Wtf.form.NumberField(
																{
																	name : "coeff",
																	id : "coefffield",
																	value : this.updateelement.val,
																	allowNegative : false,
																	minValue : 0,
																	maxValue : 100,
																	decimalPrecision : 4
																}) ]
													} ]
										},
										{
											layout : "column",
											items : [ {
												layout : "form",
												buttons : [
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.ok"),
															scope : this,
															handler : function() {
																var D = Wtf
																		.getCmp("coefffield").value;
																if (!Wtf
																		.getCmp(
																				"coefffield")
																		.validateValue(
																				D)) {
																	return
																}
																this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>"
																		+ D
																		+ "</a>&nbsp;";
																this.updateelement.val = D;
																A.close()
															}
														},
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.cancel"),
															handler : function() {
																A.close()
															}
														} ]
											} ]
										} ]
							});
					var A = new Wtf.Window({
						title : WtfGlobal
								.getLocaleText("hrms.payroll.coefficient"),
						closable : true,
						width : 200,
						iconCls : "winicon",
						resizable : false,
						autoDestroy : true,
						modal : true,
						border : false,
						id : "coefficientWindow",
						items : [ B ]
					});
					A.show()
				},
				showRuleWin : function(C) {
					if (Wtf.isIE7 || Wtf.isIE8) {
						this.updateelement = C
					} else {
						this.updateelement = C.currentTarget
					}
					var B = new Wtf.Panel(
							{
								frame : true,
								items : [
										{
											layout : "form",
											items : [
													{
														layout : "column",
														items : [ {
															html : WtfGlobal
																	.getLocaleText("hrms.payroll.ApplyRuleIf")
																	+ ":<br><br>"
														} ]
													},
													{
														layout : "column",
														fieldWidth : 0,
														items : [ new Wtf.form.Radio(
																{
																	name : "cond",
																	id : "add",
																	checked : (this.updateelement.val == "+") ? true
																			: false,
																	boxLabel : WtfGlobal
																			.getLocaleText("hrms.payroll.Addition")
																}) ]
													},
													{
														layout : "column",
														fieldWidth : 0,
														items : [ new Wtf.form.Radio(
																{
																	name : "cond",
																	id : "sub",
																	checked : (this.updateelement.val == "-") ? true
																			: false,
																	boxLabel : WtfGlobal
																			.getLocaleText("hrms.payroll.Subtraction")
																}) ]
													} ]
										},
										{
											layout : "column",
											items : [ {
												layout : "form",
												buttons : [
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.ok"),
															scope : this,
															handler : function() {
																if (Wtf
																		.getCmp("add").checked == true) {
																	this.rad = 0
																} else {
																	if (Wtf
																			.getCmp("sub").checked == true) {
																		this.rad = 1
																	}
																}
																if (this.rad == 1) {
																	this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(-)</a>&nbsp;";
																	this.updateelement.val = "-"
																} else {
																	this.updateelement.innerHTML = "&nbsp;<a href=javascript:void(0)>(+)</a>&nbsp;";
																	this.updateelement.val = "+"
																}
																A.close()
															}
														},
														{
															text : WtfGlobal
																	.getLocaleText("hrms.common.cancel"),
															handler : function() {
																A.close()
															}
														} ]
											} ]
										} ]
							});
					Wtf.getCmp("add").on("check", this.invRadiobttn, this);
					Wtf.getCmp("sub").on("check", this.invRadiobttn, this);
					var A = new Wtf.Window({
						title : WtfGlobal.getLocaleText("hrms.payroll.andor"),
						closable : true,
						width : 200,
						iconCls : "winicon",
						resizable : false,
						autoDestroy : true,
						modal : true,
						border : false,
						id : "conditionWindow",
						items : [ B ]
					});
					A.show()
				},
				invRadiobttn : function(B, A) {
					if (B.id == "add") {
						Wtf.getCmp("sub").checked = false
					}
					if (B.id == "sub") {
						Wtf.getCmp("add").checked = false
					}
				}
			});
Wtf.SpcifiedFormulaIcon = function(A) {
Wtf.apply(this, A);
Wtf.SpcifiedFormulaIcon.superclass.constructor.call(this, A);
this.addEvents({
	beforeFilter : true,
	afterFilter : true
})
};
Wtf.extend(Wtf.SpcifiedFormulaIcon, Wtf.util.Observable, {
init : function(A) {
this.combo = A;
A.on("render", function(B) {
	this.SpcifiedFormulaIcon()
}, this)
},
SpcifiedFormulaIcon : function() {
var C = this.combo.getSize();
this.width = (this.combo.width !== undefined) ? this.combo.width : C.width;
this.width -= 25;
this.combo.setWidth(this.width);
var A = this.combo.el.dom;
var B = A.parentNode;
A.style.width = (this.width - 25) + "px";
this._fI = document.createElement("img");
this._fI.src = "images/addCompo.gif";
this._fI.title = WtfGlobal.getLocaleText("hrms.payroll.specifiedformula");
this._fI.height = 20;
this._fI.width = 20;
this._fI.style.left = this.width + "px";
this._fI.style.position = "absolute";
this._fI.style.margin = "0px 0px 0px 5px";
this._fI.style.cursor = "pointer";
this._fI.onclick = this.handler.createDelegate(this.scope, []);
B.appendChild(this._fI)
}
});
Wtf.assignComponentWin = function(A) {
Wtf.apply(this, A);
Wtf.assignComponentWin.superclass.constructor.call(this, {
	buttonAlign : "right",
	buttons : [ this.savebtn = new Wtf.Button({
		text : WtfGlobal.getLocaleText("hrms.common.Save"),
		scope : this,
		minWidth : 75,
		disabled : true,
		handler : function() {
			if (this.generatePayrollLink) {
				this.createPayrollMapping()
			} else {
				this.createMemberList()
			}
		}
	}), {
		text : WtfGlobal.getLocaleText("hrms.common.cancel"),
		scope : this,
		handler : function() {
			this.close()
		}
	} ]
});
this.addEvents({
	"savedata" : true
})
};
Wtf
	.extend(
			Wtf.assignComponentWin,
			Wtf.Window,
			{
				group_id : "",
				iconCls : getButtonIconCls(Wtf.btype.winicon),
				onRender : function(B) {
					Wtf.assignComponentWin.superclass.onRender.call(this, B);
					this.availablesm = new Wtf.grid.CheckboxSelectionModel();
					this.availablecm = new Wtf.grid.ColumnModel(
							[
									this.availablesm,
									{
										dataIndex : "compid",
										hidden : true,
										fixed : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.code"),
										dataIndex : "code",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.start.date"),
										dataIndex : "sdate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.end.date"),
										dataIndex : "edate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.performance.description"),
										dataIndex : "desc",
										sortable : true,
										renderer : function(E) {
											if (Wtf.isIE6 || Wtf.isIE7) {
												return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
														+ E
														+ '">'
														+ E
														+ "</pre>"
											}
											return "<span style='white-space:pre-wrap;'>"
													+ E + "</span>"
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.blocked"),
										dataIndex : "isblock",
										align : "center",
										renderer : function(E) {
											if (E) {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									} ]);
					this.quickSearchEmp = new Wtf.wtfQuickSearch({
						width : 150,
						field : "code",
						emptyText : WtfGlobal
								.getLocaleText("hrms.payroll.search.code")
					});
					this.availableds = new Wtf.data.Store({
						url : "Payroll/Date/getAvailableComponent.py",
						baseParams : {
							userid : this.userid,
							available : true,
							frequency : this.frequency
						},
						reader : new Wtf.data.KwlJsonReader1({
							root : "data",
							totalProperty : "count"
						}, new Wtf.data.Record.create([ {
							"name" : "compid"
						}, {
							"name" : "code"
						}, {
							"name" : "sdate"
						}, {
							"name" : "edate"
						}, {
							"name" : "desc"
						}, {
							"name" : "type"
						}, {
							"name" : "isblock"
						} ])),
						autoLoad : false
					});
					if (this.previousSalaryFlag) {
						this.availableds
								.on(
										"beforeload",
										function(E, F) {
											F.params = F.params || {};
											F.params.startdate = this.startdate;
											F.params.enddate = this.enddate;
											F.params.generatePayrollLink = this.generatePayrollLink;
											F.params.previousSalaryFlag = this.previousSalaryFlag;
											F.params.frequency = this.frequency
										}, this)
					}
					this.availablegrid = new Wtf.grid.EditorGridPanel(
							{
								height : 100,
								store : this.availableds,
								cm : this.availablecm,
								border : false,
								id : this.id + "compavailablegrid",
								sm : this.availablesm,
								autoScroll : true,
								searchField : "code",
								serverSideSearch : true,
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.payroll.search.code"),
								viewConfig : {
									forceFit : true,
									autoFill : true
								},
								tbar : [
										WtfGlobal
												.getLocaleText("hrms.common.QuickSearch")
												+ ": ", this.quickSearchEmp ]
							});
					this.availableds.on("load", this.empSearch, this);
					this.selectedRec = new Wtf.data.Record.create([ {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "type"
					}, {
						"name" : "amount"
					}, {
						"name" : "isblock"
					} ]);
					var A = "Payroll/Date/getAssignedComponent.py";
					var D = new Wtf.data.KwlJsonReader1({
						root : "data",
						totalProperty : "count"
					}, this.selectedRec);
					if (this.previousSalaryFlag) {
						A = "Payroll/Date/getSalaryComponentsForEmployee.py";
						D = new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "count"
						}, this.selectedRec)
					}
					this.selectedds = new Wtf.data.Store({
						url : A,
						baseParams : {
							userid : this.userid,
							assigned : true,
							frequency : this.frequency
						},
						reader : D,
						autoLoad : false
					});
					if (this.generatePayrollLink) {
						this.selectedds
								.on(
										"beforeload",
										function(E, F) {
											F.params = F.params || {};
											F.params.startdate = this.startdate;
											F.params.enddate = this.enddate;
											F.params.generatePayrollLink = this.generatePayrollLink;
											F.params.frequency = this.frequency
										}, this)
					}
					this.selectedsm = new Wtf.grid.CheckboxSelectionModel();
					this.selectedcm = new Wtf.grid.ColumnModel(
							[
									this.selectedsm,
									{
										dataIndex : "compid",
										hidden : true,
										fixed : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.code"),
										dataIndex : "code",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.start.date"),
										dataIndex : "sdate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.end.date"),
										dataIndex : "edate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.performance.description"),
										dataIndex : "desc",
										sortable : true,
										renderer : function(E) {
											if (Wtf.isIE6 || Wtf.isIE7) {
												return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
														+ E
														+ '">'
														+ E
														+ "</pre>"
											}
											return "<span style='white-space:pre-wrap;'>"
													+ E + "</span>"
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.blocked"),
										dataIndex : "isblock",
										align : "center",
										renderer : function(E) {
											if (E) {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										}
									} ]);
					this.quickSearchAssgEmp = new Wtf.wtfQuickSearch({
						width : 150,
						field : "code",
						emptyText : WtfGlobal
								.getLocaleText("hrms.payroll.search.code")
					});
					this.selectedgrid = new Wtf.grid.EditorGridPanel(
							{
								height : 100,
								store : this.selectedds,
								cm : this.selectedcm,
								sm : this.selectedsm,
								autoScroll : true,
								border : false,
								viewConfig : {
									forceFit : true
								},
								tbar : [
										WtfGlobal
												.getLocaleText("hrms.common.QuickSearch")
												+ ": ", this.quickSearchAssgEmp ]
							});
					this.selectedds.load();
					this.selectedds.on("load", this.empAssgSearch, this);
					this.movetoright = document.createElement("img");
					this.movetoright.src = "images/arrowright.gif";
					this.movetoright.style.width = "24px";
					this.movetoright.style.height = "24px";
					this.movetoright.style.margin = "5px 0px 5px 0px";
					this.movetoright.onclick = this.movetorightclicked
							.createDelegate(this, []);
					this.movetoleft = document.createElement("img");
					this.movetoleft.src = "images/arrowleft.gif";
					this.movetoleft.style.width = "24px";
					this.movetoleft.style.height = "24px";
					this.movetoleft.style.margin = "5px 0px 5px 0px";
					this.movetoleft.onclick = this.movetoleftclicked
							.createDelegate(this, []);
					this.centerdiv = document.createElement("div");
					this.centerdiv.appendChild(this.movetoright);
					this.centerdiv.appendChild(this.movetoleft);
					this.centerdiv.style.padding = "135px 10px 135px 10px";
					var C = WtfGlobal.getLocaleText("hrms.payroll.component");
					this.assignTeamPanel = new Wtf.Panel(
							{
								layout : "border",
								items : [
										{
											region : "north",
											height : 80,
											border : false,
											cls : "formstyleClass",
											html : getTopHtml(
													WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.assign.params",
																params : [ C ]
															}),
													WtfGlobal
															.getLocaleText({
																key : "hrms.payroll.assign.params",
																params : [ C ]
															}),
													"images/assign-manager.gif")
										},
										{
											region : "center",
											border : false,
											layout : "fit",
											items : [ {
												border : false,
												bodyStyle : "background:transparent;",
												layout : "border",
												items : [
														{
															region : "west",
															border : false,
															width : 400,
															layout : "fit",
															items : [ {
																xtype : "KWLListPanel",
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.components.header"),
																border : false,
																paging : false,
																layout : "fit",
																autoLoad : false,
																items : this.availablegrid
															} ]
														},
														{
															region : "center",
															border : false,
															contentEl : this.centerdiv
														},
														{
															region : "east",
															border : false,
															width : 400,
															layout : "fit",
															items : [ {
																xtype : "KWLListPanel",
																title : WtfGlobal
																		.getLocaleText("hrms.payroll.assigned.component"),
																border : false,
																paging : false,
																layout : "fit",
																autoLoad : false,
																items : this.selectedgrid
															} ]
														} ]
											} ]
										} ]
							});
					this.add(this.assignTeamPanel)
				},
				empSearch : function(A, C, B) {
					this.quickSearchEmp.StorageChanged(A)
				},
				empAssgSearch : function(A, C, B) {
					this.quickSearchAssgEmp.StorageChanged(A);
					if (this.selectedds.getCount() > 0) {
						this.savebtn.enable()
					} else {
						this.savebtn.disable()
					}
					this.refreshAssignedparams();
					this.availableds.load()
				},
				refreshAssignedparams : function() {
					var B = [];
					for ( var A = 0; A < this.selectedds.getCount(); A++) {
						B.push(this.selectedds.getAt(A).get("compid"))
					}
					this.availableds.baseParams.managerids = B
				},
				movetorightclicked : function() {
					var A = this.availablesm.getSelections();
					if (A.length > 0) {
						this.selectedds.add(A);
						this.refreshAssignedparams()
					}
					for ( var B = 0; B < A.length; B++) {
						this.availableds.remove(A[B])
					}
					this.quickSearchEmp.StorageChanged(this.availableds);
					this.quickSearchAssgEmp.StorageChanged(this.selectedds);
					if (this.selectedds.getCount() > 0) {
						this.savebtn.enable()
					} else {
						this.savebtn.disable()
					}
				},
				movetoleftclicked : function() {
					var A = this.selectedsm.getSelections();
					if (A.length > 0) {
						this.availableds.add(A);
						this.refreshAssignedparams()
					}
					for ( var B = 0; B < A.length; B++) {
						this.selectedds.remove(A[B])
					}
					this.quickSearchEmp.StorageChanged(this.availableds);
					this.quickSearchAssgEmp.StorageChanged(this.selectedds);
					if (this.selectedds.getCount() > 0) {
						this.savebtn.enable()
					} else {
						this.savebtn.disable()
					}
				},
				createMemberList : function() {
					var G = [];
					var C = [];
					var H = [];
					var E = [];
					this.assignflag = true;
					for ( var D = 0; D < this.selectedds.getCount(); D++) {
						if (!this.selectedds.getAt(D).get("isblock")) {
							G.push(this.selectedds.getAt(D).get("compid"))
						} else {
							H.push(this.selectedds.getAt(D).get("code"))
						}
					}
					if (H.length > 0) {
						var I = WtfGlobal
								.getLocaleText("hrms.payroll.list.blocked.component")
								+ "<br><br> <b>"
								+ WtfGlobal
										.getLocaleText("hrms.payroll.remove.from.assigned.component.list")
								+ "<br></b>";
						var F = 1;
						for ( var B = 0; B < H.length; B++) {
							I += "<br>" + F + ") " + H[B];
							F++
						}
						Wtf.MessageBox.show({
							title : WtfGlobal
									.getLocaleText("hrms.common.Alert"),
							msg : I,
							buttons : Wtf.MessageBox.OK,
							animEl : "mb9",
							icon : Wtf.MessageBox.INFO
						});
						return
					}
					for ( var D = 0; D < this.availableds.getCount(); D++) {
						C.push(this.availableds.getAt(D).get("compid"))
					}
					var A = this.allempGrid.getSelectionModel().getSelected();
					this.allempGrid.getSelectionModel().clearSelections();
					if (A != undefined) {
						var J = this.empGDS.indexOf(A);
						WtfGlobal.highLightRow(this.allempGrid, "33CC33", 5, J)
					}
					calMsgBoxShow(200, 4, true);
					E.push(this.userid);
					Wtf.Ajax
							.requestEx(
									{
										url : "Payroll/Date/assignComponent.py",
										params : {
											componentid : G,
											availcomponentid : C,
											userid : E
										}
									},
									this,
									function() {
										calMsgBoxShow(
												[
														WtfGlobal
																.getLocaleText("hrms.common.success"),
														WtfGlobal
																.getLocaleText("hrms.payroll.components.assigned.successfully") ],
												0, 0);
										this.close()
									},
									function() {
										Wtf.Msg
												.alert(
														WtfGlobal
																.getLocaleText("hrms.common.error"),
														WtfGlobal
																.getLocaleText("hrms.admin.Errorinassigningmanager"));
										this.close()
									})
				},
				createPayrollMapping : function() {
					var componentid = [];
					var blockComponent = [];
					var componentidamount = [];
					var availcomponentid = [];
					var userid = [];
					this.assignflag = true;
					var payrollRecData = this.rec.data;
					for ( var i = 0; i < this.selectedds.getCount(); i++) {
						if (!this.selectedds.getAt(i).get("isblock")) {
							componentid.push(this.selectedds.getAt(i).get(
									"compid"));
							componentidamount.push(this.selectedds.getAt(i)
									.get("amount"))
						} else {
							blockComponent.push(this.selectedds.getAt(i).get(
									"code"))
						}
					}
					if (blockComponent.length > 0) {
						var strMsg = WtfGlobal
								.getLocaleText("hrms.payroll.components.blocked.administrator")
								+ "<br><br> <b>"
								+ WtfGlobal
										.getLocaleText("hrms.payroll.remove.components.assigned.component.list")
								+ "<br></b>";
						var count = 1;
						for ( var k = 0; k < blockComponent.length; k++) {
							strMsg += "<br>" + count + ") " + blockComponent[k];
							count++
						}
						Wtf.MessageBox.show({
							title : WtfGlobal
									.getLocaleText("hrms.common.Alert"),
							msg : strMsg,
							buttons : Wtf.MessageBox.OK,
							animEl : "mb9",
							icon : Wtf.MessageBox.INFO
						});
						return
					}
					for ( var i = 0; i < this.availableds.getCount(); i++) {
						availcomponentid.push(this.availableds.getAt(i).get(
								"compid"))
					}
					var rec = this.allempGrid.getSelectionModel().getSelected();
					this.allempGrid.getSelectionModel().clearSelections();
					if (rec != undefined) {
						var row = this.empGDS.indexOf(rec);
						WtfGlobal.highLightRow(this.allempGrid, "33CC33", 5,
								row)
					}
					userid.push(this.userid);
					calMsgBoxShow(200, 4, true);
					Wtf.Ajax
							.requestEx(
									{
										url : "Payroll/Date/assignComponentToResource.py",
										params : {
											componentid : componentid,
											componentidamount : componentidamount,
											availcomponentid : availcomponentid,
											userid : userid,
											startdate : this.startdate,
											enddate : this.enddate,
											frequency : this.frequency,
											fullname : payrollRecData.fullname,
											costcenter : payrollRecData.costcenter,
											jobtitle : payrollRecData.jobtitle,
											contract : payrollRecData.contract,
											absence : payrollRecData.absence,
											paycyclestartdate : this.startdate,
											paycycleenddate : this.enddate,
											difference : payrollRecData.difference,
											status : payrollRecData.status,
											historyid : payrollRecData.id,
											overwrite : false,
											isGeneratable : false
										}
									},
									this,
									function(response) {
										var res = eval("(" + response + ")");
										if (res.success) {
											calMsgBoxShow(
													[
															WtfGlobal
																	.getLocaleText("hrms.common.success"),
															WtfGlobal
																	.getLocaleText("hrms.payroll.components.assigned.successfully") ],
													0, 0);
											var delayTask = new Wtf.util.DelayedTask(
													function() {
														if (this.generatePayrollLink) {
															this.empGDS
																	.load({
																		scope : this,
																		params : {
																			start : this.allempGrid.pag.cursor,
																			limit : this.allempGrid.pag.pageSize,
																			sdate : this.startdate,
																			edate : this.enddate,
																			frequency : this.frequency
																		}
																	})
														} else {
															this.empGDS
																	.load({
																		params : {
																			start : this.allempGrid.pag.cursor,
																			limit : this.allempGrid.pag.pageSize,
																			ss : Wtf
																					.getCmp(
																							"Quick"
																									+ this.allempGrid.id)
																					.getValue()
																		}
																	})
														}
														this.close()
													}, this);
											delayTask.delay(1000)
										} else {
											if (this.generatePayrollLink) {
												if (res.sameFrequency) {
													Wtf.MessageBox
															.confirm(
																	WtfGlobal
																			.getLocaleText("hrms.common.confirm"),
																	WtfGlobal
																			.getLocaleText("hrms.payroll.components.already.assigned.want.overwrite"),
																	function(
																			btn) {
																		if (btn != "yes") {
																			return
																		}
																		calMsgBoxShow(
																				200,
																				4,
																				true);
																		Wtf.Ajax
																				.requestEx(
																						{
																							url : "Payroll/Date/assignComponentToResource.py",
																							params : {
																								componentid : componentid,
																								availcomponentid : availcomponentid,
																								userid : userid,
																								startdate : res.startDate,
																								enddate : res.endDate,
																								frequency : this.frequency,
																								fullname : payrollRecData.fullname,
																								costcenter : payrollRecData.costcenter,
																								jobtitle : payrollRecData.jobtitle,
																								contract : payrollRecData.contract,
																								absence : payrollRecData.absence,
																								paycyclestartdate : res.startDate,
																								paycycleenddate : res.endDate,
																								difference : payrollRecData.difference,
																								status : payrollRecData.status,
																								historyid : payrollRecData.id,
																								overwrite : true,
																								isGeneratable : false
																							}
																						},
																						this,
																						function(
																								response) {
																							var res = eval("("
																									+ response
																									+ ")");
																							if (res.success) {
																								calMsgBoxShow(
																										[
																												WtfGlobal
																														.getLocaleText("hrms.common.success"),
																												WtfGlobal
																														.getLocaleText("hrms.payroll.components.assigned.successfully") ],
																										0,
																										0);
																								var delayTask = new Wtf.util.DelayedTask(
																										function() {
																											this.empGDS
																													.load({
																														scope : this,
																														params : {
																															start : this.allempGrid.pag.cursor,
																															limit : this.allempGrid.pag.pageSize,
																															sdate : this.startdate,
																															edate : this.enddate,
																															frequency : this.frequency
																														}
																													});
																											this
																													.close()
																										},
																										this);
																								delayTask
																										.delay(1000)
																							}
																						},
																						function(
																								response) {
																							Wtf.Msg
																									.alert(
																											WtfGlobal
																													.getLocaleText("hrms.common.error"),
																											WtfGlobal
																													.getLocaleText("hrms.payroll.error.overwrite.component"))
																						})
																	}, this)
												} else {
													if (res.isGeneratable) {
														Wtf.MessageBox
																.confirm(
																		WtfGlobal
																				.getLocaleText("hrms.common.confirm"),
																		WtfGlobal
																				.getLocaleText({
																					key : "hrms.payroll.components.already.mapped.salary.already.exist",
																					params : [
																							res.startdate,
																							res.enddate,
																							res.startDateDisplay,
																							res.endDateDisplay ]
																				}),
																		function(
																				btn) {
																			if (btn != "yes") {
																				this
																						.close();
																				return
																			}
																			calMsgBoxShow(
																					200,
																					4,
																					true);
																			Wtf.Ajax
																					.requestEx(
																							{
																								url : "Payroll/Date/assignComponentToResource.py",
																								params : {
																									componentid : componentid,
																									availcomponentid : availcomponentid,
																									userid : userid,
																									startdate : res.startDate,
																									enddate : res.endDate,
																									frequency : this.frequency,
																									fullname : payrollRecData.fullname,
																									costcenter : payrollRecData.costcenter,
																									jobtitle : payrollRecData.jobtitle,
																									contract : payrollRecData.contract,
																									absence : payrollRecData.absence,
																									paycyclestartdate : res.startDate,
																									paycycleenddate : res.endDate,
																									difference : payrollRecData.difference,
																									status : payrollRecData.status,
																									historyid : payrollRecData.id,
																									overwrite : true,
																									isGeneratable : true
																								}
																							},
																							this,
																							function(
																									response) {
																								var res = eval("("
																										+ response
																										+ ")");
																								if (res.success) {
																									calMsgBoxShow(
																											[
																													WtfGlobal
																															.getLocaleText("hrms.common.success"),
																													WtfGlobal
																															.getLocaleText("hrms.payroll.components.assigned.successfully") ],
																											0,
																											0);
																									var delayTask = new Wtf.util.DelayedTask(
																											function() {
																												this.empGDS
																														.load({
																															scope : this,
																															params : {
																																start : this.allempGrid.pag.cursor,
																																limit : this.allempGrid.pag.pageSize,
																																sdate : this.startdate,
																																edate : this.enddate,
																																frequency : this.frequency
																															}
																														});
																												this
																														.close()
																											},
																											this);
																									delayTask
																											.delay(1000)
																								}
																							},
																							function(
																									response) {
																								Wtf.Msg
																										.alert(
																												WtfGlobal
																														.getLocaleText("hrms.common.error"),
																												WtfGlobal
																														.getLocaleText("hrms.payroll.error.overwrite.component"))
																							})
																		}, this)
													} else {
														this.close();
														calMsgBoxShow(
																[
																		WtfGlobal
																				.getLocaleText("hrms.common.warning"),
																		WtfGlobal
																				.getLocaleText({
																					key : "hrms.payroll.component.mapping.salary.already.exist",
																					params : [
																							res.startdate,
																							res.enddate ]
																				}) ],
																0, 0)
													}
												}
											}
										}
									},
									function() {
										Wtf.Msg
												.alert(
														WtfGlobal
																.getLocaleText("hrms.common.error"),
														WtfGlobal
																.getLocaleText("hrms.admin.Errorinassigningmanager"))
									})
				}
			});
Wtf.linkComponentWin = function(A) {
Wtf.apply(this, A);
Wtf.linkComponentWin.superclass.constructor
		.call(
				this,
				{
					buttonAlign : "right",
					buttons : [
							this.savebtn = new Wtf.Button(
									{
										text : WtfGlobal
												.getLocaleText("hrms.common.Save"),
										scope : this,
										minWidth : 75,
										disabled : this.status,
										handler : function() {
											var D = [];
											var C = [];
											var E = [];
											for ( var B = 0; B < this.selectedds.data.items.length; B++) {
												D[B] = this.selectedds.data.items[B].data.id;
												C[B] = this.selectedds.data.items[B].data.amount;
												E[B] = this.selectedds.data.items[B].data.compid
											}
											if (this.selectedds.data.items.length == 0) {
												calMsgBoxShow(
														[
																WtfGlobal
																		.getLocaleText("hrms.common.warning"),
																WtfGlobal
																		.getLocaleText("hrms.payroll.no.componets.save") ],
														2);
												return 0
											}
											var F = WtfGlobal
													.getLocaleText("hrms.payroll.update.salary.selected.employee")
													+ "<br><br><form><input type='checkbox' name='update_dependent_component_amount' value='update' /> "
													+ WtfGlobal
															.getLocaleText("hrms.payroll.check.update.all.dependent.components")
													+ "<br /></form> ";
											Wtf.MessageBox
													.confirm(
															WtfGlobal
																	.getLocaleText("hrms.common.confirm"),
															F,
															function(G) {
																if (G != "yes") {
																	return
																}
																var H = document
																		.getElementsByName("update_dependent_component_amount")[0].checked;
																calMsgBoxShow(
																		200, 4,
																		true);
																Wtf.Ajax
																		.requestEx(
																				{
																					url : "Payroll/Date/editAssignedComponentsToResource.py",
																					scope : this,
																					params : {
																						ids : D,
																						amounts : C,
																						components : E,
																						startdate : this.startdate,
																						enddate : this.enddate,
																						userid : this.userid,
																						updateAllDependents : H,
																						frequency : this.frequency,
																						absence : this.absence,
																						historyid : this.historyid
																					}
																				},
																				this,
																				function(
																						I) {
																					calMsgBoxShow(
																							[
																									WtfGlobal
																											.getLocaleText("hrms.common.success"),
																									WtfGlobal
																											.getLocaleText("hrms.payroll.salary.amount.updated.successfully") ],
																							0);
																					if (this.reviewPayrollFlag) {
																						this
																								.fireEvent(
																										"reloadComponents",
																										this)
																					}
																					this
																							.close()
																				},
																				function() {
																					this
																							.close()
																				})
															}, this)
										}
									}),
							{
								text : WtfGlobal
										.getLocaleText("hrms.common.cancel"),
								scope : this,
								handler : function() {
									this.close()
								}
							} ]
				})
};
Wtf
	.extend(
			Wtf.linkComponentWin,
			Wtf.Window,
			{
				group_id : "",
				iconCls : getButtonIconCls(Wtf.btype.winicon),
				initComponent : function() {
					this.addEvents("reloadComponents");
					Wtf.linkComponentWin.superclass.initComponent.call(this)
				},
				onRender : function(A) {
					Wtf.linkComponentWin.superclass.onRender.call(this, A);
					this.selectedRec = new Wtf.data.Record.create([ {
						"name" : "id"
					}, {
						"name" : "compid"
					}, {
						"name" : "code"
					}, {
						"name" : "sdate"
					}, {
						"name" : "edate"
					}, {
						"name" : "desc"
					}, {
						"name" : "amount"
					}, {
						"name" : "type"
					}, {
						"name" : "isaddruletypecomponent"
					}, {
						"name" : "isadjust"
					}, {
						"name" : "istaxablecomponent"
					} ]);
					this.selectedds = new Wtf.data.Store(
							{
								url : "Payroll/Date/getAssignedComponentsToResource.py",
								baseParams : {
									userid : this.userid,
									startdate : this.startdate,
									enddate : this.enddate,
									frequency : this.frequency,
									assigned : true
								},
								reader : new Wtf.data.KwlJsonReader1({
									root : "data",
									totalProperty : "count"
								}, this.selectedRec),
								autoLoad : false
							});
					this.selectedsm = new Wtf.grid.CheckboxSelectionModel({
						singleSelect : true
					});
					this.selectedcm = new Wtf.grid.ColumnModel(
							[
									this.selectedsm,
									{
										dataIndex : "compid",
										hidden : true,
										fixed : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.code"),
										dataIndex : "code",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.performance.description"),
										dataIndex : "desc",
										sortable : true,
										renderer : function(C) {
											if (Wtf.isIE6 || Wtf.isIE7) {
												return "<pre style='word-wrap:break-word;font:11px arial, tahoma, helvetica, sans-serif;' wtf:qtip=\""
														+ C
														+ '">'
														+ C
														+ "</pre>"
											}
											return "<span style='white-space:pre-wrap;'>"
													+ C + "</span>"
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.component.type"),
										dataIndex : "type",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.Amount"),
										dataIndex : "amount",
										editor : new Wtf.form.NumberField({
											maxLength : 255,
											allowBlank : false,
											allowNegative : false,
											maxValue : 10000000000000000
										}),
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.is.adjustable"),
										dataIndex : "isadjust",
										renderer : function(C) {
											if (C) {
												return "<span style='color:green !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.yes")
														+ "</span>"
											} else {
												return "<span style='color:red !important;'>"
														+ WtfGlobal
																.getLocaleText("hrms.common.no")
														+ "</span>"
											}
										},
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.start.date"),
										dataIndex : "sdate",
										sortable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.end.date"),
										dataIndex : "edate",
										sortable : true
									} ]);
					this.quickSearchAssgEmp = new Wtf.wtfQuickSearch({
						width : 150,
						field : "code",
						emptyText : WtfGlobal
								.getLocaleText("hrms.payroll.search.code")
					});
					this.selectedgrid = new Wtf.grid.EditorGridPanel(
							{
								height : 100,
								store : this.selectedds,
								cm : this.selectedcm,
								sm : this.selectedsm,
								autoScroll : true,
								border : false,
								viewConfig : {
									forceFit : true,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.payroll.no.component.linked.this.period"))
								},
								tbar : [
										WtfGlobal
												.getLocaleText("hrms.common.QuickSearch")
												+ ": ", this.quickSearchAssgEmp ]
							});
					this.selectedds.load();
					this.selectedds.on("load", function() {
						this.quickSearchAssgEmp.StorageChanged(this.selectedds)
					}, this);
					this.selectedgrid.on("beforeedit", function(C) {
						if (!C.record.data.isadjust
								|| C.record.data.isaddruletypecomponent) {
							C.cancel = true;
							return false
						}
					}, this);
					var B = WtfGlobal.getLocaleText("hrms.payroll.component");
					this.assignTeamPanel = new Wtf.Panel(
							{
								layout : "border",
								items : [
										{
											region : "north",
											height : 80,
											border : false,
											cls : "formstyleClass",
											html : getTopHtml(
													WtfGlobal
															.getLocaleText("hrms.payroll.manage.amount"),
													WtfGlobal
															.getLocaleText("hrms.payroll.manage.amount"),
													"images/assign-manager.gif")
										}, {
											region : "center",
											border : false,
											layout : "fit",
											items : [ this.selectedgrid ]
										} ]
							});
					this.add(this.assignTeamPanel)
				}
			});
Wtf.AssignFrequency = function(A) {
Wtf.apply(this, A);
this.save = true;
Wtf.AssignFrequency.superclass.constructor.call(this, {
	buttons : [ {
		text : WtfGlobal.getLocaleText("hrms.common.Save"),
		id : "btnsave",
		handler : function() {
			this.saveAssignFrequency()
		},
		scope : this
	}, {
		text : WtfGlobal.getLocaleText("hrms.common.cancel"),
		handler : function() {
			this.close()
		},
		scope : this
	} ]
})
};
Wtf
	.extend(
			Wtf.AssignFrequency,
			Wtf.Window,
			{
				initComponent : function() {
					Wtf.AssignFrequency.superclass.initComponent.call(this);
					this.GetNorthPanel();
					this.GetCenterPanel();
					this.GetSouthPanel();
					this.mainPanel = new Wtf.Panel({
						layout : "border",
						items : [ this.northPanel, this.allempGrid,
								this.AddEditForm ]
					});
					this.add(this.mainPanel)
				},
				GetNorthPanel : function() {
					this.northPanel = new Wtf.Panel(
							{
								region : "north",
								height : 75,
								border : false,
								bodyStyle : "background-color:white;padding:8px;border-bottom:1px solid #bfbfbf;",
								html : getTopHtml(
										"Assign Frequency",
										"Assign frequency for selected employees",
										"images/assign-manager.gif")
							})
				},
				GetCenterPanel : function() {
					this.cm = new Wtf.grid.ColumnModel(
							[
									new Wtf.grid.RowNumberer(),
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.employee.id"),
										dataIndex : "employeeid"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.UserName"),
										dataIndex : "username"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.employee.name"),
										dataIndex : "fullname"
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.current.frequency"),
										dataIndex : "frequency",
										renderer : function(A) {
											if (A == 0) {
												return WtfGlobal
														.getLocaleText("hrms.payroll.Monthly")
											} else {
												if (A == 1) {
													return WtfGlobal
															.getLocaleText("hrms.payroll.Weekly")
												} else {
													if (A == 2) {
														return WtfGlobal
																.getLocaleText("hrms.payroll.twice.month")
													}
												}
											}
										}
									} ]);
					this.allempGrid = new Wtf.grid.GridPanel({
						region : "center",
						id : this.id + "qualifiedgr",
						store : this.empGDS,
						cm : this.cm,
						loadMask : true,
						displayInfo : true,
						enableColumnHide : false,
						trackMouseOver : true,
						clicksToEdit : 1,
						autoScroll : true,
						stripeRows : true,
						searchLabel : " ",
						searchLabelSeparator : " ",
						viewConfig : {
							forceFit : true
						}
					})
				},
				GetSouthPanel : function() {
					this.frequencyStoreCmb = new Wtf.form.ComboBox(
							{
								triggerAction : "all",
								fieldLabel : WtfGlobal
										.getLocaleText("hrms.payroll.assign.frequency"),
								hiddenName : "frequency",
								mode : "local",
								valueField : "id",
								displayField : "name",
								store : Wtf.frequencyStore,
								width : 150,
								typeAhead : true,
								value : 0
							});
					this.AddEditForm = new Wtf.form.FormPanel(
							{
								region : "south",
								height : 75,
								border : false,
								bodyStyle : "background-color:#f1f1f1;padding:55px 55px 55px 145px",
								url : "Common/Master/addMasterDataField.common",
								items : [ this.frequencyStoreCmb ]
							})
				},
				saveAssignFrequency : function() {
					var B = [];
					var C = "";
					for ( var A = 0; A < this.emparr.length; A++) {
						B.push(this.emparr[A].get("userid"));
						C += this.emparr[A].get("userid") + ","
					}
					Wtf.MessageBox
							.confirm(
									WtfGlobal
											.getLocaleText("hrms.common.confirm"),
									WtfGlobal
											.getLocaleText("hrms.payroll.update.frequency.listed.employee"),
									function(D) {
										if (D != "yes") {
											return
										}
										Wtf
												.commonWaitMsgBox(WtfGlobal
														.getLocaleText("hrms.common.Savingdata"));
										Wtf.Ajax
												.requestEx(
														{
															url : "Payroll/Date/assignFrequencytoResource.py",
															params : {
																empids : B,
																frequency : this.frequencyStoreCmb
																		.getValue()
															}
														},
														this,
														function(E, F) {
															calMsgBoxShow(
																	[
																			WtfGlobal
																					.getLocaleText("hrms.common.success"),
																			WtfGlobal
																					.getLocaleText("hrms.payroll.frequency.assigned.successfully") ],
																	0, 0);
															this.close();
															this.grid
																	.getStore()
																	.reload()
														},
														function() {
															calMsgBoxShow(27, 1)
														})
									}, this)
				}
			});
Wtf.resourcePayslip = function(A) {
Wtf.form.Field.prototype.msgTarget = "side", A.layout = "fit";
A.closable = true;
this.modifiedflag = 0;
Wtf.resourcePayslip.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.resourcePayslip,
			Wtf.Panel,
			{
				initComponent : function(A) {
					Wtf.resourcePayslip.superclass.initComponent.call(this, A);
					this.jsondata = "";
					this.salgen = 0;
					var D = WtfGlobal.getCurrencySymbol();
					this.empform = new Wtf.Panel(
							{
								height : 110,
								columnWidth : 1,
								border : false,
								bodyStyle : "margin-left:33%;margin-top:1%",
								scope : this,
								items : [ {
									height : 100,
									width : 400,
									scope : this,
									layout : "form",
									bodyStyle : "padding-top:20px;padding-left:50px;",
									items : [
											{
												xtype : "textfield",
												width : "70%",
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.common.employee.name"),
												value : this.ename,
												readOnly : true
											},
											{
												xtype : "textfield",
												width : "70%",
												fieldLabel : WtfGlobal
														.getLocaleText("hrms.payroll.AccountNumber"),
												readOnly : true,
												value : this.accno
											} ]
								} ]
							});
					this.storeURLEC = "Payroll/Date/getSalaryComponents.py?userid="
							+ this.userid
							+ "&enddate="
							+ this.enddate
							+ "&type="
							+ 0
							+ "&frequency="
							+ this.frequency
							+ "&historyid=" + this.historyid;
					this.storeURLE = "Payroll/Date/getSalaryComponents.py?userid="
							+ this.userid
							+ "&enddate="
							+ this.enddate
							+ "&type="
							+ 1
							+ "&frequency="
							+ this.frequency
							+ "&historyid="
							+ this.historyid
							+ "&otherRemuneration=" + 4;
					this.storeURLD = "Payroll/Date/getSalaryComponents.py?userid="
							+ this.userid
							+ "&enddate="
							+ this.enddate
							+ "&type="
							+ 2
							+ "&frequency="
							+ this.frequency
							+ "&historyid=" + this.historyid;
					this.storeURLT = "Payroll/Date/getSalaryComponents.py?userid="
							+ this.userid
							+ "&enddate="
							+ this.enddate
							+ "&type="
							+ 3
							+ "&frequency="
							+ this.frequency
							+ "&historyid=" + this.historyid;
					this.earningPan = new Wtf.Panel({
						columnWidth : 0.8,
						bodyStyle : "margin-top:1%",
						border : false,
						scope : this,
						items : [ this.wages = new Wtf.resourcePayslipGrid({
							type : WtfGlobal
									.getLocaleText("hrms.common.Earning"),
							height : 160,
							scope : this,
							id : "Earning" + this.id,
							Data : "Wage",
							storeURL : this.storeURLE,
							startdate : this.startdate,
							enddate : this.enddate
						}) ]
					});
					this.deductionPan = new Wtf.Panel({
						columnWidth : 0.8,
						border : false,
						bodyStyle : "margin-top:1%",
						scope : this,
						items : [ this.diduces = new Wtf.resourcePayslipGrid({
							type : WtfGlobal
									.getLocaleText("hrms.common.Deductions"),
							id : "Deduction" + this.id,
							scope : this,
							height : 150,
							flag : this.flag,
							Data : "Deduc",
							storeURL : this.storeURLD,
							startdate : this.startdate,
							enddate : this.enddate
						}) ]
					});
					this.taxPan = new Wtf.Panel({
						columnWidth : 0.8,
						bodyStyle : "margin-top:1%",
						border : false,
						scope : this,
						items : [ this.taxes = new Wtf.resourcePayslipGrid({
							type : WtfGlobal.getLocaleText("hrms.common.Tax"),
							id : "Tax" + this.id,
							height : 150,
							scope : this,
							flag : this.flag,
							Data : "Tax",
							storeURL : this.storeURLT,
							startdate : this.startdate,
							enddate : this.enddate
						}) ]
					});
					this.empContributionPan = new Wtf.Panel(
							{
								columnWidth : 0.8,
								bodyStyle : "margin-top:1%",
								border : false,
								scope : this,
								items : [ this.empcontrib = new Wtf.resourcePayslipGrid(
										{
											type : WtfGlobal
													.getLocaleText("hrms.payroll.EmployerContribution"),
											id : "Newgrid" + this.id,
											height : 150,
											scope : this,
											flag : this.flag,
											mappingid : this.mappingid,
											Data : "EC",
											storeURL : this.storeURLEC,
											startdate : this.startdate,
											enddate : this.enddate
										}) ]
							});
					this.totalAmountPan = new Wtf.Panel(
							{
								columnWidth : 0.8,
								layout : "form",
								border : false,
								labelWidth : 65,
								bodyStyle : "margin-left:81%;margin-bottom:2%;margin-top:2%",
								scope : this,
								items : [ this.tot = new Wtf.form.TextField(
										{
											border : true,
											scope : this,
											cls : "textfstyle",
											readOnly : true,
											fieldLabel : '<span style="padding-left:-3px;font-family:Lucida Sans Unicode;"><b>'
													+ WtfGlobal
															.getLocaleText("hrms.payroll.TOTAL")
													+ "</b>(" + D + ")</span>",
											allowDecimals : true,
											labelSeparator : "",
											value : 0,
											height : 20,
											width : 120,
											bodyStyle : "margin-left:10%;background:white;border-right:3px",
											decimalPrecision : 2
										}) ]
							});
					this.wages.storetax.on("load", function(G, F, E) {
						this.setTotalSal()
					}, this);
					this.diduces.storetax.on("load", function(G, F, E) {
						this.setTotalSal()
					}, this);
					this.taxes.storetax.on("load", function(G, F, E) {
						this.setTotalSal()
					}, this);
					this.fromdateemp = new Wtf.form.DateField({
						width : 155,
						readOnly : true,
						emptyText : WtfGlobal
								.getLocaleText("hrms.timesheet.fromdate"),
						format : "m/d/Y",
						disabled : true,
						value : this.startdate
					});
					this.todateemp = new Wtf.form.DateField({
						width : 155,
						readOnly : true,
						emptyText : WtfGlobal
								.getLocaleText("hrms.timesheet.todate"),
						disabled : true,
						format : "m/d/Y",
						value : this.enddate
					});
					this.dwnldpay = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.DownloadPayslip"),
								iconCls : "pwnd downloadIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.download.payslip.pdf"),
								scope : this,
								handler : function() {
									Wtf.get("downloadframe").dom.src = "Payroll/Salary/exportSalarySlip.py?userid="
											+ this.userid
											+ "&startdate="
											+ this.startdate
											+ "&enddate="
											+ this.enddate
											+ "&historyid="
											+ this.historyid
								}
							});
					this.myprint = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.PrintPayslip"),
								scope : this,
								iconCls : "pwnd printIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.click.print.payslip"),
								handler : function() {
									window
											.open(
													"Payroll/Salary/printSalarySlip.py?userid="
															+ this.userid
															+ "&startdate="
															+ this.startdate
															+ "&enddate="
															+ this.enddate
															+ "&historyid="
															+ this.historyid,
													"mywindow",
													"menubar=1,resizable=1,scrollbars=1")
								}
							});
					var B = [];
					B.push(WtfGlobal.getLocaleText("hrms.common.start.date")
							+ ":", this.fromdateemp, WtfGlobal
							.getLocaleText("hrms.common.end.date")
							+ ":", this.todateemp);
					if (this.flag != "employee") {
						B.push("-", this.dwnldpay, "-", this.myprint)
					}
					if (this.reviewPayrollFlag) {
						B = [];
						this.linkComponent = new Wtf.Button(
								{
									text : WtfGlobal
											.getLocaleText("hrms.payroll.manage.amount"),
									scope : this,
									iconCls : "pwndHRMS manageAmountIcon",
									tooltip : WtfGlobal
											.getLocaleText("hrms.payroll.update.amount.components"),
									handler : function() {
										var F = "";
										var G = this.generatedSalaryListGrid
												.getSelectionModel()
												.getSelections();
										F = G[0].get("resource");
										var E = G[0].get("absence");
										this.linkComponentWin = new Wtf.linkComponentWin(
												{
													iconCls : getButtonIconCls(Wtf.btype.winicon),
													layout : "fit",
													closable : true,
													width : 760,
													title : WtfGlobal
															.getLocaleText("hrms.payroll.link.payroll.component"),
													height : 500,
													border : false,
													empGDS : this.generatedSalaryStore,
													modal : true,
													userid : F,
													startdate : this.startdate,
													enddate : this.enddate,
													frequency : this.frequency,
													scope : this,
													plain : true,
													allempGrid : this.generatedSalaryListGrid,
													reviewPayrollFlag : this.reviewPayrollFlag,
													absence : E,
													historyid : this.historyid
												});
										this.linkComponentWin.show();
										this.linkComponentWin.on(
												"reloadComponents",
												this.reloadComponents, this)
									}
								});
						if (this.payrollStatus == 1 || this.payrollStatus == 2
								|| this.payrollStatus == 4) {
							B.push("-");
							B.push(this.linkComponent)
						}
					}
					var C = [];
					this.MainDataEntryPanel = new Wtf.Panel({
						id : this.id + "payslip",
						layout : "column",
						border : false,
						bodyStyle : "background:white",
						scope : this,
						autoScroll : true,
						items : [ this.empform, this.earningPan,
								this.deductionPan, this.taxPan,
								this.empContributionPan, this.totalAmountPan ],
						tbar : B,
						buttonAlign : "right",
						bbar : C
					});
					this.add(this.MainDataEntryPanel);
					this.doLayout();
					this.on("activate", function(F, E) {
						this.doLayout()
					})
				},
				reloadComponents : function(A) {
					this.wages.storetax.reload();
					this.diduces.storetax.reload();
					this.taxes.storetax.reload();
					this.empcontrib.storetax.reload()
				},
				setTotalSal : function() {
					var C = 0;
					var A = 0;
					var D = 0;
					var B = 0;
					A = parseFloat((this.diduces.total.getValue()).replace(
							/,/g, ""));
					C = parseFloat((this.wages.total.getValue()).replace(/,/g,
							""));
					D = parseFloat((this.taxes.total.getValue()).replace(/,/g,
							""));
					B = C - A - D;
					this.tot.setValue(WtfGlobal.currencyRenderer2(parseFloat(B)
							.toFixed(2)))
				}
			});
	Wtf.resourcePayslipGrid = function(A) {
		Wtf.form.Field.prototype.msgTarget = "side", A.border = false;
		Wtf.resourcePayslipGrid.superclass.constructor.call(this, A)
	},
	Wtf
			.extend(
					Wtf.resourcePayslipGrid,
					Wtf.Panel,
					{
						initComponent : function(A) {
							Wtf.resourcePayslipGrid.superclass.initComponent
									.call(this, A);
							this.rateEditor = new Wtf.form.TextField();
							this.amountEditor = new Wtf.form.TextField();
							this.cmtax = new Wtf.grid.ColumnModel(
									[
											{
												header : this.type,
												dataIndex : "type",
												sortable : true,
												autoWidth : true
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.payroll.percent.of"),
												dataIndex : "computeon",
												align : "center",
												sortable : true,
												hidden : (this.flag != "employee") ? false
														: true,
												sortable : true
											},
											{
												header : WtfGlobal
														.getLocaleText("hrms.payroll.Amount"),
												dataIndex : "amount",
												autoWidth : true,
												scope : this,
												sortable : true,
												align : "right",
												renderer : function(C) {
													if (C != null) {
														return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
																+ WtfGlobal
																		.currencyRenderer(parseFloat(
																				C)
																				.toFixed(
																						2)) + "</div>")
													}
												}
											} ]);
							this.fieldstax = [ {
								name : "id"
							}, {
								name : "type"
							}, {
								name : "amount",
								type : "float"
							}, {
								name : "computeon"
							} ];
							this.fieldstaxx = Wtf.data.Record
									.create(this.fieldstax);
							this.readertax = new Wtf.data.KwlJsonReader({
								root : this.Data,
								totalProperty : "totalcount"
							}, this.fieldstaxx);
							this.storetax = new Wtf.data.Store({
								scope : this,
								url : this.storeURL,
								method : "GET",
								reader : this.readertax
							});
							this.storetax.load({
								params : {
									userid : this.userid,
									startdate : this.startdate,
									enddate : this.enddate,
									type : this.type
								}
							});
							var B = [];
							B
									.push(
											"->",
											WtfGlobal
													.getLocaleText("hrms.payroll.TOTAL")
													+ '<span align="right" style="font-family:Lucida Sans Unicode;">('
													+ WtfGlobal
															.getCurrencySymbol()
													+ ")</span>",
											this.total = new Wtf.form.TextField(
													{
														border : false,
														scope : this,
														cls : "textfstyle",
														width : 100,
														value : 0,
														fieldLabel : WtfGlobal
																.getLocaleText("hrms.payroll.TOTAL"),
														readOnly : true,
														id : this.id
																+ "gridtotal",
														height : 16,
														bodyStyle : "background:white"
													}));
							this.grid = new Wtf.grid.EditorGridPanel({
								scope : this,
								bodyStyle : "width:99.7%",
								cm : this.cmtax,
								sm : new Wtf.grid.RowSelectionModel({
									singleSelect : true
								}),
								store : this.storetax,
								autoScroll : true,
								viewConfig : {
									forceFit : true
								},
								height : this.height,
								clicksToEdit : 1,
								stripeRows : true,
								bbar : B
							});
							this.storetax.on("load", function() {
								this.amtot = 0;
								for (i = 0; i < this.storetax.getCount(); i++) {
									this.amtot = this.amtot
											+ this.storetax.getAt(i).get(
													"amount")
								}
								this.total.setValue(WtfGlobal
										.currencyRenderer2(this.amtot))
							}, this);
							this.pan1 = new Wtf.Panel({
								height : this.height,
								border : false,
								bodyStyle : "margin-left:25%",
								scope : this,
								items : [ this.grid ]
							});
							this.add(this.pan1);
							this.doLayout();
							this.pan1.doLayout();
							this.on("activate", function(D, C) {
								this.doLayout()
							})
						}
					});
Wtf.processPayrollWin = function(A) {
Wtf.apply(this, A);
Wtf.processPayrollWin.superclass.constructor.call(this, A)
};
Wtf
	.extend(
			Wtf.processPayrollWin,
			Wtf.Window,
			{
				onRender : function(A) {
					Wtf.processPayrollWin.superclass.onRender.call(this, A);
					this.loadMask = new Wtf.LoadMask(this.el.dom, Wtf
							.apply(this.empProfile));
					this.headingType = "";
					this.type = [
							[ WtfGlobal.getLocaleText("hrms.payroll.trial"),
									"5" ],
							[ WtfGlobal.getLocaleText("hrms.payroll.final"),
									"6" ] ];
					this.typestore = new Wtf.data.SimpleStore({
						fields : [ {
							name : "type"
						}, {
							name : "code"
						} ],
						data : this.type
					});
					this.typeCombo = new Wtf.form.ComboBox({
						fieldLabel : WtfGlobal
								.getLocaleText("hrms.payroll.process")
								+ "*",
						store : this.typestore,
						displayField : "type",
						typeAhead : true,
						valueField : "code",
						allowBlank : false,
						width : 200,
						labelWidth : 100,
						scope : this,
						hiddenName : "processstatus",
						name : "processstatus",
						mode : "local",
						triggerAction : "all",
						emptyText : "Select Type",
						selectOnFocus : true
					});
					this.WtfGeneralPanel = new Wtf.Panel(
							{
								border : false,
								layout : "fit",
								items : [ {
									border : false,
									region : "center",
									layout : "border",
									items : [
											{
												region : "north",
												height : 70,
												border : false,
												bodyStyle : "background:white;border-bottom:1px solid #bfbfbf;",
												html : getTopHtml(
														WtfGlobal
																.getLocaleText("hrms.payroll.process.payroll"),
														WtfGlobal
																.getLocaleText("hrms.common.fill.following.fields"))
											},
											{
												border : false,
												region : "center",
												cls : "windowstyle",
												layout : "fit",
												items : [ this.WtfGeneralForm = new Wtf.form.FormPanel(
														{
															url : "Payroll/Date/processPayrollHistory.py",
															waitMsgTarget : true,
															method : "POST",
															border : false,
															bodyStyle : "background-color: #f1f1f1; margin: 5px ;padding:20px;",
															lableWidth : 50,
															layoutConfig : {
																deferredRender : false
															},
															defaults : {
																anchor : "93%",
																width : 200,
																msgTarget : "side"
															},
															defaultType : "textfield",
															items : [
																	this.typeCombo,
																	this.paymentDate = new Wtf.form.DateField(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.payment.date"),
																				emptyText : WtfGlobal
																						.getLocaleText("hrms.payroll.select.payment.date"),
																				width : 200,
																				format : "Y-m-d",
																				name : "paydate"
																			}),
																	this.specification = new Wtf.form.TextArea(
																			{
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.payment.specification"),
																				width : 200,
																				maxLength : 1024,
																				emptyText : WtfGlobal
																						.getLocaleText("hrms.payroll.brief.payment.specification"),
																				name : "payspecification"
																			}),
																	this.slipTxt1 = new Wtf.form.TextField(
																			{
																				width : 200,
																				maxLength : 100,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.salary.slip.text1"),
																				anchor : "90%",
																				name : "sliptxt1",
																				id : "txtId1"
																						+ this.id
																			}),
																	this.slipTxt2 = new Wtf.form.TextField(
																			{
																				width : 200,
																				maxLength : 100,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.salary.slip.text2"),
																				anchor : "90%",
																				name : "sliptxt2",
																				id : "txtId2"
																						+ this.id
																			}),
																	this.slipTxt3 = new Wtf.form.TextField(
																			{
																				width : 200,
																				maxLength : 100,
																				fieldLabel : WtfGlobal
																						.getLocaleText("hrms.payroll.salary.slip.text3"),
																				anchor : "90%",
																				name : "sliptxt3",
																				id : "txtId3"
																						+ this.id
																			}) ]
														}) ]
											} ]
								} ],
								buttonAlign : "right",
								buttons : [
										{
											anchor : "90%",
											text : WtfGlobal
													.getLocaleText("hrms.common.ok.small"),
											id : "Item-submit-btn",
											handler : this.saveRequest,
											scope : this
										},
										{
											anchor : "90%",
											text : WtfGlobal
													.getLocaleText("hrms.common.Close"),
											handler : function() {
												this.close()
											},
											scope : this
										} ]
							});
					this.add(this.WtfGeneralPanel)
				},
				saveRequest : function() {
					if (this.WtfGeneralForm.form.isValid()) {
						Wtf.MessageBox
								.confirm(
										WtfGlobal
												.getLocaleText("hrms.common.confirm"),
										WtfGlobal
												.getLocaleText("hrms.payroll.process.selected.employee.salary"),
										function(A) {
											if (A != "yes") {
												Wtf.getCmp("Item-submit-btn")
														.setDisabled(false);
												return
											} else {
												Wtf.getCmp("Item-submit-btn")
														.setDisabled(true)
											}
											calMsgBoxShow(200, 4, true);
											this.WtfGeneralForm.form
													.submit(
															{
																scope : this,
																params : {
																	"action" : (this.action),
																	"historyid" : this.historyid,
																	"userids" : this.userids,
																	"enddate" : this.enddate,
																	"frequency" : this.frequency
																},
																failure : function(
																		C, B) {
																	msgBoxShow(
																			100,
																			1);
																	this
																			.close()
																},
																success : function(
																		C, B) {
																	var D = B.result.success;
																	if (D) {
																		Wtf.notify
																				.msg(
																						WtfGlobal
																								.getLocaleText("hrms.common.success"),
																						WtfGlobal
																								.getLocaleText("hrms.common.salary.processed.successfully"));
																		if (this.grid) {
																			this.grid
																					.getStore()
																					.reload()
																		}
																	} else {
																		calMsgBoxShow(
																				[
																						WtfGlobal
																								.getLocaleText("hrms.common.error"),
																						WtfGlobal
																								.getLocaleText("hrms.common.error.occured") ],
																				1)
																	}
																	this
																			.close()
																}
															}, this)
										}, this)
					} else {
						Wtf.getCmp("Item-submit-btn").setDisabled(false)
					}
				}
			});
Wtf.PayrollResourceGrid = function(A) {
Wtf.apply(this, A);
this.id = new Wtf.form.TextField({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.employee.id") + "*",
	name : "id",
	allowBlank : false,
	width : "75%",
	id : "id",
	value : this.record.data.employeeid
});
this.historyid = new Wtf.form.Hidden({
	name : "historyid",
	id : "historyid",
	value : this.record.data.id
});
this.userid = new Wtf.form.Hidden({
	name : "userid",
	id : "userid",
	value : this.record.data.resource
});
this.sDate = new Wtf.form.Hidden({
	name : "paycyclestartdate",
	id : "paycyclestartdate",
	value : this.sdate
});
this.eDate = new Wtf.form.Hidden({
	name : "paycycleenddate",
	id : "paycycleenddate",
	value : this.edate
});
this.frequencyHidden = new Wtf.form.Hidden({
	name : "frequency",
	id : "frequency",
	value : this.frequency
});
this.name = new Wtf.form.TextField({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.FullName") + "*",
	name : "fullname",
	allowBlank : false,
	width : "75%",
	id : "fullname",
	value : this.record.data.fullname
});
this.CostCenterRec = new Wtf.data.Record.create([ {
	name : "id"
}, {
	name : "name"
}, {
	name : "code"
}, {
	name : "creationDate"
} ]);
this.CostCenterReader = new Wtf.data.KwlJsonReader1({
	root : "data",
	totalProperty : "count"
}, this.CostCenterRec);
this.CostCenterStore = new Wtf.data.Store({
	url : "Common/getCostCenter.common",
	reader : this.CostCenterReader
});
this.CostCenterStore.load();
this.costcenter = new Wtf.form.ComboBox({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.costcenter"),
	store : this.CostCenterStore,
	mode : "local",
	typeAhead : true,
	editable : true,
	valueField : "id",
	hiddenName : "costcenter",
	displayField : "name",
	width : 227,
	triggerAction : "all",
	forceSelection : true,
	emptyText : WtfGlobal.getLocaleText("hrms.common.select.cost.center")
});
this.CostCenterStore.on("load", function() {
	this.costcenter.setValue(this.record.data.costcenter)
}, this);
this.jobtitle = new Wtf.form.ComboBox({
	store : Wtf.desigStore,
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.designation") + "*",
	mode : "local",
	hiddenName : "jobtitle",
	name : "designationid",
	width : 227,
	allowBlank : false,
	valueField : "id",
	displayField : "name",
	triggerAction : "all",
	forceSelection : true,
	validator : WtfGlobal.validateDropDowns,
	typeAhead : true
});
if (!Wtf.StoreMgr.containsKey("desig")) {
	Wtf.desigStore.on("load", function() {
		this.jobtitle.setValue(this.record.data.jobtitle)
	}, this);
	Wtf.desigStore.load();
	Wtf.StoreMgr.add("desig", Wtf.desigStore)
} else {
	this.jobtitle.setValue(this.record.data.jobtitle)
}
this.contract = new Wtf.form.TextField({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.Contract") + "*",
	name : "contract",
	allowBlank : false,
	width : "75%",
	id : "contract",
	hidden : true,
	value : this.record.data.contract
});
this.absence = new Wtf.form.TextField({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.absence") + "*",
	name : "absence",
	allowBlank : false,
	width : "75%",
	id : "absence",
	value : this.record.data.absence
});
this.actual = new Wtf.form.TextField({
	fieldLabel : WtfGlobal.getLocaleText("hrms.common.actual") + "*",
	name : "actual",
	allowBlank : false,
	width : "75%",
	id : "actual",
	value : this.record.data.actual
});
this.employementDate = new Wtf.form.DateField({
	id : "employmentdate",
	fieldLabel : WtfGlobal.getLocaleText("hrms.payroll.employment.date") + "*",
	format : "m/d/Y",
	width : 227,
	allowBlank : false,
	name : "employmentdate",
	hidden : true,
	value : this.record.data.employmentdate
});
this.contractDate = new Wtf.form.DateField({
	id : "contractenddate",
	fieldLabel : WtfGlobal.getLocaleText("hrms.payroll.contract.date") + "*",
	format : "m/d/Y",
	width : 227,
	allowBlank : false,
	name : "contractenddate",
	hidden : true,
	value : this.record.data.contractenddate
});
this.info = new Wtf.form.FormPanel(
		{
			url : "Payroll/Date/editResorcePayrollData.py",
			region : "center",
			cls : "x-panel-body x-panel-body-noheader x-panel-body-noborder visibleDisabled",
			bodyStyle : "background: transparent;",
			border : false,
			bodyBorder : false,
			style : "background: transparent;padding-left:20px;padding-top: 20px;padding-right: 0px;",
			width : "100%",
			height : "100%",
			id : "info",
			defaultType : "textfield",
			items : [ this.id, this.name, this.costcenter, this.jobtitle,
					this.absence, this.historyid, this.userid, this.sDate,
					this.eDate, this.frequencyHidden ]
		});
this.MainWinPanel = new Wtf.Panel(
		{
			border : false,
			autoScroll : true,
			layout : "border",
			items : [
					{
						region : "north",
						id : "north1",
						border : false,
						height : 80,
						style : "background: #FFFFFF;",
						html : getTopHtml(
								WtfGlobal
										.getLocaleText("hrms.payroll.manage.employee.details"),
								WtfGlobal
										.getLocaleText("hrms.payroll.manage.employee.details"),
								"images/edit-user-popup.jpg"),
						layout : "fit"
					}, {
						region : "center",
						id : "center1",
						border : false,
						layout : "fit",
						cls : "formstyleClass2",
						items : [ this.info ]
					} ]
		});
this.win = new Wtf.Window(
		{
			iconCls : getButtonIconCls(Wtf.btype.winicon),
			title : WtfGlobal
					.getLocaleText("hrms.payroll.manage.employee.details"),
			id : "editResourceDetails",
			height : 350,
			width : 430,
			modal : true,
			resizable : false,
			layout : "fit",
			scope : this,
			items : [ this.MainWinPanel ],
			buttonAlign : "right",
			buttons : [
					{
						text : WtfGlobal.getLocaleText("hrms.common.Save"),
						scope : this,
						handler : function() {
							if (!this.info.form.isValid()) {
								return
							} else {
								calMsgBoxShow(200, 4, true);
								this.info
										.getForm()
										.submit(
												{
													waitMsg : WtfGlobal
															.getLocaleText("hrms.common.Savinguserinformation"),
													success : function(C, B) {
														this.win.close();
														this.fireEvent("save",
																B)
													},
													failure : function(C, B) {
														this.win.close()
													},
													scope : this
												})
							}
						}
					}, {
						text : WtfGlobal.getLocaleText("hrms.common.cancel"),
						handler : this.cancel.createDelegate(this)
					} ]
		});
this.win.on("show", function(B) {
	if (B.tools) {
		B.tools.close.dom.style.display = "none"
	}
}, this);
this.win.show();
Wtf.PayrollResourceGrid.superclass.constructor.call(this, A);
this.addEvents({
	"save" : true,
	"notsave" : true
})
};
Wtf.extend(Wtf.PayrollResourceGrid, Wtf.Panel, {
onRender : function(A) {
Wtf.PayrollResourceGrid.superclass.onRender.call(A)
},
cancel : function() {
this.win.close();
this.win.destroy()
}
});
Wtf.MyPayslip = function(A) {
Wtf.MyPayslip.superclass.constructor.call(this, A);
A.title = "MyPayslip2"
};
Wtf
	.extend(
			Wtf.MyPayslip,
			Wtf.Panel,
			{
				onRender : function(A) {
					Wtf.MyPayslip.superclass.onRender.call(this, A);
					this.usersRecords = new Wtf.data.Record.create([ {
						name : "historyid"
					}, {
						name : "userid"
					}, {
						name : "accno"
					}, {
						name : "startdate",
						type : "date"
					}, {
						name : "enddate",
						type : "date"
					}, {
						name : "frequency"
					}, {
						name : "gross"
					}, {
						name : "tax"
					}, {
						name : "deduction"
					}, {
						name : "net"
					}, {
						name : "design"
					}, {
						name : "name"
					}, {
						name : "unpaidleavesAmount"
					}, {
						name : "incomeTax"
					}, {
						name : "absence"
					}, {
						name : "month"
					} ]);
					this.userStore = new Wtf.data.Store({
						reader : new Wtf.data.KwlJsonReader({
							root : "data",
							totalProperty : "count"
						}, this.usersRecords),
						url : "Payroll/Date/getPayslips.py",
						baseParams : {
							userid : this.selectedUserID
						}
					});
					calMsgBoxShow(202, 4, true);
					this.userStore.load({
						scope : this,
						params : {
							start : 0,
							limit : 15
						}
					});
					this.userStore.on("load", function() {
						WtfGlobal.closeProgressbar()
					}, this);
					this.rowNo = new Wtf.grid.RowNumberer();
					this.selectionModel = new Wtf.grid.CheckboxSelectionModel();
					this.gridcmodel = new Wtf.grid.ColumnModel(
							[
									this.selectionModel,
									this.rowNo,
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Month"),
										dataIndex : "month",
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.start.date"),
										dataIndex : "startdate",
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.end.date"),
										dataIndex : "enddate",
										align : "center",
										renderer : WtfGlobal.dateonlyRenderer,
										sortable : true,
										groupable : true
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Earnings"),
										dataIndex : "gross",
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(C) {
											if (C != null) {
												return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		C)
																		.toFixed(
																				2)) + "</div>")
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Deductions"),
										dataIndex : "deduction",
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(C) {
											if (C != null) {
												return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		C)
																		.toFixed(
																				2)) + "</div>")
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.common.Taxes"),
										dataIndex : "tax",
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(C) {
											if (C != null) {
												return ('<div align="right" style="font-family:Lucida Sans Unicode;">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		C)
																		.toFixed(
																				2)) + "</div>")
											}
										}
									},
									{
										header : WtfGlobal
												.getLocaleText("hrms.payroll.netpay"),
										dataIndex : "net",
										scope : this,
										sortable : true,
										align : "right",
										groupable : true,
										renderer : function(C) {
											if (C != null) {
												return '<div align="right" style="font-family:Lucida Sans Unicode;">'
														+ WtfGlobal
																.currencyRenderer(parseFloat(
																		C)
																		.toFixed(
																				2))
														+ "</div>"
											}
										}
									} ], this);
					var B = [];
					B.push("-", new Wtf.Toolbar.Button({
						text : WtfGlobal.getLocaleText("hrms.common.reset"),
						scope : this,
						iconCls : "pwndRefresh",
						handler : function() {
							this.userStore.load({
								params : {
									start : 0,
									limit : this.myPayslipGrid.pag.pageSize
								}
							});
							Wtf.getCmp("Quick" + this.myPayslipGrid.id)
									.setValue("")
						}
					}));
					this.details = new Wtf.Toolbar.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.SalaryDetails"),
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.SalaryDetails.tooltip"),
								scope : this,
								minWidth : 100,
								disabled : true,
								iconCls : getButtonIconCls(Wtf.btype.reportbutton),
								handler : this.salaryDetails
							});
					B.push("-", this.details);
					this.myprint = new Wtf.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.PrintPayslip"),
								scope : this,
								disabled : true,
								iconCls : "pwnd printIcon",
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.PrintPayslip.tooltip"),
								handler : function() {
									this.getData();
									window
											.open(
													"Payroll/Salary/printSalarySlip.py?userid="
															+ this.userid
															+ "&startdate="
															+ this.startdate
																	.format("Y-m-d")
															+ "&enddate="
															+ this.enddate
																	.format("Y-m-d")
															+ "&historyid="
															+ this.historyid,
													"mywindow",
													"menubar=1,resizable=1,scrollbars=1")
								}
							});
					this.download = new Wtf.Toolbar.Button(
							{
								text : WtfGlobal
										.getLocaleText("hrms.payroll.DownloadPayslip"),
								scope : this,
								disabled : true,
								iconCls : "pwnd downloadIcon",
								minWidth : 110,
								tooltip : WtfGlobal
										.getLocaleText("hrms.payroll.DownloadPayslip.tooltip"),
								handler : function() {
									this.getData();
									Wtf.get("downloadframe").dom.src = "Payroll/Salary/exportSalarySlip.py?userid="
											+ this.userid
											+ "&startdate="
											+ this.startdate.format("Y-m-d")
											+ "&enddate="
											+ this.enddate.format("Y-m-d")
											+ "&historyid=" + this.historyid
								}
							});
					B.push("-", this.download, "-", this.myprint);
					this.myPayslipGridSM = new Wtf.grid.CheckboxSelectionModel(
							{
								singleSelect : true,
								scope : this
							});
					this.myPayslipGrid = new Wtf.KwlGridPanel(
							{
								enableColumnHide : false,
								trackMouseOver : true,
								stripeRows : true,
								border : false,
								loadMask : true,
								searchLabel : " ",
								searchLabelSeparator : " ",
								searchEmptyText : WtfGlobal
										.getLocaleText("hrms.payroll.SearchbyMonth"),
								searchField : "month",
								serverSideSearch : true,
								viewConfig : {
									forceFit : true,
									emptyText : WtfGlobal
											.emptyGridRenderer(WtfGlobal
													.getLocaleText("hrms.payroll.NoPaysliptodownload"))
								},
								store : this.userStore,
								displayInfo : true,
								cm : this.gridcmodel,
								region : "west",
								scope : this,
								width : 400,
								id : "myPayslipGrid" + this.selectedUserID,
								sm : this.myPayslipGridSM,
								tbar : B
							});
					this.innerpanel = new Wtf.Panel({
						layout : "fit",
						cls : "backcolor",
						border : false,
						items : [ new Wtf.Panel({
							border : false,
							autoLoad : false,
							paging : false,
							layout : "fit",
							items : [ this.myPayslipGrid ]
						}) ]
					});
					this.add(this.innerpanel);
					this.myPayslipGridSM.on("selectionchange", function() {
						if (this.myPayslipGridSM.getCount() == 1) {
							this.details.setDisabled(false);
							this.myprint.setDisabled(false);
							this.download.setDisabled(false)
						} else {
							this.details.setDisabled(true);
							this.myprint.setDisabled(true);
							this.download.setDisabled(true)
						}
					}, this)
				},
				salaryDetails : function() {
					this.getData();
					this.mainTabId = Wtf.getCmp("as");
					this.payslip = Wtf.getCmp(this.id + "payslipTab"
							+ this.startdate);
					if (this.payslip == null) {
						this.payslip = new Wtf.resourcePayslip({
							layout : "fit",
							scope : this,
							closable : true,
							iconCls : getTabIconCls(Wtf.etype.hrmsreport),
							border : false,
							id : this.id + "payslipTab" + this.startdate,
							title : WtfGlobal.getLocaleText({
								key : "hrms.payroll.SalaryDetailsofmonth",
								params : [ this.startdate.format("F") ]
							}),
							userid : this.userid,
							historyid : this.historyid,
							startdate : this.startdate.format("Y-m-d"),
							enddate : this.enddate.format("Y-m-d"),
							ename : this.name,
							accno : this.accno,
							frequency : this.frequency,
							unpaidleavesAmount : this.unpaidleavesAmount,
							incomeTax : this.incomeTax,
							absence : this.absence
						});
						this.mainTabId.add(this.payslip)
					}
					this.mainTabId.setActiveTab(this.payslip);
					this.mainTabId.doLayout()
				},
				getData : function() {
					var A = this.myPayslipGridSM.getSelected();
					this.historyid = A.get("historyid");
					this.userid = A.get("userid");
					this.accno = A.get("accno");
					this.gross = A.get("gross");
					this.tax = A.get("tax");
					this.deduction = A.get("deduction");
					this.design = A.get("design");
					this.startdate = A.get("startdate");
					this.enddate = A.get("enddate");
					this.name = A.get("name");
					this.unpaidleavesAmount = A.get("unpaidleavesAmount");
					this.incomeTax = A.get("incomeTax");
					this.absence = A.get("absence");
					this.frequency = A.get("frequency")
				}
			})